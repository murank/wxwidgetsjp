<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="2.6.3_1" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>#define wxID_ANY                -1

#define wxID_LOWEST             4999

#define wxID_OPEN               5000
#define wxID_CLOSE              5001
#define wxID_NEW                5002
#define wxID_SAVE               5003
#define wxID_SAVEAS             5004
#define wxID_REVERT             5005
#define wxID_EXIT               5006
#define wxID_UNDO               5007
#define wxID_REDO               5008
#define wxID_HELP               5009
#define wxID_PRINT              5010
#define wxID_PRINT_SETUP        5011
#define wxID_PREVIEW            5012
#define wxID_ABOUT              5013
#define wxID_HELP_CONTENTS      5014
#define wxID_HELP_COMMANDS      5015
#define wxID_HELP_PROCEDURES    5016
#define wxID_HELP_CONTEXT       5017

#define wxID_CUT                5030
#define wxID_COPY               5031
#define wxID_PASTE              5032
#define wxID_CLEAR              5033
#define wxID_FIND               5034
#define wxID_DUPLICATE          5035
#define wxID_SELECTALL          5036
#define wxID_DELETE             5037
#define wxID_REPLACE            5038
#define wxID_REPLACE_ALL        5039
#define wxID_PROPERTIES         5040

#define wxID_VIEW_DETAILS       5041
#define wxID_VIEW_LARGEICONS    5042
#define wxID_VIEW_SMALLICONS    5043
#define wxID_VIEW_LIST          5044
#define wxID_VIEW_SORTDATE      5045
#define wxID_VIEW_SORTNAME      5046
#define wxID_VIEW_SORTSIZE      5047
#define wxID_VIEW_SORTTYPE      5048

#define wxID_FILE1              5050
#define wxID_FILE2              5051
#define wxID_FILE3              5052
#define wxID_FILE4              5053
#define wxID_FILE5              5054
#define wxID_FILE6              5055
#define wxID_FILE7              5056
#define wxID_FILE8              5057
#define wxID_FILE9              5058

#define wxID_OK                 5100
#define wxID_CANCEL             5101
#define wxID_APPLY              5102
#define wxID_YES                5103
#define wxID_NO                 5104
#define wxID_STATIC             5105

#define wxID_HIGHEST            5999</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080120Z">
        <seg>#define wxID_ANY                -1

#define wxID_LOWEST             4999

#define wxID_OPEN               5000
#define wxID_CLOSE              5001
#define wxID_NEW                5002
#define wxID_SAVE               5003
#define wxID_SAVEAS             5004
#define wxID_REVERT             5005
#define wxID_EXIT               5006
#define wxID_UNDO               5007
#define wxID_REDO               5008
#define wxID_HELP               5009
#define wxID_PRINT              5010
#define wxID_PRINT_SETUP        5011
#define wxID_PREVIEW            5012
#define wxID_ABOUT              5013
#define wxID_HELP_CONTENTS      5014
#define wxID_HELP_COMMANDS      5015
#define wxID_HELP_PROCEDURES    5016
#define wxID_HELP_CONTEXT       5017

#define wxID_CUT                5030
#define wxID_COPY               5031
#define wxID_PASTE              5032
#define wxID_CLEAR              5033
#define wxID_FIND               5034
#define wxID_DUPLICATE          5035
#define wxID_SELECTALL          5036
#define wxID_DELETE             5037
#define wxID_REPLACE            5038
#define wxID_REPLACE_ALL        5039
#define wxID_PROPERTIES         5040

#define wxID_VIEW_DETAILS       5041
#define wxID_VIEW_LARGEICONS    5042
#define wxID_VIEW_SMALLICONS    5043
#define wxID_VIEW_LIST          5044
#define wxID_VIEW_SORTDATE      5045
#define wxID_VIEW_SORTNAME      5046
#define wxID_VIEW_SORTSIZE      5047
#define wxID_VIEW_SORTTYPE      5048

#define wxID_FILE1              5050
#define wxID_FILE2              5051
#define wxID_FILE3              5052
#define wxID_FILE4              5053
#define wxID_FILE5              5054
#define wxID_FILE6              5055
#define wxID_FILE7              5056
#define wxID_FILE8              5057
#define wxID_FILE9              5058

#define wxID_OK                 5100
#define wxID_CANCEL             5101
#define wxID_APPLY              5102
#define wxID_YES                5103
#define wxID_NO                 5104
#define wxID_STATIC             5105

#define wxID_HIGHEST            5999</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#if wxUSE_UNICODE</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160620Z">
        <seg>#if wxUSE_UNICODE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#include "mondrian.xpm"</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T135751Z">
        <seg>#include "mondrian.xpm"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#include "sample.xpm"</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154217Z">
        <seg>#include "sample.xpm"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;myFrameHandler, wxID_EXIT );
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060237Z">
        <seg>&amp;myFrameHandler, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;s[n]</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123351Z">
        <seg>&amp;s[n]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(wxChar)s[n]</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123200Z">
        <seg>(wxChar)s[n]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(char *)(const char *)s.c_str()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T130438Z">
        <seg>(char *)(const char *)s.c_str()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(But only command events, so you can't catch mouse move events in a child control in the parent window in the same way because wxMouseEvent doesn't derive from wxCommandEvent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T023846Z">
        <seg> (しかし、これが可能なのはコマンドイベントのみです。そのため、同じ方法で子コントロールでのマウス移動イベントを親ウィンドウで捕まえることはできません。なぜなら wxMouseEvent は wxCommandEvent を継承していないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Debug build only.) This variable can be set to a comma-separated list of trace masks used in wxLogTrace calls; wxLog::AddTraceMask is called for every mask in the list during wxWidgets initialization.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T154850Z">
        <seg>(デバッグビルドのみ) この変数は wxLogTrace の呼び出しの中で使用されるトレースマスクのカンマ区切りリストを設定します; wxWidgets の初期化中にリスト内の各マスクに対して wxLog::AddTraceMask が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Debug build only.) This variable can be set to a comma-separated list of trace masks used in wxLogTrace calls; wxLog::AddTraceMask is called for every mask in the list during wxWidgets initialization.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155852Z">
        <seg>(デバッグビルドのみ) この変数は wxLogTrace の呼び出しの中で使用されるトレースマスクのカンマ区切りリストを設定します; wxWidgets の初期化中にリスト内の各マスクに対して wxLog::AddTraceMask が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Note that even UTF-32 is still not completely trivial as the mapping is different for little and big-endian architectures).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T032240Z">
        <seg> (UTF-32 であっても、リトルエンディアンとビッグエンディアンではバイト列へのマッピングが異なるため、完全に自明とはまだ言えないことに注意してください。) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Unix only.) Overrides installation prefix.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T154923Z">
        <seg>(Unix のみ) インストールプレフィックスを上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(notice the absence of c_str(), it is not needed at all with wxWidgets functions)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T034246Z">
        <seg>(c_str() を使用していないことに注目してください。wxWidgets の関数にはそれは必要ありません)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(referring to the image, if A-&gt;ProcessEvent is called and it doesn't handle the event, B-&gt;ProcessEvent will be called and so on...).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T151810Z">
        <seg>(図を参照すると分かるように、A-&gt;ProcessEvent でイベントが処理されないと B-&gt;ProcessEvent が呼び出され、これが繰り返されます。) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(referring to the image, if W-&gt;ProcessEvent is called, it immediately calls A-&gt;ProcessEvent; if nor A nor B handle the event, then the wxWindow itself is used -- i.e. the dynamically bind event handlers and static event table entries of wxWindow are looked as the last possibility, after all pushed event handlers were tested).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T153318Z">
        <seg>(図を見ると分かるように、W-&gt;ProcessEvent が呼ばれるとすぐに A-&gt;ProcessEvent を呼び出します; もし A でも B でもイベントを処理しなかった場合、wxWindow 自身が使用されます。つまり、登録されたすべてのイベントハンドラを調べた後にwxWindow の動的イベントハンドラと静的イベントテーブルを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(void)m_docManager-&gt;CreateDocument(f, wxDOC_SILENT);
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T040148Z">
        <seg>(void)m_docManager-&gt;CreateDocument(f, wxDOC_SILENT);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(wxMGL only.) Redirects stderr output to a file.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155530Z">
        <seg>(wxMGL のみ) 標準エラー出力をファイルへリダイレクトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(wxMGL only.) Sets MGL video mode.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155415Z">
        <seg>(wxMGL のみ) MGL ビデオモードを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) (wxNotifyEventFunction) \</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164320Z">
        <seg>(wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) (wxNotifyEventFunction) \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T122641Z">
        <seg> </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081759Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...

protected:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015442Z">
        <seg>...

protected:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...
}

int MyApp::OnExit()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124602Z">
        <seg>...
}

int MyApp::OnExit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...
}

int MyApp::OnExit()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162758Z">
        <seg>...
}

int MyApp::OnExit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...
};</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162439Z">
        <seg>...
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...
};

bool MyApp::OnInit()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124559Z">
        <seg>...
};

bool MyApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...
};

bool MyApp::OnInit()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162754Z">
        <seg>...
};

bool MyApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>... do something with event.GetPoint() ...
}


// example of code generating the event:
void MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T122444Z">
        <seg>...event.GetPoint() を使用して処理を行なう...
}


// イベントを生成するコードの例:
void MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>... process error ourselves ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T030154Z">
        <seg>... 自分自身でエラー処理を行なう ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>... update the frame using the new size ...
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T034644Z">
        <seg>... 新しいサイズを使用してフレームを更新する ...
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// ....</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155751Z">
        <seg>// ....</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Give it some contents</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155943Z">
        <seg>// 何か値を設定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Send it</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155956Z">
        <seg>// 送信する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// accessors</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164223Z">
        <seg>// アクセサ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// an easy and portable way to create a bitmap
wxBitmap bmp(wxBITMAP(bmpname));

// which is roughly equivalent to the following
#if defined(__WXMSW__) || defined(__WXPM__)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T140806Z">
        <seg>// ビットマップを作成する、簡単で移植性のある方法
wxBitmap bmp(wxBITMAP(bmpname));

// これは以下のコードと大体同じです
#if defined(__WXMSW__) || defined(__WXPM__)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// code defining event

class wxPlotEvent: public wxNotifyEvent
{
public:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164155Z">
        <seg>// イベントを定義するコード

class wxPlotEvent: public wxNotifyEvent
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// create text ctrl with minimal size 100x60</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112131Z">
        <seg>// 最小サイズ 100x60 のテキストコントロールを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// create text ctrl with minimal size 100x60 that is horizontally and</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T113559Z">
        <seg>// 最小サイズ 100x60 のテキストコントロールを作成し、水平方向と</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// do something</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155813Z">
        <seg>//処理を行う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// event can be processed either in the base wxWidgets class</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022654Z">
        <seg>// ネイティブコントロールでもイベントを処理するため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// event is not processed anywhere else.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T040205Z">
        <seg>// event.Skip() は呼び出さない。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// illegal key hit.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022741Z">
        <seg>// 対象外のキーが押下された。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// in the header of the source file
BEGIN_DECLARE_EVENT_TYPES()
DECLARE_EVENT_TYPE(name, value)
END_DECLARE_EVENT_TYPES()

// in the implementation
DEFINE_EVENT_TYPE(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T154147Z">
        <seg>// ヘッダファイルで使用する
BEGIN_DECLARE_EVENT_TYPES()
DECLARE_EVENT_TYPE(name, value)
END_DECLARE_EVENT_TYPES()

// ソースファイルで使用する
DEFINE_EVENT_TYPE(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// key code is within legal range.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022716Z">
        <seg>// キーコードが正しい範囲に入っている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// or the native control.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T040200Z">
        <seg>// event.Skip() を呼び出す。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// required for sending with wxPostEvent()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164309Z">
        <seg>// wxPostEvent() で必要になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// vertically stretchable with a border width of 10</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T113647Z">
        <seg>// 垂直方向にリサイズ可能で、ボーダーの太さは 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// we want to get a dialog that is stretchable because it
// has a text ctrl at the top and two buttons at the bottom

MyDialog::MyDialog(wxFrame *parent, wxWindowID id, const wxString &amp;title )</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112038Z">
        <seg>// 上部にテキストコントロールと下部にふたつのボタンを持つので
// リサイズ可能なダイアログにしたい

MyDialog::MyDialog(wxFrame *parent, wxWindowID id, const wxString &amp;title )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// with an all-around border with a width of 10 and implicit top alignment</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T114006Z">
        <seg>// 太さ 10 のボーダーを全方向に持たせ、暗黙的に上揃えにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// wxFile.Open() normally complains if file can't be opened, we don't want it</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T030136Z">
        <seg>// 通常はファイルを開けなかった場合に wxFile.Open() がエラーメッセージを出力するが、そうさせたくない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//create a sizer with no border and centered horizontally</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T114002Z">
        <seg>//サイザーを作成し、ボーダーなしで水平方向に中央揃えにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//create two buttons that are horizontally unstretchable,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T113933Z">
        <seg>//ふたつのボタンを作成し、水平方向にはリサイズ不可にして、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0,                // make vertically unstretchable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112830Z">
        <seg>0,                // 垂直方向にはリサイズ不可にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0,                // make vertically unstretchable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T144100Z">
        <seg>0,                // 垂直方向にはリサイズ不可にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0,           // make horizontally unstretchable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112328Z">
        <seg>0,           // 水平方向にはリサイズ不可にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0,           // make horizontally unstretchable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143831Z">
        <seg>0,           // 水平方向にはリサイズ不可にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0,           // make horizontally unstretchable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T144025Z">
        <seg>0,           // 水平方向にはリサイズ不可にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1,            // make vertically stretchable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112215Z">
        <seg>1,            // 垂直方向にリサイズ可能にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1,            // make vertically stretchable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143000Z">
        <seg>1,            // 垂直方向にリサイズ可能にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10 );         // set border width to 10</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112305Z">
        <seg>10 );         // ボーダーの幅は 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10 );         // set border width to 10</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143812Z">
        <seg>10 );         // ボーダーの幅は 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10 );        // set border width to 10</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112809Z">
        <seg>10 );        // ボーダーの幅は 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10 );        // set border width to 10</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143850Z">
        <seg>10 );        // ボーダーの幅は 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>10 );        // set border width to 10</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T144048Z">
        <seg>10 );        // ボーダーの幅は 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>: wxEvent(winid, eventType),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150432Z">
        <seg>: wxEvent(winid, eventType),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>: wxDialog(parent, id, title, wxDefaultPosition, wxDefaultSize,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112039Z">
        <seg>: wxDialog(parent, id, title, wxDefaultPosition, wxDefaultSize,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Device contexts</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141947Z">
        <seg>デバイスコンテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internationalization Sample - Shows you how all this looks in practice.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T043643Z">
        <seg>国際化サンプル - 国際化を実際にどういう風に行うのかを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T074645Z">
        <seg>イントロダクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Laying out window elements with sizers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132046Z">
        <seg>サイザーを利用したウィンドウ要素の配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Supported bitmap file formats</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T141054Z">
        <seg>対応しているビットマップファイル形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The idea behind sizers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T122848Z">
        <seg>サイザーの背後にある考え方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What is Unicode?</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T155433Z">
        <seg>Unicode とは?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing Non-English Applications - It focuses on handling charsets related problems.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T041638Z">
        <seg>非英語アプリケーションの作成 - 文字コードに関連した問題について取り組む場合に参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxApp Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152201Z">
        <seg>wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T022450Z">
        <seg>wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer::wxBoxSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145926Z">
        <seg>wxBoxSizer::wxBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer can lay out its children either vertically or horizontally, depending on what flag is being used in its constructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T150612Z">
        <seg>wxBoxSizer はコンストラクタで使用されたフラグに基づいて、子コントロールを垂直方向または水平方向のいずれかに配置できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDECLARE_EVENT_TABLE()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T014946Z">
        <seg>wxDECLARE_EVENT_TABLE()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDialog Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T151537Z">
        <seg>wxDialog の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDialog therefore supplies a global wxDialogLayoutAdapter class that implements automatic scrolling adaptation for most sizer-based custom dialogs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T152657Z">
        <seg>そのために wxDialog ではグローバルな wxDialogLayoutAdapter クラスを提供しており、このクラスではサイザーを利用した大半のダイアログに対して自動スクロール機能を適用させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDir is a helper class for enumerating the files or subdirectories of a directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T072758Z">
        <seg>wxDir はディレクトリ内のファイル、サブディレクトリを列挙するためのヘルパークラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFile file;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T113205Z">
        <seg>wxFile file;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFile may be used for low-level IO.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T072442Z">
        <seg>wxFile は低レベル入出力のために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFlexGridSizer is a sizer which lays out its children in a two-dimensional table with all table fields in one row having the same height and all fields in one column having the same width, but all rows or all columns are not necessarily the same height or width as in the wxGridSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115123Z">
        <seg>wxFlexGridSizer は子コントロールを 2 次元の表にレイアウトするサイザーです。同じ行中のセルは同じ高さを持ち、同じ列中のセルは同じ幅を持ちますが、すべての行と列が wxGridSizer のように同じ高さや幅を持つ必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxGridBagSizer is a rather special kind of sizer which, unlike the other classes, allows to directly put the elements at the given position in the sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145838Z">
        <seg>wxGridBagSizer はかなり特殊な種類のサイザーで、他のクラスと異なり、サイザー内の指定した位置に子コントロールを直接配置することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxGridSizer is a sizer which lays out its children in a two-dimensional table with all table fields having the same size, i.e. the width of each field is the width of the widest child, the height of each field is the height of the tallest child.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T135720Z">
        <seg>wxGridSizer は子コントロールを 2 次元の表にレイアウトするサイザーで、表中のセルはすべて同じ大きさを持ちます。つまり、各セルの幅はもっとも幅の広い子コントロールの幅になり、高さはもっとも高い子コントロールの高さになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxGridSizer is a two-dimensional sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T152816Z">
        <seg>wxGridSizer は 2 次元のサイザーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxIcon icon(wxICON(sample));

// The above line is equivalent to this:

#if defined(__WXGTK__) || defined(__WXMOTIF__)
    wxIcon icon(sample_xpm);
#endif

#if defined(__WXMSW__)
    wxIcon icon("sample");
#endif</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154539Z">
        <seg>wxIcon icon(wxICON(sample));

// 上の行はこれと同等:

#if defined(__WXGTK__) || defined(__WXMOTIF__)
    wxIcon icon(sample_xpm);
#endif

#if defined(__WXMSW__)
    wxIcon icon("sample");
#endif</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog::AddTraceMask( wxTRACE_OleCalls );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T133058Z">
        <seg>wxLog::AddTraceMask( wxTRACE_OleCalls );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog Classes Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T090619Z">
        <seg>wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog* logger = new wxLogStream(&amp;cout);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091557Z">
        <seg>wxLog* logger = new wxLogStream(&amp;cout);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogBuffer: This target collects all the logged messages in an internal buffer allowing to show them later to the user all at once.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T113120Z">
        <seg>wxLogBuffer: このターゲットはすべてのログメッセージを内部バッファに収集し、後で一括してユーザに通知できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogDebug() is the right function for debug output.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091154Z">
        <seg>wxLogDebug は まさに デバッグ出力に適切な関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogError() is the function to use for error messages, i.e. the messages that must be shown to the user.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131440Z">
        <seg>wxLogError はエラーメッセージ (ユーザに通知しなければならないメッセージ) 用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogFatalError() which is like wxLogError(), but also terminates the program with the exit code 3 (using abort() standard function).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131421Z">
        <seg>wxLogFatalError は wxLogError と似ていますが、(abort() 標準関数を使用して) リターンコード 3 でプログラムを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogGui: This is the standard log target for wxWidgets applications (it is used by default if you don't do anything) and provides the most reasonable handling of all types of messages for given platform.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112827Z">
        <seg>wxLogGui: これは wxWidgets アプリケーションの標準ログターゲット (何もしない場合にデフォルトで使用されます) で、指定されたプラットフォームについて、メッセージのすべての型に対してもっとも合理的な処理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogMessage() is for all normal, informational messages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131739Z">
        <seg>wxLogMessage はすべての通常 (通知) メッセージ用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogNull: The last log class is quite particular: it doesn't do anything.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T113150Z">
        <seg>wxLogNull: 最後のログクラスは極めて特殊です: これは何も行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogStatus() is for status messages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T085809Z">
        <seg>wxLogStatus() はステータスメッセージ用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogStderr: This class logs messages to a FILE *, using stderr by default as its name suggests.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112815Z">
        <seg>wxLogStderr: このクラスはメッセージを FILE * へ出力します。その名の通り、デフォルトでは stderr へ出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogStream: This class has the same functionality as wxLogStderr, but uses ostream and cerr instead of FILE * and stderr.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112822Z">
        <seg>wxLogStream: このクラスは wxLogStderr と同じ機能を持ちますが、FILE * と stderr の代わりに ostream と cerr を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogSysError() is mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T090926Z">
        <seg>wxLogSysError は主に wxWidgets 自身で使用されますが、システムコール (API 関数) の失敗後のエラーログを記録するのに便利かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogTrace() as wxLogDebug() only does something in debug build.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091414Z">
        <seg>wxLogTrace も wxLogDebug と同じようにデバッグビルド時のみ動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogTrace( wxTRACE_OleCalls, "IFoo::Bar() called" );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T132930Z">
        <seg>wxLogTrace( wxTRACE_OleCalls, "IFoo::Bar() called" );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogVerbose() is for verbose output.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131800Z">
        <seg>wxLogVerbose は詳細な出力用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogWarning() for warnings.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131627Z">
        <seg>wxLogWarning() は警告メッセージ用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogWindow: This log target provides a "log console" which collects all messages generated by the application and also passes them to the previous active log target.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112841Z">
        <seg>wxLogWindow: このログターゲットはアプリケーションの生成するすべてのメッセージを収集する "ログコンソール" を提供するとともに、前に有効だったログターゲットに収集したメッセージを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxMessageBox(wxString::FromUTF8("Salut \xC3\xA0 toi!"));</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T082537Z">
        <seg>wxMessageBox(wxString::FromUTF8("Salut \xC3\xA0 toi!"));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxMessageBox("Hello, world!");</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T041452Z">
        <seg>wxMessageBox("Hello, world!");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxMessageBox("Salut à toi!");</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T042102Z">
        <seg>wxMessageBox("Salut à toi!");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxMessageBox(L"Salut \u00E0 toi!"); // U+00E0 is "Latin Small Letter a with Grave"</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T041853Z">
        <seg>wxMessageBox(L"Salut \u00E0 toi!"); // U+00E0 は "グレイヴ付きのラテン小文字の a" です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNotebook::AddPage: No event-free alternatives</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155707Z">
        <seg>wxNotebook::AddPage: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNotebook::AdvanceSelection: No event-free alternatives</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155945Z">
        <seg>wxNotebook::AdvanceSelection: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNotebook::DeletePage: No event-free alternatives</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160016Z">
        <seg>wxNotebook::DeletePage: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNotebook::SetSelection: Use wxNotebook::ChangeSelection instead, as wxNotebook::SetSelection is deprecated</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160216Z">
        <seg>wxNotebook::SetSelection: wxNotebook::SetSelection は非推奨のため、代わりに wxNotebook::ChangeSelection を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizer, Sizer overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145922Z">
        <seg>wxSizer, Sizer の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145841Z">
        <seg>wxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxStaticBoxSixer is the same as a wxBoxSizer, but surrounded by a static box.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T152747Z">
        <seg>wxStaticBoxSixer は wxBoxSizer と同じですが、スタティックボックスで周りを囲まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxStaticBoxSizer is a sizer derived from wxBoxSizer but adds a static box around the sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145729Z">
        <seg>wxStaticBoxSizer は wxBoxSizer を継承したサイザーですが、サイザーの周囲にスタティックボックスを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxStaticBoxSizer is a sizer derived from wxBoxSizer but adds a static box around the sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115224Z">
        <seg>wxStaticBoxSizer は wxBoxSizer を継承したサイザーですが、サイザーの周囲にスタティックボックスを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString::mb_str() converts the string to the encoding used by the current locale and so can return an empty string if the string contains characters not representable in it as explained in Data Loss due To Unicode Conversion Errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T161442Z">
        <seg>wxString::mb_str() は文字列を現在のロケールで使用されているエンコーディングに変換します。そのため、Unicode の変換エラーによるデータ喪失 で述べたように、変換先のエンコーディングで表現できない文字が含まれている場合に空文字列を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString API provides implicit conversion of the internal Unicode string contents to narrow, char strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T134230Z">
        <seg>wxString API は内部の Unicode 文字列からナロー (char) 文字列への暗黙的な変換を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString also provides two convenience functions: wxString::From8BitData() and wxString::To8BitData().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T162920Z">
        <seg>wxString はさらに 2 つの便利な関数を提供しています: wxString::From8BitData() と wxString::To8BitData() です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString s("hello");
for ( const wchar_t *p = s.wc_str(); *p; p++ )
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T153022Z">
        <seg>wxString s("hello");
for ( const wchar_t *p = s.wc_str(); *p; p++ )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString s("hello");
for ( size_t i = 0; i &lt; s.length(); i++ )
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T151500Z">
        <seg>wxString s("hello");
for ( size_t i = 0; i &lt; s.length(); i++ )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString s("hello");
for ( wxString::const_iterator i = s.begin(); i != s.end(); ++i )
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T151615Z">
        <seg>wxString s("hello");
for ( wxString::const_iterator i = s.begin(); i != s.end(); ++i )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTempFile is a very small file designed to make replacing the files contents safer - see its documentation for more details.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T072734Z">
        <seg>wxTempFile はより安全にファイルの置換を行うためのとても小さなファイルです。詳細はドキュメントを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTextCtrl::ChangeValue can be used instead of wxTextCtrl::SetValue but the other functions, such as Replace or WriteText don't have event-free equivalents</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T041031Z">
        <seg>wxTextCtrl::SetValue の代わりに wxTextCtrl::ChangeValue を使用できますが、Replace や WriteText といった他の関数にはイベントを送信せずに同じことを行う関数はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTextCtrl::ChangeValue can be used instead of wxTextCtrl::SetValue but the other functions, such as wxTextCtrl::Replace or wxTextCtrl::WriteText don't have event-free equivalents.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160802Z">
        <seg>wxTextCtrl::SetValue の代わりに wxTextCtrl::ChangeValue を使用できますが、wxTextCtrl::Replace や wxTextCtrl::WriteText といった他の関数にはイベントを送信せずに同じことを行う関数はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTextFile is a general purpose class for working with small text files on line by line basis.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T072746Z">
        <seg>wxTextFile は小さなテキストファイルを行単位で扱うための汎用的なクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTreeCtrl::Delete: No event-free alternatives</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160247Z">
        <seg>wxTreeCtrl::Delete: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTreeCtrl::DeleteAllItems: No event-free alternatives</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160305Z">
        <seg>wxTreeCtrl::DeleteAllItems: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTreeCtrl::EditLabel: No event-free alternatives</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160330Z">
        <seg>wxTreeCtrl::EditLabel: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWizard uses its own CanDoLayoutAdaptation and DoLayoutAdaptation functions rather than the global adapter: again, only the wizard pages are made scrollable.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T154424Z">
        <seg>wxWizard はグローバルなアダプタではなく、独自の CanDoLayoutAdaptation と DoLayoutAdaptation 関数を使用します。繰り返しになりますが、ウィザードページのみがスクロール可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxYES_NO     // Add Yes/No subpanel
wxYES        // return wxID_YES
wxNO         // return wxID_NO
wxNO_DEFAULT // make the wxNO button the default,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T150103Z">
        <seg>wxYES_NO     // Yes/No サブパネルを追加します
wxYES        // wxID_YES を返却します
wxNO         // wxID_NO を返却します
wxNO_DEFAULT // wxNO ボタンをデフォルトにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CreateButtonSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T115755Z">
        <seg>CreateButtonSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event macros summary</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075037Z">
        <seg>イベントマクロの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142908Z">
        <seg>wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogGui,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003253Z">
        <seg>wxLogGui,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPoint GetPoint() const { return m_pos; }</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150440Z">
        <seg>wxPoint GetPoint() const { return m_pos; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxApp overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152025Z">
        <seg>wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Custom event summary</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075046Z">
        <seg>カスタムイベントの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internationalization</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T054118Z">
        <seg>国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142858Z">
        <seg>wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog::SetComponentLevel("wx/base/module", wxLOG_Trace);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111102Z">
        <seg>wxLog::SetComponentLevel("wx/base/module", wxLOG_Trace);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogNull,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003253Z">
        <seg>wxLogNull,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString text = event.GetString();
}

// example of code handling the event with Bind&lt;&gt;():
MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150132Z">
        <seg>wxString text = event.GetString();
}

// Bind&lt;&gt;() によるイベント処理のコード例:
MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Working with program options: wxConfig</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T145441Z">
        <seg>プログラムオプションの使用: wxConfig</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogChain,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003254Z">
        <seg>wxLogChain,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Environment variables</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T160335Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogPassThrough,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003254Z">
        <seg>wxLogPassThrough,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logging overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T124414Z">
        <seg>ロギングの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxStreamToTextRedirector</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003254Z">
        <seg>wxStreamToTextRedirector</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxCommandEvent event(MY_EVENT, GetId());</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150152Z">
        <seg>wxCommandEvent event(MY_EVENT, GetId());</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog does however guarantee that messages logged by each thread will appear in order in which they were logged.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T120250Z">
        <seg>ただし、wxLog は各スレッドで記録されたメッセージは記録された順に表示されることを保証しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event handling overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T072009Z">
        <seg>イベント処理の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDECLARE_EVENT_TABLE()
};</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T024755Z">
        <seg>wxDECLARE_EVENT_TABLE()
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxEXPAND |    // make horizontally stretchable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T152907Z">
        <seg>wxEXPAND |    // 水平方向にリサイズ可能にし、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizerFlags(1).Align().Expand().Border(wxALL, 10));</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145457Z">
        <seg>wxSizerFlags(1).Align().Expand().Border(wxALL, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Environment variables</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T160418Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxALL,        //   and make border all around</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143803Z">
        <seg>wxALL,        //   全方向にボーダーを持たせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145459Z">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitmap format handlers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T141105Z">
        <seg>ビットマップ形式ハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitmaps and icons</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T134107Z">
        <seg>ビットマップとアイコン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How events are processed</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T074703Z">
        <seg>イベント処理の仕組み</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming with wxBoxSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T115650Z">
        <seg>wxBoxSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode and ANSI modes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T155445Z">
        <seg>Unicode モードと ANSI モード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer::RecalcSizes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145926Z">
        <seg>wxBoxSizer::RecalcSizes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxClientDC dc(window);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154319Z">
        <seg>wxClientDC dc(window);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog::SetComponentLevel("MyProgram/DB", wxLOG_FatalError);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T110710Z">
        <seg>wxLog::SetComponentLevel("MyProgram/DB", wxLOG_FatalError);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogNull logNo;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T113228Z">
        <seg>wxLogNull logNo;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogStderr,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003251Z">
        <seg>wxLogStderr,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxObject</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145842Z">
        <seg>wxObject</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSize size = event.GetSize();</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T034455Z">
        <seg>wxSize size = event.GetSize();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143816Z">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode support in wxWidgets</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132107Z">
        <seg>wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internationalization</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132119Z">
        <seg>国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog::SetActiveTarget(logger);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091559Z">
        <seg>wxLog::SetActiveTarget(logger);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145530Z">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxALL,       // make border all around (implicit top alignment)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143841Z">
        <seg>wxALL,       // 全方向にボーダーを持たせる (暗黙的に上寄せになる)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>File classes and functions overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132149Z">
        <seg>ファイルクラスと関数の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145538Z">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Events generated by the user vs programmatically generated events</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T074731Z">
        <seg>ユーザの生成したイベントとプログラム的に生成したイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming with wxGridSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T115658Z">
        <seg>wxGridSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode support in wxWidgets</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T165146Z">
        <seg>wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer::CalcMin</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145926Z">
        <seg>wxBoxSizer::CalcMin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogStream,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003252Z">
        <seg>wxLogStream,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxALL,       // make border all around (implicit top alignment)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T144038Z">
        <seg>wxALL,       // 全方向にボーダーを持たせる (暗黙的に上寄せになる)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizerFlags(0).Center() );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145555Z">
        <seg>wxSizerFlags(0).Center() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog classes overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T124444Z">
        <seg>wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxALIGN_CENTER ); // no border and centre horizontally</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T144109Z">
        <seg>wxALIGN_CENTER ); // ボーダーなしで水平方向に中央寄せ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog::DoLogTextAtLevel() should be overridden if you simply want to redirect the log messages somewhere else, without changing their formatting.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112214Z">
        <seg>メッセージの形式を変更することなく、ログメッセージを単純に他の場所へリダイレクトしたいだけの場合、wxLog::DoLogTextAtLevel() をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxConfig classes overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T145503Z">
        <seg>wxConfig クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event handling overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132222Z">
        <seg>イベント処理の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Application class: wxApp</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T151947Z">
        <seg>アプリケーションクラス: wxApp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pluggable event handlers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T074926Z">
        <seg>動的イベントハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming with wxFlexGridSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T115708Z">
        <seg>wxFlexGridSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode and the outside world</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T155523Z">
        <seg>Unicode と外部の世界</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer::GetOrientation</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145927Z">
        <seg>wxBoxSizer::GetOrientation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogTextCtrl,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003252Z">
        <seg>wxLogTextCtrl,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDialog overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T151413Z">
        <seg>wxDialog の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFrame *the_frame = new wxFrame(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152659Z">
        <seg>wxFrame *the_frame = new wxFrame(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog::SetComponentLevel("MyProgram/DB/Trans", wxLOG_Trace);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T110923Z">
        <seg>wxLog::SetComponentLevel("MyProgram/DB/Trans", wxLOG_Trace);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sizer overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132236Z">
        <seg>サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dialogs</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T151401Z">
        <seg>ダイアログ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>File classes and functions</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132259Z">
        <seg>ファイルクラスと関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming with wxStaticBoxSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T115715Z">
        <seg>wxStaticBoxSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode support in wxWidgets</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T092759Z">
        <seg>wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode-related compilation settings</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T155549Z">
        <seg>Unicode 関連のコンパイル設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Window identifiers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T074938Z">
        <seg>ウィンドウ識別子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogMessage("..."); // ok</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T114550Z">
        <seg>wxLogMessage("..."); // ok</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogWindow,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003253Z">
        <seg>wxLogWindow,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitmaps and icons overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T134134Z">
        <seg>ビットマップとアイコンの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Device context overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T142001Z">
        <seg>デバイスコンテキストの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxClientDC.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154030Z">
        <seg>wxClientDC。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPaintDC.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154136Z">
        <seg>wxPaintDC。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxScreenDC.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T153911Z">
        <seg>wxScreenDC。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSize  CalcMin()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T150638Z">
        <seg>wxSize  CalcMin()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWindowDC.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154309Z">
        <seg>wxWindowDC。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A border: The border is just empty space and is used to separate dialog items in a dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T142045Z">
        <seg>ボーダー : ボーダーは単なる空白スペースで、ダイアログ内でコントロール同士を分けるために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A border: The border is just empty space and is used to separate dialog items in a dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141211Z">
        <seg>ボーダー : ボーダーは単なる空白スペースで、ダイアログ内でコントロール同士を分けるために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A minimal size: This minimal size is usually identical to the initial size of the controls and may either be set explicitly in the wxSize field of the control constructor or may be calculated by wxWidgets, typically by setting the height and/or the width of the item to -1.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T133301Z">
        <seg>最小サイズ : 通常、この最小サイズはコントロールの初期サイズと同じであり、コントロールのコンストラクタの wxSize フィールドに明示的に設定されるか、(普通は高さや幅に -1 を設定することで) wxWidgets によって計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A minimal size: This minimal size is usually identical to the initial size of the controls and may either be set explicitly in the wxSize field of the control constructor or may be calculated by wxWidgets, typically by setting the height and/or the width of the item to -1.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141200Z">
        <seg>最小サイズ : 通常、この最小サイズはコントロールの初期サイズと同じであり、コントロールのコンストラクタの wxSize フィールドに明示的に設定されるか、(普通は高さや幅に -1 を設定することで) wxWidgets によって計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A stretch factor: If a sizer contains more than one child and it is offered more space than its children and their borders need, the question arises how to distribute the surplus space among the children.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T145521Z">
        <seg>ストレッチ係数 : サイザーがひとつ以上の子コントロールを持ち、子コントロールとそのボーダーの必要とするサイズ以上のサイズを持つ場合、余剰スペースを子コントロールに対してどのように分配するかが問題となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A stretch factor: If a sizer contains more than one child and it is offered more space than its children and their borders need, the question arises how to distribute the surplus space among the children.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141230Z">
        <seg>ストレッチ係数 : サイザーがひとつ以上の子コントロールを持ち、子コントロールとそのボーダーの必要とするサイズ以上のサイズを持つ場合、余剰スペースを子コントロールに対してどのように分配するかが問題となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An alignment: Often, a dialog item is given more space than its minimal size plus its border.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T123510Z">
        <seg>アライメント : ダイアログアイテムに対して、最小サイズとボーダーのスペースよりも多くのスペースを与えることはよくあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An alignment: Often, a dialog item is given more space than its minimal size plus its border.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141221Z">
        <seg>アライメント : ダイアログアイテムに対して、最小サイズとボーダーのスペースよりも多くのスペースを与えることはよくあります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Completeness: Usually, an error message should be presented to the user when some operation fails.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091816Z">
        <seg>完全性 : 通常、処理が失敗した場合にはエラーメッセージが表示されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Completeness Usually, an error message should be presented to the user when some operation fails.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T015937Z">
        <seg>完全性 通常、処理が失敗した場合にはエラーメッセージが表示されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Flexibility: The output of wxLog functions can be redirected or suppressed entirely based on their importance, which is either impossible or difficult to do with traditional methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091643Z">
        <seg>柔軟性 : wxLog 関数の出力はその重要度に応じてリダイレクトしたり抑制したりできます。これは従来の関数では不可能、もしくは困難なことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Flexibility The output of wxLog functions can be redirected or suppressed entirely based on their importance, which is either impossible or difficult to do with traditional methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T090235Z">
        <seg>柔軟性 wxLog 関数の出力はその重要度に応じてリダイレクトしたり抑制したりできます。これは従来の関数では不可能、もしくは困難なことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: bitmap handlers are not implemented on all platforms, and new ones rarely need to be implemented since wxImage can be used for loading most formats, as noted earlier.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T143314Z">
        <seg>注: ビットマップハンドラはすべてのプラットフォームで実装されているわけでありませんし、新しいものを実装する必要もほとんどないでしょう。なぜなら、前で述べたように wxImage を使用することで大半の形式を読み込むことができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pay close attention to Step 5. People often overlook or get confused by this powerful feature of the wxWidgets event processing system.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T031315Z">
        <seg>ステップ 5 に注意してください。 wxWidgets のイベント処理システムの持つこの強力な機能はしばしば見落とされたり、人を混乱させたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Portability: It is a common practice to use printf() statements or cout/cerr C++ streams for writing out some (debug or otherwise) information.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091656Z">
        <seg>移植性 : デバッグ情報や他の情報の出力に printf() や cout/cerr などの C++ ストリームを使用するのはごく普通のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Portability It is a common practice to use printf() statements or cout/cerr C++ streams for writing out some (debug or otherwise) information.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T015828Z">
        <seg>移植性 デバッグ情報や他の情報の出力に printf() や cout/cerr などの C++ ストリームを使用するのはごく普通のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SearchEventTable is called for this event handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T024421Z">
        <seg>このイベントハンドラから SearchEventTable が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Warning: gettext versions &lt; 0.10 are known to be buggy, so you should find a later version of it!</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T160602Z">
        <seg>注意: gettext バージョン &lt; 0.10 はバグが多いため、最新版を利用するべきです!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>int GetOrientation()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T150703Z">
        <seg>int GetOrientation()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void RecalcSizes()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T150049Z">
        <seg>void RecalcSizes()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer(int orient)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145929Z">
        <seg>wxBoxSizer(int orient)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxClientDC. Use this to paint on the client area of window (the part without borders and other decorations), but do not use it from within an wxPaintEvent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141425Z">
        <seg>wxClientDC。ウィンドウのクライアントエリア (ボーダーや他の装飾を除いた部分) に描画するときに使用します。ただし、wxPaintEvent の中で使用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogDebug is the right function for debug output.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T011629Z">
        <seg>wxLogDebug は まさに デバッグ出力に適切な関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogError is the function to use for error messages, i.e. the messages that must be shown to the user.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T010103Z">
        <seg>wxLogError はエラーメッセージ (ユーザに通知しなければならないメッセージ) 用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogFatalError which is like wxLogError, but also terminates the program with the exit code 3 (using abort() standard function).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T005238Z">
        <seg>wxLogFatalError は wxLogError と似ていますが、(abort() 標準関数を使用して) リターンコード 3 でプログラムを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogGui This is the standard log target for wxWidgets applications (it is used by default if you don't do anything) and provides the most reasonable handling of all types of messages for given platform.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T090443Z">
        <seg>wxLogGui これは wxWidgets アプリケーションの標準ログターゲット (何もしない場合にデフォルトで使用されます) で、指定されたプラットフォームについて、メッセージのすべての型に対してもっとも合理的な処理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogMessage is for all normal, informational messages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T010056Z">
        <seg>wxLogMessage はすべての通常 (通知) メッセージ用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogNull The last log class is quite particular: it doesn't do anything.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T025643Z">
        <seg>wxLogNull 最後のログクラスは極めて特殊です: これは何も行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogStatus is for status messages - they will go into the status bar of the active or specified (as the first argument) wxFrame if it has one.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T011009Z">
        <seg>wxLogStatus はステータスメッセージ用の関数で、このメッセージはアクティブまたは第一引数で指定された wxFrame がステータスバーを持つ場合に、ステータスバーへ出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogStderr This class logs messages to a FILE *, using stderr by default as its name suggests.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T024402Z">
        <seg>wxLogStderr このクラスはメッセージを FILE * へ出力します。その名の通り、デフォルトでは stderr へ出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogStream This class has the same functionality as wxLogStderr, but uses ostream and cerr instead of FILE * and stderr.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T024353Z">
        <seg>wxLogStream このクラスは wxLogStderr と同じ機能を持ちますが、FILE * と stderr の代わりに ostream と cerr を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogSysError is mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T011243Z">
        <seg>wxLogSysError は主に wxWidgets 自身で使用されますが、システムコール (API 関数) の失敗後のエラーログを記録するのに便利かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogTrace as wxLogDebug only does something in debug build.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T012357Z">
        <seg>wxLogTrace も wxLogDebug と同じようにデバッグビルド時のみ動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogVerbose is for verbose output.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T010049Z">
        <seg>wxLogVerbose は詳細な出力用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogWarning for warnings - they are also normally shown to the user, but don't interrupt the program work.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T010113Z">
        <seg>wxLogWarning は警告メッセージ (通常はユーザに通知されますが、プログラムの動作を妨げないメッセージ） 用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogWindow This log target provides a "log console" which collects all messages generated by the application and also passes them to the previous active log target.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T025402Z">
        <seg>wxLogWindow このログターゲットはアプリケーションの生成するすべてのメッセージを収集する "ログコンソール" を提供するとともに、前に有効だったログターゲットに収集したメッセージを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPaintDC. Use this to paint on the client area of a window, but only from within a wxPaintEvent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141422Z">
        <seg>wxPaintDC。ウィンドウのクライアントエリアに描画するときに使用しますが、wxPaintEvent の中で のみ 使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxScreenDC. Use this to paint on the screen, as opposed to an individual window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141428Z">
        <seg>wxScreenDC。個別のウィンドウではなく、スクリーン上に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWindowDC. Use this to paint on the whole area of a window, including decorations.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141502Z">
        <seg>wxWindowDC。装飾を含む、ウィンドウ全体に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tip: under Windows, you must either run the program under debugger or use a 3rd party program such as DbgView to actually see the debug output.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T012227Z">
        <seg>ヒント: Windows でデバッグ出力を確認するためにはデバッガーを使用するか、DbgView のようなサードパーティーのプログラムを使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxUSE_UNICODE is defined as 1 now to indicate Unicode support.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T033722Z">
        <seg>Unicode に対応しているため、現在、 wxUSE_UNICODE は 1 として定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event class carried by the event: each event has some information associated with it and this data is represented by an object of a class derived from wxEvent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130511T034810Z">
        <seg>イベントクラス : 各イベントは自分自身に関連する情報を持っており、これは wxEvent の継承クラスで表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event source: wxEvent stores the object which generated the event and, for windows, its identifier (see Window Identifiers).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130613T142755Z">
        <seg>イベント発生元 : wxEvent はイベントを生成したオブジェクトや、生成元がウィンドウの場合はその識別子 (ウィンドウ識別子 参照) を格納しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event type: this is simply a value of type wxEventType which uniquely identifies the type of the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T021606Z">
        <seg>イベント型 : イベントの型を一意に識別するための wxEventType 型の値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OnInit will usually create a top window as a bare minimum.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T123716Z">
        <seg>通常、OnInit では最低限、トップウィンドウを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please pay close attention to step 6! People often overlook or get confused by this powerful feature of the wxWidgets event processing system.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T145251Z">
        <seg>ステップ 6 に注意してください。 wxWidgets のイベント処理システムの持つこの強力な機能はしばしば見落とされたり、人を混乱させたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>orient may be either of wxVERTICAL or wxHORIZONTAL for creating either a column sizer or a row sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T150042Z">
        <seg>列サイザー、行サイザーを作成する場合、 orient はそれぞれ wxVERTICAL または wxHORIZONTAL になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OnInit will usually create a top window as a bare minimum.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T123741Z">
        <seg>通常、OnInit では最低限、トップウィンドウを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// We want to get a dialog that is stretchable because it
// has a text ctrl at the top and two buttons at the bottom.

MyDialog::MyDialog(wxFrame *parent, wxWindowID id, const wxString &amp;title )
: wxDialog(parent, id, title, wxDefaultPosition, wxDefaultSize,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142852Z">
        <seg>// 上部にテキストコントロールと下部にふたつのボタンを持つので
// リサイズ可能なダイアログにしたい。

MyDialog::MyDialog(wxFrame *parent, wxWindowID id, const wxString &amp;title )
: wxDialog(parent, id, title, wxDefaultPosition, wxDefaultSize,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// an easy and portable way to create a bitmap
wxBitmap bmp(wxBITMAP(bmpname));

// which is roughly equivalent to the following
#if defined(__WXMSW__) || defined(__WXPM__)
    wxBitmap bmp("bmpname", wxBITMAP_TYPE_BMP_RESOURCE);
#else // Unix
    wxBitmap bmp(bmpname_xpm, wxBITMAP_TYPE_XPM);
#endif</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154736Z">
        <seg>// ビットマップを作成する、簡単で移植性のある方法
wxBitmap bmp(wxBITMAP(bmpname));

// これは以下のコードと大体同じです
#if defined(__WXMSW__) || defined(__WXPM__)
    wxBitmap bmp("bmpname", wxBITMAP_TYPE_BMP_RESOURCE);
#else // Unix
    wxBitmap bmp(bmpname_xpm, wxBITMAP_TYPE_XPM);
#endif</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// define a new event class
class MyPlotEvent: public wxEvent
{
public:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150427Z">
        <seg>// 新しいイベントクラスを定義する
class MyPlotEvent: public wxEvent
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// disable all database error messages, everybody knows databases never</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T110908Z">
        <seg>// 絶対にデータベースが失敗しないことを誰もが知っているため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// this is typically in a header: it just declares MY_EVENT event type
wxDECLARE_EVENT(MY_EVENT, wxCommandEvent);

// this is a definition so can't be in a header
wxDEFINE_EVENT(MY_EVENT, wxCommandEvent);

// example of code handling the event with event tables
wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150052Z">
        <seg>// このマクロは一般的にヘッダファイル内で使用します: これは MY_EVENT イベント型を定義するだけです
wxDECLARE_EVENT(MY_EVENT, wxCommandEvent);

// これは定義なのでヘッダ内で使用することはできません
wxDEFINE_EVENT(MY_EVENT, wxCommandEvent);

// イベントテーブルによるイベント処理のコード例
wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class DerivedApp : public wxApp
{
public:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152654Z">
        <seg>class DerivedApp : public wxApp
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyApp : public wxApp
{
public:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124532Z">
        <seg>class MyApp : public wxApp
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyFrame : public wxFrame
{
public:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T024704Z">
        <seg>class MyFrame : public wxFrame
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const wxScopedCharBuffer p(s.ToUTF8());
puts(p);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T171253Z">
        <seg>const wxScopedCharBuffer p(s.ToUTF8());
puts(p);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const char *p = s.ToUTF8();
...
puts(p); // or call any other function taking const char *</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T170753Z">
        <seg>const char *p = s.ToUTF8();
...
puts(p); // または const char * を受け取る他の関数の呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum { Red, Green, Blue };</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T130832Z">
        <seg>enum { Red, Green, Blue };</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct MyFunctor
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060809Z">
        <seg>struct MyFunctor
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>switch ( s[n] )</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T122458Z">
        <seg>switch ( s[n] )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>using namespace boost;

void MyHandler::OnExit( wxCommandEvent &amp; )
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060938Z">
        <seg>using namespace boost;

void MyHandler::OnExit( wxCommandEvent &amp; )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void HandleExit( wxCommandEvent &amp; )
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060659Z">
        <seg>void HandleExit( wxCommandEvent &amp; )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void MyFrame::OnExit(wxCommandEvent&amp; WXUNUSED(event))
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T034205Z">
        <seg>void MyFrame::OnExit(wxCommandEvent&amp; WXUNUSED(event))
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void MyFrame::OnSize(wxSizeEvent&amp; event)
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T034454Z">
        <seg>void MyFrame::OnSize(wxSizeEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void MyFrameHandler::OnFrameExit( wxCommandEvent &amp; )
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060207Z">
        <seg>void MyFrameHandler::OnFrameExit( wxCommandEvent &amp; )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void MyHandler::OnExit( int exitCode, wxCommandEvent &amp;, wxString goodByeMessage )
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T061147Z">
        <seg>void MyHandler::OnExit( int exitCode, wxCommandEvent &amp;, wxString goodByeMessage )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void MyWindow::OnMyCmd(wxCommandEvent&amp; event)
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154318Z">
        <seg>void MyWindow::OnMyCmd(wxCommandEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// accessors</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155555Z">
        <seg>// アクセサ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// also enable tracing messages from wxWidgets dynamic module loading</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111013Z">
        <seg>// また、wxWidgets の動的モジュールロード機能の</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return 0;
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124606Z">
        <seg>return 0;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void OnExit(wxCommandEvent&amp; event);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T024715Z">
        <seg>void OnExit(wxCommandEvent&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// mechanism</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111052Z">
        <seg>// トレースメッセージも有効化する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// do something</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150109Z">
        <seg>// 処理を行なう</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return true;
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152703Z">
        <seg>return true;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void OnButton1(wxCommandEvent&amp; event);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T020036Z">
        <seg>void OnButton1(wxCommandEvent&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// implement the base class pure virtual</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150512Z">
        <seg>// 基底クラスの純粋仮想関数を実装する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void OnSize(wxSizeEvent&amp; event);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T020037Z">
        <seg>void OnSize(wxSizeEvent&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>virtual wxEvent *Clone() const { return new MyPlotEvent(*this); }

private:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150515Z">
        <seg>virtual wxEvent *Clone() const { return new MyPlotEvent(*this); }

private:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// create text ctrl with minimal size 100x60 that is horizontally and</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145437Z">
        <seg>// 最小サイズ 100x60 のテキストコントロールを作成し、水平方向と</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// create text ctrl with minimal size 100x60</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142933Z">
        <seg>// 最小サイズ 100x60 のテキストコントロールを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// it's common to call the event handlers OnSomething() but there is no</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T020204Z">
        <seg>// イベントハンドラは OnSomething() という名前にするのが一般的ですが、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// obligation to do that; this one is an event handler too:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T024748Z">
        <seg>// そうしなければならないわけではありません； これもイベントハンドラです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// vertically stretchable with a border width of 10</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T153110Z">
        <seg>// 垂直方向にリサイズ可能で、ボーダーの太さは 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142947Z">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void DoTest(wxCommandEvent&amp; event);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T020304Z">
        <seg>void DoTest(wxCommandEvent&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145454Z">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// fail anyhow</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T110921Z">
        <seg>// データベースのすべてのエラーメッセージを無効化する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// wxFile.Open() normally complains if file can't be opened, we don't want it</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T113225Z">
        <seg>// 通常はファイルを開けなかった場合に wxFile.Open() がエラーメッセージを出力するが、そうさせたくない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void operator()( wxCommandEvent &amp; )</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060812Z">
        <seg>void operator()( wxCommandEvent &amp; )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>event.SetEventObject(this);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150154Z">
        <seg>event.SetEventObject(this);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Give it some contents</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155523Z">
        <seg>// 何か値を設定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const wxPoint m_pos;
};

// we define a single MY_PLOT_CLICKED event type associated with the class
// above but typically you are going to have more than one event type, e.g. you
// could also have MY_PLOT_ZOOMED or MY_PLOT_PANNED &amp;c -- in which case you
// would just add more similar lines here
wxDEFINE_EVENT(MY_PLOT_CLICKED, MyPlotEvent);


// if you want to support old compilers you need to use some ugly macros:
typedef void (wxEvtHandler::*MyPlotEventFunction)(MyPlotEvent&amp;);
#define MyPlotEventHandler(func) wxEVENT_HANDLER_CAST(MyPlotEventFunction, func)

// if your code is only built using reasonably modern compilers, you could just
// do this instead:
#define MyPlotEventHandler(func) (&amp;func)

// finally define a macro for creating the event table entries for the new
// event type
//
// remember that you don't need this at all if you only use Bind&lt;&gt;() and that
// you can replace MyPlotEventHandler(func) with just &amp;func unless you use a
// really old compiler
#define MY_EVT_PLOT_CLICK(id, func) \
    wx__DECLARE_EVT1(MY_PLOT_CLICKED, id, MyPlotEventHandler(func))


// example of code handling the event (you will use one of these methods, not
// both, of course):
wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T152446Z">
        <seg>const wxPoint m_pos;
};

// 上記のクラスに関連する MY_PLOT_CLICKED イベント型をひとつだけ定義しますが、
// 通常は複数のイベント型を持つようになるでしょう。例えば、
// MY_PLOT_ZOOMED や MY_PLOT_PANNED などです。
// そのような場合はこれと似たような行をここに追加するだけです。
wxDEFINE_EVENT(MY_PLOT_CLICKED, MyPlotEvent);


// 古いコンパイラをサポートしたい場合、いくつかの醜いマクロを使用する必要があります:
typedef void (wxEvtHandler::*MyPlotEventFunction)(MyPlotEvent&amp;);
#define MyPlotEventHandler(func) wxEVENT_HANDLER_CAST(MyPlotEventFunction, func)

// ほどほどにモダンなコンパイラのみでビルドする場合、
// 代わりに以下のようにするだけです:
#define MyPlotEventHandler(func) (&amp;func)

// 最後に、新しいイベント型のイベントテーブルエントリを作成するマクロを
// 定義します
//
// Bind&lt;&gt;() のみを使用する場合はこうする必要がまったくないことと、
// 本当に古いコンパイラを使うのでなければ MyPlotEventHandler(func) の代わりに &amp;func とすることができることを
// 覚えておいてください
#define MY_EVT_PLOT_CLICK(id, func) \
    wx__DECLARE_EVT1(MY_PLOT_CLICKED, id, MyPlotEventHandler(func))


// イベント処理のサンプルコード (これらの関数のひとつを使用することになるでしょう。
// もちろん、両方使うことはありません):
wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>event.SetString("Hello");</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150203Z">
        <seg>event.SetString("Hello");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Do send it</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155533Z">
        <seg>// 送信する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Do something useful.
}

MyFrameHandler myFrameHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060232Z">
        <seg>// 何か有用なことを行う。
}

MyFrameHandler myFrameHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Do something useful
}

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060723Z">
        <seg>// 何か有用なことを行う
}

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// when the user selects "Exit" from the menu we should close</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T160138Z">
        <seg>// ユーザがメニューから "Exit" を選択したときには終了する必要がある。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//create two buttons that are horizontally unstretchable,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145510Z">
        <seg>//ふたつのボタンを作成し、水平方向にはリサイズ不可にして、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// with an all-around border with a width of 10 and implicit top alignment</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145520Z">
        <seg>// 太さ 10 のボーダーを全方向に持たせ、暗黙的に上揃えにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145526Z">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143820Z">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Do something useful</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060825Z">
        <seg>// 何か有用なことを行う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Do something useful
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060951Z">
        <seg>// 何か有用なことを行う
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// in UTF8 the character U+00E0 is encoded as 0xC3A0</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T082644Z">
        <seg>// UTF-8 では U+00E0 は 0xC3A0 と符号化される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if ( !file.Open("bar") )</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T113231Z">
        <seg>if ( !file.Open("bar") )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145535Z">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143855Z">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Do something useful
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T061205Z">
        <seg>// 何か有用なことを行う
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const wxFilterClassFactory *fcf;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T013317Z">
        <seg>const wxFilterClassFactory *fcf;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>virtual bool OnInit();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152657Z">
        <seg>virtual bool OnInit();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>//create a sizer with no border and centered horizontally</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145549Z">
        <seg>//サイザーを作成し、ボーダーなしで水平方向に中央揃えにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// but enable tracing for the transactions as somehow our changes don't</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T110833Z">
        <seg>// しかし、どういうわけか時たま変更のコミットに失敗するため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>int m_whatever;

private:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015445Z">
        <seg>int m_whatever;

private:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wchar_t ch = *i</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T151627Z">
        <seg>wchar_t ch = *i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wchar_t ch = s[i];</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T151504Z">
        <seg>wchar_t ch = s[i];</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// accordingly and prevent it from being resized</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T144931Z">
        <seg>// ウィンドウのサイズを調整し、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>event.SetEventObject(this);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T151359Z">
        <seg>event.SetEventObject(this);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// to smaller size
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145001Z">
        <seg>// より小さくリサイズされないようにする
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// ... process error ourselves ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T114638Z">
        <seg>// ... 自分自身でエラー処理を行なう ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// do something with it
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T035106Z">
        <seg>// なんらかの処理
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// get committed sometimes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T110838Z">
        <seg>// トランザクションのトレースは有効化する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wchar_t ch = *i</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T153029Z">
        <seg>wchar_t ch = *i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// Notice that as the event handlers normally are not called from outside</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015529Z">
        <seg>// 通常、イベントハンドラはクラス外から呼ばれることはないため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// do something with it
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T153059Z">
        <seg>// これを使って何かする
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// otherwise wxYES or wxOK button will be default

wxOK     // return wxID_OK
wxCANCEL // return wxID_CANCEL
wxHELP   // return wxID_HELP

wxFORWARD   // return wxID_FORWARD
wxBACKWARD  // return wxID_BACKWARD
wxSETUP     // return wxID_SETUP
wxMORE      // return wxID_MORE</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T150353Z">
        <seg>// これを指定しない場合、wxYES ボタンか wxOK ボタンがデフォルトになります

wxOK     // wxID_OK を返却します
wxCANCEL // wxID_CANCEL を返却します
wxHELP   // wxID_HELP を返却します

wxFORWARD   // wxID_FORWARD を返却します
wxBACKWARD  // wxID_BACKWARD を返却します
wxSETUP     // wxID_SETUP を返却します
wxMORE      // wxID_MORE を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// the class, they normally are private.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015549Z">
        <seg>// 普通は private にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>// to be public.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015621Z">
        <seg>// する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>delete m_helpCtrl;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124605Z">
        <seg>delete m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;wx/sizer.h&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145850Z">
        <seg>&lt;wx/sizer.h&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxDC is a device context onto which graphics and text can be drawn.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154211Z">
        <seg>wxDC は図形やテキストを描画可能な デバイスコンテキスト です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A glyph is a particular image (usually part of a font) that represents a character or part of a character.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T031637Z">
        <seg>グリフ とは、文字、あるいは文字の一部を表現する特定のイメージです。 (通常はフォントの一部です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A EVT_LEAVE_WINDOW(MyFrame::OnMouseLeave) line in the frame event table has no effect as mouse move (including entering and leaving) events are not propagated up to the parent window (at least not by default).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T025639Z">
        <seg>フレームのイベントテーブル内に EVT_LEAVE_WINDOW(MyFrame::OnMouseLeave) を書いても効果がありません。なぜなら、マウス移動 (フレームへの出入りも含みます) イベントは (少なくともデフォルトでは) 親ウィンドウへ伝播しないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A better solution is to write programs in such way that they may be compiled either in ANSI (traditional) mode or in the Unicode one.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T150238Z">
        <seg>より良い解決策としては、(従来の) ANSI モードと Unicode モードのどちらでもコンパイルできるようにプログラムを書くことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A bitmap created dynamically or loaded from a file can be selected into a memory device context (instance of wxMemoryDC).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T135209Z">
        <seg>動的に作成した、またはファイルから読み込んだビットマップはメモリデバイスコンテキスト (wxMemoryDC のインスタンス) で選択可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A book control is a convenient way of displaying multiple pages of information, displayed one page at...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T150935Z">
        <seg>ブックコントロールは複数のページを持つ情報を表示する際に、一度にひとつのページを表示する便利な手段です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A button is a control that contains a text string, and is one of the most common elements of a GUI...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153555Z">
        <seg>ボタンはテキストを含んだコントロールであり、もっとも一般的な GUI 要素のひとつです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class that can handle events from the windowing system.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T151312Z">
        <seg>ウィンドウから送信されるベントを処理可能なクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A close window or end session event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055212Z">
        <seg>ウィンドウの終了、またはセッションの終了イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A common example of a functor is boost::function&lt;&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060913Z">
        <seg>ファンクタの一般的な例は boost::function&lt;&gt; です:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A cursor is a small bitmap usually used for denoting where the mouse pointer is, with a picture that ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T153806Z">
        <seg>カーソルは小さな矩形のビットマップで、マウスポインタの位置を表すためにマウスクリックを示す画像付きでよく使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dialog box is a window with a title bar and sometimes a system menu, which can be moved around the ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142222Z">
        <seg>ダイアログボックスはタイトルバーと、たまにシステムメニューを持つ、移動可能なウィンドウです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dialog box is similar to a panel, in that it is a window which can be used for placing controls, with the following exceptions:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T145610Z">
        <seg>ダイアログボックスはパネルに似ており、コントロールを配置するために使用するウィンドウですが、以下の例外があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dialog initialisation event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055253Z">
        <seg>ダイアログの初期化イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A flex grid sizer is a sizer which lays out its children in a two-dimensional table with all table fi...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T140306Z">
        <seg>可変グリッドサイザーは子コントロールを 2 次元の表にレイアウトするサイザーです。同じ行中のセルは同じ高さを持ち、同じ列中のセルは同じ幅を持ちますが、すべての行と列が wxGridSizer のように同じ高さや幅を持つ必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A frame is a window whose size and position can (usually) be changed by the user.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T010152Z">
        <seg>フレームは (通常は) ユーザがサイズや位置を変更可能なウィンドウです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A grid sizer is a sizer which lays out its children in a two-dimensional table with all table fields ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T135807Z">
        <seg>グリッドサイザーは子コントロールを 2 次元の表にレイアウトするサイザーで、表中のセルはすべて同じ大きさを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A handler method in another object.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T000029Z">
        <seg>別のオブジェクトのハンドラ関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A joystick event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055300Z">
        <seg>ジョイスティックイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A keypress event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055239Z">
        <seg>キー押下イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A macro, wxICON(), is available which creates an icon using an XPM on the appropriate platform, or an icon resource on Windows:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154640Z">
        <seg>wxICON() マクロを使用すると、適切なプラットフォームでは XPM を、Windows ではアイコンリソースを利用してアイコンを作成することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A macro, wxICON, is available which creates an icon using an XPM on the appropriate platform, or an icon resource on Windows.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T140323Z">
        <seg>wxICON マクロを使用すると、適切なプラットフォームでは XPM を、Windows ではアイコンリソースを利用してアイコンを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A memory device context provides a means to draw graphics onto a bitmap.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T145713Z">
        <seg>メモリデバイスコンテキストはビットマップ上に描画するための方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A menu event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055304Z">
        <seg>メニューイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method in another object.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T042153Z">
        <seg>別のオブジェクトの関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A mouse event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055312Z">
        <seg>マウスイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A move event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055320Z">
        <seg>移動イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A paint event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055325Z">
        <seg>描画イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A paint event is sent when a window's contents needs to be repainted.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154007Z">
        <seg>ペイントイベントはウィンドウのコンテンツを再描画する必要があるときに送信されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A printer device context is specific to MSW and Mac, and allows access to any printer with a Windows ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T150032Z">
        <seg>プリンタデバイスコンテキストは MSW と Mac に特有のデバイスコンテキストで、Windows や Macintosh のドライバを使用してプリンタへアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range of commonly-used control events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080921Z">
        <seg>よく使われる一連のコントロールイベント。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A scroll event sent by a scrolled window (not a scroll bar)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055533Z">
        <seg>(スクロールバーではなく) スクロール可能なウィンドウから送信されるスクロールイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A size event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055500Z">
        <seg>リサイズイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A size event holds information about size change events of wxWindow.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015436Z">
        <seg>リサイズイベントは wxWindow のサイズ変更イベントに関する情報を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special version of wxLogChain which uses itself as the new log target.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T130639Z">
        <seg>wxLogChain の特別版で、自分自身を新しいログターゲットとして使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A static function enabling or disabling layout adaptation for all dialogs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T144348Z">
        <seg>すべてのダイアログに対してレイアウトの適応を有効化・無効化する静的関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A static function for setting the current layout adapter object, returning the old adapter...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T153419Z">
        <seg>現在のレイアウトアダプタオブジェクトを設定し、古いアダプタを返却する静的関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A surrounding frame is implicitly created.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T145647Z">
        <seg>周囲を囲むフレームが暗黙的に作成される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A system colour change event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055543Z">
        <seg>システムカラーの変更イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A text control allows text to be displayed and edited.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160411Z">
        <seg>テキストの表示と編集が可能なテキストコントロール。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tree control presents information as a hierarchy, with items that may be expanded to show further i...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T032633Z">
        <seg>ツリーコントロールでは情報を (項目を展開すると追加の項目が現れる) 階層として表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A tree event holds information about events associated with wxTreeCtrl objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T032350Z">
        <seg>ツリーイベントは wxTreeCtrl オブジェクトに関連するイベントの情報を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value of more than zero is interpreted in relation to the sum of all stretch factors in the children of the respective sizer, i.e. if two children get a stretch factor of 1, they will get half the extra space each independent of whether one control has a minimal sizer inferior to the other or not.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141308Z">
        <seg>0 より大きい値はサイザー内の子コントロールに設定されたすべてのストレッチ係数の合計に基づいて解釈されます。つまり、ふたつの子コントロールのストレッチ係数に 1 を指定した場合、一方のコントロールの最小サイズがもう一方より小さいかどうかによらず 、余剰スペースは二等分されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value of more than zero is interpreted in relation to the sum of all stretch factors in the children of the respective sizer, i.e. if two children get a stretch factor of 1, they will get half the extra space each independent of whether one control has a minimal sizer inferior to the other or not.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T123716Z">
        <seg>0 より大きい値はサイザー内の子コントロールに設定されたすべてのストレッチ係数の合計に基づいて解釈されます。つまり、ふたつの子コントロールのストレッチ係数に 1 を指定した場合、一方のコントロールの最小サイズがもう一方より小さいかどうかによらず 、余剰スペースは二等分されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A value uniquely identifying the type of the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150339Z">
        <seg>イベントの型を一意に識別する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A window focus event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055231Z">
        <seg>ウィンドウフォーカスイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A window or application activation event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055130Z">
        <seg>ウィンドウまたはアプリケーションのアクティブ化イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxClientDC must be constructed if an application wishes to paint on the client area of a window fro...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T150230Z">
        <seg>wxClientDC は EVT_PAINT() イベントハンドラ以外の場所でクライアントエリアを描画する場合に使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxDC is a "device context" onto which graphics and text can be drawn.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T144316Z">
        <seg>wxDC は図形やテキストを描画可能なデバイスコンテキストです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxDC is a device context onto which graphics and text can be drawn.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T140552Z">
        <seg>wxDC は図形やテキストを描画可能な デバイスコンテキスト です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxFile performs raw file I/O.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T070227Z">
        <seg>wxFile は低レベルファイル入出力を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxMemoryBuffer is a useful data structure for storing arbitrary sized blocks of memory...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T162831Z">
        <seg>wxMemoryBuffer は任意のサイズのメモリブロックを格納するのに役立つデータ構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxPaintDC must be constructed if an application wishes to paint on the client area of a window from...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T150348Z">
        <seg>wxClientDC は EVT_PAINT() イベントハンドラ内でクライアントエリアを描画する場合に使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxPoint is a useful data structure for graphics operations.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150355Z">
        <seg>wxPoint は図形操作のための有用なデータ構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxScreenDC can be used to paint on the screen.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T150056Z">
        <seg>wxScreenDC はスクリーン上へ描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxSize is a useful data structure for graphics operations.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T034450Z">
        <seg>wxSize は図形操作のための有用なデータ構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxSizer that can lay out items in a virtual grid like a wxFlexGridSizer but in this case explicit p...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T140810Z">
        <seg>wxFlexGridSizer のように子コントロールを仮想のグリッドに配置しますが、wxGBPosition を使用してコントロールを明示的に配置することが可能です。また、wxGBSpan を使用することで、複数の行または列にまたがってコントロールを配置することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxWidgets application does not have a main procedure; the equivalent is the wxApp::OnInit member defined for a class derived from wxApp.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T151105Z">
        <seg>wxWidgets アプリケーションは main 関数を持ちません。それと同等の関数が wxApp を継承したクラスで定義される wxApp::OnInit メンバ関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxWidgets application does not have a main procedure; the equivalent is the OnInit member defined for a class derived from wxApp.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T160017Z">
        <seg>wxWidgets アプリケーションは main 関数を持ちません。それと同等の関数が wxApp を継承したクラスで定義される OnInit メンバ関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A wxWindowDC must be constructed if an application wishes to paint on the whole area of a window (cli...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T150635Z">
        <seg>wxWindowDC はウィンドウ全体 (クライアントエリアと装飾部分) を描画する場合に使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Acknowledgements</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T062043Z">
        <seg>謝辞</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adaptation for wxPropertySheetDialog is always done by simply making the pages scrollable, since wxDialog::GetContentWindow returns the dialog's book control and this is handled by the standard layout adapter.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T154359Z">
        <seg>wxPropertySheetDialog に対する適応は単純にページをスクロール可能にするだけです。なぜなら、 wxDialog::GetContentWindow がダイアログのブックコントロールを返却し、このコントロールが標準のレイアウトアダプタで処理されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Add the mask to the list of allowed masks for wxLogTrace().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155753Z">
        <seg>wxLogTrace() の許可マスクのリストへマスクを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, columns and rows can be declared to be stretchable if the sizer is assigned a size different from the one it requested.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T130250Z">
        <seg>加えて、サイザーの必要とするサイズと異なるサイズを指定した場合に、列や行をリサイズ可能にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, in the case of wxWindow you can build a stack (implemented using wxEvtHandler double-linked list) using wxWindow::PushEventHandler():</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T152144Z">
        <seg>加えて wxWindow の場合、wxWindow::PushEventHandler() を使用してスタック (wxEvtHandler の双方向リンクリストで実装されます) を構築することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, you can customize the way full log messages are constructed from the components (such as time stamp, source file information, logging thread ID and so on).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T123024Z">
        <seg>加えて、ログメッセージを (タイムスタンプ、ソースファイルの情報、スレッドID などの) 部品から構築する方法を完全にカスタマイズすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a handler to the end of the static list of format handlers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155206Z">
        <seg>形式ハンドラの静的一覧の末尾にハンドラを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds a new page.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155614Z">
        <seg>新しいページを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adds an identifier to be regarded as a main button for the non-scrolling area of a dialog...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T153038Z">
        <seg>ダイアログの非スクロール領域にするメインボタンとして扱う識別子を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After having enumerated all the functions which are normally used to log the messages, and why would you want to use them we now describe how all this works.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T022130Z">
        <seg>メッセージのロギングに通常使用するすべての関数と、それらを使用する理由について列挙したので、これらの動作方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After having enumerated all the functions which are normally used to log the messages, and why would you want to use them, we now describe how all this works.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111348Z">
        <seg>メッセージのロギングに通常使用するすべての関数と、それらを使用する理由について列挙したので、これらの動作方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, this mostly will be unnoticeable but can result in some problems:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124419Z">
        <seg>これはほとんど目立ちませんが、いくつかの問題を引き起こすことがあります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All wxTextCtrl methods</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T061029Z">
        <seg>wxTextCtrl のすべての関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All children are given the same size, which is the minimal size required by the biggest child, in this case the text control in the left bottom border.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T153019Z">
        <seg>子コントロールはすべて同じサイズ (最大の子コントロールの必要とする最小サイズ) が与えられます。この例では左下のテキストコントロールが最大の子コントロールです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All formats that are supported by the wxImage class.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142028Z">
        <seg>wxImage クラスの対応するすべての形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All of them have the same syntax as printf() or vprintf() , i.e. they take the format string as the first argument and respectively a variable number of arguments or a variable argument list pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131219Z">
        <seg>これらの関数はすべて printf() や vprintf() と同じ構文を持ちます。つまり、第一引数にフォーマット文字列を取り、続けて可変引数か可変引数リストのポインタを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All of them have the same syntax as printf() or vprintf() , i.e. they take the format string as the first argument and respectively a variable number of arguments or a variable argument list pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T005012Z">
        <seg>これらの関数はすべて printf() や vprintf() と同じ構文を持ちます。つまり、第一引数にフォーマット文字列を取り、続けて可変引数か可変引数リストのポインタを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All sizers are containers, that is, they are used to lay out one dialog item (or several dialog items), which they contain.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T143422Z">
        <seg>サイザーはすべてコンテナです。つまり、ひとつ (または複数) のダイアログアイテムを内部に配置するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the children apart from standard buttons are reparented onto a new wxScrolledWindow object, using the old top-level sizer for the scrolled window and creating a new top-level sizer to lay out the scrolled window and standard button sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T152307Z">
        <seg>標準ボタン以外のすべての子コントロールの親は新しい wxScrolledWindow オブジェクトに変更されます。このとき、以前のトップレベルサイザーはスクロール可能なウィンドウに使用され、スクロール可能なウィンドウと標準ボタンサイザーを配置するために新しいトップレベルサイザーが作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All the details about how to use them may be found in the description of the wxConfigBase class and the documentation of the file, registry and INI file based implementations mentions all the features/limitations specific to each one of these versions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T145852Z">
        <seg>使用方法についての詳細は wxConfigBase クラスの説明の中で記載しています。また、ファイル、レジストリ、INI ファイルベースの実装についてのドキュメントでは、それぞれのバージョン独自の機能/制限について触れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All wxWidgets platforms support XPMs for small bitmaps and icons.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T140218Z">
        <seg>小さなビットマップやアイコンに使用される XPM について、wxWidgets はすべてのプラットフォームで対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allows the programmer to specify whether the application will exit when the top-level frame is delete...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T153140Z">
        <seg>トップレベルウィンドウが削除されたときにアプリケーションを終了するかどうかをユーザが指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allows you to add a custom event table entry by specifying the event identifier (such as wxEVT_SIZE), the window identifier, and a member function to call.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T160419Z">
        <seg>(wxEVT_SIZE といった) イベント識別子、ウィンドウ識別子、呼び出すメンバ関数を指定してカスタムイベントのエントリをイベントテーブルへ追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Almost last but very, very far from least is the increased flexibility which allows to bind an event to:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T042136Z">
        <seg>大事なことを一つ言い残しましたが、バインド対象についても柔軟性が向上しており、イベントを以下のものにバインドできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also notice that wxLog::EnableLogging() and wxLogNull class which uses it only affect the current thread, i.e. logging messages may still be generated by the other threads after a call to EnableLogging(false).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T120458Z">
        <seg>また、wxLog::EnableLogging() と wxLogNull クラスは現在のスレッドにのみ影響することに注意してください。つまり、EnableLogging(false) を呼んだ後でも他のスレッドでは依然としてログメッセージが生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also notice that in spite of the availability of these functions, wxString is not the ideal class for storing arbitrary binary data as they can take up to 4 times more space than needed (when using wchar_t internal representation on the systems where size of wide characters is 4 bytes) and you should consider using wxMemoryBuffer instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T165938Z">
        <seg>また、これらの関数が存在しているにも関わらず、任意のバイナリデータを格納するのに wxString は理想的なクラスとは言えないことに注意してください。なぜなら、必要とされる量の最大 4 倍の領域を消費する (ワイド文字が 4 バイトのシステムで内部表現に wchar_t を使用するときがこれに該当します) ためです。代わりに wxMemoryBuffer を使用することを検討してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also notice that most of the existing wxWidgets tutorials and discussions use the event tables because they historically preceded the apparition of dynamic event handling in wxWidgets.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T022125Z">
        <seg>既存の wxWidgets のチュートリアルや議論の大半ではイベントテーブルを使用していることにも注意してください。これは歴史的に、wxWidgets で動的イベント処理が可能になる前から、それらの文書が存在するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also please notice that there are additional steps in the event handling for the windows-making part of wxWidgets document-view framework, i.e., wxDocParentFrame, wxDocChildFrame and their MDI equivalents wxDocMDIParentFrame and wxDocMDIChildFrame.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T151644Z">
        <seg>また、wxWidgets ドキュメント/フレームワークのウィンドウ部分、つまり、wxDocParentFrame、wxDocChildFrame と、その MDI 版である wxDocMDIParentFrame、wxDocMDIChildFrame でのイベント処理には追加のステップが存在することにも注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, the string and character constants should be encoded using wide characters (wchar_t type) which typically take 2 or 4 bytes instead of char which only takes one.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T151853Z">
        <seg>また、文字列や文字定数は char (1 バイト) の代わりにワイド文字 (wchar_t 型、通常 2 か 4 バイト) で符号化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, you may use -a option to extract all the strings, but it will usually result in many strings being found which don't have to be translated at all.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T040610Z">
        <seg>代わりに -a オプションを使用することもできますが、そうするとまったく翻訳する必要のない文字列が大量に見つかることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, you may use -a option to extract all the strings, but it will usually result in many strings being found which don't have to be translated at all.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T001039Z">
        <seg>代わりに -a オプションを使用することもできますが、そうするとまったく翻訳する必要のない文字列が大量に見つかることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although everything works fine inside the program, things can get nasty when it tries to communicate with the outside world which, sadly, often expects ANSI strings (a notable exception is the entire Win32 API which accepts either Unicode or ANSI strings and which thus makes it unnecessary to ever perform any conversions in the program).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T143311Z">
        <seg>プログラム内部ではすべてうまく動作するとしても、外部の世界とやり取りしようとすると、それらは悲しいことにしばしば ANSI 文字列を想定しているため、ひどいことになります。 (特筆すべき例外として、すべての Win32 API は Unicode 文字列と ANSI 文字列の両方を受け付けるため、プログラム内でなんらかの変換を行う必要がまったくありません）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although internationalization of an application (i18n for short) involves far more than just translating its text messages to another message - date, time and currency formats need changing too, some languages are written left to right and others right to left, character encoding may differ and many other things may need changing too - it is a necessary first step.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T042842Z">
        <seg>アプリケーションの国際化 (略して i18n) には単にテキストメッセージを他のメッセージに翻訳すること以上のことが含まれます。日付や時間、通貨の形式も変更する必要がありますし、ある言語は左から右へ、別の言語では右から左へ表記するでしょう。文字コードも異なりますし、他にもたくさんのことを変更する必要がありますが、これは必要な最初のステップです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it works just fine under Unix, these messages go strictly nowhere under Windows where the stdout of GUI programs is not assigned to anything.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T085347Z">
        <seg>ただし、これは Unix では正常に動作しますが、GUI プログラムの標準出力がどこにも割り当てられない Windows では厳密にどこにも出力されません.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always enclose literal string constants in wxT() macro unless they're already converted to the right representation (another standard wxWidgets macro _() does it, for example, so there is no need for wxT() in this case) or you intend to pass the constant directly to an external function which doesn't accept wide-character strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151824Z">
        <seg>リテラル文字列をすでに正しい表現に変換している (例えば、別の標準 wxWidgets マクロ _() も wxT() と同じ事を行うため、この場合は  wxT() を使う必要はありません) か、ワイド文字列を受け付けない外部関数へ直接リテラル文字列を渡すのでない限り、リテラル文字列は常に wxT() で囲む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Always use wxChar instead of char</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151820Z">
        <seg>char の代わりに常に wxChar を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An application closes by destroying all windows.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T160515Z">
        <seg>アプリケーションはすべてのウィンドウを破棄することで終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An arbitrary functor like boost::function&lt;&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T000123Z">
        <seg>boost::function&lt;&gt; のような任意のファンクタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An erase background event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055225Z">
        <seg>背景の消去イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An event is a structure holding information about an event passed to a callback or member function...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153238Z">
        <seg>wxEvent はコールバック関数かメンバ関数に渡されるイベントの情報を格納した構造体です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An event table is placed in an implementation file to tell wxWidgets how to map events to member functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075334Z">
        <seg>イベントテーブルはソースファイルに配置され、wxWidgets にイベントとメンバ関数のマッピング方法を知らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example of defining an application follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T160959Z">
        <seg>アプリケーションを定義する例は以下の通りです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An icon is a small rectangular bitmap usually used for denoting a minimized application.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T153354Z">
        <seg>アイコンは小さな矩形のビットマップで、最小化されたアプリケーションを表すためによく使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An idle event</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055244Z">
        <seg>アイドルイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An ordinary function like a static method or a global function.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T000110Z">
        <seg>静的関数やグローバル関数のような普通の関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And all components are children of the unnamed root component.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T105001Z">
        <seg>そして、すべてのコンポーネントは無名のルートコンポーネントの子になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And as with wxString::FromUTF8() example above, you can always use wxString::ToUTF8() to retrieve the string contents in UTF-8 encoding -- this, unlike converting to char* using the current locale, never fails.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T091819Z">
        <seg>また、上の wxString::FromUTF8() を使ったサンプルのように、UTF-8 で符号化された文字列を取得するために常に wxString::ToUTF8() を使うことができます。この方法は、現在のロケールを使用して char* に変換する方法と比較して、変換に失敗することがありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And finally you can bind to an arbitrary functor and use it as an event handler:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060806Z">
        <seg>そして、最後に任意のファンクタをバインドし、イベントハンドラとして使用することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And finally, the standard preprocessor tokens enumerated above expand to ANSI strings but it is more likely that Unicode strings are wanted in the Unicode build.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151410Z">
        <seg>最後に、上に挙げた標準プリプロセッサトークンは ANSI 文字列として展開されますが、Unicode ビルドの際には Unicode 文字列の方が必要なことが多いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And while the events are normally generated by wxWidgets itself, you can also do this, which is especially useful when using custom events (see Custom Event Summary).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T160615Z">
        <seg>また、通常、イベントは wxWidgets 自身によって生成されますが、あなたがこれを行うことも可能です。これはカスタムイベントを使用する場合に特に有用です。 (カスタムイベントの概要 参照) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another aspect of the application shutdown is OnExit which is called when the application exits but before wxWidgets cleans up its internal structures.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162318Z">
        <seg>アプリケーションの終了の別の側面は OnExit です。この関数はアプリケーションの終了時に呼ばれますが、wxWidgets の内部構造が破棄される前に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another aspect of the application shutdown is wxApp::OnExit which is called when the application exits but before wxWidgets cleans up its internal structures.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T133120Z">
        <seg>アプリケーションの終了の別の側面は wxApp::OnExit です。この関数はアプリケーションの終了時に呼ばれますが、wxWidgets の内部構造が破棄される前に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another class of problems is related to the fact that the value returned by c_str() itself is also not just a pointer to a buffer but a value of helper class wxCStrData which is implicitly convertible to both narrow and wide strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T034210Z">
        <seg>発生しうる別の問題は c_str() 自身の返却する値もまたバッファのポインタではなく、暗黙的にナロー文字列やワイド文字列へ変換可能なヘルパークラス wxCStrData であることに関連しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another two-dimensional sizer derived from wxGridSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141821Z">
        <seg>wxGridSizer を継承した別の 2 次元サイザーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another two-dimensional sizer derived from wxGridSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T153345Z">
        <seg>wxGridSizer を継承した別の 2 次元サイザーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another very widespread standard is UTF-16 which is used by Microsoft Windows: it encodes the first (approximately) 64 thousands of Unicode code points (the BMP plane) using 16-bit code units (2 bytes) and uses a pair of 16-bit code units to encode the characters beyond this.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T031629Z">
        <seg>非常に広く使われている別の規格として、Microsoft Windows で使われている UTF-16 があります。これは最初の約 64,000 個の Unicode コードポイント (基本多言語面) を 16 ビット (2 バイト) のコード単位で符号化し、それ以降の文字は 16 ビットのコード単位の組で符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another, similar, alternative is to use pointer arithmetic:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T151839Z">
        <seg>別の方法としては、ポインタ計算を使う方法があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any character may have one or more glyph associated; e.g. some of the possible glyphs for the capital letter 'A' are:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T013331Z">
        <seg>どの文字も 1 つまたは複数のグリフと関連付けられています; 例えば、大文字の 'A' であれば以下のようなグリフが関連付けられているかもしれません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any wxWidgets function accepts arguments of either type as both kinds of strings are implicitly converted to wxString, so both</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T041335Z">
        <seg>どの wxWidgets 関数も引数を暗黙的に wxString へ変換するため、どちらの型でも受け付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Apart from defining your event class, you also need to define your own event table macro if you want to use event tables for handling events of this type.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150302Z">
        <seg>イベントクラスの定義とは別に、独自のイベントテーブルマクロも定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Apart from defining your event class, you will also need to define your own event table macro (which is quite long).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T042400Z">
        <seg>イベントクラスの定義とは別に、独自のイベントテーブルマクロも定義する必要があります。 (そしてこれは非常に長くなります) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Appends a child to the sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142326Z">
        <seg>サイザーに子コントロールを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Application Shutdown</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152206Z">
        <seg>アプリケーションの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Application shutdown</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161738Z">
        <seg>アプリケーションの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a convenience, wxDialog::CreateButtonSizer(long flags) can be used to create a standard button sizer in which standard buttons are displayed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145939Z">
        <seg>利便性のために、標準的なボタンを表示する標準ボタンサイザーを作成するのに CreateButtonSizer (long フラグ) を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a convenience, CreateButtonSizer ( long flags ) can be used to create a standard button sizer in which standard buttons are displayed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T131746Z">
        <seg>利便性のために、標準的なボタンを表示する標準ボタンサイザーを作成するのに CreateButtonSizer (long フラグ) を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a slight extension of the above, the handlers can also be unbound at any time with Unbind&lt;&gt;() (and maybe rebound later).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T024945Z">
        <seg>この延長として、Unbind&lt;&gt;() を使ってイベントハンドラのバインディングを任意のタイミングで解除することもできます。 (また、あとから再バインドするかもしれません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an event type is a variable, it can also be declared using wxDECLARE_EVENT() if necessary.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T155125Z">
        <seg>イベント型は変数なので、必要であれば wxDECLARE_EVENT() を使用して宣言することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an ever greater variety of mobile hardware comes to market, it becomes more imperative for wxWidgets applications to adapt to these platforms without putting too much burden on the programmer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T144118Z">
        <seg>様々なモバイル端末が市場に出回るにつれ、プログラマに過度の負担をかけることなく、アプリケーションをそれらのプラットフォームへ適応させることが wxWidgets に求められるようになってきました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, trying to open a non-existing file will usually provoke an error message, but if for some reasons it is unwanted, just use this construction:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T025916Z">
        <seg>例として、存在しないファイルを開こうとすると通常はエラーメッセージが表示されますが、何らかの理由でそれを望まない場合、次のようにするだけです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, we will construct a dialog that will contain a text field at the top and two buttons at the bottom.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T162557Z">
        <seg>例として、上部にテキストフィールドを持ち、下部にふたつのボタンを持つダイアログを構築します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As each event is uniquely defined by its event type, defining a custom event starts with defining a new event type for it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T155001Z">
        <seg>各イベントはイベント型によって一意に定義されるため、カスタムインベントは新しいイベント型を定義するところから始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As for the (real) trace messages, their handling depends on the currently enabled trace masks: if wxLog::AddTraceMask() was called for the mask of the given message, it will be logged, otherwise nothing happens.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T132927Z">
        <seg>(本当の) トレースメッセージについては、現在有効になっているトレースマスクに応じて処理が行われます: 指定されたメッセージのマスクに対して wxLog::AddTraceMask() が呼ばれている場合はメッセージが記録されますが、そうでない場合は何も起こりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As it is common to have more than one object generating events of the same type (e.g. a typical window contains several buttons, all generating the same button click event), checking the event source object or its id allows to distinguish between them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130511T041217Z">
        <seg>複数のオブジェクトが同じ型のイベントを生成すること (例えば、一般的なウィンドウは複数のボタンを持ちますが、それらはすべて同じボタンクリックイベントを生成します) はよくあるため、イベントの生成元オブジェクトやその識別子を確認することで生成元を区別することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As it is easy to see comparing the last fragment with the one above, this macro expands to nothing in the (usual) ANSI mode and prefixes 'L' to its argument in the Unicode mode.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T163504Z">
        <seg>最後の部分を上記の例と比較すると簡単に分かるように、このマクロは (通常の) ANSI モードでは何も起こりませんが、Unicode モードでは引数の接頭語 'L' として展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned above, any window belonging to a sizer may have a border, and it can be specified which of the four sides may have this border, using the wxTOP, wxLEFT, wxRIGHT and wxBOTTOM constants or wxALL for all directions (and you may also use wxNORTH, wxWEST etc instead).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141926Z">
        <seg>上で述べたように、サイザーに所属するウィンドウはどれもボーダーを持ち、四方向のどの方向にボーダーを持たせるか指定することができます。これには wxTOP、wxLEFT、wxRIGHT、wxBOTTOM 定数か、全方向を表す wxALL を使用します。 (代わりに wxNORTH、wxWEST などを使用することも可能です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned above, any window belonging to a sizer may have border, and it can be specified which of the four sides may have this border, using the wxTOP, wxLEFT, wxRIGHT and wxBOTTOM constants or wxALL for all directions (and you may also use wxNORTH, wxWEST etc instead).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T110348Z">
        <seg>上で述べたように、サイザーに所属するウィンドウはどれもボーダーを持ち、四方向のどの方向にボーダーを持たせるか指定することができます。これには wxTOP、wxLEFT、wxRIGHT、wxBOTTOM 定数か、全方向を表す wxALL を使用します。 (代わりに wxNORTH、wxWEST などを使用することも可能です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned above, only command events are recursively applied to the parents event handler in the library itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T054917Z">
        <seg>上で述べたように、コマンドイベントだけが親コントロールのイベントハンドラで再帰的に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned above, the events of the classes deriving from wxCommandEvent are propagated by default to the parent window if they are not processed in this window itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T154600Z">
        <seg>以前述べたように、wxCommandEvent を継承したクラスのイベントは、ウィンドウ自身で処理されなかった場合にデフォルトで親ウィンドウまで伝播します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned above, under Unix systems wxString class can use variable-width UTF-8 encoding for internal representation.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T141540Z">
        <seg>上で述べたように、Unix システムでは wxString クラスの内部表現に可変長の UTF-8 を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned before, all event handlers take a wxEvent-derived argument whose exact class differs according to the type of event and the class of the originating window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T033216Z">
        <seg>以前述べたように、すべてのイベントハンドラは wxEvent を継承した引数を取りますが、その引数のクラスはイベントの型と発生元ウィンドウのクラスに応じて異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As mentioned before, the member functions that handle events do not have to be virtual.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T080644Z">
        <seg>前に述べたように、イベントを処理するメンバ関数は仮想関数である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As not all platforms supported by wxWidgets support Unicode (fully) yet, in many cases it is unwise to write a program which can only work in Unicode environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T145921Z">
        <seg>wxWidgets の対応しているすべてのプラットフォームで Unicode が (完全に) サポートされているわけではないため、Unicode 環境でのみ動作するプログラムを書くのは多くの場合で賢明ではないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As such, it implements the virtual functions of the base class which are called when a message is logged.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T022449Z">
        <seg>そのため、メッセージのロギング時に呼ばれる基底クラスの仮想関数を実装ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As this quite often causes confusion for users, here is a list of system events which will NOT get sent to the parent's event handler:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055040Z">
        <seg>このことについて混乱する人が多いため、親コントロールのイベントハンドラへ送信 "されない" システムイベントの一覧を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As this solution is obviously preferable to the previous ones (think of incompatible encodings for the same language, locale chaos and so on), many modern operating systems support it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T161546Z">
        <seg>この解決策は明らかにこれまでのものより望ましい (同じ言語の互換性のない文字コード、混沌としたロケールなどを想像してみてください) ため、多くのモダンなオペレーティングシステムでは Unicode をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As usual, the accent is put on cross-platform features which explains, for example, the wxTextFile class which may be used to convert between different types of text files (DOS/Unix/Mac).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T055739Z">
        <seg>いつものように、クロスプラットフォーム機能に重点がおかれています。例えば wxTextFile クラスでは異なる形式 (DOS/Unix/Mac) のテキストフアイル同士を変換するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As visual aid to understand the differences between the various concepts described so far, look at the different UTF representations of the same code point:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T032745Z">
        <seg>今までに述べたコンセプトの違いを理解するため、同じコードポイントにおける UTF の表現方法の違いを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As well as the event table in the implementation file, there must also be a DECLARE_EVENT_TABLE macro somewhere in the class declaration.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T032754Z">
        <seg>イベントテーブルをソースファイルに配置するように、クラス宣言のどこかに DECLARE_EVENT_TABLE マクロを配置しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Automatic scrolling dialogs</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T154712Z">
        <seg>ダイアログの自動スクロール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075538Z">
        <seg>BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basically you will need to use the latter when doing inter-thread communication; when you use only the main thread you can also safely use the former.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T145010Z">
        <seg>基本的に、スレッド間通信を行なう場合は後者を選択する必要があります; メインスレッドのみを使用する場合は前者も安全に使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basically, there are only a few things to watch out for:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T150539Z">
        <seg>基本的には、気をつけなければならないことはごく僅かです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because adaptation rearranges your sizer and window hierarchy, it is not fool-proof, and may fail in the following situations:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T145413Z">
        <seg>適応はサイザーとウィンドウの階層構造を変更するため、これは確実に行えるものではなく、以下のような状況では適応に失敗します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because all frames must be destroyed for the application to exit, it is advisable to use parent frames wherever possible when creating new frames, so that deleting the top level frame will automatically delete child frames.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T160707Z">
        <seg>アプリケーションを終了するためにはすべてのフレームを破棄しなければならないため、可能な限り、新しいフレームを作成するときは親フレームを使用するようにするべきです。こうすることで、トップレベルフレームの削除時に自動的に子フレームが削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because of the need to support implicit conversions to both char and wchar_t, wxString implementation is rather involved and many of its operators don't return the types which they could be naively expected to return.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T033944Z">
        <seg>char と wchar_t の暗黙的な相互変換をサポートする必要があるため、 wxString の実装はかなり複雑で、演算子の多くは (返却されるものと) 単純に予想される型を実際には返却しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because of this you should only use wxString::From8BitData() for the strings created using wxString::To8BitData().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T165304Z">
        <seg>このため、wxString::From8BitData() は wxString::To8BitData() によって作られた文字列に対してのみ、使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before anything else happens, wxApp::FilterEvent() is called.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T071254Z">
        <seg>他の処理を行う前に wxApp::FilterEvent() を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before showing how this can be useful, let us explain what log components are: they are simply arbitrary strings identifying the component, or module, which generated the message.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T140532Z">
        <seg>これがどれほど役立つか説明する前に、ログコンポーネントについて説明しましょう: ログコンポーネントとは単純に、メッセージを生成するコンポーネントやモジュールを識別する任意の文字列のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before version 2.0 of wxWidgets, events were handled by the application either by supplying callback functions, or by overriding virtual member functions such as OnSize.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075156Z">
        <seg>wxWidgets 2.0 より前のバージョンでは、イベント処理はコールバック関数か、OnSize といった仮想メンバ関数のオーバーライドで実現されていました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, &amp;HandleExit, wxID_EXIT );
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060727Z">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, &amp;HandleExit, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, &amp;MyFrameHandler::OnFrameExit,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060235Z">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, &amp;MyFrameHandler::OnFrameExit,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, &amp;myFunctor, wxID_EXIT );
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060829Z">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, &amp;myFunctor, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060954Z">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T160151Z">
        <seg>Bind( wxEVT_COMMAND_MENU_SELECTED, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bind(wxEVT_COMMAND_MENU_SELECTED, &amp;MyFrame::OnExit, this, wxID_EXIT);
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T040336Z">
        <seg>Bind(wxEVT_COMMAND_MENU_SELECTED, &amp;MyFrame::OnExit, this, wxID_EXIT);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bind(MY_EVENT, &amp;MyFrame::OnMyEvent, this, ID_MY_WINDOW);
}

// example of code generating the event
void MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T122453Z">
        <seg>Bind(MY_EVENT, &amp;MyFrame::OnMyEvent, this, ID_MY_WINDOW);
}

// イベントを生成するコードの例
void MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bind(MY_PLOT_CLICKED, &amp;MyFrame::OnPlot, this, ID_MY_WINDOW);
}

void MyFrame::OnPlot(MyPlotEvent&amp; event)
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T151235Z">
        <seg>Bind(MY_PLOT_CLICKED, &amp;MyFrame::OnPlot, this, ID_MY_WINDOW);
}

void MyFrame::OnPlot(MyPlotEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binds the given function, functor or method dynamically with the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130511T235325Z">
        <seg>指定された関数、ファンクタ、メンバ関数をイベントへ動的にバインドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitmap Format Handlers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154824Z">
        <seg>ビットマップ形式ハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitmap format handlers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142400Z">
        <seg>ビットマップ形式ハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitmap handlers are not implemented on all platforms, and new ones rarely need to be implemented since wxImage can be used for loading most formats, as noted earlier.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155802Z">
        <seg>ビットマップハンドラはすべてのプラットフォームで実装されているわけでありませんし、新しいものを実装する必要もほとんどないでしょう。なぜなら、前で述べたように wxImage を使用することで大半の形式を読み込むことができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitmaps and Icons</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T151804Z">
        <seg>ビットマップとアイコン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bitmaps and icons overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T134211Z">
        <seg>ビットマップとアイコンの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both strategies are described in details below.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T155725Z">
        <seg>両方の戦略について、以下で詳細に述べています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But MyApp object is deleted after wxWidgets structures that wxCHMHelpController depends on were uninitialized!</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162718Z">
        <seg>しかし、MyApp オブジェクトは wxCHMHelpController の依存する wxWidgets 構造が未初期化状態になった後に削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But although by default only the command events are propagated like this, other events can be propagated as well because the event handling code uses wxEvent::ShouldPropagate() to check whether an event should be propagated.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T154932Z">
        <seg>しかし、コマンドイベントがデフォルトで伝播するとはいえ、他のイベントも伝播させることは可能です。なぜなら、イベント処理コードではwxEvent::ShouldPropagate() を用いてイベントを伝播させるかどうかを確認するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But calling a frame method with the child window pointer instead of the pointer to the frame is, of course, disastrous.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T045642Z">
        <seg>しかし、当然のことながら、フレームのポインタの代わりに子ウィンドウのポインタに対してフレームのメンバ関数を呼ぶと悲惨なことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But even if it does exist at wxWidgets level, it should never be called directly as the event handlers are not part of wxWidgets API and should never be called directly.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155240Z">
        <seg>たとえ wxWidgets の階層に存在したとしても、イベントハンドラは wxWidgets API の一部ではないため、直接呼ぶべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But if you do use them, it is better to use wchar_t pointers rather than char ones to avoid the data loss problems due to conversion as discussed in the previous section.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T154905Z">
        <seg>それでもポインタを使用する場合、前のセクションで述べたような変換に伴うデータ喪失の問題を避けるために char ポインタよりも wchar_t ポインタを使うようにした方が良いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But in all cases wxWidgets represents these events in a uniform way and allows you to handle them in the same way wherever they originate from.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T160356Z">
        <seg>しかし、すべての場合において、wxWidgets ではそれらのイベントを同じ形式で表現しており、イベントの派生元によらず、同一の方法で処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But keep in mind that then the lifetime of myFrameHandler must be greater than that of MyFrame object -- or at least it needs to be unbound before being destroyed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060621Z">
        <seg>ただし、myFrameHandler の寿命を MyFrame よりも長くなるようにするか、もしくは少なくとも破棄される前にバインディングを解除する必要があることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But note that no additional libraries are needed during run-time, however, so you have only the message catalogs to distribute and nothing else.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T160403Z">
        <seg>しかし、実行時には追加のライブラリは必要ないため、メッセージカタログの他には何も配布する必要がないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But this absolutely doesn't mean that using the event tables is the preferred way: handling events dynamically is better in several aspects and you should strongly consider doing it if you are just starting with wxWidgets.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T022242Z">
        <seg>ただし、これはイベントテーブルが適切な方法であることを意味しているわけではまったくありません: ある側面においては動的なイベント処理の方が優れており、wxWidgets を使い始める際には動的にイベント処理を行なうことを強く検討するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, once again, none of these cryptic types is really needed if you just pass the return value of any of the functions mentioned in this section to another function directly.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T171735Z">
        <seg>しかし、実際には上記の関数の戻り値を別の関数へ直接渡すだけで、この謎めいた型を使用する必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default the chain is empty, i.e. there is no next handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T154429Z">
        <seg>デフォルトでは連鎖は空、つまり、次のイベントハンドラは存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default this adaptation is off.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T145238Z">
        <seg>デフォルトではこの適応は無効になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, wxUSE_UNICODE_WCHAR is also defined as 1, however in UTF-8 build (described in the previous section), it is set to 0 and wxUSE_UNICODE_UTF8, which is usually 0, is set to 1 instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T120930Z">
        <seg>デフォルトでは wxUSE_UNICODE_WCHAR も 1 に定義されていますが、(前の章で述べた) UTF-8 ビルドでは 0 に設定されており、通常は 0 に設定されている wxUSE_UNICODE_UTF8 が代わりに 1 に設定されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, GetEventHandler returns a pointer to the window itself unless an application has redirected event handling using SetEventHandler or PushEventHandler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T062844Z">
        <seg>SetEventHandler や PushEventHandler を使用してイベント処理をリダイレクトしていない場合、デフォルトでは GetEventHandler はウィンドウ自身を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, all messages logged by wxWidgets originate from "wx" component or one of its subcomponents such as "wx/net/ftp", while the messages logged by your own code are assigned empty log component.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T140648Z">
        <seg>デフォルトでは wxWidgets によって記録されるすべてのメッセージは "wx" コンポーネントかそのサブコンポーネント ("wx/net/ftp" など) に割り当てられており、あなた自身のコードによって記録されるメッセージは空のログコンポーネントに割り当てられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, all the steps described above will be performed but by setting the level to 1, for example, you can choose to only look for wxStdDialogButtonSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T152910Z">
        <seg>デフォルトでは上で述べた処理がすべて行われますが、レベルを 1 に設定することで wxStdDialogButtonSizer のみを探すようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, most log messages are enabled.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T092231Z">
        <seg>デフォルトでは大半のログメッセージが有効化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Called to log a new record.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111512Z">
        <seg>新しいレコードを記録するために呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Called to log the specified string at given level.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111537Z">
        <seg>指定されたレベルで与えられた文字列を記録するために呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Called to log the specified string.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111550Z">
        <seg>指定された文字列を記録するために呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Calls wxFileTranslationsLoader::AddCatalogLookupPathPrefix().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T041226Z">
        <seg>wxFileTranslationsLoader::AddCatalogLookupPathPrefix() を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Categories</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004637Z">
        <seg>カテゴリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Caveats When Not Using C++ RTTI</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T024505Z">
        <seg>C++ RTTI を使用しない場合の注意点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Changes the selection for the given page, returning the previous selection.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160136Z">
        <seg>指定されたページを変更し、以前選択していたページを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Character type (char or wchar_t)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T150637Z">
        <seg>文字型 (char または wchar_t)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Choosing Unicode Representation</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T092411Z">
        <seg>Unicode 表現の選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004641Z">
        <seg>クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T152931Z">
        <seg>クラス:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxApp</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T155917Z">
        <seg>クラス: wxApp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxBitmap, wxBitmapHandler, wxIcon, wxCursor.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T134216Z">
        <seg>クラス: wxBitmap, wxBitmapHandler, wxIcon, wxCursor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxBufferedDC, wxBufferedPaintDC, wxDC, wxPostScriptDC, wxMetafileDC, wxMemoryDC, wxPrinterDC, wxScreenDC, wxClientDC, wxPaintDC, wxWindowDC.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T140522Z">
        <seg>クラス: wxBufferedDC, wxBufferedPaintDC, wxDC, wxPostScriptDC, wxMetafileDC, wxMemoryDC, wxPrinterDC, wxScreenDC, wxClientDC, wxPaintDC, wxWindowDC.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxConfig</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T145550Z">
        <seg>クラス: wxConfig</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxConfigBase</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T153832Z">
        <seg>クラス: wxConfigBase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxDialog</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T145543Z">
        <seg>クラス: wxDialog</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxDialog, wxDialogLayoutAdapter</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T154459Z">
        <seg>クラス: wxDialog, wxDialogLayoutAdapter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxEvtHandler, wxWindow, wxEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T074637Z">
        <seg>クラス: wxEvtHandler, wxWindow, wxEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxFile, wxDir, wxTempFile, wxTextFile</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T054220Z">
        <seg>クラス: wxFile, wxDir, wxTempFile, wxTextFile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxListCtrl, wxImageList</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004435Z">
        <seg>クラス: wxListCtrl, wxImageList</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxLog, wxLogStderr, wxLogStream, wxLogTextCtrl, wxLogWindow, wxLogGui, wxLogNull, wxLogBuffer, wxLogChain, wxLogInterposer, wxLogInterposerTemp, wxStreamToTextRedirector, wxLogFormatter</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131003Z">
        <seg>クラス: wxLog, wxLogStderr, wxLogStream, wxLogTextCtrl, wxLogWindow, wxLogGui, wxLogNull, wxLogBuffer, wxLogChain, wxLogInterposer, wxLogInterposerTemp, wxStreamToTextRedirector, wxLogFormatter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxLog,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003250Z">
        <seg>クラス: wxLog,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxSizer, wxBoxSizer, wxStaticBoxSizer, wxGridSizer, wxFlexGridSizer, wxGridBagSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T140818Z">
        <seg>クラス: wxSizer, wxBoxSizer, wxStaticBoxSizer, wxGridSizer, wxFlexGridSizer, wxGridBagSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Classes: wxSizer, wxGridSizer, wxFlexGridSizer, wxBoxSizer, wxStaticBoxSizer, CreateButtonSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T110559Z">
        <seg>クラス: wxSizer, wxGridSizer, wxFlexGridSizer, wxBoxSizer, wxStaticBoxSizer, CreateButtonSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Close(true);
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T034309Z">
        <seg>Close(true);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code points are represented in computer memory as a sequence of one or more code units, where a code unit is a unit of memory: 8, 16, or 32 bits.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T025750Z">
        <seg>コードポイントはメモリ上ではひとつ以上の コード単位 の並びとして表現されます。コード単位とは 8、16、32 ビットといったメモリの単位のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Common Features</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T140941Z">
        <seg>共通の機能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Common features</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T125314Z">
        <seg>共通の機能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compatible with wxWidgets 2.8:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124909Z">
        <seg>wxWidgets 2.8 互換:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compiling the .po file into .mo file to be used by the program.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T001253Z">
        <seg>.po ファイルをプログラムから使用される .mo ファイルにコンパイルする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider using string iterators instead if possible or replace this expression with</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123625Z">
        <seg>可能であれば代わりに文字列のイテレータを使用するようにするか、次のように置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constructor for a wxBoxSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145952Z">
        <seg>wxBoxSizer のコンストラクタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Container for sizer items flags providing readable names for them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145234Z">
        <seg>サイザーのフラグを格納するコンテナで、フラグに読みやすい名前を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Contents</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145426Z">
        <seg>Contents</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts C string encoded in UTF-8 to wxString.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T082421Z">
        <seg>UTF-8 で符号化された C 文字列を UTF-8 に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts given buffer of binary data from 8-bit string to wxString.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T161946Z">
        <seg>与えられたバイナリデータを 8 ビット文字列から wxString に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the string to an 8-bit string in ISO-8859-1 encoding in the form of a wxCharBuffer (Unicode ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T162243Z">
        <seg>文字列を ISO-8859-1 の 8 ビット文字列に変換し、wxCharBuffer として返却します。 (Unicode ビルド時のみ) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the string to an ASCII, 7-bit string in the form of a wxCharBuffer (Unicode builds only) or ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T155223Z">
        <seg>wxCharBuffer (Unicode ビルドのみ) もしくは C 文字列 (ANSI ビルド) の形式で文字列を ASCII 7 ビット文字列に変換する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the strings contents to UTF-8 and returns it either as a temporary wxCharBuffer object or as...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T162641Z">
        <seg>文字列を UTF-8 に変換したものを一時的な wxWCharBuffer オブジェクト、または内部文字列のポインタ (UTF-8 ビルド時) として返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Converts the strings contents to the wide character representation and returns it as a temporary wxWC...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T153001Z">
        <seg>文字列をワイド文字表現に変換したものを一時的な wxWCharBuffer オブジェクト (Unix と OS X の場合)、またはワイド文字列である内部文字列のポインタ (Windows の場合) として返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Copy from a source DC to this DC.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T153857Z">
        <seg>コピー元 DC からこの DC へコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Correspondingly, when using a horizontal sizer, each child can be centered, aligned at the bottom or aligned at the top.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T151613Z">
        <seg>同様に、水平方向のサイザーを使用する場合、各子コントロールを中央寄せ、下寄せ、上寄せにすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CreateButtonSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115452Z">
        <seg>CreateButtonSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a sizer with standard buttons.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145917Z">
        <seg>標準ボタンを含むサイザーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates a wxLog class for the application to use for logging errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T120838Z">
        <seg>エラーを記録するためにアプリケーション用の wxLog クラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creates the wxAppTraits object when GetTraits() needs it for the first time.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T120908Z">
        <seg>最初に GetTraits() が必要とした時に wxAppTraits オブジェクトを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Custom Event Summary</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153309Z">
        <seg>カスタムイベントの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Custom event summary</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T130143Z">
        <seg>カスタムイベントの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Customising scrolling adaptation</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T152318Z">
        <seg>スクロールの適応のカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cycles through the tabs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155933Z">
        <seg>タブを循環させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DECLARE_EVENT_TABLE()
};</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081806Z">
        <seg>DECLARE_EVENT_TABLE()
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DECLARE_EVENT_TABLE_ENTRY( wxEVT_PLOT_ACTION, id, -1, \</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164318Z">
        <seg>DECLARE_EVENT_TABLE_ENTRY( wxEVT_PLOT_ACTION, id, -1, \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DECLARE_EVENT_TYPE(wxEVT_MY_EVENT, -1)

DEFINE_EVENT_TYPE(wxEVT_MY_EVENT)

// user code intercepting the event

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155743Z">
        <seg>DECLARE_EVENT_TYPE(wxEVT_MY_EVENT, -1)

DEFINE_EVENT_TYPE(wxEVT_MY_EVENT)

// イベントを捕まえるユーザコード

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Data Loss due To Unicode Conversion Errors</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T134125Z">
        <seg>Unicode の変換エラーによるデータ喪失</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Declares a custom event type.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T154504Z">
        <seg>カスタムイベント型を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default alignment is wxALIGN_LEFT | wxALIGN_TOP.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130521T162139Z">
        <seg>デフォルトのアライメントは wxALIGN_LEFT | wxALIGN_TOP です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Define a new event type associated with the specified event class.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T154453Z">
        <seg>特定のイベントクラスに関連する新しいイベント型を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defining Your Own Event Class</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150218Z">
        <seg>独自のイベントクラスの定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Defining your own event class</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T162712Z">
        <seg>独自のイベントクラスの定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deletes all items in the control.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160300Z">
        <seg>コントロール内のすべての項目を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deletes the specified item.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160228Z">
        <seg>指定された項目を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Deletes the specified page, and the associated window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160010Z">
        <seg>指定されたページと、それに関連するウィンドウを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Depending on what flags are used for the respective dialog item, the dialog item can be made to fill out the available space entirely, i.e. it will grow to a size larger than the minimal size, or it will be moved to either the centre of the available space or to either side of the space.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T123615Z">
        <seg>個々のコントロールに使用されたフラグに応じて空きスペースを満たす、つまり、最小サイズ以上に伸長させるか、空きスペースの中央またはいずれかの側に移動させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Derived from</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145836Z">
        <seg>継承元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Device Contexts</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T142857Z">
        <seg>デバイスコンテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Device context overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T140518Z">
        <seg>デバイスコンテキストの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Directories</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004713Z">
        <seg>ディレクトリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004740Z">
        <seg>ドキュメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documented for information.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T150634Z">
        <seg>参考情報として文書化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Doing it in a naive way doesn't work:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T025608Z">
        <seg>これは単純な方法では実現できません:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DrawMyPicture(dc);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141640Z">
        <seg>DrawMyPicture(dc);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DrawMyPicture(dc);
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154321Z">
        <seg>DrawMyPicture(dc);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Due to limitations of the underlying physical storage, it may not implement 100% of the base class functionality.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T151817Z">
        <seg>根底にある物理ストレージの制約のため、基底クラスの機能を 100% 実装しているわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>During program development you will need the gettext package for working with message catalogs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T160435Z">
        <seg>プログラム開発を行なっている間はメッセージカタログを扱うために gettext パッケージが必要となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dynamic Event Handling</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T035231Z">
        <seg>動的イベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_BUTTON  (BUTTON1,   MyFrame::OnButton1)
END_EVENT_TABLE()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075547Z">
        <seg>EVT_BUTTON  (BUTTON1,   MyFrame::OnButton1)
END_EVENT_TABLE()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_BUTTON(BUTTON1, MyFrame::OnButton1)
wxEND_EVENT_TABLE()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T022454Z">
        <seg>EVT_BUTTON(BUTTON1, MyFrame::OnButton1)
wxEND_EVENT_TABLE()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_CHAR, EVT_KEY_DOWN and EVT_KEY_UP macros handle keyboard input for any window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081321Z">
        <seg>EVT_CHAR、EVT_KEY_DOWN、EVT_KEY_UP マクロは任意のウィンドウのキーボード入力を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_COMMAND  (ID_MY_WINDOW, wxEVT_MY_EVENT, MyFrame::OnMyEvent)
END_EVENT_TABLE()

void MyFrame::OnMyEvent( wxCommandEvent &amp;event )
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155756Z">
        <seg>EVT_COMMAND  (ID_MY_WINDOW, wxEVT_MY_EVENT, MyFrame::OnMyEvent)
END_EVENT_TABLE()

void MyFrame::OnMyEvent( wxCommandEvent &amp;event )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_COMMAND (ID_MY_WINDOW, MY_EVENT, MyFrame::OnMyEvent)
wxEND_EVENT_TABLE()

void MyFrame::OnMyEvent(wxCommandEvent&amp; event)
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150058Z">
        <seg>EVT_COMMAND (ID_MY_WINDOW, MY_EVENT, MyFrame::OnMyEvent)
wxEND_EVENT_TABLE()

void MyFrame::OnMyEvent(wxCommandEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_COMMAND(id, event, func)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T160501Z">
        <seg>EVT_COMMAND(id, event, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_COMMAND_RANGE(id1, id2, event, func)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T160551Z">
        <seg>EVT_COMMAND_RANGE(id1, id2, event, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_CUSTOM(event, id, func)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T160022Z">
        <seg>EVT_CUSTOM(event, id, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_CUSTOM_RANGE(event, id1, id2, func)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T160421Z">
        <seg>EVT_CUSTOM_RANGE(event, id1, id2, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_MENU    (DO_TEST,   MyFrame::DoTest)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075544Z">
        <seg>EVT_MENU    (DO_TEST,   MyFrame::DoTest)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_MENU    (wxID_EXIT, MyFrame::OnExit)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075540Z">
        <seg>EVT_MENU    (wxID_EXIT, MyFrame::OnExit)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_MENU(wxID_EXIT, MyFrame::OnExit)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T024807Z">
        <seg>EVT_MENU(wxID_EXIT, MyFrame::OnExit)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_MENU(DO_TEST, MyFrame::DoTest)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T024809Z">
        <seg>EVT_MENU(DO_TEST, MyFrame::DoTest)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_NOTIFY(event, id, func)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T162544Z">
        <seg>EVT_NOTIFY(event, id, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_NOTIFY_RANGE(event, id1, id2, func)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T162621Z">
        <seg>EVT_NOTIFY_RANGE(event, id1, id2, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_PLOT  (ID_MY_WINDOW,  MyFrame::OnPlot)
END_EVENT_TABLE()

void MyFrame::OnPlot( wxPlotEvent &amp;event )
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164433Z">
        <seg>EVT_PLOT  (ID_MY_WINDOW,  MyFrame::OnPlot)
END_EVENT_TABLE()

void MyFrame::OnPlot( wxPlotEvent &amp;event )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_PLOT(ID_MY_WINDOW, MyFrame::OnPlot)
wxEND_EVENT_TABLE()

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T151229Z">
        <seg>EVT_PLOT(ID_MY_WINDOW, MyFrame::OnPlot)
wxEND_EVENT_TABLE()

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_SIZE    (           MyFrame::OnSize)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075545Z">
        <seg>EVT_SIZE    (           MyFrame::OnSize)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>EVT_SIZE(MyFrame::OnSize)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T024810Z">
        <seg>EVT_SIZE(MyFrame::OnSize)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each entry contains either a string or a number (or a boolean value; support for other types of data such as dates or timestamps is planned) and is identified by the full path to it: something like /MyApp/UserPreferences/Colors/Foreground.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T152016Z">
        <seg>各エントリは文字列か数値 (もしくは真偽値; 日付やタイムスタンプなど、他の型にも対応する予定です) のいずれかを含み、それらは (/MyApp/UserPreferences/Colors/Foreground のような) フルパスで識別されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each entry contains either a string or a number (or a boolean value; support for other types of data such as dates or timestamps is planned) and is identified by the full path to it: something like /MyApp/UserPreferences/Colors/Foreground.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T153929Z">
        <seg>各エントリは文字列か数値 (もしくは真偽値; 日付やタイムスタンプなど、他の型にも対応する予定です) のいずれかを含み、それらは (/MyApp/UserPreferences/Colors/Foreground のような) フルパスで識別されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each represents either a certain way to lay out dialog items in a dialog or it fulfills a special task such as wrapping a static box around a dialog item (or another sizer).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T124500Z">
        <seg>それぞれ、特定の方法でダイアログ内にコントロールを配置したり、コントロール (や他のサイザー) をスタティックボックスで囲むといった特別な処理を行ったりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Either the number of columns or the number or rows is fixed and the grid sizer will grow in the respectively other orientation if new children are added:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T153259Z">
        <seg>列数か行数のどちらかは固定で、新しい子コントロールが追加されるとグリッドサイザーはもう一方の方向に伸びます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enables or disables the event handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T071121Z">
        <seg>イベントハンドラを有効化、無効化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Environment Variables</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155609Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Environment variables</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T154427Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even better, use the same XPMs on all platforms.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T150906Z">
        <seg>もっと良い方法はすべてのプラットフォームで同じ XPM を使用することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even despite caching the index, indexed access should be replaced with sequential access using string iterators.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T151404Z">
        <seg>インデックスのキャッシュを持つとはいえ、インデックスアクセスはイテレータを使った逐次アクセスに置き換えるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though wxWidgets always uses Unicode internally, not all the other libraries and programs do and even those that do use Unicode may use a different encoding of it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T155933Z">
        <seg>wxWidgets が常に内部で Unicode を使うとはいえ、他のすべてのライブラリやプログラムが Unicode を使っているとは限りませんし、Unicode を使っていたとしても、別のエンコーディングを使用しているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event Handlers Chain</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T150657Z">
        <seg>イベントハンドラの連鎖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event Handlers vs Virtual Methods</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T151413Z">
        <seg>イベントハンドラ vs 仮想関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event Handling</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153256Z">
        <seg>イベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event Handling with Event Tables</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T010033Z">
        <seg>イベントテーブルによるイベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event handlers can be bound at any moment.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T040536Z">
        <seg>イベントハンドラは任意のタイミングでバインドできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event handling overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T074632Z">
        <seg>イベント処理の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event macros summary</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080129Z">
        <seg>イベントマクロの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Events and Event Handling</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T151141Z">
        <seg>イベントとイベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Events generated by the user vs programmatically generated events</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060300Z">
        <seg>ユーザの生成したイベントとプログラム的に生成したイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Events of different types can use the same event class, for example both button click and listbox selection events use wxCommandEvent class (as do all the other simple control events), but the key press event uses wxKeyEvent as the information associated with it is different.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130511T034722Z">
        <seg>同じイベントクラスを別のイベント型に使用することができます。例えば、ボタンのクリックイベントとリストボックスの選択イベントは両方とも wxCommandEvent クラスを使用しています (し、他のすべての単純なコントロールイベントも同じものを使用しています) が、キー押下イベントはイベントに関連する情報が異なるため、wxKeyEvent を使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Events that have a higher level of meaning and/or are generated by the window itself, (button click, menu select, tree expand, etc.) are command events and are sent up to the parent to see if it is interested in the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T052930Z">
        <seg>(ボタンクリック、メニュー選択、ツリーの展開といった) 高水準で、ウィンドウ自身が生成するイベントはコマンドイベントと呼ばれ、そのイベントを処理対象とする場合に親コントロールに対して送られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Events that have a higher level of meaning or are generated by the window itself (button click, menu select, tree expand, etc.) are command events and are sent up to the parent to see if it is interested in the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T150333Z">
        <seg>(ボタンクリック、メニュー選択、ツリーの展開といった) 高水準で、ウィンドウ自身が生成するイベントはコマンドイベントと呼ばれ、そのイベントを処理対象とする場合に親コントロールに対して送られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T145825Z">
        <seg>例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extra functionality is automatically given to the dialog box, such as tabbing between items (currently Windows only).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T145801Z">
        <seg>コントロール間のタブ遷移など、自動的に追加の機能が付与される。(Windows のみ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extracting the strings to be translated from the program: this uses the work done in the previous step because xgettext program used for string extraction recognises the standard _() as well as (using its -k option) our wxGetTranslation and extracts all strings inside the calls to these functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T040541Z">
        <seg>翻訳対象の文字列をプログラム中から抽出する: これには前のステップで行った作業の結果を利用します。なぜなら、文字列の抽出に使用する  xgettext プログラムが標準的な _() や (-k オプションを使用することで) wxGetTranslation を識別し、それらの中にある文字列をすべて抽出してくれるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Extracting the strings to be translated from the program: this uses the work done in the previous step because xgettext program used for string extraction recognises the standard _() as well as (using its -k option) our wxGetTranslation and extracts all strings inside the calls to these functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T000843Z">
        <seg>翻訳対象の文字列をプログラム中から抽出する: これには前のステップで行った作業の結果を利用します。なぜなら、文字列の抽出に使用する  xgettext プログラムが標準的な _() や (-k オプションを使用することで) wxGetTranslation を識別し、それらの中にある文字列をすべて抽出してくれるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>File Classes and Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132432Z">
        <seg>ファイルクラスと関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>File classes and functions overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132400Z">
        <seg>ファイルクラスと関数の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Files</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004707Z">
        <seg>ファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Final word of caution: most of these functions may return either directly the pointer to internal string buffer or a temporary wxCharBuffer or wxWCharBuffer object.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T170249Z">
        <seg>最後の注意点です: これらの関数の大半は内部文字列のポインタを直接返却するか、一時的な wxCharBuffer または wxWCharBuffer のオブジェクトを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally notice that writing</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123115Z">
        <seg>最後の注意点として、次のように書くと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, wxString::ToUTF8() and wxString::wc_str() functions never fail and always return a pointer to char string containing the UTF-8 representation of the string or wchar_t string.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T161847Z">
        <seg>最後に、wxString::ToUTF8() 関数と wxString::wc_str() 関数は絶対に失敗せず、UTF-8 で表現された char 文字列や wchar_t 文字列のポインタを常に返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, ProcessEvent is called on the wxApp object.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T030557Z">
        <seg>最後に、wxApp オブジェクトの ProcessEvent が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, i.e., if the event is still not processed, the wxApp object itself (which derives from wxEvtHandler) gets a last chance to process it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T033002Z">
        <seg>最後に、つまり、イベントがまだ処理されていないときに、(wxEvtHandler を継承している) wxApp オブジェクト自身でイベントが処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, if even more control over the output format is needed, then DoLogRecord() can be overridden as it allows to construct custom messages depending on the log level or even do completely different things depending on the message severity (for example, throw away all messages except warnings and errors, show warnings on the screen and forward the error messages to the user's (or programmer's) cell phone -- maybe depending on whether the timestamp tells us if it is day or night in the current time zone).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T144950Z">
        <seg>最後に、出力形式をさらに制御する必要がある場合、DoLogRecord() をオーバーライドすることでログレベルに応じてカスタムメッセージを構築したり、メッセージの重要度に応じてまったく別のことを行なうことさえできます。(例えば警告とエラー以外のメッセージを破棄し、警告は画面に表示して、エラーメッセージはユーザ (もしくはプログラマ) の携帯電話へ転送するなどです。ただ、これは現在のタイムゾーンにおいて昼か夜かがタイムスタンプで分かるかどうかによりますが)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, if you don't like using macros for static initialization of the event tables you may also use wxEvtHandler::Connect to connect the events to the handlers dynamically, during run-time.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T083026Z">
        <seg>最後に、マクロを使ってイベントテーブルを静的に初期化したくない場合、wxEvtHandler::Connect を使用して動的に (実行時に) イベントとイベントハンドラを接続することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, it is enough to override wxLog::DoLogText() if you only want to redirect the log messages and the destination doesn't depend on the message log level.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112346Z">
        <seg>最後に、メッセージのログレベルに関係なく、ログメッセージをリダイレクトしたいだけの場合、wxLog::DoLogText() をオーバーライドすれば充分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, take a look at the i18n sample which shows you how all this looks in practice.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T043730Z">
        <seg>最後に、国際化を実際にどういう風に行うのかを示す例として i18n サンプル を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, the most widespread encoding used for the external Unicode storage (e.g. files and network protocols) is UTF-8 which is byte-oriented and so avoids the endianness ambiguities of UTF-16 and UTF-32.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T032504Z">
        <seg>最後に、Unicode を外部記憶装置 (ファイルやネットワークプロトコルなど) へ格納する際に一番広く使われているのが UTF-8 です。これはバイト指向のエンコーディングであるため、 UTF-16 や UTF-32 のようにエンディアンの曖昧さがありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, there is a special wxT() macro which should enclose all literal strings in the program.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T162941Z">
        <seg>最後に、プログラム中のリテラル文字列を囲む、特別な wxT() マクロがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, there is also a possibility to redirect the output sent to cout to a wxTextCtrl by using the wxStreamToTextRedirector class.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091612Z">
        <seg>最後に、wxStreamToTextRedirector クラスを使用することで cout へ出力した内容を wxTextCtrl にリダイレクトすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, there is also a possibility to redirect the output sent to cout to a wxTextCtrl by using the wxStreamToTextRedirector class.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T015408Z">
        <seg>最後に、wxStreamToTextRedirector クラスを使用することで cout へ出力した内容を wxTextCtrl にリダイレクトすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, there is another additional complication (which, in fact, simplifies life of wxWidgets programmers significantly): when propagating the command events up to the parent window, the event propagation stops when it reaches the parent dialog, if any.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T155514Z">
        <seg>最後に、他にも複雑な仕組みがあります (実際には、これは wxWidgets プログラマの生活を非常にシンプルにしてくれるものです): コマンドイベントが親ウィンドウへ伝播するとき、親ダイアログまで到達した時点で伝播が終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, there is another additional complication (which, in fact, simplifies life of wxWidgets programmers significantly): when propagating the command events upwards to the parent window, the event propagation stops when it reaches the parent dialog, if any.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T033645Z">
        <seg>最後に、他にも複雑な仕組みがあります (実際には、これは wxWidgets プログラマの生活を非常にシンプルにしてくれるものです): コマンドイベントが親ウィンドウへ伝播するとき、親ダイアログまで到達した時点で伝播が終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can allocate identifiers dynamically using wxNewId() function too.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T012026Z">
        <seg>最後に、wxNewId() を使用して動的に識別子を割り当てることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you need to implement the event handlers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T032749Z">
        <seg>最後に、イベントハンドラを実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you will need to generate and post your custom events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T144501Z">
        <seg>最後に、カスタムイベントを生成し、送信する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First define one or more event handlers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T013847Z">
        <seg>最初に、ひとつ以上の イベントハンドラ を定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First of all, each character in an Unicode program takes 2 bytes instead of usual one, so another type should be used to store the characters (char only holds 1 byte usually).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151208Z">
        <seg>最初に、プログラム中の文字について、通常であれば 1 文字あたり 1 バイトですが、Unicode プログラムの場合 2 バイトを消費するため、文字を格納するために別の型を使用する必要があります。 (char 型は通常 1 バイトしか保持できません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First of all, no knowledge of wxLog classes is needed to use them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131136Z">
        <seg>まず最初に、wxLog クラス郡を使用するのにその知識は必要とされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First of all, no knowledge of wxLog classes is needed to use them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T010433Z">
        <seg>まず最初に、wxLog クラス郡を使用するのにその知識は必要とされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First of all, you see that there are no more #ifdefs at all.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T161813Z">
        <seg>最初に、#ifdef がまったくないことが分かると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a set of dialog convenience functions, including file selection, see Dialog functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T150652Z">
        <seg>ファイルの選択を含む、ダイアログの便利関数は ダイアログ関数 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a set of dialog convenience functions, including file selection, see Dialogs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T154535Z">
        <seg>ファイルの選択を含む、ダイアログの便利関数は ダイアログ を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For all normal, informational messages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131732Z">
        <seg>すべての通常 (通知) メッセージ用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example a typical loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T151546Z">
        <seg>例えば典型的なループである、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example it is possible to filter out a number of key events sent by the system to a native text control by overriding wxTextCtrl and defining a handler for key events using EVT_KEY_DOWN.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T085703Z">
        <seg>例えば、ネイティブテキストコントロールに送られるキーイベントをフィルタリングする場合、wxTextCtrl をオーバーライドし、EVT_KEY_DOWN を使用してキーイベントハンドラを定義することで実現できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T034203Z">
        <seg>以下に例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a function to get the length of a wide-character string is called wcslen() (compare with strlen() - you see that the only difference is that the "str" prefix standing for "string" has been replaced with "wcs" standing for "wide-character string").</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151421Z">
        <seg>例えば、ワイド文字列の長さを取得する関数は wcslen() と呼ばれます。(strlen() と比べると、違いは "string" を表す接頭語 "str" が "wide-character string" を表す "wcs" に変わっているだけであることが分かると思います) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, clicking on a button, selecting an item from a list box and pressing a key on the keyboard all generate events with different event types.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T161205Z">
        <seg>例えば、ボタンクリック、リストボックスの選択、キー押下はすべて別々のイベント型のイベントを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if the standard font as well as the overall design of Linux/GTK widgets requires more space than on Windows, the initial dialog size will automatically be bigger on Linux/GTK than on Windows.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T124150Z">
        <seg>例えば、標準フォントが Linux/GTK ウィジェット全体のデザインと同じように Windows の場合より多くのスペースを必要とする場合、ダイアログの初期サイズは Windows より Linux/GTK の方が自動的に大きくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, it's possible to do some initialization first and only bind the handlers if and when it succeeds.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T040630Z">
        <seg>例えば、先に何かの初期化処理を行い、それが成功したときにのみ、イベントハンドラをバインドすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, only error messages, or only error messages and warnings might be logged, filtering out all informational messages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T085651Z">
        <seg>例えば、すべての通知メッセージをフィルタリングして、エラーメッセージのみ、もしくはエラーメッセージと警告メッセージのみを記録しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the operator[] doesn't return neither a char nor a wchar_t but an object of a helper class wxUniChar or wxUniCharRef which is implicitly convertible to either.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T122042Z">
        <seg>例えば、[] 演算子 が返却する型は char でもwchar_t でもなく、どちらの型にも変換可能なヘルパークラスである wxUniChar か wxUniCharRef です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this code may crash:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162431Z">
        <seg>例えば、このコードはクラッシュするでしょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you could define a class inheriting from wxLog which shows all the log messages in some part of your main application window reserved for the message output without interrupting the user work flow with modal message boxes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T120750Z">
        <seg>例えば、モーダルメッセージボックスでユーザの操作を妨げないようにするため、メインウィンドウの一部にすべてのログメッセージを表示するように wxLog を継承したクラスを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, you might want to invoke a dialog editor in your application that changes aspects of dialog boxes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T041412Z">
        <seg>例えば、ダイアログの外見を変更するためのダイアログエディタをアプリケーション内で起動したいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081820Z">
        <seg>以下に例を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For information about the new wxWidgets resource system, which can describe sizer-based dialogs, see the XML-based resource system overview.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T115321Z">
        <seg>サイザーに基づいたダイアログを作成可能な wxWidgets の新しいリソースシステムについての情報は XML に基づくリソースシステムの概要 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For information about the wxWidgets resource system, which can describe sizer-based dialogs, see the XML Based Resource System (XRC).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T140937Z">
        <seg>サイザーに基づいたダイアログを作成可能な wxWidgets のリソースシステムについての情報は XML に基づくリソースシステム (XRC) を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instance, it is not recommended to use the Windows registry for amounts of data more than a couple of kilobytes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T150545Z">
        <seg>例えば、Windows のレジストリに数キロバイト以上のデータを格納することは推奨されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For menu commands and most control commands (such as button presses), wxCommandEvent is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081510Z">
        <seg>メニューコマンドと (ボタン押下といった) 大半のコマンドコントロールでは wxCommandEvent が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more detailed information on how to use sizers programmatically, please refer to the section Programming with Sizers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T124732Z">
        <seg>サイザーをプログラムで使用する方法については サイザーを用いたプログラミング を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more detailed information on how to use sizers programmatically, please refer to the section Programming with wxBoxSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141118Z">
        <seg>サイザーをプログラムで使用する方法については サイザーを用いたプログラミング を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more info about how wxString works, please see the wxString Overview.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T091920Z">
        <seg>wxString の挙動についての詳細は wxString の概要 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information about converters and Unicode see the wxMBConv classes overview.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T144515Z">
        <seg>Unicode の変換についての詳細は  wxMBConv クラスの概要 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more information, please see Programming with wxBoxSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T124807Z">
        <seg>より詳しい情報は wxBoxSizer を用いたプログラミング を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For posting events to a certain event handler there are two possibilities: using wxEvtHandler::AddPendingEvent or using wxEvtHandler::QueueEvent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T144839Z">
        <seg>特定のイベントハンドラへイベントを送信する方法は 2 種類あります: wxEvtHandler::AddPendingEvent を使用する方法と wxEvtHandler::QueueEvent を使用する方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For programming information, see wxGridSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T153320Z">
        <seg>プログラミングに関する情報は wxGridSizer を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For size events, wxSizeEvent is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081247Z">
        <seg>リサイズイベントでは wxSizeEvent が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the full list of event classes, please see the event classes group page.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T013024Z">
        <seg>イベントクラスの完全な一覧は イベントクラスグループ を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this purpose, a stretch factor may be assigned to each child, where the default value of 0 indicates that the child will not get more space than its requested minimum size.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T145811Z">
        <seg>このため、子コントロールに対してストレッチ係数を割り当てます。ストレッチ係数のデフォルト値は 0 で、これは必要とする最小サイズ以上のスペースを取得しないことを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this the wxLogChain and wxLogPassThrough can be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T030523Z">
        <seg>このために wxLogChain と wxLogPassThrough を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this the wxLogChain, wxLogInterposer, and wxLogInterposerTemp can be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T114628Z">
        <seg>このために wxLogChain、wxLogInterposer、wxLogInterposerTemp を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you should only know about wxLogXXX() functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131206Z">
        <seg>そのため、wxLogXXX() 関数 についてのみ、知っておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this, you should only know about wxLogXXX() functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T004647Z">
        <seg>そのため、wxLogXXX() 関数についてのみ、知っておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For verbose output.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131802Z">
        <seg>詳細な出力用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For warnings - they are also normally shown to the user, but don't interrupt the program work...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131614Z">
        <seg>警告メッセージ (通常はユーザに通知されますが、プログラムの動作を妨げないメッセージ) 用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From a practical point of view, using Unicode is almost a requirement when writing applications for international audience.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T031610Z">
        <seg>実用的な観点から見ると、世界中の人に向けてアプリケーションを書く時には Unicode の使用がほぼ必須と言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From another point of view, they provide an interface which hides the differences between the Windows registry and the standard Unix text format configuration files.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T151327Z">
        <seg>別の見方をすれば、これらのクラスは Windows のレジストリと Unix のテキスト形式の設定ファイルの差異を隠蔽するインタフェースを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From wxWidgets 2.0, event tables are used instead, with a few exceptions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075240Z">
        <seg>wxWidgets 2.0 からは一部の例外を除き、代わりに イベントテーブル が使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions: see Files and Directories.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T072515Z">
        <seg>関数: ファイルとディレクトリ を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Functions: see file functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T072621Z">
        <seg>関数: ファイル関数 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Further details (including how to read/write these entries) may be found in the documentation for wxConfigBase.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T152236Z">
        <seg>(エントリの読み書きの仕方を含む) より詳しい情報は wxConfigBase のドキュメントにあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>GTK 2.0 only accepts UTF-8 strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T143410Z">
        <seg>GTK 2.0 は UTF-8 文字列のみを受け付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>General approach</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T130221Z">
        <seg>一般的なアプローチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generally speaking you should only use non-default UTF-8 build in specific circumstances e.g. building for resource-constrained systems where the overhead of conversions (and also reduced memory usage of UTF-8 compared to UTF-32 for the European languages) can be important.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T033555Z">
        <seg>一般的に言うと、リソースが限られており、変換にかかるオーバーヘッド (と、ヨーロッパ言語において UTF-32 の代わりに UTF-8 を使用することによるメモリ消費量の削減) が重要となる、といった特殊な状況下でのみ、非標準の UTF-8 ビルドを使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generation is as simple as instancing your custom event class and initializing its internal fields.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T144702Z">
        <seg>生成はカスタムイベントのインスタンス化と内部変数の初期化と同じくらい単純です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic Event Table Macros</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T012407Z">
        <seg>汎用的なイベントテーブルマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic event table macros</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T160020Z">
        <seg>汎用的なイベントテーブルマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>GetEventHandler()-&gt;ProcessEvent( event );
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155957Z">
        <seg>GetEventHandler()-&gt;ProcessEvent( event );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Global instance of a wxPoint initialized with values (-1,-1).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142254Z">
        <seg>(-1,-1) に初期化された wxPoint のグルーバルインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Global instance of a wxSize object initialized to (-1,-1).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142314Z">
        <seg>(-1,-1) に初期化された wxSize のグルーバルインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Globally enable or disable logging.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T092213Z">
        <seg>ロギングをグローバルに有効化、または無効化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are all of them:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T005029Z">
        <seg>以下にすべての関数を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here are some examples, using a wxString object s and some integer n:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T122441Z">
        <seg>その例を以下に示します。この例では wxString オブジェクト s と、ある整数 n を使用しています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is a sample:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T152804Z">
        <seg>以下に例を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is an example, taken mostly from the wxPlot library, which is in the contrib section of the wxWidgets sources.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164140Z">
        <seg>wxPlot ライブラリから抜粋した例を以下に示します。このコードは wxWidgets のソースコードの contrib セクションにあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here is an example:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150318Z">
        <seg>例を以下に示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's an example of an event table.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075537Z">
        <seg>イベントテーブルの例を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's how you'd do the previous example with wxSizerFlags:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145423Z">
        <seg>wxSizerFlags を使用して上記の例と同じことをすると以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's how you'd do the previous example with wxSizerFlags:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145412Z">
        <seg>wxSizerFlags を使用して上記の例と同じことをすると以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, you can examine the events coming from buttons and windows, and if acceptable, pass them through to the original event handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T065445Z">
        <seg>ここでは、ボタンやウィンドウから送られてくるイベントを検証し、それが適用可能なものである場合に元のイベントハンドラへ渡す、ということを行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hides or shows the dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T150116Z">
        <seg>ダイアログの表示・非表示を切り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hiding Controls Using Sizers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T140945Z">
        <seg>サイザーによるコントロールの非表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hiding controls using sizers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T151438Z">
        <seg>サイザーによるコントロールの非表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How Events Propagate Upwards</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T153611Z">
        <seg>上位階層へのイベント伝播方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How Events are Processed</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153305Z">
        <seg>イベント処理の仕組み</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How events are processed</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T083106Z">
        <seg>イベント処理の仕組み</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However code such as</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T170708Z">
        <seg>しかし、以下のようなコードは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However different formats have specific advantages and disadvantages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T033450Z">
        <seg>しかし、各フォーマットにはそれぞれ利点と欠点があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However if the program never manipulates 8 bit strings internally, using char* pointers is safe as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T141012Z">
        <seg>しかし、内部で絶対に 8 ビット文字列を操作しないというのであれば、char* ポインターを使用しても安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However if you define a custom log target, messages may be logged out of order, e.g. messages from the main thread with later timestamp may appear before messages with earlier timestamp logged from other threads.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T120049Z">
        <seg>しかし、カスタムログターゲットを定義している場合、メッセージの記録される順がバラバラになる可能性があります。例えば、より後のタイムスタンプを持つメインスレッドのメッセージがより早いタイムスタンプを持つ他のスレッドのメッセージの前に表示されることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However initializing the string using wxString::FromUTF8() method and then accessing it as a char string via its wxString::c_str() method is a recipe for disaster as the program may work perfectly well during testing on Unix systems using UTF-8 locale but completely fail under Windows where UTF-8 locales are never used because wxString::c_str() would return an empty string.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T034628Z">
        <seg>しかし、wxString::FromUTF8() 関数で初期化した文字列に対して、wxString::c_str() 関数を使って char 文字列のようにアクセスしようとするのは災いのもとです。そのプログラムは UTF-8 ロケールを使用している Unix システムでテストしている間は完璧に動作するでしょうが、UTF-8 ロケールを使用していない Windows では wxString::c_str() が空文字列を返すかもしれないため、全く動作しなくなるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However writing</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T045715Z">
        <seg>しかし、次のように書くと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However you should be aware of the potential problems covered by the following section.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T092358Z">
        <seg>しかし、次の章で触れる、潜在的な問題については注意すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, wxSizer also offers a separate method which can tell the sizer not to consider that control in its size calculations.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141603Z">
        <seg>しかし、wxSizer はそのコントロールのサイズを考慮しないようにする別の関数も提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, as wxWidgets uses wxLogError() in this situation, the exact error code (and the corresponding error message) will be given to the user together with "high level" message about data file writing error.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091846Z">
        <seg>しかし、このような状況で wxLogError() を使用すれば、書き込みに失敗したファイルに関する "高レベル" なメッセージとともに正確なエラーコード (と対応するエラーメッセージ) が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, as wxWidgets uses wxLogError() in this situation, the exact error code (and the corresponding error message) will be given to the user together with "high level" message about data file writing error.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T021817Z">
        <seg>しかし、このような状況で wxLogError() を使用すれば、書き込みに失敗したファイルに関する "高レベル" なメッセージとともに正確なエラーコード (と対応するエラーメッセージ) が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the original sizer hierarchy will still hold until Show or ShowModal is called.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T154259Z">
        <seg>ただし、Show または ShowModal が呼ばれるまではサイザーの元の階層構造が保持されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, unlike the Unicode build mode of the previous versions of wxWidgets, this support is mostly transparent: you can still continue to work with the narrow (i.e. current locale-encoded char*) strings even if wide (i.e. UTF16-encoded wchar_t* or UTF8-encoded char*) strings are also supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T041201Z">
        <seg>しかし、wxWidgets の以前のバージョンにおける Unicode ビルドモードとは異なり、この対応はほとんど透過的です： ワイド 文字列 (UTF16 で符号化された wchar_t* か、UTF8 で符号化された char* のことです) がサポートされていても、引き続き  ナロー 文字列 (現在のロケールで符号化された char* のことです) を使用することができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, wxSizer also offers a separate method which can tell the sizer not to consider that control in its size calculations.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T152022Z">
        <seg>しかし、wxSizer はそのコントロールのサイズを考慮しないようにする別の関数も提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IE=9</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T042759Z">
        <seg>IE=9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If wxDialog::GetContentWindow returns a window derived from wxBookCtrlBase, the pages are made scrollable and no other adaptation is done.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T151049Z">
        <seg>wxDialog::GetContentWindow が wxBookCtrlBase を継承したウィンドウを返却する場合、ページがスクロール可能になるだけで、それ以外の適応は行われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it returns anything but -1 (default), the event handling stops immediately.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T071056Z">
        <seg>-1 (デフォルト) 以外の値を返却した場合、ただちにイベント処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no standard buttons were found, the whole dialog content will scroll.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T152036Z">
        <seg>標準ボタンが見つからなかった場合、ダイアログ全体がスクロールされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If several windows have a value above zero, the value is interpreted relative to the sum of all weight factors of the sizer, so when adding two windows with a value of 1, they will both get resized equally much and each half as much as the sizer owning them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T130620Z">
        <seg>いくつかのウィンドウが 0 より大きい値を持つ場合、その値はサイザーのすべての重み係数の和に対する相対値として解釈されます。そのため、値が 1 であるウィンドウをふたつ追加する場合、両方とも同じようにリサイズされ、それぞれサイザーの半分の大きさになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If that search failed too, wxWidgets finds 'loose' standard buttons (in any kind of sizer) and adds them to a wxStdDialogButtonSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T152020Z">
        <seg>これも見つからなかった場合、wxWidgets は (任意の種類のサイザーに含まれる) 'ゆるい' 標準ボタンを探し、 wxStdDialogButtonSizer に追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If that search failed, wxWidgets looks for a horizontal wxBoxSizer with one or more standard buttons, with identifiers such as wxID_OK and wxID_CANCEL.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T151803Z">
        <seg>もしも見つからなかった場合、wxID_OK や wxID_CANCEL などの識別子を持つ、ひとつ以上の標準ボタンを含む水平方向の wxBoxSizer を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the dialog box is modal, the calling program is blocked until the dialog box is dismissed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T154505Z">
        <seg>ダイアログボックスが モーダル の場合、ダイアログボックスが閉じられるまでプログラムがブロックする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the dialog box is modal, the calling program is blocked until the dialog box is dismissed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T145938Z">
        <seg>ダイアログボックスが モーダル の場合、ダイアログボックスが閉じられるまでプログラムがブロックする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the environment in which your program is running is under your control -- as is quite often the case in such scenarios -- consider ensuring that the system always uses UTF-8 locale and use --enable-utf8only configure option to disable support for the other locales and consider all strings to be in UTF-8.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T033637Z">
        <seg>(そのような状況では、よくこの場合に当てはまりますが) もしプログラムの実行される環境を制御できるのであれば、システムが常に UTF-8 ロケールを使用するようにし、--enable-utf8only オプションを使用して他のロケールのサポートを無効にすることを考慮してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the message catalogs are not installed in this default location you may explicitly use AddCatalogLookupPathPrefix() to still allow wxWidgets to find them but it is strongly recommended to use the default directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T001947Z">
        <seg>このデフォルトの場所にメッセージカタログをインストールしない場合、明示的に AddCatalogLookupPathPrefix() を使用することで wxWidgets がその場所を探すようになります。ただし、デフォルトのディレクトリを使用することを強く推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the message catalogs are not installed in this default location you may explicitly use wxLocale::AddCatalogLookupPathPrefix() to still allow wxWidgets to find them but it is strongly recommended to use the default directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T043355Z">
        <seg>このデフォルトの場所にメッセージカタログをインストールしない場合、明示的に AddCatalogLookupPathPrefix() を使用することで wxWidgets がその場所を探すようになりますが、デフォルトのディレクトリを使用することを強く推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the object is a wxWindow and has an associated validator, wxValidator gets a chance to process the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T032524Z">
        <seg>オブジェクトが wxWindow で、かつ、関連するバリデータを持っている場合、wxValidator でイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the object is a wxWindow and the event is set to propagate (by default only wxCommandEvent-derived events are set to propagate), then the processing restarts from the step (1) (and excluding the step (7)) for the parent window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T142127Z">
        <seg>オブジェクトが wxWindow で、かつ、イベントが伝播するように設定されている (デフォルトでは wxCommandEvent を継承したイベントのみ、伝播するよう設定されています) 場合、親ウィンドウに対してステップ (1) から (ステップ (7) を除いて) 再度処理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the object is a wxWindow and the event is set to set to propagate (in the library only wxCommandEvent based events are set to propagate), ProcessEvent is recursively applied to the parent window's event handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T142314Z">
        <seg>オブジェクトが wxWindow で、かつ、イベントが伝播するように設定されている (ライブラリの中では wxCommandEvent の派生イベントのみ、伝播するよう設定されています) 場合、親ウィンドウの ProcessEvent が再帰的に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the object is a wxWindow, ProcessEvent is recursively called on the window's wxValidator.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T024132Z">
        <seg>オブジェクトが wxWindow の場合、ProcessEvent はウィンドウの wxValidator から再帰的に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the object is disabled (via a call to wxEvtHandler::SetEvtHandlerEnabled) the function skips to step (6).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T024038Z">
        <seg>(wxEvtHandler::SetEvtHandlerEnabled を呼ぶことで) オブジェクトが無効化されている場合、(6) までスキップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this behaviour is not desirable wxApp::SetExitOnFrameDelete can be called to change it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124028Z">
        <seg>この振る舞いが望ましくない場合、wxApp::SetExitOnFrameDelete を呼ぶことで振る舞いを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this behaviour is not desirable wxApp::SetExitOnFrameDelete can be called to change it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162007Z">
        <seg>この振る舞いが望ましくない場合、wxApp::SetExitOnFrameDelete を呼ぶことで振る舞いを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this event handler is disabled via a call to wxEvtHandler::SetEvtHandlerEnabled() the next three steps are skipped and the event handler resumes at step (5).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T071243Z">
        <seg>イベントハンドラが wxEvtHandler::SetEvtHandlerEnabled() によって無効化されている場合、次の 3 ステップはスキップし、(5) から処理を継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this fails, the base class table is tried, and so on until no more tables exist or an appropriate function was found, in which case the function exits.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T040404Z">
        <seg>ProcessEvent が true を返さなかった場合、基底クラスのイベントテーブルを検索します。これを順次、イベントテーブルが存在しなくなるか、適切な関数が見つかるまで行います。適切な関数が見つからなかった場合、処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this object is not a window but the next handler exists, the event is passed to its parent if it is a window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T143204Z">
        <seg>このオブジェクトがウィンドウでないが次のイベントハンドラが存在する場合、親コントロールがウィンドウであれば親コントロールにイベントを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this problem can be solved globally, you can derive a new adapter class from wxStandardDialogLayoutAdapter and override its CreateScrolledWindow function to return an instance of your own class.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T154114Z">
        <seg>アプリケーション全体でグローバルにこの問題を解決できるようであれば wxStandardDialogLayoutAdapter を継承した新しいアダプタクラスを作成し、作成したクラスのインスタンスを返却するように CreateScrolledWindow 関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this returns true, the function exits.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T024357Z">
        <seg>ProcessEvent が true を返した場合、処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If this succeeds, the function exits.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T030211Z">
        <seg>検索に成功した場合、処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you believe that it would be advantageous to use UTF-8 for the strings in your particular application, you may rebuild wxWidgets to use UTF-8 as explained above (notice that this is currently not supported under Microsoft Windows and arguably doesn't make much sense there as Windows itself uses UTF-16 and not UTF-8) but be sure to be aware of the performance implications (see Performance Implications of Using UTF-8) of using UTF-8 in wxString before doing this!</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T095112Z">
        <seg>もしあなたのアプリケーションで UTF-8 が好都合だと思うのなら、上で説明したように UTF-8 を使用するように wxWidgets をビルドし直してください。 (今のところ、Microsoft Windows ではこれに対応しておらず、Windows 自身は UTF-8 ではなく UTF-16 を使用しているため、明らかにあまり意味がないことに注意してください) ただし、これを行う前に wxString で UTF-8 を使用することによる性能への影響 (UTF-8 を使用することによる性能への影響 参照) を必ず意識するようにしてください!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile your program in ANSI mode you can still define wxUSE_WCHAR_T to get some limited support for wchar_t type.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T144825Z">
        <seg>プログラムを ANSI モードでコンパイルした場合でも、 wxUSE_WCHAR_T を定義することで wchar_t の限定的な機能を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you do want to handle messages of different levels differently, then you should override wxLog::DoLogTextAtLevel().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T122739Z">
        <seg>異なるレベルのメッセージを別々に処理したい場合、wxLog::DoLogTextAtLevel() をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you ever have to call a window's event handler manually, use the GetEventHandler function to retrieve the window's event handler and use that to call the member function.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T062722Z">
        <seg>もし手動でウィンドウのイベントハンドラを呼ぶ必要がある場合、GetEventHandler 関数でウィンドウのイベントハンドラを取得し、そのメンバ関数を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you just want to use a wxCommandEvent with a new event type, use one of the generic event table macros listed below, without having to define a new event class yourself.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T145820Z">
        <seg>新しいイベント型で wxCommandEvent を使用したいだけの場合、新しいイベントクラスを自分自身で定義する必要はなく、以下の汎用イベントテーブルマクロのひとつを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you just want to use a wxCommandEvent with a new event type, you can then use one of the generic event table macros listed below, without having to define a new macro yourself.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T042232Z">
        <seg>新しいイベント型で wxCommandEvent を使用したいだけの場合、自分自身で新しいマクロを定義するのではなく、以下の汎用的なイベントテーブルマクロを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to specify a different behaviour for some reason, you can use SetExtraStyle(wxWS_EX_BLOCK_EVENTS) explicitly to prevent the events from being propagated beyond the given window or unset this flag for the dialogs which have it on by default.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T050456Z">
        <seg>なんらかの理由で別の振る舞いをさせる必要がある場合、明示的に SetExtraStyle(wxWS_EX_BLOCK_EVENTS) を使用することでイベントが指定されたウィンドウ外へ伝播するのを止めたり、ダイアログ (デフォルトでこのフラグが設定されています) のフラグを解除したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to specify a different behaviour for some reason, you can use wxWindow::SetExtraStyle(wxWS_EX_BLOCK_EVENTS) explicitly to prevent the events from being propagated beyond the given window or unset this flag for the dialogs that have it on by default.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T160130Z">
        <seg>なんらかの理由で別の振る舞いをさせる必要がある場合、明示的に SetExtraStyle(wxWS_EX_BLOCK_EVENTS) を使用することでイベントが指定されたウィンドウ外へ伝播するのを止めたり、ダイアログ (デフォルトでこのフラグが設定されています) のフラグを解除したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you pass wxID_ANY to a window constructor, an identifier will be generated for you automatically by wxWidgets.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130517T171229Z">
        <seg>ウィンドウのコンストラクタに wxID_ANY を渡した場合、wxWidgets が自動的に識別子を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you pass wxID_ANY to a window constructor, an identifier will be generated for you automatically by wxWidgets.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T075041Z">
        <seg>ウィンドウのコンストラクタに wxID_ANY を渡した場合、wxWidgets が自動的に識別子を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you translate the accelerator modifier names (Ctrl, Alt and Shift) in your menu labels, you may find the accelerators no longer work.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T003227Z">
        <seg>もしメニューラベル内のアクセラレータの修飾子名 ( Ctrl、Alt、Shift) を翻訳した場合、アクセラレータが動作しなくなることに気がつくでしょう。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you use wxNewId() consistently in your application, you can be sure that your identifiers don't conflict accidentally.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T012416Z">
        <seg>もしアプリケーション内で一貫して wxNewId() を使用するようにすれば、偶発的な識別子の衝突を避けることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implements the calculation of a box sizer's dimensions and then sets the size of its children (calling wxWindow::SetSize if the child is a window).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T150430Z">
        <seg>ボックスサイザーの大きさを計算し、子コントロールのサイズをセットします。 (子コントロールがウィンドウの場合、wxWindow::SetSize を呼びます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implements the calculation of a box sizer's minimal.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T150702Z">
        <seg>ボックスサイザーの最小サイズを計算します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a GUI application, this function posts event to the specified dest object using wxEvtHandler::AddP...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T144104Z">
        <seg>GUI アプリケーションにおいて、この関数は wxEvtHandler::AddPendingEvent() を使用して特定の送信先オブジェクトへイベントを送信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a similar way, wxString provides access to its contents as either wchar_t or char character buffer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T090940Z">
        <seg>同様に、wchar_t と char のどちらででも wxString の保持する文字列にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to switching adaptation on and off globally and per dialog, you can choose how aggressively wxWidgets will search for standard buttons by setting wxDialog::SetLayoutAdaptationLevel.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T152753Z">
        <seg>グローバル、またはダイアログごとの適応の切り替えに加えて、wxDialog::SetLayoutAdaptationLevel を設定することでどれだけ積極的に標準ボタンを探しに行くかを選択することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition to using a method of the object generating the event itself, you can use a method from a completely different object as an event handler:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060203Z">
        <seg>イベントを生成したオブジェクトに加えて、完全に別のオブジェクトのメンバ関数をイベントハンドラとして使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In addition, there will be a thin border around all controls to make the dialog look nice and - to make matter worse - the buttons shall be centred as the width of the dialog changes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T130437Z">
        <seg>加えて、ダイアログの見た目を良くするためにすべてのコントロールの周りに薄いボーダーを設定し、さらに悪いことに、ダイアログの幅の変更にあわせてボダンを中央寄せで配置するものとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In any case, each implementation of wxConfigBase does its best to make the data look the same way everywhere.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T153913Z">
        <seg>どのような場合でも、wxConfigBase の各実装はどこでも同じ方法でデータを扱えるように最善を尽くします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In any case, each implementation of wxConfigBase does its best to make the data look the same way everywhere.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T151718Z">
        <seg>どのような場合でも、wxConfigBase の各実装はどこでも同じ方法でデータを扱えるように最善を尽くします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In emergencies the wxExit function can be called to kill the application however normally the application shuts down automatically, see below.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T160945Z">
        <seg>緊急の場合は wxExit 関数を使用してアプリケーションを強制終了させることができます。しかし、通常、アプリケーションは自動的にシャットダウンされます。 以下を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In emergencies the wxExit function can be called to kill the application however normally the application shuts down automatically, see Application Shutdown.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T133418Z">
        <seg>緊急の場合は wxExit 関数を使用してアプリケーションを強制終了させることができます。しかし、通常、アプリケーションは自動的にシャットダウンされます。 アプリケーションの終了 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, identifiers do not need to be unique across your entire application as long they are unique within the particular context you're interested in, such as a frame and its children.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130517T171150Z">
        <seg>実際には、特定のコンテキスト (フレームやその子コントロール) 内で一意であれば、アプリケーション全体で一意である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, identifiers do not need to be unique across your entire application just so long as they are unique within a particular context you're interested in, such as a frame and its children.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T074556Z">
        <seg>実際には、特定のコンテキスト (フレームやその子コントロール) 内で一意であれば、アプリケーション全体で一意である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, the event handler probably doesn't even exist in the base class as the default behaviour is often implemented in platform-specific code by the underlying toolkit or OS itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T154809Z">
        <seg>実際には、デフォルトの振る舞いは使用しているツールキットや OS によってプラットフォーム依存のコード内に実装されることが多いため、おそらく基底クラスにはイベントハンドラが存在しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In fact, you don't have to derive a new class from a window class if you don't want to.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T041124Z">
        <seg>実際のところ、ウィンドウクラスを継承して新しいクラスを作成したくない場合は、必ずしもそうする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In many cases (particularly dialogs under Unix and normal frames) the main window will be resizable by the user and this change of size will have to get propagated to its children.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130521T154423Z">
        <seg>多くの場合で (特に、Unix のダイアログや通常のフレームの場合)、メインウィンドウはリサイズ可能であり、サイズの変更を子コントロールへ伝播させる必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In many cases this works even for changing the behaviour of native controls.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T085456Z">
        <seg>ネイティブコントロールの振る舞いを変更するような場合にも、これは動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to define a new event type, there are principally two choices.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T150930Z">
        <seg>新しいイベント型を定義する方法として、主に 2 種類の選択肢があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In other cases you may need some information carried by the event argument, as in:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T034401Z">
        <seg>他の場合では、以下のように event 引数の持つ情報が必要になるかもしれません:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In our case, we want the text area to grow with the dialog, whereas the button shall have a fixed size.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130521T154608Z">
        <seg>この例では、ダイアログに合わせてテキストエリアのサイズを変更する一方で、ボタンのサイズは固定にしたいものとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In our example case, the vertical sizer is supposed to propagate all its height changes to only the text area, not to the button area.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T152653Z">
        <seg>今回の例では、垂直方向のサイザーは高さに対するすべての変化をテキストエリアにのみ伝播させ、ボタンエリアには伝播させないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular they don't need</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015610Z">
        <seg>特に、これらを public に</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, do not destroy them from application class' destructor!</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124528Z">
        <seg>特に、アプリケーションクラスのデストラクタで削除しては いけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, do not destroy them from application class' destructor!</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162357Z">
        <seg>特に、アプリケーションクラスのデストラクタで削除しては いけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, the most common encoding used under modern Unix systems is UTF-8 and as the string above is not a valid UTF-8 byte sequence, nothing would be displayed at all in this case.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T082020Z">
        <seg>特に、最近の Unix システムで最もよく使われているエンコーディングは UTF-8 であり、上記の文字列は正しい UTF-8 バイト列ではないため、この場合は何も表示されないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, these classes were designed to be as easy to use as possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T151151Z">
        <seg>特に、これらのクラスはできるだけ簡単に使用できるように設計されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In particular, this means that errors logged by wxWidgets code itself (e.g. when it fails to perform some operation, for instance wxFile::Open() logs an error when it fails to open a file) will be processed and shown to the user.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T092846Z">
        <seg>特に、wxWidgets 自身の記録するエラー (何らかの処理の失敗時、例えば、wxFile::Open() はファイルのオープンに失敗した場合にエラーを記録します) がユーザに通知されることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In practice, this would look like this if the derived text control only accepts 'a' to 'z' and 'A' to 'Z':</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022520Z">
        <seg>実際に、テキストコントロールで 'a' から 'z' と 'A' から 'Z' までのみを受け付ける場合、以下のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In short, this is a place where you can conveniently stuff all your data (numbers and strings) organizing it in a tree where you use the filesystem-like paths to specify the location of a piece of data.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T154039Z">
        <seg>要するに、ファイルシステムのようなパスを使用してデータの場所を指定する木構造にすべてのデータ (数値や文字列) を詰め込むことができるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In some cases, it might be desired by the programmer to get a certain number of system events in a parent window, for example all key events sent to, but not used by, the native controls in a dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060007Z">
        <seg>例えばダイアログ内のネイティブコントロールへ送信される (そのコントロール自身では使用しない) キーイベントなど、特定のシステムイベントを親ウィンドウで取得したいと思うことがあるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the latter case, wxUSE_UTF8_LOCALE_ONLY can also be set to 1 to indicate that all strings are considered to be in UTF-8.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T121106Z">
        <seg>UTF-8 ビルドを行う場合、すべての文字列が UTF-8 であることを表すために wxUSE_UTF8_LOCALE_ONLY も 1 に設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next one, EVT_SIZE means that any changes in the size of the frame will result in calling OnSize() method.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T023523Z">
        <seg>次の行の EVT_SIZE はフレームのサイズを変更すると OnSize() を呼び出すことを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next section we provide a short introduction to handling the events using the event tables.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T002949Z">
        <seg>次の章ではイベントテーブルを用いたイベント処理の導入部分を説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the simplest possible case an event handler may not use the event parameter at all.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T024222Z">
        <seg>ありえそうな一番単純な例では、イベントハンドラは event 引数をまったく使用しないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these cases a single "character" may be mapped to more than one code point or viceversa more characters may be mapped to a single code point.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T024311Z">
        <seg>これらの場合、ひとつの "文字" が複数のコードポイントにマッピングされたり、逆に複数の文字がひとつのコードポイントにマッピングされたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case it can't guarantee constant-time access to N-th element of the string any longer as to find the position of this character in the string we have to examine all the preceding ones.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T143506Z">
        <seg>その場合、文字列中のN 番目の要素へ定数時間でアクセスできることはもはや保証されません。なぜなら、その要素の位置を見つけるためにはその前の文字列をすべて調べる必要があるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case the event handler function has to call Skip() so as to indicate that the search for the event handler should continue.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T090341Z">
        <seg>この場合、イベントハンドラの検索を続行させるためにイベントハンドラ関数で Skip() を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, a special event handler will have to be written that will override ProcessEvent() in order to pass all events (or any selection of them) to the parent window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060249Z">
        <seg>この場合、すべてのイベント (もしくはその中の特定のイベント) を親ウィンドウへ渡すようにイベントハンドラの ProcessEvent() をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the button's event table will be searched, then the parent panel's, then the frame's.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T080603Z">
        <seg>この場合、まずボタンのイベントテーブルが検索され、続いて、その親パネル、フレームの順に検索されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, you can use the converter-constructor, as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T144158Z">
        <seg>この場合、以下の変換コンストラクタを使用することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this particular case UTF8 requires more space than UTF16 (3 bytes instead of 2).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T033430Z">
        <seg>この場合では、UTF8 は UTF16 よりも多くの領域が必要となります。 (2 バイトではなく 3 バイト)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In wxWidgets, the code fragment from above should be written instead:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T161649Z">
        <seg>wxWidgets では、上記のコードの代わりに以下のように書きます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In your message catalogs, you need to provide individual translations of these modifiers from their lower case names (ctrl, alt, shift) so that the wxWidgets accelerator code can recognise them even when translated.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T003631Z">
        <seg>メッセージカタログでは、修飾子の名前を小文字にしたもの (ctrl、alt、shift) とは別の名前に翻訳する必要があります。これによって、 wxWidgets がそれらの名前を翻訳されたものとして認識できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Include files</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145849Z">
        <seg>インクルードファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indeed, the member functions should not be virtual as the event handler ignores that the functions are virtual, i.e. overriding a virtual member function in a derived class will not have any effect.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T032638Z">
        <seg>実際に、イベントテーブルはメンバ関数が仮想関数であることを無視する、つまり、仮想メンバ関数を継承クラスでオーバーライドしてもなにも影響を及ぼしません。そのため、メンバ関数を仮想関数にするべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Independent of how the individual sizers lay out their children, all children have certain features in common:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T132513Z">
        <seg>個々のサイザーがどのように子コントロールを配置するかによらず、子コントロールはすべていくつかの共通機能を持ちます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Installing the .mo files with your application in the appropriate location for the target system which is the one returned by wxStandardPaths::GetLocalizedResourcesDir(wxStandardPaths::ResourceCat_Messages).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T001529Z">
        <seg>あなたのプログラムと一緒に .mo ファイルを対象システム内の適切な場所 (wxStandardPaths::GetLocalizedResourcesDir(wxStandardPaths::ResourceCat_Messages) の返却する場所) にインストールする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Installing the .mo files with your application in the appropriate location for the target system which is the one returned by wxStandardPaths::GetLocalizedResourcesDir( wxStandardPaths::ResourceCat_Messages ).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T041415Z">
        <seg>あなたのプログラムと一緒に .mo ファイルを対象システム内の適切な場所 (wxStandardPaths::GetLocalizedResourcesDir( wxStandardPaths::ResourceCat_Messages ) の返却する場所) にインストールする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead it returns a boolean value which indicates whether processing should continue (true) or not (false).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152514Z">
        <seg>代わりに処理を継続する (true) かしない (false) かを表す真偽値を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead it returns a boolean value which indicates whether processing should continue (true) or not (false).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T160313Z">
        <seg>代わりに処理を継続する (true) かしない (false) かを表す真偽値を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of run-time crashes you will get compilation errors in this case when using Bind().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T030347Z">
        <seg>Bind() を使用すると、実行時にクラッシュするかわりにコンパイルエラーが発生するようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, in any place in your code, but usually in the code of the class defining the handler itself (and definitely not in the global scope as with the event tables), call its Bind&lt;&gt;() method like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T040326Z">
        <seg>代わりに、コードの任意の場所で以下のように Bind&lt;&gt;() を呼び出します。 (通常はイベントを処理するクラスの定義内に配置し、イベントテーブルの場合のようにグローバルスコープ内には配置しません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead, we define some types and macros which behave differently in the Unicode and ANSI builds and allow us to avoid using conditional compilation in the program itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T162043Z">
        <seg>その代わり、Unicode ビルドと ANSI ビルドで異なる振る舞いをする型とマクロが定義されており、これによってプログラム内で条件付きコンパイルを使用しなくても済みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internationalization</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T150202Z">
        <seg>国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T035518Z">
        <seg>イントロダクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Introduction to Events</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153252Z">
        <seg>イントロダクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also allows the direct binding of events to:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T000012Z">
        <seg>また、以下のものをイベントへ直接バインドすることができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It assumes that bitmaps live in resources under Windows or OS2 and XPM files under all other platforms (for XPMs, the corresponding file must be included before this macro is used, of course, and the name of the bitmap should be the same as the resource name under Windows with _xpm suffix).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154659Z">
        <seg>このマクロは Windows と OS2 ではリソース内に、それ以外のプラットフォームでは XPM ファイルとしてビットマップが存在するものとして処理を行います。(もちろん、XPM を使用するときはこのマクロを使用する前に対応するファイルをインクルードしておく必要があり、ビットマップの名前は Windows のリソース名の末尾に _xpm を付けたものにしてください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It assumes that bitmaps live in resources under Windows or OS2 and XPM files under all other platforms (for XPMs, the corresponding file must be included before this macro is used, of course, and the name of the bitmap should be the same as the resource name under Windows with _xpm suffix).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T150353Z">
        <seg>このマクロは Windows と OS2 ではリソース内に、それ以外のプラットフォームでは XPM ファイルとしてビットマップが存在するものとして処理を行います。(もちろん、XPM を使用するときはこのマクロを使用する前に対応するファイルをインクルードしておく必要があり、ビットマップの名前は Windows のリソース名の末尾に _xpm を付けたものにしてください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can be also used to work with files with "non native" line termination characters and write them as "native" files if needed (in fact, the files may be written in any format).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T065601Z">
        <seg>プラットフォームと異なる行端文字を扱うこともできますし、必要であればプラットフォームの行端文字に変換して書き込むことも可能です。 (実際のところ、任意の形式でファイルを書き込むことが可能です)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can be corrected in one of the following ways:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124718Z">
        <seg>下記のいずれかの方法でこれを修正することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can be explicitly set to 0 in setup.h under MSW or you can use --disable-unicode under Unix but doing this is strongly discouraged.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T120718Z">
        <seg>MSW では setup.h 内で明示的に 0 にセットするか、Unix では --disable-unicode を使用することができますが、これは推奨しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It contains all the usual functions to work with files (opening/closing, reading/writing, seeking, and so on) but compared with using standard C functions, has error checking (in case of an error a message is logged using wxLog facilities) and closes the file automatically in the destructor which may be quite convenient.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T060646Z">
        <seg>このクラスは (オープン/クローズ、読み書き、ファイルシークといった) 通常のファイル操作で使われる関数が含まれますが、標準 C 関数と違い、エラーチェック機能がある (エラーが発生した場合、 wxLog 機能を使ってメッセージがログ出力されます) ほか、デストラクタで自動的にファイルがクローズされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It contains all the usual functions to work with files (opening/closing, reading/writing, seeking, and so on) but compared with using standard C functions, has error checking (in case of an error a message is logged using wxLog facilities) and closes the file automatically in the destructor which may be quite convenient.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T073503Z">
        <seg>このクラスには (オープン/クローズ、読み書き、ファイルシークといった) 通常のファイル操作で使われる関数が含まれますが、標準 C 関数と違い、エラーチェック機能がある (エラーが発生した場合、 wxLog 機能を使ってメッセージがログ出力されます) ほか、デストラクタで自動的にファイルがクローズされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It could be a useful technique for on-line tutorials, too, where you take a user through a serious of steps and don't want them to diverge from the lesson.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T065237Z">
        <seg>これはオンラインチュートリアルでも有用なテクニックです。レッスンから外れることなく、ユーザに一連のステップを実行させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It doesn't matter where it appears but it's customary to put it at the end because the macro changes the access type internally so it's safest if nothing follows it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015252Z">
        <seg>どこに挿入しても構いませんが、慣習的にクラス宣言の最後に配置します。これはこのマクロがアクセス制御を内部的に変更してしまうからで、宣言の後ろに何もなければ一番安全だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It focuses on handling charsets related problems.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T011704Z">
        <seg>文字コードに関連した問題について取り組む場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It involves editing the .po file.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T001222Z">
        <seg>これは .po ファイルを編集することで行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is 4 bytes under Unix systems, corresponding to the tradition of using UTF-32, but only 2 bytes under Windows which is required by compatibility with the OS which uses UTF-16.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T034200Z">
        <seg>Unix システムでは UTF-32 を使用してきた慣習にあわせて 4 バイトですが、Windows では UTF-16 を使用する OS との互換性のため、2 バイトとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is also possible to propagate the event only a limited number of times and not until it is processed (or a top level parent window is reached).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T155108Z">
        <seg>イベントの伝播回数を制限することも可能ですし、処理されるまで (もしくはトップレベルの親ウィンドウに到達するまで) 伝播させることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is based upon the idea of individual subwindows reporting their minimal required size and their ability to get stretched if the size of the parent window has changed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T140748Z">
        <seg>このアルゴリズムは、必要最小限のサイズを通知し、親ウィンドウのサイズが変化した場合にそれにあわせてサイズを変更することのできる、個別のサブウィンドウという考えに基づいています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is especially well suited for working with configuration files and program source files.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T064917Z">
        <seg>このクラスは設定ファイルやソースファイルを扱う場合に特に適しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is interpreted as a weight factor, i.e. it can be zero, indicating that the window may not be resized at all, or above zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130521T160524Z">
        <seg>これは重み係数として解釈されます。つまり、値を 0 (この場合、ウィンドウはまったくリサイズされません) か、0 より大きい値にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is the unique feature of a box sizer, that it can grow in both directions (height and width) but can distribute its growth in the main direction (horizontal for a row) unevenly among its children.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141834Z">
        <seg>ボックスサイザーに固有の機能として、両方 (高さと幅) の方向に伸長させることができる一方で、主となる方向 (行に対しては水平方向) のサイズ変更を子コントロールに対して 不規則に 分配できる点が挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is the unique feature of a box sizer, that it can grow in both directions (height and width) but can distribute its growth in the main direction (horizontal for a row) unevenly among its children.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T130514Z">
        <seg>ボックスサイザーに固有の機能として、両方 (高さと幅) の方向に伸長させることができる一方で、主となる方向 (行に対しては水平方向) のサイズ変更を子コントロールに対して 不規則に 分配できる点が挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is used internally only and must not be called by the user.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T150520Z">
        <seg>この関数は内部でのみ使用されるもので、ユーザが呼んではいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It logs the specified message text as well as the last system error code (errno or Windows' GetLastError() depending on the platform) and the corresponding error message.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091010Z">
        <seg>この関数は指定したメッセージとあわせて、最後のシステムエラーコード  (プラットフォームに応じて errno または Windows の ::GetLastError() ) とそれに対応するエラーメッセージを出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It logs the specified message text as well as the last system error code (errno or ::GetLastError() depending on the platform) and the corresponding error message.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T011457Z">
        <seg>この関数は指定したメッセージとあわせて、最後のシステムエラーコード  (プラットフォームに応じて errno または ::GetLastError() ) とそれに対応するエラーメッセージを出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may be noted that wxWidgets' event processing system implements something close to virtual methods in normal C++ in spirit: both of these mechanisms allow you to alter the behaviour of the base class by defining the event handling functions in the derived classes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T122712Z">
        <seg>wxWidgets の行うイベント処理の仕組みは通常の C++ の仮想関数にとても近いことに着目してください: 両方とも、継承クラスでイベント処理関数を定義することで基底クラスの振る舞いを置き換えることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may be noted that wxWidgets' event processing system implements something very close to virtual methods in normal C++, i.e. it is possible to alter the behaviour of a class by overriding its event handling functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T033204Z">
        <seg>wxWidgets の行うイベント処理の仕組みは通常の C++ の仮想関数にとても近いことに着目してください。つまり、イベント処理関数をオーバーライドすることでクラスの振る舞いを変更できるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It may be used to enumerate all files, only files satisfying the given template mask or only non-hidden files.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T065828Z">
        <seg>このクラスを使って、すべてのファイル、特定のパターンに一致するファイル、隠しファイル以外のファイルを列挙することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It means that this information should be:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T150158Z">
        <seg>つまり、取り扱う情報は次の条件を満たすべきです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It only does anything at all in the debug mode (when the preprocessor symbol __WXDEBUG__ is defined) and expands to nothing in release mode (otherwise).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091213Z">
        <seg>デバッグモードの場合 (プリプロセッサシンボル __WXDEBUG__ が定義されている場合) のみ処理を行い、リリースモードの場合 (それ以外の場合) では空文字列に展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It only does anything at all in the debug mode (when the preprocessor symbol __WXDEBUG__ is defined) and expands to nothing in release mode (otherwise).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T011829Z">
        <seg>デバッグモードの場合 (プリプロセッサシンボル __WXDEBUG__ が定義されている場合) のみ処理を行い、リリースモードの場合 (それ以外の場合) では空文字列に展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It will also succeed if the current encoding is UTF-8 as all Unicode strings are representable in this encoding.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T135725Z">
        <seg>また、Unicode 文字列はすべて UTF-8 で表現することが可能なため、現在のエンコーディングが UTF-8 である場合も常に成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just let us state once again the rules:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T140900Z">
        <seg>もう一度だけルールを述べさせてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Last, note that there are also two simple global wrapper functions associated to the two wxEvtHandler mentioned functions: wxPostEvent() and wxQueueEvent().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T145412Z">
        <seg>最後に、前述の wxEvtHandler の関数に関連する、ふたつのグローバルラッパー関数があります: それは wxPostEvent() と wxQueueEvent() です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let us now look at more examples of how to use different event handlers using the two overloads of Bind() function: first one for the object methods and the other one for arbitrary functors (callable objects, including simple functions):</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060031Z">
        <seg>Bind() のふたつのオーバーロードを用いて、異なるイベントハンドラを使用する例を見てみましょう: 最初のオーバーロードはメンバ関数用で、もう一方は任意のファンクタ (単純な関数を含む、呼び出し可能なオブジェクト) 用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let us now look at the details of this definition: the first line means that we are defining the event table for MyFrame class and that its base class is wxFrame, so events not processed by MyFrame will, by default, be handled by wxFrame.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T023409Z">
        <seg>この定義を詳しく見ていきましょう: 最初の行は MyFrame クラスのイベントテーブルを定義しようとしており、基底クラスが wxFrame であることを意味しています。そのため、デフォルトでは MyFrame で処理されなかったイベントは wxFrame で処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let us start by looking at the syntax: the first obvious difference is that you need not use wxDECLARE_EVENT_TABLE() nor wxBEGIN_EVENT_TABLE() and the associated macros.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T035836Z">
        <seg>構文を見ることから始めましょう: 最初の明らかな違いは wxDECLARE_EVENT_TABLE() や wxBEGIN_EVENT_TABLE()、およびそれらに関連するマクロを使用する必要がない点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's look at them in order.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T150957Z">
        <seg>それではこれらを順番に見ていきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's take a quite simple but common case of a file error: suppose that you're writing your data file on disk and there is not enough space.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T020143Z">
        <seg>非常に単純で、よくあるファイルエラーの場合を考えてみましょう: データをディスク上のファイルに書き込もうとして充分な空き容量がなかったときを想像してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like with all the other GUI frameworks, the control of flow in wxWidgets applications is event-based: the program normally performs most of its actions in response to the events generated by the user.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T154236Z">
        <seg>他のすべての GUI フレームワークのように、wxWidgets アプリケーションはイベントベースで処理の制御を行います: 一般的に、プログラムの処理の大半はユーザの生成するイベントに応じて行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like wxLogError(), but also terminates the program with the exit code 3.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131253Z">
        <seg>wxLogError() と似ていますが、リターンコード 3 でプログラムを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>List of wxWidgets events</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T012733Z">
        <seg>wxWidgets のイベント一覧</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal strings (i.e. "Hello, world!" or '*')</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T165612Z">
        <seg>リテラル文字列 (すなわち "Hello, world!" や '*')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Log Messages Selection</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131034Z">
        <seg>ログメッセージの選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Log Targets</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131038Z">
        <seg>ログターゲット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Log a message at wxLOG_Trace log level (see wxLogLevelValues enum).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091400Z">
        <seg>wxLOG_Trace ログレベル (wxLogLevelValues enum 参照) のメッセージを記録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logging Customization</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131059Z">
        <seg>ロギングのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logging in Multi-Threaded Applications</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131052Z">
        <seg>マルチスレッドアプリケーションでのロギング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Logo</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004612Z">
        <seg>Logo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Luckily, there is another way - see the next section.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T161547Z">
        <seg>幸運なことに、別の方法があります。次の章を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro to be used around all literal strings that should be translated.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T040334Z">
        <seg>翻訳対象となるすべてのリテラル文字列に対して使用するマクロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros listed by event class</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080547Z">
        <seg>イベントクラスごとのマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Main Page</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004626Z">
        <seg>メインページ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many applications should therefore be able to adapt to small displays with little or no work, as far as dialogs are concerned.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T145230Z">
        <seg>したがって、ダイアログのことを気にかけている限り、少し、もしくはまったく手を加えることなく、多くのアプリケーションを小さな画面に適応させることができるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Message catalog resources category.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T041139Z">
        <seg>メッセージカタログを表すリソースカテゴリ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Messages logged by this function will appear in the statusbar of the frame or of the top level applic...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T085759Z">
        <seg>この関数でロギングされたメッセージはデフォルトでフレームまたはトップレベルウィンドウのステータスバーに表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Messages logged from threads other than the main one will be buffered until wxLog::Flush() is called in the main thread (which usually happens during idle time, i.e. after processing all pending events) and will be really output only then.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T115355Z">
        <seg>メインスレッド以外のスレッドで記録されたメッセージはメインスレッドで wxLog::Flush() が呼ばれるまで (通常はアイドル時、つまり、未処理のイベントがすべて処理された後に呼ばれます) バッファリングされ、wxLog::Flush() が呼ばれたときに初めて実際に出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Miscellaneous Notes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153449Z">
        <seg>雑多な覚書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More details about Unicode may be found at http://www.unicode.org/.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T092847Z">
        <seg>Unicode についての詳細は http://www.unicode.org/ にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More details about Unicode may be found at www.unicode.org.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151147Z">
        <seg>Unicode についての詳細は www.unicode.org にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More precisely, a code unit is the minimal bit combination that can represent a unit of encoded text for processing or interchange.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T030510Z">
        <seg>より正確に言うと、コード単位とは、テキスト処理または交換のために符号化された文字を表現可能な最小のビットの組み合わせです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More precisely, as said above, all event classes not deriving from wxCommandEvent (see the wxEvent inheritance map) do not propagate upward.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T150647Z">
        <seg>より正確に言うと、前に述べたように wxCommandEvent を継承して  いない イベントクラス (wxEvent の継承マップ参照) はどれも伝播 しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More rarely used, but still useful, is wc_str() function which always returns the Unicode string.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T152201Z">
        <seg>めったに使われませんが、便利な関数として wc_str() 関数があり、これは常に Unicode 文字列を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, any application reading files which it didn't produce or receiving data from the network from other services should be ready to deal with Unicode.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T012856Z">
        <seg>さらに、アプリケーション外で作成されたファイルを読み込んだり、ネットワーク経由で他のサービスからデータを読み込んだりするアプリケーションは Unicode を取り扱う準備をしておくべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, in the Windows NT/2000 case, even the program which uses only standard ASCII can profit from using Unicode because they will work more efficiently - there will be no need for the system to convert all strings the program uses to/from Unicode each time a system call is made.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T145642Z">
        <seg>さらに Windows NT/2000 の場合、標準的な ASCII モードのみを使用するプログラムであっても Unicode の恩恵を得ることができます。 なぜなら、システムコールを実行するたびにすべての文字列を Unicode に/から 変換する必要がないため、より効率的にプログラムが動作できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, the log level can be set separately for different log components.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T101356Z">
        <seg>さらに、異なるログコンポーネント間で別々にログレベルを設定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, the second version of this function takes a trace mask as the first argument which allows to further restrict the amount of messages generated.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T013138Z">
        <seg>くわえて、2 番目の形式では第一引数としてトレースマスクを指定できるため、生成されるメッセージの量をさらに制限することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mostly used by wxWidgets itself, but might be handy for logging errors after system call (API functio...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T090915Z">
        <seg>主に wxWidgets 自身で使用されますが、システムコール (API 関数) の失敗後のエラーログを記録するのに便利かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Mouse event macros can handle either individual mouse events or all mouse events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081658Z">
        <seg>マウスイベントマクロは個別のマウスやすべてのマウスのイベントを処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyFrame(...) : wxFrame(...) { }</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015441Z">
        <seg>MyFrame(...) : wxFrame(...) { }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyFrame::MyFrame(...)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T045722Z">
        <seg>MyFrame::MyFrame(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyFrame::MyFrame(...)
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T040328Z">
        <seg>MyFrame::MyFrame(...)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyPlotEvent event(MY_PLOT_CLICKED, GetId(), wxPoint(...));</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T151355Z">
        <seg>MyPlotEvent event(MY_PLOT_CLICKED, GetId(), wxPoint(...));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyPlotEvent(wxEventType eventType, int winid, const wxPoint&amp; pos)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150430Z">
        <seg>MyPlotEvent(wxEventType eventType, int winid, const wxPoint&amp; pos)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145433Z">
        <seg>Next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next the event table must be defined and, as with any definition, it must be placed in an implementation file.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T021820Z">
        <seg>次に、イベントテーブルを定義する必要があります。これは必ずソースファイル内に配置しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No event-free alternatives</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060936Z">
        <seg>イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>None (stock cursors only).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142336Z">
        <seg>なし (既存のカーソルのみ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Normally, it is suppressed, but might be activated if the user wishes to know more details about the program progress (another, but possibly confusing name for the same function is  wxLogInfo).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T010737Z">
        <seg>通常は出力されませんが、ユーザがプログラムの進捗状況についてより詳しく知りたい場合に有効化されるかもしれません。 (名前の紛らわしい同じ機能の関数として  wxLogInfo があります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Normally, it is suppressed, but might be activated if the user wishes to know more details about the program progress (another, but possibly confusing name for the same function is wxLogInfo).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131821Z">
        <seg>通常は出力されませんが、ユーザがプログラムの進捗状況についてより詳しく知りたい場合に有効化されるかもしれません。 (名前の紛らわしい同じ機能の関数として wxLogInfo があります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Normally, the prefix is hard-coded and is the same as the value passed to configure via the --prefix switch when compiling the library (typically /usr/local or /usr).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T160031Z">
        <seg>通常、プレフィックスはハードコーディングされており、ライブラリのコンパイル時に --prefix スイッチによって configure へ渡される値と同じです。 (普通は /usr/local か /usr です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Normally, the prefix is hard-coded and is the same as the value passed to configure via the --prefix switch when compiling the library (typically /usr/local or /usr).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T160101Z">
        <seg>通常、プレフィックスはハードコーディングされており、ライブラリのコンパイル時に --prefix スイッチによって configure へ渡される値と同じです。 (普通は /usr/local か /usr です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not performance critical, neither from speed nor from a memory consumption point of view.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T150728Z">
        <seg>実行速度やメモリ消費量といった観点の性能が重要視されない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not so with Bind&lt;&gt;() which can be used to specify these handlers which will handle the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T043258Z">
        <seg>Bind&lt;&gt;() ではこれらのイベントハンドラを指定できるため、そのようなことはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notably, under Unix, the underlying graphical toolkit (e.g. GTK+) usually uses UTF-8 encoded strings and using the same representations for the strings in wxWidgets allows to avoid conversion from UTF-32 to UTF-8 and vice versa each time a string is shown in the UI or retrieved from it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T093954Z">
        <seg>特に、Unix のグラフィカルツールキット ( GTK+ など) は普通、UTF-8 文字列を使用しており、wxWidgets でも同じ符号化方式を使用することで、UI に文字列を表示するときや逆に文字列を取得するときに毎回 UTF-32 から UTF-8 に変換する必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that wxSizer does not derive from wxWindow and thus does not interfere with tab ordering and requires very few resources compared to a real window on screen.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141726Z">
        <seg>wxSizer は wxWindow を継承していないため、タブ順に干渉することがなく、実際のウィンドウと比較するとほとんどリソースを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that MyFrameHandler doesn't need to derive from wxEvtHandler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060310Z">
        <seg>MyFrameHandler は wxEvtHandler を継承している必要がないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this pointer must be specified here.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T040409Z">
        <seg>ここでは this ポインタを指定する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that from the C/C++ programmer perspective the situation is further complicated by the fact that the standard type wchar_t which is usually used to represent the Unicode ("wide") strings in C/C++ doesn't have the same size on all platforms.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T033845Z">
        <seg>C/C++ プログラマの観点からすれば、状況はもっと複雑です。というのも、C/C++ で Unicode ( "ワイド" ) 文字列を表現するためによく使われる wchar_t 型は、すべてのプラットフォームで同じサイズとは限らないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that missing or partially-implemented formats are automatically supplemented by the wxImage to load the data, and then converting it to wxBitmap form.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T151011Z">
        <seg>対応していない、または部分的にしか実装されていない形式は自動的に wxImage を使用してデータの読み込みと wxBitmap 形式への変換が行われることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that missing or partially-implemented formats are automatically supplemented by using wxImage to load the data, and then converting it to wxBitmap form.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154900Z">
        <seg>対応していない、または部分的にしか実装されていない形式は自動的に wxImage を使用してデータの読み込みと wxBitmap 形式への変換が行われることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that only some controls can calculate their size (such as a checkbox) whereas others (such as a listbox) don't have any natural width or height and thus require an explicit size.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T133515Z">
        <seg>(チェックボックスなどの) いくつかのコントロールのみが自身のサイズを計算できるのに対し、(リストボックスなどの) 他のコントロールはデフォルトの幅や高さを持たないため、明示的にサイズを指定する必要がある点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that starting from wxWidgets 2.3.3 such logic doesn't apply for the windows shown before the program enters the main loop: in other words, you can safely show a dialog from wxApp::OnInit and not be afraid that your application terminates when this dialog -- which is the last top level window for the moment -- is closed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T132741Z">
        <seg>wxWidgets 2.3.3 から、このロジックはメインループに入る前のまだ表示されていないウィンドウには適用されなくなりました。つまり、 wxApp::OnInit の中で安全にダイアログを表示でき、ダイアログ (その時点における最後のトップレベルウィンドウ) を閉じるときにアプリケーションが終了することを心配しなくても良いということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that such logic doesn't apply for the windows shown before the program enters the main loop: in other words, you can safely show a dialog from wxApp::OnInit and not be afraid that your application terminates when this dialog -- which is the last top level window for the moment -- is closed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T132719Z">
        <seg>このロジックはメインループに入る前のまだ表示されていないウィンドウには適用されないことに注意してください。つまり、 wxApp::OnInit の中で安全にダイアログを表示でき、ダイアログ (その時点における最後のトップレベルウィンドウ) を閉じるときにアプリケーションが終了することを心配しなくても良いということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the new way of specifying flags to wxSizer is via wxSizerFlags.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T153032Z">
        <seg>wxSizer にフラグを指定する新しい方法として wxSizerFlags を使用する方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the new way of specifying flags to wxSizer is via wxSizerFlags.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T153018Z">
        <seg>wxSizer にフラグを指定する新しい方法として wxSizerFlags を使用する方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the program's command line arguments, represented by argc and argv, are available from within wxApp member functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152536Z">
        <seg>プログラムのコマンドライン引数 (argc と argv) は wxApp のメンバ関数から使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the program's command line arguments, represented by argc and argv, are available from within wxApp member functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T160500Z">
        <seg>プログラムのコマンドライン引数 (argc と argv) は wxApp のメンバ関数から使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this macro doesn't need a window identifier, since normally you are only interested in the current window's size events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T024247Z">
        <seg>このマクロはウィンドウ識別子を必要としません。なぜなら、通常は現在のウィンドウのリサイズイベントにのみ関心があるはずだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this macro may occur in any section of the class (public, protected or private) but that it is probably better to insert it at the end, as shown, because this macro implicitly changes the access to protected which may be quite unexpected if there is anything following it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T082803Z">
        <seg>このマクロはクラスの任意の場所 (public、protected、private) に配置することができますが、おそらく例示のように最後に挿入する方が良いでしょう。なぜなら、このマクロは暗黙的にアクセス制御を protected に変更してしまうためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that this static box has to be created separately.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115446Z">
        <seg>このスタティックボックスは別々に作成する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that typically one character is assigned exactly one code point, but there are exceptions; the so-called precomposed characters (see http://en.wikipedia.org/wiki/Precomposed_character) or the ligatures.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T095359Z">
        <seg>通常、ひとつの文字は厳密にひとつのコードポイントに割り当てられますが、なかには例外もあります; いわゆる 合成済み文字 (http://en.wikipedia.org/wiki/Precomposed_character 参照) や 合字 (リガチャ) のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that under Windows, you must either run the program under debugger or use a 3rd party program such as DebugView (http://www.microsoft.com/technet/sysinternals/Miscellaneous/DebugView.mspx) to actually see the debug output.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091318Z">
        <seg>Windows でデバッグ出力を確認するためにはデバッガーを使用するか、DbgView (http://www.microsoft.com/technet/sysinternals/Miscellaneous/DebugView.mspx) のようなサードパーティーのプログラムを使用する必要がある点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that using wxImage is the preferred way to load images in wxWidgets, with the exception of resources (XPM-files or native Windows resources).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154913Z">
        <seg>wxWidgets で画像を読み込む場合、リソース (XPM ファイルや Windows のリソース) から読み込む場合を除くと、wxImage を利用した方が良いことにも注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that using wxImage is the preferred way to load images in wxWidgets, with the exception of resources (XPM-files or native Windows resources).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T151034Z">
        <seg>wxWidgets で画像を読み込む場合、リソース (XPM ファイルや Windows のリソース) から読み込む場合を除くと、wxImage を利用した方が良いことにも注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that wxSizer does not derive from wxWindow and thus does not interfere with tab ordering and requires very few resources compared to a real window on screen.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T123143Z">
        <seg>wxSizer は wxWindow を継承していないため、タブ順に干渉することがなく、実際のウィンドウと比較するとほとんどリソースを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that you can get the object that generated the event -- and that is not the same as the frame -- via wxEvent::GetEventObject() method of event argument passed to the event handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T030222Z">
        <seg>イベントハンドラへ渡された event 引数の wxEvent::GetEventObject() 関数によって、イベントを生成したオブジェクトを取得できます。 (このオブジェクトはフレームではありません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that your application may wish to override ProcessEvent to redirect processing of events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T052859Z">
        <seg>ProcessEvent をオーバーライドすることでイベント処理をリダイレクトしたいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note the use of IMPLEMENT_APP(appClass), which allows wxWidgets to dynamically create an instance of the application object at the appropriate point in wxWidgets initialization.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161134Z">
        <seg>IMPLEMENT_APP(appClass) を使用している点に注意してください。これにより、wxWidgets の初期化時の適切なタイミングでアプリケーションオブジェクトのインスタンスが動的に作成されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141627Z">
        <seg>注:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note: This is supported only by wxBoxSizer and wxFlexGridSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T150152Z">
        <seg>注: これは wxBoxSizer と wxFlexGridSizer でのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that Unicode support has changed radically in wxWidgets 3.0 and a lot of existing material pertaining to the previous versions of the library is not correct any more.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T005230Z">
        <seg>wxWidgets 3.0 では Unicode の対応方法が大きく変わるため、以前のバージョンに関連する多くのことが、もはや正しくなくなることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that if you just need to modify (or suppress) the time stamp display, overriding FormatTime() is enough.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T123343Z">
        <seg>ただし、タイムスタンプの形式を変更 (または出力を抑制) したいだけの場合、FormatTime() をオーバーライドするだけで充分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that in the latter case you should be prepared for logging messages early during the program startup and also during program shutdown so you shouldn't rely on existence of the main application window, for example.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T121648Z">
        <seg>後者の場合、例えばプログラムの起動時に早くメッセージのロギングの準備をする必要があり、プログラムの終了時にはメインウィンドウの存在に依存してはいけない点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the default GUI logger already only output the messages when it is flushed, so by default messages from the other threads will be shown more or less at the same moment as usual.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T115837Z">
        <seg>デフォルトの GUI ロガーはフラッシュされるときに初めてメッセージを出力するようにすでになっているため、他スレッドのメッセージは通常どおり、ほぼ同時に表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the log level set explicitly for the transactions code overrides the log level of the parent component but that all other database code subcomponents inherit its setting by default and so won't generate any log messages at all.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111340Z">
        <seg>トランザクションコードで明示的に設定されたログレベルは親コンポーネントのログレベルを上書きしますが、データベースコードの他のサブコンポーネントはすべて親コンポーネントの値を継承するため、ログメッセージはまったく生成されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the narrow strings used with wxWidgets are always assumed to be in the current locale encoding, so writing</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T080919Z">
        <seg>wxWidgets で使用されるナロー文字列は 常に 現在のロケールで符号化されていると仮定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that the use of log trace masks is hardly necessary any longer in current wxWidgets version as the same effect can be achieved by using different log components for different log statements of any level.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T130536Z">
        <seg>現在の wxWidgets では、もはやトレースマスクを使用する必要性がほとんどないことに注意してください。なぜなら、異なるログ文に対して異なるログコンポーネントを使用することで同じ事を実現できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that this is done before checking the static event table entries, so if both a dynamic and a static event handler match the same event, the static one is never going to be used unless wxEvent::Skip() is called in the dynamic one.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T140327Z">
        <seg>これは静的イベントハンドラをチェックする前に行われることに注意してください。そのため、動的イベントハンドラと静的イベントハンドラの両方がイベントに合致した場合、動的イベントハンドラで wxEvent::Skip() を呼ばない限りは静的イベントハンドラが呼ばれることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that this means that any event handler defined in a base class will be executed at this step.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T141039Z">
        <seg>これは基底クラスで定義されたイベントハンドラがこのステップで実行されうることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that to avoid remembering the exact order in which the events are processed in the document-view frame, the simplest, and recommended, solution is to only handle the events at the view classes level, and not in the document or document manager classes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T153536Z">
        <seg>ドキュメント/ビューフレームワークでの正確なイベント処理順を覚えなくてもいいようにする、もっとも単純で推奨する解決方法は、ビュークラスでのみイベントを処理し、ドキュメントやドキュメントマネージャでは処理しないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that you may want to run the Event Sample while reading this section and look at its code and the output when the button which can be used to test the event handlers execution order is clicked to understand it better.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T062902Z">
        <seg>おそらく、この章を読みながら イベントサンプル を実行し、コードや (イベント処理順序を確認するために) ボタンをクリックした時の出力を見たくなると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Notice that you must mention a method you want to use for the event handling in the event table definition; just defining it in MyFrame class is not enough.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T022936Z">
        <seg>イベント処理に使用したいメンバ関数はイベントテーブル内に記載する必要があることに注意してください; MyFrame クラス内で定義するだけでは  不十分 です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now let us describe the semantic differences:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T024714Z">
        <seg>さて、意味論的な違いについて説明しましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, it would be nearly impossibly to write such programs if it had to be done this way (try to imagine the number of #ifdef UNICODE an average program would have had!).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151456Z">
        <seg>もちろん、この方法でプログラムを書くのは不可能に近いでしょう。 (平均的なプログラムに含まれることになるであろう #ifdef UNICODE の数を想像してみてください!) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, it's also possible to emulate this behaviour with the classic static (i.e., bound via event tables) handlers by using an internal flag indicating whether the handler is currently enabled and returning from it if it isn't, but using dynamically bind handlers requires less code and is also usually more clear.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T041540Z">
        <seg>もちろん、イベントハンドラの有効無効を表す内部フラグを用いることで、古典的な静的イベントハンドラ (つまり、イベントテーブル) でもこの振る舞いを模倣することは可能です。しかし、動的にバインドされるイベントハンドラを使用する方がコードも少なく、処理内容も明確になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, the latter only works if the string contains data representable in the current locale encoding.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T091448Z">
        <seg>もちろん、文字列が現在のロケールのエンコーディングで表現可能である場合のみ、後者の型で正しくアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, the usual standard C functions don't work with wchar_t strings, so another set of functions exists which do the same thing but accept wchar_t * instead of char *.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T154223Z">
        <seg>もちろん、普通の標準 C 関数は wchar_t 文字列をうまく取り扱うことができません。そのため、char * の代わりに wchar_t * を受け取る別の関数群が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, event tables are more succinct and centralize all event handler bindings in one place.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T021901Z">
        <seg>一方で、イベントテーブルの方が簡潔であり、すべてのイベントハンドラを一箇所に集約することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, event tables are still perfectly fine in simple situations where this extra flexibility is not needed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T031457Z">
        <seg>一方で、追加の柔軟性が必要とされないような単純な状況では、イベントテーブルもまだ充分に役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, the features provided make them very useful for storing all kinds of small to medium volumes of hierarchically-organized, heterogeneous data.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T150843Z">
        <seg>一方で、階層構造を持ち、小規模から中規模であるすべての種類のデータを格納するのにこれらの提供機能が非常に役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, you still need to know about the event tables if only because you are going to see them in many samples and examples.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T023007Z">
        <seg>一方で、単に多くのサンプルでイベントテーブルを見かけるからという理由だけであっても、イベントテーブルについて学ぶ必要性は依然として残っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One area where wxWidgets can help is in adapting dialogs for the lower resolution screens that inevitably accompany a smaller form factor.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T152627Z">
        <seg>wxWidgets が支援できることのひとつにダイアログを (より小さいフォームファクタに付きものな) より低解像度の画面に適応させることが挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One is to define a entirely new event class (typically deriving from wxEvent or wxCommandEvent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T042051Z">
        <seg>ひとつは完全に新しいイベントクラスを定義することです。 (通常は wxEvent か wxCommandEvent を継承します) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of the unfortunate consequences of the possibility to pass wxString to wxPrintf() without using c_str() is that it is now impossible to pass the elements of unnamed enumerations to wxPrintf() and other similar vararg functions, i.e.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T130830Z">
        <seg>c_str() を使用せずに wxString を wxPrintf() へ渡せるようにした不幸な結果のひとつとして、無名 enum の要素を wxPrintf() や類似の可変長関数へ渡せなくなりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One of them uses event table macros and allows you to define the binding between events and their handlers only statically, i.e., during program compilation.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130511T235640Z">
        <seg>ひとつは イベントテーブル マクロを使用する方法で、静的 (コンパイル時) にのみ、イベントとそのハンドラをバインドすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One use of PushEventHandler is to temporarily or permanently change the behaviour of the GUI.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T063100Z">
        <seg>PushEventHandler の使用法のひとつは、一時的または永続的に GUI の振る舞いを変更することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only one log target is active at any moment, this is the one used by wxLogXXX() functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111418Z">
        <seg>いつでも 有効な ログターゲットはひとつだけで、これが wxLogXXX() 関数によって使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only one log target is active at any moment, this is the one used by wxLogXXX() functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T022742Z">
        <seg>いつでも 有効な ログターゲットはひとつだけで、これが wxLogXXX() 関数によって使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only the binary files are needed during program execution.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T235357Z">
        <seg>プログラム実行時にはバイナリファイルだけが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Opens the file, returning true if successful.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T092037Z">
        <seg>ファイルをオープンします。オープンに成功したら true を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or, you can use identifiers below wxID_LOWEST.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080108Z">
        <seg>もしくは wxID_LOWEST 以下の識別子を使用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other (future) implementations of wxConfigBase might also understand GTK resource files or their analogues on the KDE side.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T153903Z">
        <seg>他の (将来の) wxConfigBase の実装では GTK リソースファイルや、KDE におけるその類似品も扱えるようになるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other (future) implementations of wxConfigBase might also understand GTK resource files or their analogues on the KDE side.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T151604Z">
        <seg>他の (将来の) wxConfigBase の実装では GTK リソースファイルや、KDE におけるその類似品も扱えるようになるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other Types of Sizers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141008Z">
        <seg>その他のサイザー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other unexpected compilation errors may arise but they should happen even more rarely than the above-mentioned ones and the solution should usually be quite simple: just use the explicit methods of wxUniChar and wxCStrData classes instead of relying on their implicit conversions if the compiler can't choose among them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T034514Z">
        <seg>他にも予期しないコンパイルエラーが発生することがありますが、発生頻度が上で挙げたものより少なく、解決方法も非常に単純です: コンパイラが wxUniChar と wxCStrDatajust のどちらを使用すれば良いか判断できない場合には、暗黙的な変換に頼るのではなく、明示的にそれらの関数を使用するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise you can only use the global wxTheApp pointer which is of type wxApp*.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152720Z">
        <seg>そうしない場合、wxApp * 型のグローバル変数である wxTheApp ポインタを使用するしかありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise you can only use the global wxTheApp pointer which is of type wxApp *.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161635Z">
        <seg>そうしない場合、wxApp * 型のグローバル変数である wxTheApp ポインタを使用するしかありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overridden wxEventFilter method.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T065638Z">
        <seg>wxEventFilter をオーバーライドした関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Override the functions CanDoLayoutAdaptation and DoLayoutAdaptation to test for adaptation applicability and perform the adaptation.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T144851Z">
        <seg>適応の可否の確認や適応を行なうには CanDoLayoutAdaptation と DoLayoutAdaptation をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Override this member function for any processing which needs to be done as the application is about t...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124236Z">
        <seg>アプリケーションの終了時に処理を行なう必要がある場合にこのメンバ関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Override this to perform layout adaptation, such as making parts of the dialog scroll and resizing th...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T150015Z">
        <seg>ダイアログの一部をスクロールしたり、画面に合わせてダイアログをリサイズするなど、レイアウトの適応を行なう場合にこの関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Override this to return a window containing the main content of the dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T150658Z">
        <seg>ダイアログのメインコンテンツを含むウィンドウを返却するためにこの関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performance Implications of Using UTF-8</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T141437Z">
        <seg>UTF-8 を使用することによる性能への影響</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Performs layout adaptation, usually if the dialog is too large to fit on the display.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T145004Z">
        <seg>レイアウトの適応を行います。これは通常、画面サイズに対してダイアログが大きすぎる場合に行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Planes are numbered from 0 to 16, where the first one is the BMP, or Basic Multilingual Plane.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T024832Z">
        <seg>面は 0 から 16 までの番号が振られており、最初の面が BMP (基本多言語面) です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Platform-specific methods for creating a wxBitmap object from an existing file are catered for, and this is an occasion where conditional compilation will sometimes be required.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T153829Z">
        <seg>既存のファイルから wxBitmap オブジェクトを作成するのにプラットフォーム独自の関数が提供されていますが、ときにこれは条件付きコンパイルを必要とすることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Platform-specific methods for creating a wxBitmap object from an existing file are catered for, and this is an occasion where conditional compilation will sometimes be required.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T150030Z">
        <seg>既存のファイルから wxBitmap オブジェクトを作成するのにプラットフォーム独自の関数が提供されていますが、ときにこれは条件付きコンパイルを必要とすることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please consult wxWidgets home page for the most up-to-date translations - and if you translate it into one of the languages not done yet, your translations would be gratefully accepted for inclusion into future versions of the library!</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T043125Z">
        <seg>最新の翻訳版は wxWidgets のホームページを参照してください。そして、あなたが wxWidgets をまだ翻訳されていない言語に翻訳した場合、私達はそれを将来のバージョンに含めることを喜んで承認するでしょう! </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please refer to these sections for details.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080604Z">
        <seg>詳細は各章を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please see Dynamic Event Handling for the discussion of Bind&lt;&gt;().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T003033Z">
        <seg>Bind&lt;&gt;() についての議論は 動的イベント処理 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please see Log Messages Selection for more information about the log components.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T130609Z">
        <seg>ログコンポーネントについての詳細は ログメッセージの選択 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please see Unicode-related Changes for the details of these changes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T005256Z">
        <seg>変更の詳細は Unicode に関連する変更 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please see its documentation for more details.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145900Z">
        <seg>詳細はドキュメントを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pluggable Event Handlers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130517T170712Z">
        <seg>動的イベントハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pluggable event handlers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T061155Z">
        <seg>動的イベントハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Post an event to be processed later.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T143811Z">
        <seg>あとで処理されるイベントを送信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Potential Unicode Pitfalls</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T005632Z">
        <seg>Unicode の潜在的な落とし穴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Preferred:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124733Z">
        <seg>推奨:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Previous</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145431Z">
        <seg>Previous</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Previous versions of wxWidgets used to rely on the creation of a global application object, but this is no longer recommended, because required global initialization may not have been performed at application object construction time.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T132359Z">
        <seg>以前の wxWidgets ではグルーバルなアプリケーションオブジェクトを作成していましたが、もはやこれは非推奨です。なぜなら、期待したグローバルオブジェクトの初期化がアプリケーションオブジェクトの構築時に行われない可能性があるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ProcessWindowEvent(event);
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150209Z">
        <seg>ProcessWindowEvent(event);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Processes an event, searching event tables and calling zero or more suitable event handler function(s...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T063844Z">
        <seg>イベントテーブルを検索し、0 個以上の適切なイベントハンドラ関数を呼び出してイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming with wxBoxSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T154127Z">
        <seg>wxBoxSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming with wxFlexGridSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T114257Z">
        <seg>wxFlexGridSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming with wxGridSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T114018Z">
        <seg>wxGridSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming with wxStaticBoxSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115129Z">
        <seg>wxStaticBoxSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Pushes this event handler onto the event stack for the window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T151849Z">
        <seg>このイベントハンドラをウィンドウのイベントスタック上に追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Putting the same line in a child event table will crash during run-time because the MyFrame method will be called on a wrong object -- it's easy to convince oneself that the only object that can be used here is the pointer to the child, as wxWidgets has nothing else.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T030015Z">
        <seg>同じ内容を子イベントテーブルへ配置した場合、実行時にクラッシュするでしょう。なぜなら、異なる型のオブジェクトに対して MyFrame メンバ関数を呼びだそうとするためです。ここでは子コントロールのポインタしか使用できないからだということは簡単に分かってもらえると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Queue an event for processing on the given object.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T144350Z">
        <seg>特定のオブジェクトで処理するためにイベントをキューへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Queue event for a later processing.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T143854Z">
        <seg>あとで処理するためにイベントをキューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read it if you want to know more about how to write programs able to work with characters from languages other than English.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T155422Z">
        <seg>英語以外の言語で使用される文字を扱うプログラムを書く方法について、より詳しく知りたい場合はこの章を読んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Really last point is the consequence of the previous one: because of increased flexibility of Bind(), it is also safer as it is impossible to accidentally use a method of another class.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T030253Z">
        <seg>最後のポイントは前述のポイントの帰結です: Bind() の柔軟性が向上したため、うっかり他クラスのメンバ関数を使用してしまうことが不可能になり、安全性も向上しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Related classes: wxEvtHandler, wxWindow, wxEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153247Z">
        <seg>関連クラス: wxEvtHandler, wxWindow, wxEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Related Pages</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004632Z">
        <seg>関連ページ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Replaces the text starting at the first position up to (but not including) the character at the last ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160617Z">
        <seg>最初の位置から最後の位置まで (ただし、含みません) のテキストを置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Return the localized resources directory containing the resource files of the specified category for ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T041010Z">
        <seg>所定の言語について、指定されたカテゴリのリソースファイルが含まれるディレクトリを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a copy of the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150413Z">
        <seg>イベントのコピーを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns a lightweight intermediate class which is in turn implicitly convertible to both const char* ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123831Z">
        <seg>暗黙的に const char* や const wchar_t* へ変換可能な軽量の中間クラスを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns an object with string data that is implicitly convertible to char* pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T125351Z">
        <seg>暗黙的に char* ポインタへ変換可能な文字列データを持つオブジェクトを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the multibyte (C string) representation of the string using conv's wxMBConv::cWC2MB method an...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T160801Z">
        <seg>wxMBConv::cWC2MB 関数を使用して文字列をマルチバイト (C 形式) 表現方法に変換し、wxCharBuffer として返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the object (usually a window) associated with the event, if any.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T045804Z">
        <seg>イベントに関連付けられているオブジェクト (通常はウィンドウです) がある場合、それを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns the orientation of the box sizer, either wxVERTICAL or wxHORIZONTAL.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T150753Z">
        <seg>ボックスサイザーの方向を返します。 wxVERTICAL か wxHORIZONTAL のいずれかの値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Returns true if this dialog can and should perform layout adaptation using DoLayoutAdaptation(), usually if the dialog is too large to fit on the display.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T144940Z">
        <seg>このダイアログが DoLayoutAdaptation() を用いてレイアウトの適応を行なうことができ、また、行なう必要がある場合に true を返却します。これは通常、画面サイズに対してダイアログが大きすぎる場合に行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Same as utf8_str().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T083030Z">
        <seg>utf8_str() と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Scrolled window derived from wxPanel.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T152057Z">
        <seg>wxPanel を継承したスクロール可能なウィンドウ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Search</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004717Z">
        <seg>検索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See Standard event identifiers for the list of standard identifiers available.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T124650Z">
        <seg>使用可能な標準識別子のリストは 標準イベント識別子 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See wxMemoryDC for an example of drawing onto a bitmap.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T135238Z">
        <seg>ビットマップへの描画の例は wxMemoryDC を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See wxString Overview for more info.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T035303Z">
        <seg>詳しくは wxString の概要 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145905Z">
        <seg>参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also Writing non-English applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T011634Z">
        <seg>非英語アプリケーションの作成 も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also http://unicode.org/glossary/ for the official definitions of the terms reported above.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T035405Z">
        <seg>上で述べた用語の正式な定義は http://unicode.org/glossary/ を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also wxPanel and wxWindow for inherited member functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T152511Z">
        <seg>また、wxDialog が継承している関数については wxPanel と wxWindow を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also wxTopLevelWindow and wxWindow for inherited member functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T152501Z">
        <seg>また、wxDialog が継承している関数については wxTopLevelWindow と wxWindow を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also the event sample for an example of code defining and working with the custom event types.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T154526Z">
        <seg>コードの書き方とカスタムイベント型の動作例として イベントサンプル も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also the Event Sample for a complete example of code defining and working with the custom event types.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T155743Z">
        <seg>コードの書き方とカスタムイベント型の動作例として イベントサンプル も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also the GNU gettext documentation linked from docs/html/index.htm in your wxWidgets distribution.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T002332Z">
        <seg>GNU gettext のドキュメントも参照してください。これは wxWidgets の配布物の中にある docs/html/index.htm からリンクしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See also:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T041459Z">
        <seg>参照:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See below for how you can do it.) In this case, the button's event table will be searched, then the parent panel's, then the frame's.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T023925Z">
        <seg>マウスイベントで同じことを実現する方法は以下を参照してください) この場合、まずボタンのイベントテーブルが検索され、続いて、その親パネル、フレームの順に検索されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>See the event sample for an example of doing it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T032908Z">
        <seg>これを行なっているサンプルとして イベントサンプル を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SetSizer( topsizer );      // use the sizer for layout</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112903Z">
        <seg>SetSizer( topsizer );      // レイアウトにサイザーを使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SetSizerAndFit(topsizer); // use the sizer for layout and set size and hints
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145645Z">
        <seg>SetSizerAndFit(topsizer); // レイアウトにサイザーを使用し、サイズとヒントを設定する
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SetSizerAndFit(topsizer); // use the sizer for layout and size window</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T144924Z">
        <seg>SetSizerAndFit(topsizer); // レイアウトにサイザーを使用して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SetTopWindow(the_frame);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161010Z">
        <seg>SetTopWindow(the_frame);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the adaptation mode, overriding the global adaptation flag.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T144410Z">
        <seg>適応モードを設定し、グルーバルな適応フラグを上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the aggressiveness of search for buttons and sizers to be in the non-scrolling part of a layout-...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T152624Z">
        <seg>レイアウトの適応を行なうダイアログで非スクロール領域内に配置するボタンやサイザーを探す際の積極性を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the event handler for this window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130517T170833Z">
        <seg>このウィンドウのイベントハンドラを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the log level for the given component.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T105021Z">
        <seg>指定されたコンポーネントのログレベルを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the new text control value.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160428Z">
        <seg>テキストコントロールの新しい値を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the pointer to the next handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T150800Z">
        <seg>次のイベントハンドラへのポインタを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the selection for the given page, returning the previous selection.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160105Z">
        <seg>指定されたページを選択し、以前選択していたページを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the size of the window in pixels.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155326Z">
        <seg>ピクセル単位でウィンドウサイズを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sets the specified log target as the active one.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091549Z">
        <seg>指定されたログターゲットを有効なログターゲットとして設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Setting the appropriate locale in your program to use the strings for the given language: see wxLocale.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T002055Z">
        <seg>与えられた言語の文字列を使用するように、プログラム内で適切なロケールを設定する: wxLocale を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Show a general purpose message dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T082545Z">
        <seg>汎用的なメッセージダイアログを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shows an application-modal dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T150143Z">
        <seg>モーダルダイアログを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shows or hides the window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141550Z">
        <seg>ウィンドウの表示非表示を切り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123350Z">
        <seg>同様に、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similarly, wxWX2WCbuf can be used for the return type of wxString::wc_str().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T171409Z">
        <seg>同様に、wxString::wc_str() の戻り値の型として wxWX2WCbuf を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Simple events such as menu commands are usually processed at the level of a top-level window containing the menu, so let's suppose that you need to handle some events in MyFrame class deriving from wxFrame.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T022747Z">
        <seg>メニューコマンドといった単純なイベントは普通、メニューを保持するトップレベルウィンドウで処理されます。そのため、いくつかのイベントは wxFrame を継承した MyFrame で処理する必要があるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since version 2.2.x of wxWidgets, each event type is identified by ID which is given to the event type at runtime which makes it possible to add new event types to the library or application without risking ID clashes (two different event types mistakingly getting the same event ID).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T150704Z">
        <seg>wxWidgets 2.2.x から 実行時に 決定される ID を使用してイベントの型を識別します。これにより、ID の衝突を起こす (異なるふたつのイベント型が同じイベント ID を取得してしまう) ことなく、新しいイベント型をライブラリやアプリケーションに追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since wxWidgets 3.0 Unicode support is always enabled and while building the library without it is still possible, it is not recommended any longer and will cease to be supported in the near future.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T035942Z">
        <seg>wxWidgets 3.0 からは Unicode が常に有効になります。Unicode を使用せずにライブラリをビルドすることはまだ可能ですが、もはや非推奨であり、近い将来、サポートされなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Situations where automatic scrolling adaptation may fail</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T145140Z">
        <seg>自動スクロールの適応に失敗する状況</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sizer overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T110550Z">
        <seg>サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sizers Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T135006Z">
        <seg>サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sizers, as represented by the wxSizer class and its descendants in the wxWidgets class hierarchy, have become the method of choice to define the layout of controls in dialogs in wxWidgets because of their ability to create visually appealing dialogs independent of the platform, taking into account the differences in size and style of the individual controls.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T140902Z">
        <seg>wxWidgets のクラス階層における wxSizer クラスと、その子孫クラスによって代表されるサイザーは、wxWidgets においてダイアログ内のコントロールのレイアウトを決定するための選択法になりました。なぜなら、サイザーによって、各コントロールのサイズやスタイルの違いを考慮しつつ、プラットフォームに依存しない、視覚的に魅力的なダイアログを作ることができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sizers, as represented by the wxSizer class and its descendants in the wxWidgets class hierarchy, have become the method of choice to define the layout of controls in dialogs in wxWidgets because of their ability to create visually appealing dialogs independent of the platform, taking into account the differences in size and style of the individual controls.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T112812Z">
        <seg>wxWidgets のクラス階層における wxSizer クラスと、その子孫クラスによって代表されるサイザーは、wxWidgets においてダイアログ内のコントロールのレイアウトを決定するための選択法になりました。なぜなら、サイザーによって、各コントロールのサイズやスタイルの違いを考慮しつつ、プラットフォームに依存しない、視覚的に魅力的なダイアログを作ることができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Small.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T150454Z">
        <seg>小さい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So before you make the choice between static event tables and dynamically connecting the event handlers, let us discuss these two ways in more detail.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T022437Z">
        <seg>そのため、イベントテーブルと動的イベントハンドラのいずれかを選択する前に、それぞれの方法についてより詳しく議論しておきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So even if the application has derived new classes to customize behaviour, your utility can indulge in a spot of body-snatching.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T041724Z">
        <seg>そのため、アプリケーションの振る舞いをカスタマイズするために新しいクラスを継承していたとしても、あなたのユーティリティから自由に振る舞いを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So the existing code needs to be reviewed when upgrading to wxWidgets 3.0 and the new code should be used with this in mind and ideally avoiding implicit conversions to char*.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T141338Z">
        <seg>そのため、wxWidgets 3.0 にアップグレードするときは既存のコードを見直す必要があるとともに、新しいコードではこのことを意識しつつ、理想的には char* への暗黙的な変換を避けるようにするべきです。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So you need to be able to convert the data to various representations and the wxString methods wxString::ToAscii(), wxString::ToUTF8() (or its synonym wxString::utf8_str()), wxString::mb_str(), wxString::c_str() and wxString::wc_str() can be used for this.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T160441Z">
        <seg>そのため、データを様々な表現方法へ変換できる必要がありますが、そのための wxString の関数として wxString::ToAscii()、wxString::ToUTF8() (またはそのシノニムの wxString::utf8_str())、wxString::mb_str()、wxString::c_str()、wxString::wc_str() を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some compilers (notably g++) warn about this but even if they don't, this</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124635Z">
        <seg>いくつかのコンパイラ (特に g++) では警告が出ますし、仮に警告が出ないとしても</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some controls can calculate their height, but not their width (e.g. a single line text control):</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T133610Z">
        <seg>(単一行テキストコントロールなど) いくつかのコントロールでは自身の高さを計算できても、幅を計算することができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some device contexts are created temporarily in order to draw on a window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T140825Z">
        <seg>いくつかのデバイスコンテキストはウィンドウへの描画のために一時的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some handlers are provided as standard, but if you have special requirements, you may wish to initialise the wxBitmap class with some extra handlers which you write yourself or receive from a third party.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155145Z">
        <seg>いくつかのハンドラは標準で提供されていますが、特別な要件がある場合に自分で書いたハンドラやサードパーティーのハンドラを使用して wxBitmap クラスを初期化したいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some handlers are provided as standard, but if you have special requirements, you may wish to initialise the wxBitmap class with some extra handlers which you write yourself or receive from a third party.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142958Z">
        <seg>いくつかのハンドラは標準で提供されていますが、特別な要件がある場合に自分で書いたハンドラやサードパーティーのハンドラを使用して wxBitmap クラスを初期化したいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some of advantages in using wxWidgets log functions are:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T013939Z">
        <seg>wxWidgets のログ関数を使用するいくつかの利点は以下の通りです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some of wxLog implementations, most notably the standard wxLogGui class, buffer the messages (for exa...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T114946Z">
        <seg>いくつかの wxLog の実装、特に標準の wxLogGui クラスではメッセージを (例えば無数のメッセージダイアログが次々と表示されるのを防止するために) バッファリングします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes it is also necessary to go from ANSI strings to wxStrings.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T144136Z">
        <seg>時々、ANSI 文字列を wxString に変換する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes you wish to use a .ico resource on Windows, and XPMs on other platforms (for example to take advantage of Windows' support for multiple icon resolutions).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T150248Z">
        <seg>Windows では .ico リソースを、それ以外のプラットフォームでは xpm を使用したいと思うことがあるかもしれません。(例えば、Windows の対応している多重解像度のアイコンを有効活用するためにです) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sorry, this topic has yet to be written.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004446Z">
        <seg>このトピックはまだ書かれていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special preprocessor tokens (__FILE__, __DATE__ and __TIME__)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T150858Z">
        <seg>特別なプリプロセッサトークン (__FILE__, __DATE__, __TIME__)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specifies that log messages with level greater (numerically) than logLevel should be ignored and not ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T100124Z">
        <seg>(数値的に) logLevel より大きいログレベルを持つメッセージを無視し、有効なログターゲットに送信されないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Standard button and menu IDs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142809Z">
        <seg>標準ボタンとメニュー ID。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starting with wxWidgets 2.9.1, logging functions can be safely called from any thread.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T115025Z">
        <seg>wxWidgets 2.9.1 から、どのスレッドからでも安全にロギング関数を呼べるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starts editing the label of the given item.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160324Z">
        <seg>指定された項目のラベル編集を開始します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String functions (strlen(), strcpy(), ...)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T150738Z">
        <seg>文字列関数 (strlen(), strcpy(), ...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such items are sometimes referred to as the children of the sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T143436Z">
        <seg>時々、そのようなアイテムをサイザーの子と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Such objects are implicitly convertible to char and wchar_t pointers, respectively, and so the result of, for example, wxString::ToUTF8() can always be passed directly to a function taking const char*.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T035325Z">
        <seg>返却されたオブジェクトは暗黙的に char ポインタや wchar_t ポインタへそれぞれ変換されます。そのため、例えば wxString::ToUTF8() の戻り値を const char* を受け取る関数へ常に渡すことができます。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Supported Bitmap File Formats</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154820Z">
        <seg>対応しているビットマップファイル形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Supported bitmap file formats</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T141111Z">
        <seg>対応しているビットマップファイル形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>TODO: Probably deprecated, Bind() provides a better way to do this</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130517T170821Z">
        <seg>TODO: おそらく非推奨であり、Bind() がより良い方法を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Table of contents:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131027Z">
        <seg>目次:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Test if this event should be propagated or not, i.e.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T154413Z">
        <seg>イベントを伝播させる必要があるかどうかを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxBitmap class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T153817Z">
        <seg>wxBitmap クラスはモノクロとカラーの両方について、プラットフォームに依存するビットマップの概念をカプセル化するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The UTF or Unicode Transformation Formats are algorithms mapping the Unicode code points to code unit sequences.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T030604Z">
        <seg>UTF (Unicode Transformation Format) は Unicode コードポイントをコード単位の並びにマッピングするためのアルゴリズムです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_BUTTON macro demonstrates that the originating event does not have to come from the window class implementing the event table -- if the event source is a button within a panel within a frame, this will still work, because event tables are searched up through the hierarchy of windows for the command events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T023717Z">
        <seg>EVT_BUTTON マクロはイベントの発生元がウィンドウクラスである必要がないことを表しています。イベントテーブルの検索はウィンドウ階層をたどりながら行われるため、イベントの発生元がフレーム内のパネルにあるボタンである場合でも動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dialog sample illustrates this approach by defining a custom log target customizing the dialog used by wxLogGui for the single messages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T130128Z">
        <seg>ダイアログ サンプルでは wxLogGui でダイアログを使用するようにカスタマイズしたカスタムログターゲットを定義する例を解説しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The BMP contains characters for all modern languages, and a large number of special characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T024943Z">
        <seg>BMP にはすべての現代語の文字と、多くの特殊文字が含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_ACTIVATE and EVT_ACTIVATE_APP macros intercept activation and deactivation events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080731Z">
        <seg>EVT_ACTIVATE、EVT_ACTIVATE_APP マクロはアクティブ化、非アクティブ化イベントを捉えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_BUTTON macro demonstrates that the originating event does not have to come from the window class implementing the event table -- if the event source is a button within a panel within a frame, this will still work, because event tables are searched up through the hierarchy of windows for the command events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T092743Z">
        <seg>EVT_BUTTON マクロはイベントの発生元がウィンドウクラスである必要がないことを表しています。ウィンドウ階層をたどりながらイベントテーブルを検索するため、イベントの発生元がフレーム内のパネルにあるボタンである場合でも動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_CLOSE macro handles window closure called via wxWindow::Close.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081023Z">
        <seg>EVT_CLOSE マクロは wxWindow::Close によるウィンドウの終了を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_DROP_FILES macros handles file drop events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081141Z">
        <seg>EVT_DROP_FILES マクロはファイルドロップイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_ERASE_BACKGROUND macro is used to handle window erase requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081221Z">
        <seg>EVT_ERASE_BACKGROUND マクロはウィンドウの消去要求を処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_IDLE macro handle application idle events (to process background tasks, for example).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081435Z">
        <seg>EVT_IDLE マクロはアプリケーションのアイドルイベントを処理します。 (例えば、バックグラウンド処理などに使用します)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_INIT_DIALOG macro is used to handle dialog initialisation.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081504Z">
        <seg>EVT_INIT_DIALOG マクロはダイアログの初期化イベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_MOVE macro is used to handle a window move.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081717Z">
        <seg>EVT_MOVE マクロはウィンドウの移動を処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_PAINT macro is used to handle window paint requests.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081734Z">
        <seg>EVT_PAINT マクロはウィンドウの描画要求を処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_SET_CURSOR macro is used for special cursor processing.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081841Z">
        <seg>EVT_SET_CURSOR マクロは特殊なカーソル処理のために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_SET_FOCUS and EVT_KILL_FOCUS macros are used to handle keyboard focus events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081249Z">
        <seg>EVT_SET_FOCUS、EVT_KILL_FOCUS マクロはキーボードフォーカスイベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_SIZE macro doesn't need a window identifier, since normally you are only interested in the current window's size events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075824Z">
        <seg>EVT_SIZE マクロはウィンドウ識別子を必要としません。なぜなら、通常は現在のウィンドウのリサイズイベントにのみ関心があるはずだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_SIZE macro is used to handle a window resize.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081858Z">
        <seg>EVT_SIZE マクロはウィンドウのりサイズを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_SPLITTER_SASH_POS_CHANGED, EVT_SPLITTER_UNSPLIT and EVT_SPLITTER_DCLICK macros are used to handle the various splitter window events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T082103Z">
        <seg>EVT_SPLITTER_SASH_POS_CHANGED、EVT_SPLITTER_UNSPLIT、EVT_SPLITTER_DCLICK マクロはさまざまなウィンドウ分割イベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_SYS_COLOUR_CHANGED macro is used to handle events informing the application that the user has changed the system colours (Windows only).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T082225Z">
        <seg>EVT_SYS_COLOUR_CHANGED マクロはユーザによるシステムカラーの変更イベントを処理するために使用されます。 (Windows のみ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The EVT_UPDATE_UI macro is used to handle user interface update pseudo-events, which are generated to give the application the chance to update the visual state of menus, toolbars and controls.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T082610Z">
        <seg>EVT_UPDATE_UI マクロはアプリケーションがメニュー、ツールバー、コントロールの見た目の状態を変更するための擬似イベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Idea Behind Sizers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T140939Z">
        <seg>サイザーの背後にある考え方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Unicode standard divides the space of all possible code points in planes; a plane is a range of 65,536 (1000016) contiguous Unicode code points.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T024646Z">
        <seg>Unicode 標準規格では取りうるすべてのコードポイントを 面 に分割しています; 面とは、連続する 65,536 (1000016) 個の Unicode コードポイントのことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The actual error might have been detected inside wxWidgets code (say, in wxFile::Write), so the calling function doesn't really know the exact reason of the failure, it only knows that the data file couldn't be written to the disk.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091833Z">
        <seg>実際のエラーは wxWidgets コード (wxFile::Write) 内で検知されるため、呼び出し元の関数では失敗の正確な原因を実際に知ることはできず、ディスクへの書き込みに失敗したことしか分かりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The actual error might have been detected inside wxWidgets code (say, in wxFile::Write), so the calling function doesn't really know the exact reason of the failure, it only knows that the data file couldn't be written to the disk.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T021516Z">
        <seg>実際のエラーは wxWidgets コード (wxFile::Write) 内で検知されるため、呼び出し元の関数では失敗の正確な原因を実際に知ることはできず、ディスクへの書き込みに失敗したことしか分かりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The alternative is to explicitly delete child frames in the top-level frame's wxCloseEvent handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T160758Z">
        <seg>アプリケーションを終了する別の方法はトップレベルフレームの wxCloseEvent イベントハンドラで明示的に子フレームを削除することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The application normally shuts down when the last of its top level windows is closed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161802Z">
        <seg>通常、アプリケーションは最後のトップレベルウィンドウが閉じられたときに終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The automatically generated identifiers are always negative and so will never conflict with the user-specified identifiers which must be always positive.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T075520Z">
        <seg>自動生成される識別子は常に負の値のため、必ず正の値でなければならないユーザ定義の識別子と衝突することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The basic idea behind a wxBoxSizer is that windows will most often be laid out in rather simple basic geometry, typically in a row or a column or several hierarchies of either.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T162347Z">
        <seg>wxBoxSizer の基本的な考え方は、ほとんどの場合ウィンドウは とても単純で基本的な配置、よくあるのは行や列、またはその階層内にレイアウトされるという考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The basic idea behind a box sizer is that windows will most often be laid out in rather simple basic ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T135121Z">
        <seg>ボックスサイザーの基本的な考え方は、ほとんどの場合ウィンドウは とても単純で基本的な配置、よくあるのは行や列、またはその階層内にレイアウトされるという考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The basic idea behind a box sizer is that windows will most often be laid out in rather simple basic geometry, typically in a row or a column or several hierarchies of either.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145740Z">
        <seg>ボックスサイザーの基本的な考え方は、ほとんどの場合ウィンドウは とても単純で基本的な配置、よくあるのは行や列、またはその階層内にレイアウトされるという考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The child frame classes send the event directly to the associated view which still forwards it to its document object.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T153151Z">
        <seg>子フレームクラスはイベントを関連するビューへ直接送信し、このビューがさらに関連するドキュメントへイベントを転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The config classes provide a way to store some application configuration information.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T153634Z">
        <seg>コンフィグクラスではアプリケーションの設定情報を格納するための方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default is 640x480-16.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155505Z">
        <seg>デフォルトは 640x480-16 です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default processing is to pop up a message box to inform the user about it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T005459Z">
        <seg>デフォルトの処理ではメッセージボックスをポップアップして通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The details of event propagation up the window hierarchy are described in the next section.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T145337Z">
        <seg>ウィンドウ階層内におけるイベント伝播についての詳細は次の章で述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The device context is intended to represent a number of output devices in a generic way, with the same API being used throughout.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T140810Z">
        <seg>デバイスコンテキストは汎用的な方法で、つまり同じ API を通して操作できる多くの出力デバイスを表現することを目的としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dialog does custom painting and/or event handling not handled by the scrolled window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T145954Z">
        <seg>ダイアログでカスタムドローを行なっている。スクロール可能なウィンドウではイベント処理が行われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dialog doesn't use sizers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T145420Z">
        <seg>ダイアログでサイザーを使用していない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dialog has unusual layout, for example a vertical sizer containing a mixture of standard buttons and other controls.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T150244Z">
        <seg>標準ボタンと他のコントロールが混在する垂直方向のサイザーなど、通常とは異なるレイアウトを持っている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dialog implementation makes assumptions about the window hierarchy, for example getting the parent of a control and casting to the dialog class.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T150331Z">
        <seg>コントロールの親をダイアログにキャストするなど、ダイアログの実装でウィンドウの階層構造について仮定を立てている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The dialog makes assumptions about the sizer hierarchy, for example to show or hide children of the top-level sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T150324Z">
        <seg>トップレベルサイザーの子コントロールの表示・非表示を切り替えるなど、サイザーの階層構造について仮定を立てている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The documentation for specific event macros is organised by event class.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080526Z">
        <seg>このドキュメントではイベントマクロをイベントクラスごとに分類しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest workaround is to give a name to the enum.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T130921Z">
        <seg>もっとも簡単な回避方法としては enum に名前をつけることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The event base class</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055055Z">
        <seg>イベントの基底クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The event is passed to the next event handler, if any, in the event handler chain, i.e., the steps (1) to (4) are done for it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T141426Z">
        <seg>イベントハンドラの連鎖内において、次のイベントハンドラが存在する場合、次のイベントハンドラへイベントを引き渡します。つまり、そのイベントハンドラに対してステップ (1) から (4) を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The event table containing all the handlers defined using the event table macros in this class and its base classes is examined.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T032622Z">
        <seg>このクラスと基底クラスで (イベントテーブルマクロによって) 定義されたすべてのイベントハンドラを含むイベントテーブルを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The event table tells wxWidgets how to map events to member functions and in our example it could look like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T021949Z">
        <seg>イベントテーブルはイベントとメンバ関数のマッピングを wxWidgets へ知らせるものであり、以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The events do propagate beyond the frames, however.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T033331Z">
        <seg>しかし、通常のイベントはフレームを超えて伝播します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first of them should be only used for the string containing 7-bit ASCII characters only, anything else will be replaced by some substitution character.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T161038Z">
        <seg>最初の関数は文字列に 7 ビット ASCII 文字のみが含まれる場合にだけ使用してください。ASCII 文字以外の文字はなんらかの置換文字に置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first one is the most flexible and allows you to change the formatting of the messages, dynamically filter and redirect them and so on -- all log messages, except for those generated by wxLogFatalError(), pass by this function.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112123Z">
        <seg>最初の関数はもっとも柔軟で、メッセージ形式の変更、メッセージの動的なフィルタリングやリダイレクトなどを行なうことができます。wxLogFatalError() で生成されたメッセージを除いて、すべてのメッセージがこの関数に引き渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first one may be overridden to do whatever you want but you have to distinguish between the different message types yourself.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T023745Z">
        <seg>最初の関数をオーバーライドすると何でもできますが、異なるメッセージ型を自分で区別する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first two entries map menu commands to two different member functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075626Z">
        <seg>最初の 2 つのエントリはメニューコマンドを異なる 2 つのメンバ関数にマッピングしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following describes the differences between these device contexts and when you should use them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T140928Z">
        <seg>各デバイスコンテキストの違いと、それを使用するタイミングについて以下で説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following flags can be passed to this function:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115722Z">
        <seg>この関数には以下のフラグを指定できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following lists the formats handled on different platforms.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T141211Z">
        <seg>各プラットフォームで対応している形式の一覧を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following sample shows a dialog with three buttons, the first one has a stretch factor of 1 and thus gets stretched, whereas the other two buttons have a stretch factor of zero and keep their initial width:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T151132Z">
        <seg>以下に 3 個のボタンを持つダイアログの例を示します。最初のボタンはストレッチ係数に 1 を指定しているため、サイズが伸長していますが、他のふたつのボタンはストレッチ係数が 0 のため、初期サイズを維持しています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following sample shows a listbox and three buttons in a horizontal box sizer; one button is centred, one is aligned at the top, one is aligned at the bottom:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T144852Z">
        <seg>以下に水平方向のボックスサイザー内にリストボックスと 3 個のボタンを配置した場合の例を示します; それぞれのボタンは中央寄せ、上寄せ、下寄せです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following sample shows the same dialog as in the last sample, only the box sizer is a vertical box sizer now:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T152037Z">
        <seg>以下の例は最後の例と同じダイアログですが、ボックスサイザーが垂直方向のボックスサイザーとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following sample shows the same dialog as the one above, but using a flex grid sizer:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T154117Z">
        <seg>以下の例は上の例と同じダイアログですが、可変グリッドサイザーを使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following samples show dialogs with only one dialog item (a button) and a border of 0, 5, and 10 pixels around the button:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T142728Z">
        <seg>以下の例では単一のコントロール (ボタン) を持つダイアログについて、ボタンのまわりのボーダーを 0、5、10 ピクセルに設定しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following sections briefly describe how to program with individual sizer classes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T114908Z">
        <seg>続く章では個々のサイザークラスを用いてプログラムを書く方法について簡潔に説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following standard identifiers are supplied.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T041923Z">
        <seg>標準識別子には以下のものが用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The full class declaration might look like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015359Z">
        <seg>完全なクラス宣言は以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The functions below allow some limited customization of wxLog behaviour without writing a new log target class (which, aside from being a matter of several minutes, allows you to do anything you want).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T132007Z">
        <seg>以下の関数は新しいログターゲットを作成することなく、wxLog の振る舞いを限定的に変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The functions to use for error messages, i.e.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131401Z">
        <seg>エラーメッセージ用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The gettext Manual: http://www.gnu.org/software/gettext/manual/gettext.html</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T041513Z">
        <seg>gettext マニュアル: http://www.gnu.org/software/gettext/manual/gettext.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The idea behind sizers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T123524Z">
        <seg>サイザーの背後にある考え方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The important conclusion is that if you use wxChar instead of char, avoid using C style strings and use wxString instead and don't forget to enclose all string literals inside wxT() macro, your program automatically becomes (almost) Unicode compliant!</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T140756Z">
        <seg>重要な結論としては、char の代わりに wxChar を使い、 C 形式の文字列ではなく wxString を使い、すべてのリテラル文字列を wxT() マクロで囲むのを忘れなければ、あなたのプログラムは自動的に (ほぼ) Unicode 準拠になるということです!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The interface provided by wxString is the same independently of the format used internally.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T093231Z">
        <seg>wxString の提供するインタフェースはその内部フォーマットによらず、同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last method is the simplest one: you should override it if you simply want to redirect the log output elsewhere, without taking into account the level of the message.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T122658Z">
        <seg>最後の関数が一番単純です: メッセージのログレベルを考慮せず、単純にログ出力を他の場所へリダイレクトしたい場合はこの関数をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The last two modes override the global adaptation setting.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T150254Z">
        <seg>最後のふたつのモードは適応に関するグローバルな設定を上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The layout algorithm used by sizers in wxWidgets is closely related to layout systems in other GUI toolkits, such as Java's AWT, the GTK toolkit or the Qt toolkit.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T122918Z">
        <seg>wxWidgets のサイザーで用いられているレイアウトアルゴリズムは Java の AWT や GTK ツールキット、 Qt ツールキットといった他の GUI ツールキットで用いられているものと密接に関わりがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The list of dynamically bound event handlers, i.e., those for which Bind&lt;&gt;() was called, is consulted.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T135819Z">
        <seg>動的イベントハンドラ (つまり、Bind&lt;&gt;() でバインドしたイベントハンドラ) の一覧を調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The log targets can also be combined: for example you may wish to redirect the messages somewhere else (for example, to a log file) but also process them as normally.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T030443Z">
        <seg>ログターゲットは組み合わせて使用することもできます: 例えば、メッセージを他の場所 (例えばログファイルなど) にリダイレクトしつつ、通常通りの方法でも処理したいとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The log window frame has a menu allowing user to clear the log, close it completely or save all messages to file.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T025529Z">
        <seg>ログウィンドウフレームはメニューを持ち、ログの消去、終了、メッセージの保存を選択することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The logging facilities included in wxWidgets provide the base wxLog class which defines the standard interface for a log target as well as several standard implementations of it and a family of functions to use with them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131505Z">
        <seg>wxWidgets のロギング機能では ログ ターゲットに対する標準的なインタフェースを定義する基底 wxLog クラスや、いくつかのログクラスの標準的な実装とそれを使用する関数群を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The logging facilities included in wxWidgets provide the base wxLog class which defines the standard interface for a log target as well as several standard implementations of it and a family of functions to use with them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T074728Z">
        <seg>wxWidgets のロギング機能では ログターゲット に対する標準的なインタフェースを定義する基底 wxLog クラスや、いくつかのログクラスの標準的な実装とそれを使用する関数群を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next four lines define bindings of individual events to their handlers: the first two of them map menu commands from the items with the identifiers specified as the first macro parameter to two different member functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T023856Z">
        <seg>次の 4 行は個々のイベントにおけるイベントハンドラへのバインディングを定義しています: 最初のふたつはマクロの第 1 引数で指定された識別子を持つ項目のメニューコマンドを、ふたつの異なるメンバ関数にマッピングしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next section describes and shows what can be done with sizers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T114634Z">
        <seg>次の章ではサイザーを用いて何ができるのかを説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next thing to do is to decide whether you need to define a custom event class for events of this type or if you can reuse an existing class, typically either wxEvent (which doesn't provide any extra information) or wxCommandEvent (which contains several extra fields and also propagates upwards by default).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T155658Z">
        <seg>次に行なうことは、このイベント型用のカスタムイベントクラスを定義する必要があるかどうか、もしくは既存のクラス、通常は (追加の情報を持たない) wxEvent か （いくつかの追加フィールドを持ち、デフォルトで伝播する) wxCommandEvent のどちらかを再利用できるかどうかを決定することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The normal order of event table searching by ProcessEvent is as follows:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T023905Z">
        <seg>ProcessEvent によるイベントテーブルの検索は通常、以下の順番で行われます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The normal order of event table searching by ProcessEvent() is as follows, with the event processing stopping as soon as a handler is found (unless the handler calls wxEvent::Skip() in which case it doesn't count as having handled the event and the search continues):</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T065623Z">
        <seg>通常、ProcessEvent() によるイベントテーブルの検索順は以下のように行われ、イベントハンドラが見つかると処理を終了します。 (ただし、イベントハンドラで wxEvent::Skip() を呼ぶとイベントが処理されていないものとして扱われ、引き続き検索が行われます):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The normal usage of a log object (i.e. object of a class derived from wxLog) is to install it as the active target with a call to SetActiveTarget() and it will be used automatically by all subsequent calls to wxLogXXX() functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112509Z">
        <seg>ログオブジェクト (つまり、wxLog を継承したクラスのオブジェクト) の通常の使用方法は SetActiveTarget() を使用して有効なターゲットとして設定することで、それ以降に呼び出された wxLogXXX() 関数で自動的に使用されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The normal usage of a log object (i.e. object of a class derived from wxLog) is to install it as the active target with a call to  SetActiveTarget() and it will be used automatically by all subsequent calls to wxLogXXX() functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T023118Z">
        <seg>ログオブジェクト (つまり、wxLog を継承したクラスのオブジェクト) の通常の使用方法は  SetActiveTarget() を使用して有効なターゲットとして設定することで、それ以降に呼び出された wxLogXXX() 関数で自動的に使用されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The objects of this class may be instantiated to (temporarily) suppress output of wxLogXXX() functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T113141Z">
        <seg>このクラスのオブジェクトは wxLogXXX() 関数の出力を (一時的に) 抑制する場合にインスタンス化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The objects of this class may be instantiated to (temporarily) suppress output of wxLogXXX() functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T030249Z">
        <seg>このクラスのオブジェクトは wxLogXXX() 関数の出力を (一時的に) 抑制する場合にインスタンス化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only exceptions to this rule are:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155605Z">
        <seg>このルールの 例外 は以下のとおりです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only exceptions to this rule are:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060858Z">
        <seg>このルールの 例外 は以下のとおりです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only requirement imposed by wxWidgets is that this class must derive from wxEvtHandler and so, considering that wxWindow derives from it, any classes representing windows can handle events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T022636Z">
        <seg>wxWidgets が唯一要求することとして、イベントを処理するクラスは wxEvtHandler を継承していなければなりません。したがって、wxWindow はこのクラスを継承していることを考慮すると、ウィンドウを表すクラスはどれもイベントを処理することができるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The other is to use the existing event classes and give them an new event type.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T151405Z">
        <seg>もう一方の方法は、既存のイベントクラスを使用し、それらに新しいイベント型を与える方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The other one uses wxEvtHandler::Bind&lt;&gt;() call and can be used to bind and unbind, the handlers dynamically, i.e. during run-time depending on some conditions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130511T235917Z">
        <seg>もう一方は wxEvtHandler::Bind&lt;&gt;() を使用する方法で、動的に (実行時に条件に基づいて) ハンドラをバインドしたり解除したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The other planes in fact contain mainly historic scripts, special-purpose characters or are unused.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T031840Z">
        <seg>実際のところ、他の面は主に歴史上の文字や特殊用途の文字用か、もしくは使用されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The overhead of such conversions is usually negligible for small strings but may be important for some programs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T094040Z">
        <seg>この変換にかかるオーバーヘッドは小さな文字列であれば無視できるものですが、いくつかのプログラムでは重要になるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The parent frame classes modify step (2) above to send the events received by them to wxDocManager object first.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T152148Z">
        <seg>親フレームクラスでは上記のステップ (2) において、受信したイベントをまず  wxDocManager オブジェクトに送信するように変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The path components are always separated with a slash, even though some implementations use the backslash internally.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T152156Z">
        <seg>パスの要素は 常に スラッシュで区切られます。一部の実装で内部的にバックスラッシュを使用していてもこれは変わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The path components are always separated with a slash, even though some implementations use the backslash internally.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T153938Z">
        <seg>パスの要素は 常に スラッシュで区切られます。一部の実装で内部的にバックスラッシュを使用していてもこれは変わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The possibilities of handling events in this way are rather different.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T024547Z">
        <seg>この方法ではイベント処理のやり方が大きく異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The previous elements in the path are the group names, and each name may contain an arbitrary number of entries and subgroups.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T152106Z">
        <seg>パスの前の要素はグループ名です。各グループには任意の数のエントリやサブグループが含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The previous sections explain how to define event handlers but don't address the question of how exactly wxWidgets finds the handler to call for the given event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T062058Z">
        <seg>前の章ではイベントハンドラの定義方法について説明しましたが、wxWidgets がどのようにイベントハンドラを探すのかについてはまだ述べていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The probably first example is Windows NT which uses only Unicode internally since its very first version.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T161803Z">
        <seg>おそらく、最初の例は Windows NT でしょう。 Windows NT ではかなり初期のバージョンから内部的に Unicode を使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The problems can be separated into three broad classes:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T121217Z">
        <seg>発生しうる問題は大まかに 3 種類に分類することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The program i18n involves several steps:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T235453Z">
        <seg>プログラムの国際化にはいくつかのステップが含まれます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rationale for this choice is that there are only a few frames in a typical application and their parent-child relation are well understood by the programmer while it may be difficult, if not impossible, to track down all the dialogs that may be popped up in a complex program (remember that some are created automatically by wxWidgets).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T155553Z">
        <seg>このようにした理由は、普通のアプリケーションでは数個のフレームしか存在せず、プログラマはそれらの親子関係のことをよく理解している一方で、複雑なプログラムで表示されるすべてのダイアログを追跡することは、不可能でないにしても非常に難しいためです。 (いくつかのダイアログは wxWidgets によって自動的に生成されることを思い出してください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The rationale for this choice is that there are only a few frames in a typical application and their parent-child relation are well understood by the programmer while it may be very difficult, if not impossible, to track down all the dialogs which may be popped up in a complex program (remember that some are created automatically by wxWidgets).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T040727Z">
        <seg>このようにした理由は、普通のアプリケーションでは数個のフレームしか存在せず、プログラマはそれらの親子関係のことをよく理解している一方で、複雑なプログラムで表示されるすべてのダイアログを追跡することは、不可能でないにしても非常に難しいためです。 (いくつかのダイアログは wxWidgets によって自動的に生成されることを思い出してください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason for making it a separate function from it is that usually there are a lot of trace messages, so it might make sense to separate them from other debug messages which would be flooded in them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T085236Z">
        <seg>これを別の関数とした理由は、通常、トレースメッセージを大量に出力するため、同じように大量に出力する他のデバッグ出力と区別することに意味があるはずだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason for that is that m_helpCtrl is a member object and is thus destroyed from MyApp destructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124542Z">
        <seg>なぜなら、m_helpCtrl はメンバオブジェクトであり、MyApp のデストラクタで破棄されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason for that is that m_helpCtrl is a member object and is thus destroyed from MyApp destructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162536Z">
        <seg>なぜなら、m_helpCtrl はメンバオブジェクトであり、MyApp のデストラクタで破棄されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of c_str() cannot be cast to char* but only to const char*. Of course, modifying the string via the pointer returned by this method has never been possible but unfortunately it was occasionally useful to use a const_cast here to pass the value to const-incorrect functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T034344Z">
        <seg>c_str() の戻り値は char* にはキャストできず、const char* にのみキャスト可能です。もちろん、この関数の戻り値のポインタを通して文字列を変更することはできませんが、残念なことに、正しく const を受け取らない関数へ値を渡すために const_cast を使用するときに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The right functions for debug output.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091143Z">
        <seg>デバッグ出力に適切な関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same applies to wxString::c_str() if its result is used as a narrow string.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T161603Z">
        <seg>戻り値をナロー文字列として扱う場合には、wxString::c_str() についても同じことが言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a wxCommandEvent argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T012430Z">
        <seg>EVT_CUSTOM と同じですが、wxCommandEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a wxNotifyEvent argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T012645Z">
        <seg>EVT_CUSTOM と同じですが、wxNotifyEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a wxCommandEvent argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T160549Z">
        <seg>EVT_CUSTOM と同じですが、wxCommandEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a wxNotifyEvent argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T162619Z">
        <seg>EVT_CUSTOM と同じですが、wxNotifyEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same as EVT_CUSTOM, but responds to a range of window identifiers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T160459Z">
        <seg>EVT_CUSTOM と同じですが、ウィンドウ識別子を範囲で指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a wxCommandEvent argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T012442Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、wxCommandEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a wxNotifyEvent argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T012721Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、wxNotifyEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a wxCommandEvent argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T160612Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、wxCommandEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a wxNotifyEvent argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T162652Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、wxNotifyEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The search is applied down the entire chain of event handlers (usually the chain has a length of one).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T030156Z">
        <seg>次に、イベントハンドラの連鎖を辿って検索します。(通常、この連鎖の長さは 1 です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second form of this function takes the error code explicitly as the first argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T013147Z">
        <seg>この関数の 2 番目の形式では第一引数として明示的にエラーコードを指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second one is enough if you're happy with the standard wxLog message formatting (prepending "Error:" or "Warning:", timestamping &amp;c) but just want to send the messages somewhere else.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T023616Z">
        <seg>標準的な wxLog メッセージの形式 (先頭に "Error:" か "Warning:" とタイムスタンプが付きます) で充分だが、メッセージを他の場所へ送りたい場合は 2 番目の関数を実装するだけで充分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The short answer is that they're all very good generic mechanisms, but are not really adapted for wxWidgets, while the log classes are.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T013853Z">
        <seg>簡単に答えれば、それらの関数やストリームは確かに優れた汎用的な仕組みを持っていますが、本当に wxWidgets に適しているとは言えないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The simplest of them is UTF-32 where each code unit is composed by 32 bits (4 bytes) and each code point is always represented by a single code unit (fixed length encoding).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T031955Z">
        <seg>もっとも単純なものは UTF-32 です。これは各コード単位が 32 ビット (4 バイト) から成り、各コードポイントは常にひとつのコード単位で表現される固定長エンコーディングです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The simplest way to ensure that this doesn't happen is to avoid conversions to char* completely by using wxString throughout your program.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T140833Z">
        <seg>これが起きないようにする一番単純な方法は、wxString を使った char* への変換を避けることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The sizer of the border also must be made known, and it is the third parameter in the Add() method.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T111045Z">
        <seg>ボーダーの太さも伝える必要があり、Add() 関数の第三引数に指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The solution is to destroy HelpCtrl in OnExit:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124552Z">
        <seg>この解決策は OnExit で HelpCtrl を削除することです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The solution is to destroy HelpCtrl in OnExit:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162750Z">
        <seg>この解決策は OnExit で HelpCtrl を削除することです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard trace masks are given in wxLogTrace() documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T133125Z">
        <seg>標準のトレースマスクは wxLogTrace() のドキュメントに記載しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The static event tables can only handle events in the object where they are defined so using Bind&lt;&gt;() is more flexible than using the event tables.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T021819Z">
        <seg>静的なイベントテーブルではそれが定義されたオブジェクトのイベントしか処理できないため、柔軟性は Bind&lt;&gt;() の方がイベントテーブルよりも上です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The step 4 of the event propagation algorithm checks for the next handler in the event handler chain.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T151027Z">
        <seg>イベント伝播アルゴリズムのステップ 4 では、イベントハンドラの連鎖内における次のイベントハンドラを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The stretch factor described in the last paragraph is used for the main orientation, i.e. when using a horizontal box sizer, the stretch factor determines how much the child can be stretched horizontally.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T151910Z">
        <seg>最後の段落で述べたストレッチ係数は主となる方向に対して適用されます。つまり、水平方向のボックスサイザーを使用している場合、ストレッチ係数は子コントロールを水平方向にどれだけ伸長させるかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The thickness of this border must be set explicitly, typically 5 points.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T142431Z">
        <seg>ボーダーの太さは必ず明示的に指定する必要があり、デフォルトでは 5 ポイントです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of unique identifiers (ID) used for wxWindow-derived classes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142003Z">
        <seg>wxWindow を継承したクラスで使用される一意の識別子 (ID) の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The usage of these functions should be fairly straightforward, however it may be asked why not use the other logging facilities, such as C standard stdio functions or C++ streams.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T013341Z">
        <seg>これらの関数の用途はかなり明確ですが、なぜ C の標準入出力関数や C++ のストリームといった他のロギング機能を使用しないのか疑問に思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value must be in form widthxheight-depth.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155512Z">
        <seg>この値は 幅x高さ-色深度 の形式で指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The verbose messages are the trace messages which are not disabled in the release mode and are generated by wxLogVerbose().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T132141Z">
        <seg>詳細メッセージとはリリースモードでも無効化されないトレースメッセージのことで、wxLogVerbose() によって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The width of each column and the height of each row are calculated individually according to the minimal requirements from the respectively biggest child.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T153619Z">
        <seg>それぞれの最大の子コントロールの必要とする最小サイズに応じて、各列の幅と各行の高さが個別に計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The word logging here has a broad sense, including all of the program output, not only non-interactive messages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003652Z">
        <seg>ここでのロギングという言葉は広い意味を持っており、非対話形式のメッセージに限らず、プログラムの出力すべてを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxApp class represents the application itself when wxUSE_GUI=1.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T144504Z">
        <seg>wxUSE_GUI=1 のとき、wxApp はアプリケーション自身を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxBitmap class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T152908Z">
        <seg>wxBitmap クラスはモノクロとカラーの両方について、プラットフォームに依存するビットマップの概念をカプセル化するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxDocChildFrame class provides a default frame for displaying documents on separate windows...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T150631Z">
        <seg>wxDocChildFrame クラスは分割ウィンドウ上に表示されるドキュメントにデフォルトフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxDocMDIChildFrame class provides a default frame for displaying documents on separate windows...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T150906Z">
        <seg>wxDocMDIChildFrame クラスは分割ウィンドウ上に表示されるドキュメントにデフォルトフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxDocMDIParentFrame class provides a default top-level frame for applications using the document/...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T150842Z">
        <seg>wxDocMDIParentFrame クラスはドキュメント/ビューフレームワークを使用するアプリケーションにデフォルトのトップレベルフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxDocManager class is part of the document/view framework supported by wxWidgets, and cooperates with the wxView, wxDocument and wxDocTemplate classes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T151046Z">
        <seg>wxDocManager クラスは wxWidgets のサポートしているドキュメント/ビューフレームワークの一部で、wxView、wxDocument、wxDocTemplate と一緒に使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxDocParentFrame class provides a default top-level frame for applications using the document/vie...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T150658Z">
        <seg>wxDocParentFrame クラスはドキュメント/ビューフレームワークを使用するアプリケーションにデフォルトのトップレベルフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T034742Z">
        <seg>wxString クラスは wxWidgets 3.0 では完全に書き直されます。そして、この変更が新しいバージョンを wxWidgets 3.0 と呼ぶ主な理由です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxTextFile is a simple class which allows to work with text files on line by line basis...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T072021Z">
        <seg>wxTextFile はテキストファイルを行単位で扱うためのシンプルなクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The wxWidgets approach to i18n closely follows the GNU gettext package.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T043157Z">
        <seg>wxWidgets の採用している国際化の方法は GNU gettext パッケージの方式に従っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then what do we do when a column sizer changes its width?</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T131441Z">
        <seg>では、垂直方向のサイザーの幅が変更された場合はどうすれば良いでしょうか? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you could use wxLog::SetComponentLevel() in the following ways:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T141916Z">
        <seg>そして、以下のように wxLog::SetComponentLevel() を使用します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are also events which don't directly correspond to the user actions, such as wxTimerEvent or wxSocketEvent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T155557Z">
        <seg>wxTimerEvent や wxSocketEvent など、ユーザの操作に直接対応しないイベントも存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are currently five different kinds of sizers available in wxWidgets.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T124220Z">
        <seg>今のところ、wxWidgets では 5 種類のサイザーが利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are groups of entries and the entries themselves.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T154146Z">
        <seg>コンフィグにはエントリとエントリのグループが存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are several methods which may be overridden in the derived class to customize log messages handling: wxLog::DoLogRecord(), wxLog::DoLogTextAtLevel() and wxLog::DoLogText().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T122530Z">
        <seg>ログメッセージの処理方法をカスタマイズするためには継承クラスでいくつかの関数をオーバーライドします: wxLog::DoLogRecord()、 wxLog::DoLogTextAtLevel()、wxLog::DoLogText()。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are some predefined classes deriving from wxLog and which might be helpful to see how you can create a new log target class and, of course, may also be used without any change.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112404Z">
        <seg>wxLog を継承したクラスがいくつか事前に定義されており、新しいログターゲットクラスを作成する際の参考になると思います。もちろん、そのまま使用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are some predefined classes deriving from wxLog and which might be helpful to see how you can create a new log target class and, of course, may also be used without any change.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T023947Z">
        <seg>wxLog を継承したクラスがいくつか事前に定義されており、新しいログターゲットクラスを作成する際の参考になると思います。もちろん、そのまま使用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two kinds of message catalogs: source catalogs which are text files with extension .po and binary catalogs which are created from the source ones with msgfmt program (part of gettext package) and have the extension .mo.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T040033Z">
        <seg>メッセージカタログには次の 2 種類があります: 拡張子が .po でテキスト形式のソースカタログと、ソースカタログから  msgfmt プログラム (gettext パッケージの一部です) を使って生成する、拡張子が .mo のバイナリカタログです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two kinds of message catalogs: source catalogs which are text files with extension .po and binary catalogs which are created from the source ones with msgfmt program (part of gettext package) and have the extension .mo.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T235340Z">
        <seg>メッセージカタログには次の 2 種類があります: 拡張子が .po でテキスト形式のソースカタログと、ソースカタログから  msgfmt プログラム (gettext パッケージの一部です) を使って生成する、拡張子が .mo のバイナリカタログです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two principal ways to handle events in wxWidgets.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130511T235318Z">
        <seg>wxWIdgets でイベントを処理する方法として、主に 2 種類の方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T023959Z">
        <seg>以下にその一覧を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is a static list of handlers which wxBitmap examines when a file load/save operation is requested.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155132Z">
        <seg>これらのハンドラの静的な一覧が存在し、ファイルの読み書きが要求された時に wxBitmap がこの一覧を調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is a static list of handlers which wxBitmap examines when a file load/save operation is requested.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142757Z">
        <seg>これらのハンドラの静的な一覧が存在し、ファイルの読み書きが要求された時に wxBitmap がこの一覧を調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is also a corresponding wxBITMAP() macro which allows to create the bitmaps in much the same way as wxICON() creates icons.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154626Z">
        <seg>これと対応するマクロに wxBITMAP() マクロがあり、wxICON() がアイコンを作成するのと同じ方法でビットマップを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is also a corresponding wxBITMAP macro which allows to create the bitmaps in much the same way as wxICON creates icons.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T140448Z">
        <seg>これと対応するマクロに wxBITMAP マクロがあり、wxICON がアイコンを作成するのと同じ方法でビットマップを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is however an important difference between the two mechanisms when you want to invoke the default behaviour, as implemented by the base class, from a derived class handler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T122755Z">
        <seg>しかし、継承クラスから基底クラスで実装されたデフォルトの振る舞いを呼び出すときに、このふたつの仕組みの間には重要な違いがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is no need for a separate type for strings though, because the standard wxString supports Unicode, i.e. it stores either ANSI or Unicode strings depending on the compile mode.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151816Z">
        <seg>だからといって、文字列に別々の型を使用する必要はありません。なぜなら、標準の wxString が Unicode に対応している (コンパイルモードに応じて ANSI 文字列か Unicode 文字列を格納する) ためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These events can be triggered by using the input devices (such as keyboard, mouse, joystick) directly or, more commonly, by a standard control which synthesizes such input events into higher level events: for example, a wxButton can generate a click event when the user presses the left mouse button on it and then releases it without pressing Esc in the meanwhile.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T155458Z">
        <seg>これらのイベントは (キーボード、マウス、ジョイスティックなどの) 入力装置を利用して直接発生させるか、より一般的には、それらの入力イベントをより高レベルのイベントへ合成する標準コントロールを利用して発生させることができます: 例えば、wxButton はコントロール上でユーザが左マウスボタンを押下し、 (Esc を押下することなく) 離したときにクリックイベントを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These flags can be used in combination with the alignment flags above as the second parameter of the Add() method using the binary or operator |.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T110536Z">
        <seg>これらのフラグは論理和演算子 | を使用して上記のアライメントフラグと組み合わせることができ、Add() 関数の第二引数に指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These macros are used to handle scroll events from wxScrollBar, wxSlider,and wxSpinButton.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081822Z">
        <seg>これらのマクロは wxScrollBar、wxSlider、wxSpinButton から送信されるスクロールイベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These macros handle wxListCtrl events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081532Z">
        <seg>これらのマクロは wxListCtrl のイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These macros handle wxTreeCtrl events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T082316Z">
        <seg>これらのマクロは wxTreeCtrl のイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These macros handle special menu events (not menu commands).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081611Z">
        <seg>これらのマクロは特殊なメニューイベント (メニューコマンドではありません) を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These member functions are not virtual functions, but they are all similar in form: they take a single wxEvent-derived argument, and have a void return type.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T075523Z">
        <seg>これらのメンバ関数は非仮想関数ですが、すべて同じ形式をとります: wxEvent を継承した引数をひとつ取り、戻り値の型は void です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These member functions take an event argument, and the class of event differs according to the type of event and the class of the originating window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081218Z">
        <seg>これらのメンバ関数はイベント引数を取りますが、その引数のクラスはイベントの型と発生元ウィンドウのクラスに応じて異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These pairs are called surrogate.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T031701Z">
        <seg>これらのコード単位の組のことを サロゲート と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These sizers will be discussed one by one in the text below.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T124535Z">
        <seg>これらのサイザーについて、ひとつずつ説明していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They also appear in a message box by default (but it can be changed, see below).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T010006Z">
        <seg>この関数もデフォルトでメッセージボックスを表示します。 (ただし、この振る舞いは変更可能です。以下を参照してください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are also normally shown to the user, but don't interrupt the program work.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T134918Z">
        <seg>警告メッセージは普通、ユーザに通知されますが、プログラムの動作を妨げません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are hierarchical in the sense that "foo/bar/baz" component is supposed to be a child of "foo".</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T104515Z">
        <seg>ログコンポーネントは "foo/bar/baz" コンポーネントが "foo" コンポーネントの子として扱われるという意味では階層的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are just simple methods of the class that take as a parameter a reference to an object of a wxEvent-derived class and have no return value (any return information is passed via the argument, which is why it is non-const).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T014246Z">
        <seg>これらのイベントハンドラは単純なメンバ関数であり、wxEvent を継承したクラスのオブジェクトへの参照を引数に取り、戻り値はありません。(情報を返却する場合は引数のオブジェクトを経由して行います。これが引数を const にしていない理由です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are not normally shown to the user because they present little interest, but may be activated, for example, in order to help the user find some program problem.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T132503Z">
        <seg>ユーザがこれらのメッセージに関心を示すことがないため、通常はユーザに通知されません。しかし、ユーザがプログラムの問題を見つける際の手助けとして有効化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can be used to create a wxString from arbitrary binary data without supposing that it is in current locale encoding, and then get it back, again, without any conversion or, rather, undoing the conversion used by wxString::From8BitData().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T035228Z">
        <seg>これらの関数は任意のバイナリデータをもとに wxString を作成しますが、その際にバイナリデータが現在のロケールのエンコーディングで符号化されていると仮定しません。そして、なんらかの変換や wxString::From8BitData() で行われた変換の逆変換を行うことなく、元のバイナリデータを取得することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They were especially designed for this usage and, although may probably be used for many other things as well, should be limited to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T150140Z">
        <seg>これらのクラスはこの用途に特化して設計されており、他のことにも使用されるかもしれませんが、この用途に限定して使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They will go into the status bar of the active or specified (as the first argument) wxFrame if it has one.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T085900Z">
        <seg>これらのメッセージはアクティブまたは第一引数で指定された wxFrame がステータスバーを持つ場合に、ステータスバーへ出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This abstract class is the base for classes that help wxWidgets perform run-time layout adaptation of...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T153539Z">
        <seg>この抽象クラスは wxWidgets が実行時にダイアログのレイアウト適応を行なうのを支援するクラスの基底です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows enough code points (see below for the definition) sufficient to encode all of the world languages at once.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T095338Z">
        <seg>これにより、 世界中の言語を一度に表現するのに十分な量のコードポイント (定義は以下を参照) が得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows to have at least 65536 characters (what is called the BMP, or basic multilingual plane) and possible 2^32 of them instead of the usual 256 and is sufficient to encode all of the world languages at once.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151004Z">
        <seg>これにより、 通常の 256 文字の代わりに少なくとも 65536 文字 (これはBMP、もしくは基本多言語面と呼ばれます) 、あるいは 2^32 文字を表現することが可能であり、これは世界中の言語を一度に表現するのに十分な量です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also has the advantage that you won't have to define a new wxEvent::Clone() method for posting events between threads etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155223Z">
        <seg>この方法には、スレッド間でイベントを送信するための新しい wxEvent::Clone() 関数を定義する必要がないといった利点もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This behaviour is controlled by flags (the second parameter of the Add() function): Zero or no flag indicates that the window will preserve it is original size, wxGROW flag (same as wxEXPAND) forces the window to grow with the sizer, and wxSHAPED flag tells the window to change it is size proportionally, preserving original aspect ratio.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141854Z">
        <seg>この振る舞いは フラグ (Add() 関数の第二引数です) によって制御されます: 0 またはフラグを何も指定しない場合、ウィンドウは元の大きさを維持します。wxGROW フラグ (wxEXPAND と同じです) はサイザーにあわせてウィンドウを強制的にリサイズします。wxSHAPED フラグは元の縦横比を維持しつつ、ウィンドウのサイズを変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This behaviour is controlled by flags (the second parameter of the Add() function): Zero or no flag indicates that the window will preserve it is original size, wxGROW flag (same as wxEXPAND) forces the window to grow with the sizer, and wxSHAPED flag tells the window to change it is size proportionally, preserving original aspect ratio.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130521T161543Z">
        <seg>この振る舞いは フラグ (Add() 関数の第二引数です) によって制御されます: 0 またはフラグを何も指定しない場合、ウィンドウは元の大きさを維持します。wxGROW フラグ (wxEXPAND と同じです) はサイザーにあわせてウィンドウを強制的にリサイズします。wxSHAPED フラグは元の縦横比を維持しつつ、ウィンドウのサイズを変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This border can either be all around, or at any combination of sides such as only above and below the control.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T142325Z">
        <seg>ボーダーは全周、またはコントロールの上と下のみといった任意の組み合わせで指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can avoid the need to test that the object was properly initialized in the event handlers themselves.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T040718Z">
        <seg>こうすることで、イベントハンドラ内でオブジェクトが正常に初期化されているか確認する必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be achieved quite simply by using the means provided by wxWidgets.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T150406Z">
        <seg>これは wxWidgets の提供する方法を使うことで極めて単純に実現することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be done either using new wxString::char_str() (and matching wchar_str()) method or by writing a double cast:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T034428Z">
        <seg>これは新しい wxString::char_str() (や、これに対応する wchar_str()) 関数か、2 重キャストを用いることで実現できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be seen as a top-hierarchy column with the text at the top and buttons at the bottom and a low-hierarchy row with an OK button to the left and a Cancel button to the right.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T163027Z">
        <seg>これは上部にテキストフィールドと下部にボタンを持つ上位階層の列と、左に OK ボタンと右にキャンセルボタンを持つ下位階層の行からなるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be very convenient and is absolutely necessary for backwards compatibility with the existing code using wxWidgets however it is a rather dangerous operation as it can easily give unexpected results if the string contents isn't convertible to the current locale.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T135014Z">
        <seg>この変換機能は非常に便利であり、wxWidgets を使った既存コードとの後方互換性のためには絶対に欠かすことができません。しかし、これは非常に危険な操作で、文字列の内容が現在のロケールに変換できない場合は予期しない結果を簡単に引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This chain can be formed using wxEvtHandler::SetNextHandler():</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T151305Z">
        <seg>この連鎖は wxEvtHandler::SetNextHandler() を使用して形づくられます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class allows you to temporarily suspend logging.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T125533Z">
        <seg>このクラスを用いて一時的にロギングを中断することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class can be used to (temporarily) redirect all output sent to a C++ ostream object to a wxTextC...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T130927Z">
        <seg>このクラスは (一時的に) C++ ostream オブジェクトへ送信されたすべての出力を代わりに wxTextCtrl へリダイレクトするのに使用できます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class can be used to redirect the log messages to a C file stream (not to be confused with C++ s...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T124706Z">
        <seg>このクラスはログメッセージを C のファイルストリーム (C++ のストリームと混同しないでください) へリダイレクトするのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class can be used to redirect the log messages to a C++ stream.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T124726Z">
        <seg>このクラスはログメッセージを C++ のストリームへリダイレクトするのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class creates button layouts which conform to the standard button spacing and ordering defined b...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T151629Z">
        <seg>このクラスはプラットフォームやツールキットのユーザガイドラインで定義されている標準ボタンの余白と順番に従ったレイアウトを作成します。(ただし、そのようなガイドラインが存在する場合に限ります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class encapsulates a platform-independent image.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154843Z">
        <seg>このクラスはプラットフォーム非依存の画像をカプセル化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour or co...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T152952Z">
        <seg>このクラスはモノクロとカラーの両方について、プラットフォームに依存するビットマップの概念をカプセル化するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class greatly eases the burden of passing flags to a wxSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145330Z">
        <seg>このクラスは wxSizer へフラグを渡す際の負担を大きく軽減してくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class greatly eases the burden of passing flags to a wxSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T113418Z">
        <seg>このクラスは wxSizer へフラグを渡す際の負担を大きく軽減してくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class is not used by the event handlers by itself, but is a base class for other event classes (...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T012636Z">
        <seg>このクラスはイベントハンドラ自身では使用されませんが、(wxBookCtrlEvent などの) 他のイベントクラスの基底クラスです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class provides a simple way to avoid flicker: when drawing on it, everything is in fact first dr...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T143806Z">
        <seg>このクラスはちらつきを防止するための単純な方法を提供します: 描画時には最初にメモリ上のバッファ (wxBitmap) へすべて描画し、それから関連する wxDC を使用してスクリーン上へ一度だけ、このオブジェクトの破棄時にコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a background log window: to be precise, it collects all log messages in the log...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T125427Z">
        <seg>このクラスはバックグラウンドで動作するログウィンドウを表します。正確に言うと、このログウィンドウではログフレーム内のすべてのメッセージを収集するとともに、このクラスオブジェクトの生成時に有効だったログターゲットへ収集したメッセージを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a property sheet dialog: a tabbed dialog for showing settings.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T151425Z">
        <seg>このクラスはプロパティシートダイアログ (設定を表示するためのタブ付きダイアログ) を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This class represents a single Unicode character.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T121311Z">
        <seg>このクラスはひとつの Unicode 文字を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This code also compiles fine under a non-Unicode build of wxWidgets, but in that case the converter is ignored.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T144314Z">
        <seg>このコードは非 Unicode ビルドでも正常にコンパイルすることができますが、変換自体は行われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This could look like this in your code:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155547Z">
        <seg>以下にコード例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This currently works for wxMSW, wxGTK, wxMac and wxX11.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T145031Z">
        <seg>これは今のところ、wxMSW、wxGTK、wxMac、wxX11 で動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This defines the wxWidgets Encapsulated PostScript device context, which can write PostScript files o...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T145433Z">
        <seg>これは wxWidets がカプセル化した PostScript デバイスコンテキストを定義しており、どのプラットフォームにおいても PostScript ファイルを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This doesn't work for everything (for example not all device contexts support bitmap drawing) but will work most of the time.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141904Z">
        <seg>これはすべての場合に当てはまるわけではありません (例えば、すべてのデバイスコンテキストがビットマップの描画に対応しているわけではありません) が、大半の場合はうまく行きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This enables the bitmap to be copied to a window or memory device context using wxDC::Blit(), or to be used as a drawing surface.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T153940Z">
        <seg>これにより、wxDC::Blit() を使用してビットマップをウィンドウやメモリデバイスコンテキストにコピーしたり、描画先として使用したりすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This enables the bitmap to be copied to a window or memory device context using wxDC::Blit, or to be used as a drawing surface.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T135222Z">
        <seg>これにより、wxDC::Blit を使用してビットマップをウィンドウやメモリデバイスコンテキストにコピーしたり、描画先として使用したりすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This ensures that in a common case of (possibly several) non-window event handlers pushed on top of a window, the event eventually reaches the window parent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T032748Z">
        <seg>これにより、ウィンドウ上に (おそらく複数の) 非ウィンドウイベントハンドラが配置されているような一般的な場合において、イベントが最終的に親ウィンドウまで確実に到達するようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This event class contains information about command events, which originate from a variety of simple ...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130508T161126Z">
        <seg>このイベントクラスは様々な単純コントロールから送信されるコマンドイベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This event class contains information about key press and release events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130508T161121Z">
        <seg>このイベントクラスはキーの押下イベントや解放イベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This event class contains information about socket events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153816Z">
        <seg>このイベントクラスはソケットイベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This event class contains information about the events generated by the mouse: they include mouse but...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T024537Z">
        <seg>このイベントクラスはマウスによって生成されるイベントに関する情報を含んでいます: これにはマウスボタンの押下、解放イベント、およびマウスの移動イベントが含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This event class contains information about window and session close events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152613Z">
        <seg>このイベントクラスはウィンドウとセッションの終了イベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This event type ID is stored in a struct of type const wxEventType.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T150744Z">
        <seg>このイベント ID は const wxEventType 型の構造体に格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This function simply generates a wxCloseEvent whose handler usually tries to close the window...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T153025Z">
        <seg>この関数は単純に wxCloseEvent を作成します。通常はこのイベントを受け取ったハンドラはウィンドウを閉じようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This further reduces the code size and removes the need for conversions in more cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T102257Z">
        <seg>これはコードサイズをさらに削減させるとともに、より多くの場合で変換が不要になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is true of wxScreenDC, wxClientDC, wxPaintDC, and wxWindowDC.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T150723Z">
        <seg>これには wxScreenDC、wxClientDC、wxPaintDC、wxWindowDC が該当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a general overview of logging classes provided by wxWidgets.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003415Z">
        <seg>これは wxWidgets の提供するロギングクラス全般の概要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a kind of paragraph layout box, used to represent the whole buffer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T014057Z">
        <seg>This is a kind of paragraph layout box, used to represent the whole buffer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a specialization of wxCharTypeBuffer&lt;T&gt; for char type.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T170025Z">
        <seg>これは char 型による wxCharTypeBuffer&lt;T&gt; の特殊化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a specialization of wxCharTypeBuffer&lt;T&gt; for wchar_t type.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T170040Z">
        <seg>これは wchar_t 型による wxCharTypeBuffer&lt;T&gt; の特殊化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a subclass of wxBufferedDC which can be used inside of an EVT_PAINT() event handler to achiev...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T144304Z">
        <seg>これは wxBufferedDC のサブクラスで、ダブルバッファリングを行なうために EVT_PAINT() イベントハンドラの内部で使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is a type of device context that allows a metafile object to be created (Windows only)...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T145636Z">
        <seg>これはメタファイルオブジェクトを作成するためのデバイスコンテキスト型で (Windows のみ)、通常の wxDC の特徴の大半を備えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is achieved by using the standard C (and C++) way: just put the letter 'L' after any string constant and it becomes a long constant, i.e. a wide character one.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T152240Z">
        <seg>これは標準的な C (および C++) の方法で実現されます: 文字列定数の後ろに 'L' という文字を配置するだけで、 long 定数、すなわちワイド文字になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is also the approach used by wxString.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T035245Z">
        <seg>これは wxString で採用されている方法でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because Windows 3 expects the contents of a modal dialog to be loaded from a resource file or created on receipt of a dialog initialization message.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T150148Z">
        <seg>これは、Windows 3 ではモーダルダイアログの内容はリソースファイルから読み込みか、ダイアログの初期化メッセージを受信したときに作成する必要があるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is determined by the proportion parameter when adding a window (or another sizer) to a sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141844Z">
        <seg>これはウィンドウ (または他のサイザー) をサイザーへ追加するときの プロポーション パラメータによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is determined by the proportion parameter when adding a window (or another sizer) to a sizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130521T160129Z">
        <seg>これはウィンドウ (または他のサイザー) をサイザーへ追加するときの プロポーション パラメータによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is done as follows, in wxDialogLayoutAdapter::DoLayoutAdaptation called from within wxDialog::Show or wxDialog::ShowModal:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T150637Z">
        <seg>wxDialog::Show や wxDialog::ShowModalから呼ばれた wxDialogLayoutAdapter::DoLayoutAdaptation の中では次のように処理が行われます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is done in the document/view framework, for example, to allow event handlers to be defined in the document or view.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T053510Z">
        <seg>これは例えば、ドキュメント/ビューフレームワークがドキュメントやビューでイベントハンドラを定義するために行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is done using wxDEFINE_EVENT() macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T155015Z">
        <seg>これは wxDEFINE_EVENT() マクロによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is impossible to do with the event tables because it is not possible to specify these handlers to dispatch the event to, so it necessarily needs to be sent to the same object which generated the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T042511Z">
        <seg>これはイベントテーブルでは実現不可能です。なぜなら、イベントのディスパッチ先としてこれらのハンドラを指定することができないためです。そのため、イベントはそれを生成したオブジェクトに対して送信される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is normally the expected behaviour and means that it is enough to call Close() in response to the "Exit" menu command if your program has a single top level window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T123948Z">
        <seg>これは通常期待する振る舞いであり、アプリケーションが単一のトップレベルウィンドウを持つ場合は "Exit" メニューが選択されたときに Close() を呼ぶだけで充分なことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is normally the expected behaviour and means that it is enough to call wxWindow::Close() in response to the "Exit" menu command if your program has a single top level window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124017Z">
        <seg>これは通常期待する振る舞いであり、アプリケーションが単一のトップレベルウィンドウを持つ場合は "Exit" メニューが選択されたときに wxWindow::Close() を呼ぶだけで充分なことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is supported only by wxBoxSizer and wxFlexGridSizer.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141651Z">
        <seg>これは wxBoxSizer と wxFlexGridSizer でのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the base class for implementing bitmap file loading/saving, and bitmap creation from data...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T153116Z">
        <seg>これはビットマップファイルの読み書き、およびデータからのビットマップの作成を実装するための基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the default log target for the GUI wxWidgets applications.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T125452Z">
        <seg>これは GUI wxWidgets アプリケーションのデフォルトのログターゲットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is too restrictive for wxWidgets, where any window may be created and displayed before its contents are created.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T150536Z">
        <seg>wxWidgets ではウィンドウの内容が作成される前にウィンドウを作成して表示するため、これは wxWIdgets にとって制約になってしまいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is true of wxScreenDC, wxClientDC, wxPaintDC, and wxWindowDC.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T140857Z">
        <seg>これには wxScreenDC、wxClientDC、wxPaintDC、wxWindowDC が該当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful when hiding parts of the interface, since you can avoid removing the controls from the sizer and having to add them back later.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T150111Z">
        <seg>コントロールをサイザーから削除し、後で追加し直す必要がないため、これはインタフェースの一部を隠すときに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful when you don't care about the exact identifier either because you're not going to process the events from the control being created at all or because you process the events from all controls in one place (in which case you should specify wxID_ANY in the event table or wxEvtHandler::Connect call as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T075403Z">
        <seg>コントロールの生成するイベントを処理しない場合や、イベントを一箇所で処理する場合 (このときはイベントテーブルに wxID_ANY を指定するか、それと同様に wxEvtHandler::Connect を呼ぶ必要があります) など、コントロールの正確な識別子が必要でないときにこれは役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful when you don't care about the exact identifier either because you're not going to process the events from the control being created or because you process the events from all controls in one place (in which case you should specify wxID_ANY in the event table or wxEvtHandler::Bind call as well).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T124554Z">
        <seg>コントロールの生成するイベントを処理しない場合や、イベントを一箇所で処理する場合 (このときはイベントテーブルに wxID_ANY を指定するか、同じように wxEvtHandler::Bind を呼ぶ必要があります) など、コントロールの正確な識別子が必要でないときにこれは役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This macro loads a bitmap from either application resources (on the platforms for which they exist...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154553Z">
        <seg>このマクロはアプリケーションリソース (アプリケーションリソースが存在するプラットフォーム、つまり Windows と OS2 の場合) または XPM ファイルからビットマップを読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This macro loads an icon from either application resources (on the platforms for which they exist...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154445Z">
        <seg>このマクロはアプリケーションリソース (アプリケーションリソースが存在するプラットフォーム、つまり Windows と OS2 の場合) または XPM ファイルからアイコンを読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This may not be available on non-Windows platforms.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141529Z">
        <seg>これは非 Windows 環境では使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that internally only Unicode strings are used and that, under Microsoft Windows, Unicode system API is used which means that wxWidgets programs require the Microsoft Layer for Unicode to run on Windows 95/98/ME.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T040317Z">
        <seg>これはつまり、内部的には Unicode 文字列のみが使用され、Microsoft Windows では Unicode 版のシステム API が使用されることを意味します。そしてこれは Windows 95/98/ME で wxWidgets プログラムを実行する際に Microsoft Layer for Unicode が必要となることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that you don't risk getting unexpected events from the dialog controls (which might be left unprocessed by the dialog itself because it doesn't care about them) when a modal dialog is popped up.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T155530Z">
        <seg>これはつまり、モーダルダイアログを表示しているときにダイアログコントロールから意図しないイベントを受け取ることがないことを意味します。 (それらのイベントは処理されないままになるでしょう) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that you don't risk to get unexpected events from the dialog controls (which might be left unprocessed by the dialog itself because it doesn't care about them) when a modal dialog is popped up.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T033913Z">
        <seg>これはつまり、モーダルダイアログを表示しているときにダイアログコントロールから意図しないイベントを受け取ることがないことを意味します。 (それらのイベントは処理されないままになるでしょう) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means, that the entire behaviour of a sizer and its children can be controlled by the three parameters of the Add() method.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T111423Z">
        <seg>これはつまり、サイザーと子コントロールのすべての振る舞いが Add() 関数の 3 個の引数によって制御されることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method can be used inside an event handler to control whether further event handlers bound to th...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T064047Z">
        <seg>この関数はイベントハンドラの中で使用し、現在のイベントハンドラの処理が終わった後にさらにイベントハンドラを呼び出すかどうかを制御します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This must be provided by the application, and will usually create the application's main window...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152428Z">
        <seg>アプリケーションはこの関数を必ず提供する必要があり、通常はアプリケーションのメインウィンドウを (任意に SetTopWindow() を呼んで) 作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This object, in turn, sends the event to the current view and the view itself lets its associated document process the event first.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130513T152258Z">
        <seg>そして、このオブジェクトが現在のビューに対してイベントを送信し、ビュー自身が関連するドキュメントにまずイベントを処理させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This overview briefly describes what the config classes are and what they are for.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T145624Z">
        <seg>この概要ではコンフィグクラスとは何で、何のために使用するのかについて簡潔に説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This section briefly describes the state of the Unicode support in wxWidgets.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T154902Z">
        <seg>この章では wxWidgets における Unicode の対応状況について簡潔に述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This section describes all environment variables that affect execution of wxWidgets programs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T154507Z">
        <seg>この章では wxWidgets プログラムの実行に影響するすべての環境変数について述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This section describes how does wxWidgets support Unicode and how can it affect your programs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004913Z">
        <seg>この章では wxWidgets による Unicode 対応方法とプログラムへの影響について述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This section describes the algorithm used in detail.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T062131Z">
        <seg>この章ではそのアルゴリズムについて詳しく説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This simple class allows you to chain log sinks, that is to install a new sink but keep passing log m...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T130452Z">
        <seg>この単純なクラスを用いることでログ出力先を連鎖させることが可能になります。つまり、wxLog::SetActiveTarget のようにログ出力先を置き換える代わりに、新しい出力先を設定しつつ、 古い出力先にもログメッセージを渡すことが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sizer in turn will query its children (which can be normal windows, empty space or other sizers) so that a hierarchy of sizers can be constructed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T142121Z">
        <seg>このサイザーは順に子コントロール (通常のウィンドウや空白スペース、他のサイザーかもしれません) に対して問い合わせを行うため、サイザーの階層が構築されることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This task is performed by wxLogFormatter class so you need to derive a custom class from it and override its Format() method to build the log messages in desired way.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T123227Z">
        <seg>これは wxLogFormatter クラスによって行われるため、このクラスを継承し、望む方法でログメッセージを構築するように Fortmat() 関数をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This type is called wchar_t which stands for wide-character type.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151303Z">
        <seg>この型のことを wchar_t と呼び、wide-character type の略です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This way, you can avoid a lot of class derivation, and use instances of the same event handler class (but different objects as the same event handler object shouldn't be used more than once) to handle events from instances of different widget classes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T062136Z">
        <seg>この方法を使うことで、たくさんの継承クラスを作成しなくてすむとともに、同じイベントハンドラクラスのインスタンスを異なるウィジェットクラスのインスタンスから利用することができます。 (ただし、異なるオブジェクトを同じイベントハンドラオブジェクトとして複数回使用するべきではありません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will allow your program to perform conversions between Unicode strings and ANSI ones (using wxMBConv classes) and construct wxString objects from Unicode strings (presumably read from some external file or elsewhere).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T145310Z">
        <seg>これにより、あなたのプログラムの中で (wxMBConv クラスを利用した) Unicode 文字列と ANSI 文字列の変換や、(おそらく外部ファイルや他の場所から読み込んだ) Unicode 文字列から wxString オブジェクトを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will always be the case if the string had been initially constructed from a narrow string or if it contains only 7-bit ASCII data but otherwise this conversion is not guaranteed to succeed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T091441Z">
        <seg>文字列がナロー文字列か 7 ビット ASCII データで初期化されているのであれば、常にこの場合に当てはまりますが、それ以外の場合ではこの変換が常に成功することは保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will create a text message catalog - a .po file.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T001119Z">
        <seg>これにより、テキスト形式のメッセージカタログ (.po ファイル) が生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will most often mean that the programmer does not set the start-up size of a dialog, the dialog will rather be assigned a sizer and this sizer will be queried about the recommended size.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T121141Z">
        <seg>これはほどんどの場合で、プログラマがダイアログの初期サイズを設定するのではなく、代わりにダイアログをサイザーに割り当て、サイザーが推奨サイズを問い合わせることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This would indeed prevent any key events from being sent to the native control - which might not be what is desired.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T085932Z">
        <seg>実際には、これはネイティブコントロールに送られるキーイベントをすべて横取りしますが、これはおそらく期待する動作ではないと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus UTF16 uses a variable number of code units to encode each code point.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T031739Z">
        <seg>したがって、UTF16 は各コードポイントを符号化するために可変数のコード単位を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus it is important to never use 8-bit (instead of 7-bit) characters directly in the program source but use wide strings or, alternatively, write:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T082337Z">
        <seg>したがって、プログラムソース内で (7 ビット文字の代わりに) 8 ビット文字列を直接しない ことが重要であり、ワイド文字列を使用するか、代わりに以下のように書いてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, under Microsoft Windows, UCS-2 (simplified version of UTF-16 without support for surrogate characters) is used as wchar_t is 2 bytes on this platform.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T092708Z">
        <seg>したがって、Microsoft Windows では wchar_t  が 2 バイトであるため、UCS-2 (サロゲート文字をサポートしない、UTF-16 の簡略化版です) が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, you might view wxLogMessage() as a simple substitute for printf().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091445Z">
        <seg>したがって、wxLogMessage() を  printf() の単純な代替として考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, you might view wxLogMessage() as a simple substitute for  printf().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T015102Z">
        <seg>したがって、wxLogMessage() を  printf() の単純な代替として考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a handler object to wxBitmap, your application needs to include the header which implements it, and then call the static function wxBitmap::AddHandler().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155245Z">
        <seg>wxBitmap のハンドラを追加する場合、ハンドラクラスを実装しているヘッダファイルをインクルードし、静的関数 wxBitmap::AddHandler() を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a handler object to wxBitmap, your application needs to include the header which implements it, and then call the static function wxBitmap::AddHandler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T143127Z">
        <seg>wxBitmap のハンドラを追加する場合、ハンドラクラスを実装しているヘッダファイルをインクルードし、静的関数 wxBitmap::AddHandler を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be more precise, each event is described by:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T160744Z">
        <seg>より正確には、イベントは以下の内容で表現されます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To be precise, the conversion will always succeed if the string was created from a narrow string initially.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T135558Z">
        <seg>正確に言うと、最初にナロー文字列から文字列が作られたのであれば、変換は常に成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To change this, you need to define wxLOG_COMPONENT to a string uniquely identifying each component, e.g. you could give it the value "MyProgram" by default and re-define it as "MyProgram/DB" in the module working with the database and "MyProgram/DB/Trans" in its part managing the transactions.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T141850Z">
        <seg>これを変更するためには、 wxLOG_COMPONENT として各コンポーネントを一意に識別する文字列を定義する必要があります。この文字列は例えばデフォルトで "MyProgram" を指定し、データベースを利用するモジュールでは "MyProgram/DB" に、さらにトランザクションを扱う部分では "MyProgram/DB/Trans" に再定義する、というようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To completely change the logging behaviour you may define a custom log target.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T120523Z">
        <seg>ロギングの振る舞いを完全に変更するためにはカスタムログターゲットを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To correct this you should use</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T171237Z">
        <seg>これを正しく動作させるためには、以下のようにする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a new log target class you only need to derive it from wxLog and override one or several of wxLog::DoLogRecord(), wxLog::DoLogTextAtLevel() and wxLog::DoLogText() in it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T112527Z">
        <seg>新しいログターゲットクラスを作成する場合、wxLog を継承し、wxLog::DoLogRecord()、wxLog::DoLogTextAtLevel()、wxLog::DoLogText() のいずれか (または複数) をオーバーライドするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a new log target class you only need to derive it from wxLog and implement one (or both) of DoLog() and DoLogString() in it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111852Z">
        <seg>新しいログターゲットクラスを作成する場合、wxLog を継承し、DoLog() と DoLogString() のどちらか (または両方) を実装するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To disable the logging entirely you can use wxLog::EnableLogging() method or, more usually, wxLogNull class which temporarily disables logging and restores it back to the original setting when it is destroyed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T140214Z">
        <seg>完全にロギングを無効化するためには wxLog::EnableLogging() か、普通は一時的にロギングを無効化し、オブジェクトが破棄される時に元の設定を復元する wxLogNull クラスを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get an ANSI string from a wxString, you may use the mb_str() function which always returns an ANSI string (independently of the mode - while the usual c_str() returns a pointer to the internal representation which is either ASCII or Unicode).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T152048Z">
        <seg>wxString から ANSI 文字列を取得するには、常に ANSI 文字列を返却する mb_str() 関数を使用することができます。 (これはビルドモードに依存しません。一方で、普通の c_str() は内部の表現型のポインタを返却しますが、これは ASCII か Unicode のどちらかです) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To give a quick example, a common question is how to receive the mouse movement events happening when the mouse is in one of the frame children in the frame itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T030046Z">
        <seg>一例として、よく質問される子フレーム内にマウスがあるときのマウス移動イベントの受信方法を挙げましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To hide a window using the sizer, call wxSizer::Show.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T152111Z">
        <seg>サイザーを使用してウィンドウを非表示にするためには wxSizer::Show を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To hide a window using the sizer, call wxSizer::Show.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141617Z">
        <seg>サイザーを使用してウィンドウを非表示にするためには wxSizer::Show を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To limit logging to important messages only, you may use wxLog::SetLogLevel() with e.g. wxLOG_Warning value -- this will completely disable all logging messages with the severity less than warnings, so wxLogMessage() output won't be shown to the user any more.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T140449Z">
        <seg>重要なメッセージのみを記録するためには wxLog::SetLogLevel() に wxLOG_Warning などを指定します。こうすることで、重要度が警告未満であるすべてのメッセージのロギングが無効になり、wxLogMessage() の出力はもはやユーザに通知されなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make things a bit more readable, you are also allowed to prefix the constant with 'L' instead of putting it after it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T154039Z">
        <seg>もう少しだけ可読性を上げるために、 'L' を定数の後ろではなく、前に付けることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To provide extensibility, the functionality for loading and saving bitmap formats is not implemented in the wxBitmap class, but in a number of handler classes, derived from wxBitmapHandler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155122Z">
        <seg>拡張性のため、ビットマップ形式の読み書きは wxBitmap クラスで実装されておらず、wxBitmapHandler を継承した多数のハンドラクラスで実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To provide extensibility, the functionality for loading and saving bitmap formats is not implemented in the wxBitmap class, but in a number of handler classes, derived from wxBitmapHandler.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142547Z">
        <seg>拡張性のため、ビットマップ形式の読み書きは wxBitmap クラスで実装されておらず、wxBitmapHandler を継承した多数のハンドラクラスで実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To put it a different way, events set to propagate (See: wxEvent::ShouldPropagate) (most likely derived either directly or indirectly from wxCommandEvent) will travel up the containment hierarchy from child to parent until the maximal propagation level is reached or an event handler is found that doesn't call event.Skip().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T032037Z">
        <seg>別の言い方をすると、伝播するように設定されたイベント (参照: wxEvent::ShouldPropagate) (よくあるのは wxCommandEvent を直接、または間接的に継承したイベントです) は最大回数、伝播するか event.Skip() を呼んでいないイベントハンドラが見つかるまで、子から親へコントロール階層をさかのぼっていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To summarize, Unicode support in wxWidgets is mostly transparent for the application and if you use wxString objects for storing all the character data in your program there is really nothing special to do.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T092249Z">
        <seg>まとめると、wxWidgets による Unicode 対応はアプリケーションにとってほとんど 透過的 であり、wxString オブジェクトを使ってすべての文字データを格納するのであれば、特別なことをなにもする必要がありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To summarize, here is a brief example of how a program which can be compiled in both ANSI and Unicode modes could look like:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160618Z">
        <seg>要点をまとめるため、 ANSI モードと Unicode モードの両方でコンパイルできるプログラムの簡潔な例を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To summarize, instead of explicitly calling the base class version as you would have done with C++ virtual functions (i.e. wxTextCtrl::OnChar()), you should instead call Skip.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022245Z">
        <seg>要約すると、C++ の仮想関数で行うように基底クラスの関数を直接呼ぶ  (つまり、wxTextCtrl::OnChar() を呼ぶ) 代わりに、 Skip を呼ぶようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To summarize, using Bind&lt;&gt;() requires slightly more typing but is much more flexible than using static event tables so don't hesitate to use it when you need this extra power.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T061453Z">
        <seg>まとめると、Bind&lt;&gt;() を使用すると若干コードが増えますが、静的イベントテーブルよりも柔軟性があります。そのため、この追加の効果が必要なときはためらわずに使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To switch scrolling adaptation on globally in your application, call the static function wxDialog::EnableLayoutAdaptation passing true.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T145718Z">
        <seg>スクロールに関する適応をアプリケーション内でグローバルに切り替える場合、静的関数 wxDialog::EnableLayoutAdaptation に true を渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To test for command events (which will probably be the only events you wish to redirect), you may use wxEvent::IsCommandEvent for efficiency, instead of using the slower run-time type system.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T054449Z">
        <seg>コマンドイベントかどうか (おそらくリダイレクト対象のイベントかどうかだと思いますが) を調べるため、遅い実行時型情報の代わりに wxEvent::IsCommandEvent を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use a client, paint or window device context, create an object on the stack with the window as argument, for example:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141637Z">
        <seg>wxClientDC、wxPaintDC、wxWindowDC を使用する場合、以下のようにウィンドウを引数に指定してスタック上にオブジェクトを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use an event table you must first decide in which class you wish to handle the events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T010545Z">
        <seg>イベントテーブル を使うためには、まずイベントを処理するクラスを決定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use an ordinary function or a static method as an event handler you would write something like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060656Z">
        <seg>イベントハンドラとして普通の関数や静的メンバ関数を使用する場合、以下のように書いてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use your custom log target you may either call wxLog::SetActiveTarget() with your custom log object or create a wxAppTraits-derived class and override wxAppTraits::CreateLogTarget() virtual method in it and also override wxApp::CreateTraits() to return an instance of your custom traits object.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T144504Z">
        <seg>作成したカスタムログターゲットを使用するためには、カスタムログターゲットのオブジェクトを指定して wxLog::SetActiveTarget() を呼ぶか、wxAppTraits を継承したクラスを作成して wxAppTraits::CreateLogTarget() 仮想関数をオーバーライドし、自作の特性オブジェクトのインスタンスを返却するように wxApp::CreateTraits() をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Topic Overviews</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004800Z">
        <seg>トピックスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Topic overviews</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T131901Z">
        <seg>トピックスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Translating Menu Accelerators</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T035524Z">
        <seg>メニューアクセラレータの翻訳</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Translating menu accelerators</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T002909Z">
        <seg>メニューアクセラレータの翻訳</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Translating the strings extracted in the previous step to other language(s).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T001144Z">
        <seg>前のステップで抽出した文字列を別の言語に翻訳する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Translating the strings in the program text using wxGetTranslation or equivalently the _() macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T235702Z">
        <seg>wxGetTranslation か、それと同じように _() マクロを利用してプログラム中のテキストを 翻訳する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Translating the strings in the program text using wxGetTranslation or equivalently the _() macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T043253Z">
        <seg>wxGetTranslation か、それと同じように _() マクロを利用してプログラム中のテキストを 翻訳する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Translating your application involves several steps:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T040059Z">
        <seg>アプリケーションの翻訳にはいくつかのステップが含まれます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try to write code so it is parameterised by wxDC - if you do this, the same piece of code may write to a number of different devices, by passing a different device context.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154335Z">
        <seg>なるべく wxDC 型を使用してパラメータ化するようにしてください。このようにした場合、異なるデバイスコンテキストを渡すことで多くのデバイスに対して同じコードを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try to write code so it is parameterised by wxDC - if you do this, the same piece of code may write to a number of different devices, by passing a different device context.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141738Z">
        <seg>なるべく wxDC 型を使用してパラメータ化するようにしてください。このようにした場合、異なるデバイスコンテキストを渡すことで多くのデバイスに対して同じコードを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typed, i.e. strings or numbers for the moment.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T150434Z">
        <seg>型を持つ。今のところ、文字列か数値であるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically events that deal with a window as a window (size, motion, paint, mouse, keyboard, etc.) are sent only to the window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T052010Z">
        <seg>(リサイズ、移動、描画、マウスイベント、キーボードイベントといった) ウィンドウに関係する一般的なイベントはウィンドウに対してのみ送られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically when UTF8 is used, code units are stored into char types, since char are 8bit wide on almost all systems; when using UTF16 typically code units are stored into wchar_t types since wchar_t is at least 16bits on all systems.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T035146Z">
        <seg>一般的に、UTF8 を使用するときはコード単位を char に格納します。なぜなら、ほぼすべてのシステムで char 型は 8 ビットの大きさを持つためです; そして、一般的に UTF-16 を使用するときはコード単位を wchar_t 型に格納します。 wchar_t はすべてのプラットフォームで少なくとも 16 ビットだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UTF-32 is commonly used under Unix systems for internal representation of Unicode strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T031248Z">
        <seg>一般に、UTF-32 は Unix システムにおける Unicode 文字列の内部表現に使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>UTF-8 uses code units of 8 bits (1 byte); code points beyond the usual english alphabet are represented using a variable number of bytes, which makes it less efficient than UTF-32 for internal representation.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T033101Z">
        <seg>UTF-8 は 8 ビット (1 バイト) のコード単位を使用します; 普通のアルファベット以外のコードポイントは可変バイトで表現されるため、内部表現としては UTF-32 よりも若干効率が落ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Unix systems, including Mac OS X, UCS-4 (also known as UTF-32) is used by default, however it is also possible to build wxWidgets to use UTF-8 internally by passing --enable-utf8 option to configure.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T093135Z">
        <seg>Mac OS X を含む Unix システムでは、デフォルトで (UTF-32 としても知られる) UCS-4 が使用されますが、設定に --enable-utf8 オプションを渡すことで内部に UTF-8 を使用するように wxWidgets をビルドすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Windows 3, modal dialogs have to be emulated using modeless dialogs and a message loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T150038Z">
        <seg>Windows 3 ではモーダルダイアログはモードレスダイアログとメッセージループを使用してエミュレートしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Windows, wxBitmap may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154959Z">
        <seg>Windows では wxBitmap は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Windows, wxCursor may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155048Z">
        <seg>Windows では wxCursor は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Windows, wxIcon may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155024Z">
        <seg>Windows では wxIcon は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Windows, wxBitmap may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T141924Z">
        <seg>Windows では wxBitmap は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Windows, wxCursor may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142222Z">
        <seg>Windows では wxCursor は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under Windows, wxIcon may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142134Z">
        <seg>Windows では wxIcon は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under certain circumstances, it will be required to define your own event class e.g. for sending more complex data from one place to another.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T163058Z">
        <seg>(より複雑なデータをある場所から別の場所へ送るといった) 特定の状況下では独自のイベントクラスの定義が必要になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under certain circumstances, you must define your own event class e.g., for sending more complex data from one place to another.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T033840Z">
        <seg>(より複雑なデータをある場所から別の場所へ送るといった) 特定の状況下では独自のイベントクラスを定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxGTK, wxBitmap may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155007Z">
        <seg>wxGTK では wxBitmap は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxGTK, wxCursor may load the following formats (in addition to stock cursors):</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155055Z">
        <seg>wxGTK では wxCursor は (既存のカーソルに加えて) 以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxGTK, wxIcon may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155032Z">
        <seg>wxGTK では wxIcon は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxGTK, wxBitmap may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142050Z">
        <seg>wxGTK では wxBitmap は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxGTK, wxCursor may load the following formats (in additional to stock cursors):</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142320Z">
        <seg>wxGTK では wxCursor は (既存のカーソルに加えて) 以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxGTK, wxIcon may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142202Z">
        <seg>wxGTK では wxIcon は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxMotif and wxX11, wxBitmap may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155015Z">
        <seg>wxMotif と wxX11 では wxBitmap は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxMotif and wxX11, wxCursor may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155103Z">
        <seg>wxMotif と wxX11 では wxCursor は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxMotif and wxX11, wxIcon may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155040Z">
        <seg>wxMotif と wxX11 では wxImage は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxMotif and wxX11, wxBitmap may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142108Z">
        <seg>wxMotif と wxX11 では wxBitmap は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxMotif and wxX11, wxCursor may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142349Z">
        <seg>wxMotif と wxX11 では wxCursor は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Under wxMotif and wxX11, wxIcon may load the following formats:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142212Z">
        <seg>wxMotif と wxX11 では wxImage は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode Related Preprocessor Symbols</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T120325Z">
        <seg>Unicode 関連のプリプロセッサシンボル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode Representations and Terminology</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T005556Z">
        <seg>Unicode の表現方法と用語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode Support in wxWidgets</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004802Z">
        <seg>wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode and ANSI modes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T165215Z">
        <seg>Unicode モードと ANSI モード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode and the Outside World</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T005637Z">
        <seg>Unicode と外部の世界</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode and the outside world</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T141754Z">
        <seg>Unicode と外部の世界</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode assigns each character of almost any existing alphabet/script a number, which is called code point; it's typically indicated in documentation manuals and in the Unicode website as U+xxxx where xxxx is an hexadecimal number.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T031700Z">
        <seg>Unicode では、存在するほぼすべての文字を コードポイント と呼ばれる番号に割り当てています; 一般的に、マニュアルや Unicode のウェブサイトでは U+xxxx (xxxx は 16 進数です) という形で表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode is Always Used by Default</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T032856Z">
        <seg>デフォルトで Unicode が常に使用されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode is a standard for character encoding which addresses the shortcomings of the previous standards (e.g. the ASCII standard), by using 8, 16 or 32 bits for encoding each character.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T005825Z">
        <seg>Unicode とは、 1 文字あたり 8、 16、 32 ビットを使用することで、これまでの標準的な文字コード (例えば ASCII) の欠点に対処した文字コードの標準規格のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode is a standard for character encoding which addresses the shortcomings of the previous, 8 bit standards, by using at least 16 (and possibly 32) bits for encoding each character.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T160249Z">
        <seg>Unicode とは、 1 文字あたり少なくとも 16 (あるいは 32) ビットを使用することで、これまでの標準的な 8 ビットの文字コードの欠点に対処した文字コードの標準規格のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode support in wxWidgets</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T154556Z">
        <seg>wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode-Related Compilation Errors</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T121243Z">
        <seg>Unicode 関連のコンパイルエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unicode-related compilation settings</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T144526Z">
        <seg>Unicode 関連のコンパイル設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike for all the other logging functions, this function can't be overridden by a log target.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T005311Z">
        <seg>他のすべてのロギング関数と異なり、この関数はログターゲットによってオーバーライドすることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike in earlier versions of wxWidgets, OnInit does not return a frame.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T151214Z">
        <seg>wxWidgets の初期バージョンとは違い、OnInit はフレームを返却しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike the original wxWidgets Dialog Editor, editors such as wxDesigner, DialogBlocks, XRCed and wxWorkshop create dialogs based exclusively on sizers, practically forcing the user to create platform independent layouts without compromises.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T114516Z">
        <seg>wxWidgets のオリジナルのダイアログエディタと異なり、wxDesigner、DialogBlocks、XRCed、wxWorkshop などのエディタはもっぱらサイザーのみに基づいてダイアログを作成し、事実上、プラットフォーム非依存のレイアウトを妥協なしに作ることをユーザに強制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Up</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145429Z">
        <seg>Up</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use wxNotebook::ChangeSelection instead, as wxNotebook::SetSelection is deprecated</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T061010Z">
        <seg>wxNotebook::SetSelection は非推奨のため、代わりに wxNotebook::ChangeSelection を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use wxString instead of C style strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151905Z">
        <seg>C 形式の文字列の代わりに wxString を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use PushEventHandler/PopEventHandler to form a chain of event handlers, where each handler processes a different range of events independently from the other handlers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T070526Z">
        <seg>他のイベントハンドラとは異なる範囲のイベントを独立して処理するようなイベントハンドラを作成する場合に PushEventHandler/PopEventHandler を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the macros DECLARE_DYNAMIC_CLASS and IMPLEMENT_DYNAMIC_CLASS in order to allow the framework to create view objects on demand.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T020328Z">
        <seg>Use the macros DECLARE_DYNAMIC_CLASS and IMPLEMENT_DYNAMIC_CLASS in order to allow the framework to create view objects on demand.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this macro in a source file to end listing static event handlers for a specific class...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T022449Z">
        <seg>静的イベントハンドラの列挙を終了するために、ソースファイル内でこのマクロを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this macro in a source file to start listing static event handlers for a specific class...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T022348Z">
        <seg>静的イベントハンドラの列挙を開始するために、ソースファイル内でこのマクロを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this macro inside a class declaration to declare a static event table for that class...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T014717Z">
        <seg>静的イベントテーブルを宣言するために、クラス宣言の中でこのマクロを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this to paint on the client area of a window, but only from within a wxPaintEvent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154306Z">
        <seg>ウィンドウのクライアントエリアに描画するときに使用しますが、wxPaintEvent の中で のみ 使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this to paint on the client area of window (the part without borders and other decorations), but do not use it from within an wxPaintEvent.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154132Z">
        <seg>ウィンドウのクライアントエリア (ボーダーや他の装飾を除いた部分) に描画するときに使用します。ただし、wxPaintEvent の中で使用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this to paint on the screen, as opposed to an individual window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T153925Z">
        <seg>個別のウィンドウではなく、スクリーン上に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this to paint on the whole area of a window, including decorations.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T154315Z">
        <seg>装飾を含む、ウィンドウ全体に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Used for special cursor processing based on current mouse position</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055453Z">
        <seg>現在のマウス位置に基づいた特殊なカーソル処理に使用される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Used to query layout information</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055346Z">
        <seg>レイアウト情報の問い合わせに使用される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>User Generated Events vs Programmatically Generated Events</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155312Z">
        <seg>ユーザ生成イベント vs プログラム生成イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using Existing Event Classes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T145424Z">
        <seg>既存のイベントクラスの使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using a cast to force the issue (listed only for completeness):</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T125204Z">
        <seg>型を決定させるためのキャスト (これはリストの網羅性のために上げているだけです):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using an explicit conversion to narrow, multibyte, string:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124953Z">
        <seg>ナロー (マルチバイト) 文字列への明示的な変換:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using existing event classes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T154608Z">
        <seg>既存のイベントクラスの使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using these target all the log messages can be redirected to a text control.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T125000Z">
        <seg>これらのターゲットを使用してログメッセージをテキストコントロールへリダイレクトできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using trace masks</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T131107Z">
        <seg>トレースマスクの使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Usually there is no next event handler so the control passes to the next step but see Event Handlers Chain for how the next handler may be defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T141636Z">
        <seg>普通は次のイベントハンドラが存在しないため、次のステップを行いますが、次のイベントハンドラを定義する方法は イベントハンドラの連鎖 を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Usually this doesn't matter much because most algorithms used on the strings examine them sequentially anyhow and because wxString implements a cache for iterating over the string by index but it can have serious consequences for algorithms using random access to string elements as they typically acquire O(N^2) time complexity instead of O(N) where N is the length of the string.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T151138Z">
        <seg>大半のアルゴリズムでは文字列を逐次的に調べますし、wxString は文字列にインデックスでアクセスするためのキャッシュを持つため、通常はこのことがそれほど問題になることはありません。しかし、文字列にランダムアクセスするアルゴリズムにとっては、一般的に計算時間が O(N) から O(N^2) になる (N は文字列長です) ため、深刻な影響があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Usually you don't need to worry about this as the conversions do their work behind the scenes however in some cases it doesn't work.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T122249Z">
        <seg>これらの変換は裏側で行われるため、通常はこのことを気にする必要はありませんが、いくつかの場合ではうまく動作しないことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Validation of data in controls is covered in Validator overview.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T150753Z">
        <seg>コントロールのバリデーションは バリデータの概要 で触れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Validation of data in controls is covered in wxValidator Overview.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T154630Z">
        <seg>コントロールのバリデーションは wxValidator の概要 で触れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Version: 2.9.4</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004613Z">
        <seg>Version: 2.9.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>WXMODE</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155355Z">
        <seg>WXMODE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>WXPREFIX</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T154852Z">
        <seg>WXPREFIX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>WXSTDERR</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155512Z">
        <seg>WXSTDERR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>WXTRACE</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T154508Z">
        <seg>WXTRACE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Watch out to put in enough casts to the inherited event function.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T042446Z">
        <seg>継承したイベント関数へのキャストが必要なことも忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a wxChar type which maps either on char or wchar_t depending on the mode in which program is being compiled.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151556Z">
        <seg>wxChar 型はコンパイル時のモードによって char か wchar_t のいずれかにマッピングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have seen that it was easy to write Unicode programs using wxWidgets types and macros, but it has been also mentioned that it isn't quite enough.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T142305Z">
        <seg>すでに見てきたように、wxWidgets の型とマクロを使用することで簡単に Unicode プログラムを書くことができます。しかし、それで十分ではないことについても述べてきました。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What happens here?</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T151527Z">
        <seg>ここでは何が起きているのでしょうか? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What is Unicode?</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T165157Z">
        <seg>Unicode とは?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What makes sizers so well fitted for use in wxWidgets is the fact that every control reports its own minimal size and the algorithm can handle differences in font sizes or different window (dialog item) sizes on different platforms without problems.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T143344Z">
        <seg>サイザーが wxWidgets に非常に適している理由は、すべてのコントロールが自身の最小サイズを通知し、このアルゴリズムが異なるプラットフォームのフォントサイズやウィンドウ (ダイアログのアイテム) のサイズの違いを問題なく取り扱うことができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an event is received from the windowing system, wxWidgets calls wxEvtHandler::ProcessEvent() on the first event handler object belonging to the window generating the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T064141Z">
        <seg>ウィンドウからイベントを受信したとき、wxWidgets はイベントを生成したウィンドウに属する最初のイベントハンドラオブジェクトの wxEvtHandler::ProcessEvent を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an event is received from the windowing system, wxWidgets calls wxEvtHandler::ProcessEvent on the first event handler object belonging to the window generating the event.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T083429Z">
        <seg>ウィンドウからイベントを受信したとき、wxWidgets はイベントを生成したウィンドウに属する最初のイベントハンドラオブジェクトの wxEvtHandler::ProcessEvent を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When controls get more complicated, more specific wxCommandEvent-derived event classes providing additional control-specific information can be used, such as wxTreeEvent for events from wxTreeCtrl windows.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T024036Z">
        <seg>より複雑なコントロールのときには、コントロール独自の追加情報を提供する、wxCommandEvent を継承したより具体的なイベントクラスを使用できます。例えば、wxTreeCtrl ウィンドウから送られるイベントでは wxTreeEvent が使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When controls get more complicated, then specific event classes are used, such as wxTreeEvent for events from wxTreeCtrl windows.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081654Z">
        <seg>より複雑なコントロールのときには特定のイベントクラスが使用されます。例えば、wxTreeCtrl から発生するイベントには wxTreeEvent が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using a vertical sizer, each child can be centered, aligned to the right or aligned to the left.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T151449Z">
        <seg>垂直方向のサイザーを使用する場合、各子コントロールを中央寄せ、右寄せ、左寄せにすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When working with Unicode, it's important to define the meaning of some terms.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T012942Z">
        <seg>Unicode を使用するときは、いくつかの言葉を定義しておくことが重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When wxGROW flag is not used, the item can be aligned within available space.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130521T161646Z">
        <seg>wxGROW フラグを使用しない場合、コントロールを利用可能なスペース内で整列させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While generically wxEvents can be generated both by user actions (e.g. resize of a wxWindow) and by calls to functions (e.g. wxWindow::SetSize), wxWidgets controls normally send wxCommandEvent-derived events only for the user-generated events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060815Z">
        <seg>一般的に wxEvents はユーザ操作 (wxWindow のリサイズなど) と関数呼び出し (wxWindow::SetSize など) のどちらからでも発生しますが、wxCommandEvent を継承したイベントはユーザが操作した場合のみ、wxWidgets コントロールから送信されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While generically wxEvents can be generated both by user actions (e.g., resize of a wxWindow) and by calls to functions (e.g., wxWindow::SetSize), wxWidgets controls normally send wxCommandEvent-derived events only for the user-generated events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T155511Z">
        <seg>一般的に wxEvents はユーザ操作 (wxWindow のリサイズなど) と関数呼び出し (wxWindow::SetSize など) のどちらからでも発生しますが、wxCommandEvent を継承したイベントはユーザが操作した場合のみ、wxWidgets コントロールから送信されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Window Identifiers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130517T171133Z">
        <seg>ウィンドウ識別子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Window identifiers</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T070533Z">
        <seg>ウィンドウ識別子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Window identifiers are integers, and are used to uniquely determine window identity in the event system (though you can use it for other purposes).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T041815Z">
        <seg>ウィンドウ識別子とは、イベントシステムにおいてウィンドウを一意に識別するための整数値です。 (とはいえ、他の用途に使用することもできます)  </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Windows bitmap file (wxBITMAP_TYPE_BMP)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T141948Z">
        <seg>Windows ビットマップファイル (wxBITMAP_TYPE_BMP)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Windows bitmap resource (wxBITMAP_TYPE_BMP_RESOURCE)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T141938Z">
        <seg>Windows ビットマップリソース (wxBITMAP_TYPE_BMP_RESOURCE)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Windows cursor file (wxBITMAP_TYPE_CUR)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142241Z">
        <seg>Windows カーソルファイル (wxBITMAP_TYPE_CUR)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Windows cursor resource (wxBITMAP_TYPE_CUR_RESOURCE)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142231Z">
        <seg>Windows カーソルリソース (wxBITMAP_TYPE_CUR_RESOURCE)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Windows icon file (wxBITMAP_TYPE_ICO)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142150Z">
        <seg>Windows アイコンファイル (wxBITMAP_TYPE_ICO)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Windows icon resource (wxBITMAP_TYPE_ICO_RESOURCE)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142142Z">
        <seg>Windows アイコンリソース (wxBITMAP_TYPE_ICO_RESOURCE)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With Bind&lt;&gt;() they simply won't be called if it wasn't correctly initialized.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T025528Z">
        <seg>Bind&lt;&gt;() を使用することで、初期化が正常に行われなかった場合は単純にイベントハンドラが呼び出されないだけになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With adaptation enabled, if the display size is too small for the dialog, wxWidgets (or rather the standard adapter class wxStandardDialogLayoutAdapter) will make part of the dialog scrolling, leaving standard buttons in a non-scrolling part at the bottom of the dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T150459Z">
        <seg>適応を有効にすると、ダイアログを表示するのに画面サイズが小さすぎる場合に wxWidgets (と言うより標準の適応クラスである wxStandardDialogLayoutAdapter) が標準ボタンをダイアログ下部の非スクロール領域に残してダイアログの一部をスクロールするようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the aid of boost::bind&lt;&gt;() you can even use methods or functions which don't quite have the correct signature:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T030546Z">
        <seg>boost::bind&lt;&gt;() のおかげで、シグネチャが完全に一致しないメンバ関数でも使用することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the event handlers, you only have the option of pre-processing the events and in order to still let the default behaviour happen you must call wxEvent::Skip() and not call the base class event handler directly.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T154704Z">
        <seg>イベントハンドラでは選択肢は事前処理だけで、デフォルトの振る舞いを呼び出すためには wxEvent::Skip() を呼ぶ必要があり、基底クラスのイベントハンドラを直接呼び出しては いけません 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With the virtual functions, you need to call the base class function directly and you can do it either in the beginning of the derived class handler function (to post-process the event) or at its end (to pre-process the event).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T154649Z">
        <seg>仮想関数では基底クラスの関数を直接呼び出す必要があり、継承クラスのイベントハンドラの最初 (イベントの事後処理を行なう場合) か最後 (イベントの事前処理を行なう場合) で呼ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within wxDesigner, this stretch factor gets set from the Option menu.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141317Z">
        <seg>wxDesigner では、ストレッチ係数は Option メニューから指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within wxDesigner, this stretch factor gets set from the Option menu.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T151238Z">
        <seg>wxDesigner では、ストレッチ係数は Option メニューから指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write data to the file (descriptor).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091803Z">
        <seg>ファイル (ディスクリプタ) へデータを書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writeable reference to a character in wxString.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T121343Z">
        <seg>wxString 内の文字列の書き込み可能な参照です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes text at the current position.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T020644Z">
        <seg>Writes text at the current position.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writes the text into the text control at the current insertion position.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130516T160644Z">
        <seg>テキストコントロールの現在の挿入位置へテキストを書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123050Z">
        <seg>次のように書くと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing an image format handler for wxImage is also far easier than writing one for wxBitmap, because wxImage has exactly one format on all platforms whereas wxBitmap can store pixel data very differently, depending on colour depths and platform.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T154951Z">
        <seg>また、wxImage 用の画像形式ハンドラは wxBitmap のものより簡単に書くことができます。なぜなら、wxImage はすべてのプラットフォームでただひとつの形式を使用するのに対し、wxBitmap は色深度やプラットフォームに応じて様々な形式でピクセルデータを格納できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing an image format handler for wxImage is also far easier than writing one for wxBitmap, because wxImage has exactly one format on all platforms whereas wxBitmap can store pixel data very differently, depending on colour depths and platform.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T151145Z">
        <seg>また、wxImage 用の画像形式ハンドラは wxBitmap のものより簡単に書くことができます。なぜなら、wxImage はすべてのプラットフォームでただひとつの形式を使用するのに対し、wxBitmap は色深度やプラットフォームに応じて様々な形式でピクセルデータを格納できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing internationalized programs is much easier with Unicode and, as the support for it improves, it should become more and more so.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T154342Z">
        <seg>Unicode を使うことで、国際化対応のプログラムをより簡単に書くことができます。そして、 Unicode 対応が進むにつれ、それはますます簡単になっていくことでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>XBM data and file (wxBITMAP_TYPE_XBM)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142123Z">
        <seg>XBM データおよび XBM ファイル (wxBITMAP_TYPE_XBM)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>XPM data and file (wxBITMAP_TYPE_XPM)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142000Z">
        <seg>XPM データおよび XPM ファイル (wxBITMAP_TYPE_XPM)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You also need to insert a macro</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T014624Z">
        <seg>また、以下のマクロを</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You call wxApp::SetTopWindow to let wxWidgets know about the top window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T151234Z">
        <seg>wxWidgets へトップウィンドウを教えるためには wxApp::SetTopWindow を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also adjust adaptation on a per-dialog basis by calling wxDialog::SetLayoutAdaptationMode with one of wxDIALOG_ADAPTATION_MODE_DEFAULT (use the global setting), wxDIALOG_ADAPTATION_MODE_ENABLED or wxDIALOG_ADAPTATION_MODE_DISABLED.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T145832Z">
        <seg>また、ダイアログごとに適応を行なうかどうかを指定する場合は wxDialog::SetLayoutAdaptationMode に wxDIALOG_ADAPTATION_MODE_DEFAULT (グローバルな設定を使用)、 wxDIALOG_ADAPTATION_MODE_ENABLED、 wxDIALOG_ADAPTATION_MODE_DISABLED のいずれかを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also override wxDialog::CanDoLayoutAdaptation and wxDialog::DoLayoutAdaptation in a class derived from wxDialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T145045Z">
        <seg>また、wxDialog を継承したクラスで wxDialog::CanDoLayoutAdaptation と wxDialog::DoLayoutAdaptation をオーバライドすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also redirect the wxLogXXX calls to cout by just writing:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T091504Z">
        <seg>以下のように書くことで wxLogXXX 呼び出しを cout へリダイレクトすることもできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also redirect the wxLogXXX calls to cout by just writing:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T015131Z">
        <seg>以下のように書くことで wxLogXXX 呼び出しを cout へリダイレクトすることもできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use DECLARE_APP(appClass) in a header file to declare the wxGetApp function which returns a reference to the application object.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T151539Z">
        <seg>また、ヘッダファイル内で DECLARE_APP(appClass) を使用することで、アプリケーションオブジェクトへの参照を返却する wxGetApp 関数を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can derive a new class from wxEvtHandler instead, defining the appropriate event table, and then call wxWindow::SetEventHandler (or, preferably, wxWindow::PushEventHandler) to make this event handler the object that responds to events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T072042Z">
        <seg>代わりに wxEvtHandler を継承した新しいクラスを作成して適切なイベントテーブルを定義し、wxWindow::SetEventHandler (か、より望ましくは wxWindow::PushEventHandler) を呼び出してこのイベントテーブルを使用するようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can derive a new class from wxEvtHandler instead, defining the appropriate event table, and then call wxWindow::SetEventHandler (or, preferably, wxWindow::PushEventHandler) to make this event handler the object that responds to events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130506T041203Z">
        <seg>代わりに wxEvtHandler を継承した新しいクラスを作成して適切なイベントテーブルを定義し、wxWindow::SetEventHandler (か、より望ましいのは wxWindow::PushEventHandler) を呼び出してこのイベントテーブルを使用するようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can derive your own class from wxDialogLayoutAdapter or wxStandardDialogLayoutAdapter and call wxDialog::SetLayoutAdapter, deleting the old object that this function returns.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T155111Z">
        <seg>wxDialogLayoutAdapter か wxStandardDialogLayoutAdapter を継承した独自のクラスを作成することができます。その場合、wxDialog::SetLayoutAdapter を呼び出し、返却されてきた古いオブジェクトは削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can either choose a single approach that you find preferable or freely combine both methods in your program in different classes or even in one and the same class, although this is probably sufficiently confusing to be a bad idea.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T021925Z">
        <seg>より適切と思ういずれかの方法を選択することもできますし、(おそらく混乱を招く、悪い考えでしょうが) 異なるクラスや同じクラス内で自由に両方の方法を組み合わせることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can grab all the input for an existing dialog box, and edit it 'in situ', before restoring its behaviour to normal.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T124411Z">
        <seg>その場合、既存のダイアログの振る舞いを元に戻す前にすべての入力を取得し、"その場で" 編集することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can help make sure that your dialogs will continue to function after adaptation by:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T150447Z">
        <seg>次のようにすることで、適応の実施後もダイアログが引き続き正常に動作するようにできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can hide controls contained in sizers the same way you would hide any control, using the wxWindow::Show method.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130519T151534Z">
        <seg>wxWindow::Show を用いて任意のコントロールを非表示にするのと同じ方法で、サイザー内のコントロールを非表示にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can however safely assume that GUI is (already/still) available when your log target as used as wxWidgets automatically switches to using wxLogStderr if it isn't.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T122008Z">
        <seg>しかし、ログターゲットを使用するときに (すでに/まだ) GUI が存在すると安全に仮定することができます。なぜなら、 GUI が存在しない場合は wxLogStderr を使用するように wxWidgets がログターゲットを自動的に切り替えるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can ignore the value parameter of the DECLARE_EVENT_TYPE macro since it used only for backwards compatibility with wxWidgets 2.0.x based applications where you have to give the event type ID an explicit value.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T154344Z">
        <seg>DECLARE_EVENT_TYPE の value 引数はイベント ID を明示的に指定していた wxWidgets 2.0.x との後方互換性のために使用されているだけなので、無視することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can not store binary data, for example.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T150447Z">
        <seg>例えば、バイナリデータを格納することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can set WXPREFIX if you are for example distributing a binary version of an application and you don't know in advance where it will be installed.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155354Z">
        <seg>例えば、アプリケーションのバイナリを配布するときにどこへインストールされるか分からないような場合に WXPREFIX を設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can skip the first two sections if you're already familiar with Unicode and wish to jump directly in the details of its support in the library:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T005506Z">
        <seg>すでに Unicode について詳しい場合、最初の 2 つの章は飛ばして、直接ライブラリの対応内容の詳細に飛んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use wxDialog::AddMainButtonId to add identifiers for buttons that should also be treated as standard buttons for the non-scrolling area.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T153026Z">
        <seg>wxDialog::AddMainButtonId を使用することで非スクロール領域にする標準ボタンとして扱う識別子を追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use wxID_HIGHEST to determine the number above which it is safe to define your own identifiers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080114Z">
        <seg>新たな識別子を定義する場合、wxID_HIGHEST 以上の値を使用することで安全に値を決定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You cannot store binary data, for example.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T153851Z">
        <seg>例えば、バイナリデータを格納することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may also force the conversion to char or wchar_t by using an explicit cast but beware that converting the value to char uses the conversion to current locale and may return 0 if it fails.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T122945Z">
        <seg>もしくは、明示的なキャストを用いて強制的に char か wchar_t へ変換することもできますが、 char 型への変換は現在のロケールに対して行われ、変換に失敗した場合は 0 が返却されることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may include the XPM inline as below, since it's C code, or you can load it at run-time.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T140213Z">
        <seg>XPM は C のコードであるため、以下のようにして XPM をインラインでインクルードしたり、実行時に読み込むことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may use the wxID_OK identifier, for example, on any number of dialogs as long as you don't have several within the same dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130517T171208Z">
        <seg>例えば、同じダイアログ内で複数回使うのでなければ、いくつものダイアログで wxID_OK 識別子を使用しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may use the wxID_OK identifier, for example, on any number of dialogs so long as you don't have several within the same dialog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T075113Z">
        <seg>例えば、同じダイアログ内で複数回使うのでなければ、いくつものダイアログで wxID_OK 識別子を使用しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must then call Layout on the sizer to force an update.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T145952Z">
        <seg>その後、強制的に更新するためにサイザーの Layout 関数を呼び出す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should always use wxICON() and wxBITMAP() macros because they work for any platform (unlike the code above which doesn't deal with wxMac, wxX11, ...) and are shorter and more clear than versions with many #ifdef blocks.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T155738Z">
        <seg>常に wxICON() マクロと wxBITMAP() マクロを使用するべきです。なぜなら、これらのマクロはどのプラットフォームでも動作しますし (上記のコードは wxMac、wxX11、... に対応していません)、#ifdef を使用したものより簡潔で明確だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should always use wxICON and wxBITMAP macros because they work for any platform (unlike the code above which doesn't deal with wxMac, wxX11, ...) and are more short and clear than versions with #ifdefs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T150859Z">
        <seg>常に wxICON マクロと wxBITMAP マクロを使用するべきです。なぜなら、これらのマクロはどのプラットフォームでも動作しますし (上記のコードは wxMac、wxX11、... に対応していません)、#ifdef を使用したものより簡潔で明確だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should define wxUSE_UNICODE to 1 to compile your program in Unicode mode.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T144600Z">
        <seg>プログラムを Unicode モードでコンパイルする場合、 wxUSE_UNICODE を 1 に定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should delete all wxWidgets object that you created by the time OnExit finishes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162416Z">
        <seg>作成した wxWidgets は OnExit が完了するまでにすべて削除するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You shouldn't pass c_str() result to vararg functions such as standard printf().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124508Z">
        <seg>c_str() の戻り値を標準 printf() などの可変引数関数へ渡してはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will find the details about the event table macros and the corresponding wxEvent-derived classes in the discussion of each control generating these events.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T024411Z">
        <seg>イベントテーブルマクロと、それに付随する wxEvent の継承クラスについては、イベントを生成する各コントロールの説明で詳しく説明しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You'll have to define and declare a new event type using either way, and this is done using the following macros:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T162809Z">
        <seg>どちらの方法を使うにせよ、新しいイベント型の定義と宣言が必要となりますが、それには以下のマクロを使用します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and the somewhat less usual</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T041535Z">
        <seg>そして、若干、一般的ではないですが、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>avoiding the above situations and assumptions;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T150520Z">
        <seg>上記のような状況や仮定を避ける;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bind( &amp;MyHandler::OnExit, &amp;myHandler, EXIT_FAILURE, _1, "Bye" ));</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T061218Z">
        <seg>bind( &amp;MyHandler::OnExit, &amp;myHandler, EXIT_FAILURE, _1, "Bye" ));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>button_sizer,</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112815Z">
        <seg>button_sizer,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145523Z">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143818Z">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145533Z">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T143853Z">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112307Z">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>char ch = '*';</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160628Z">
        <seg>char ch = '*';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class DerivedApp : public wxApp
{
public:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161002Z">
        <seg>class DerivedApp : public wxApp
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyApp : public wxApp
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162433Z">
        <seg>class MyApp : public wxApp
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyFrame : public wxFrame
{
public:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081755Z">
        <seg>class MyFrame : public wxFrame
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const char *s = "Hello, world!";</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160629Z">
        <seg>const char *s = "Hello, world!";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const char* ascii_str = "Some text";</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T144205Z">
        <seg>const char* ascii_str = "Some text";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>const wchar_t *ws = L"Hello, world!";</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160623Z">
        <seg>const wchar_t *ws = L"Hello, world!";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>delete m_helpCtrl;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162759Z">
        <seg>delete m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>does not work because the temporary buffer returned by wxString::ToUTF8() is destroyed and p is left pointing nowhere.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T171118Z">
        <seg>動作 しません。これは、wxString::ToUTF8() の返却した一時バッファが破棄され、p が存在しないアドレスを指したままになるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>doesn't compile.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T130846Z">
        <seg>これはコンパイルすることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>doesn't work because the argument of the switch statement must be an integer expression so you need to replace s[n] with</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123101Z">
        <seg>うまく動作しません。なぜなら、switch 文の引数は整数式でなければならないためです。そのため、s[n] を次のように置き換える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>doesn't yield a pointer to char so you may not pass it to functions expecting char* or wchar_t*.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T034117Z">
        <seg>では char 型のポインタを得ることはできないため、これを char* または wchar_t* を受け取る関数に渡すことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>else</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022721Z">
        <seg>else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>event.SetCurve( m_curve );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164453Z">
        <seg>event.SetCurve( m_curve );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>event.SetEventObject( this );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155833Z">
        <seg>event.SetEventObject( this );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>event.SetText( wxT("Hallo") );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155946Z">
        <seg>event.SetText( wxT("Hallo") );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>event.Skip();</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022720Z">
        <seg>event.Skip();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T061208Z">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler( bind( &amp;MyHandler::OnExit, &amp;myHandler, _1 ));</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060952Z">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler( bind( &amp;MyHandler::OnExit, &amp;myHandler, _1 ));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>however this doesn't work correctly for strings with embedded NUL characters and the use of iterators is generally preferred as they provide some run-time checks (at least in debug build) unlike the raw pointers.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T154638Z">
        <seg>ただし、これは文字列中に NUL 文字が含まれる場合には正しく動作しません。生ポインタと違い、イテレータを使うといくつかの実行時チェックが (少なくともデバッグビルドでは) 行われるため、一般的にはこちらの方が望ましいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if ( !file.Open("bar") )</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T030138Z">
        <seg>if ( !file.Open("bar") )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if ( isalpha( event.KeyCode() ) )</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022522Z">
        <seg>if ( isalpha( event.KeyCode() ) )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>int       m_count;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081804Z">
        <seg>int       m_count;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>int len = s.Len();</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T161655Z">
        <seg>int len = s.Len();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>int len = strlen(s);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160630Z">
        <seg>int len = strlen(s);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>int len = wcslen(ws);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160624Z">
        <seg>int len = wcslen(ws);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is not going to work.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124620Z">
        <seg>これは正常に動作しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>m_child-&gt;Bind(wxEVT_LEAVE_WINDOW, &amp;MyFrame::OnMouseLeave, this);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T045726Z">
        <seg>m_child-&gt;Bind(wxEVT_LEAVE_WINDOW, &amp;MyFrame::OnMouseLeave, this);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>m_helpCtrl = new wxCHMHelpController;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T124601Z">
        <seg>m_helpCtrl = new wxCHMHelpController;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>m_helpCtrl = new wxCHMHelpController;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162755Z">
        <seg>m_helpCtrl = new wxCHMHelpController;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>m_pos(pos)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130515T150434Z">
        <seg>m_pos(pos)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112813Z">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112308Z">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112137Z">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>only making assumptions about hierarchy immediately after the dialog is created;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T150639Z">
        <seg>ダイアログ内の階層構造について仮定するのはダイアログの作成直後だけにする;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123840Z">
        <seg> </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overriding wxDialog::GetContentWindow to return a book control if your dialog implements pages: wxWidgets will then only make the pages scrollable.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T151317Z">
        <seg>ダイアログでページを実装している場合、ブックコントロールを返却するように wxDialog::GetContentWindow をオーバーライドする: その場合、wxWidgets はページのみをスクロール可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_events_chain.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T151309Z">
        <seg>overview_events_chain.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_events_winstack.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130514T152147Z">
        <seg>overview_events_winstack.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_00.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141213Z">
        <seg>overview_sizer_00.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_01.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141213Z">
        <seg>overview_sizer_01.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_02.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141215Z">
        <seg>overview_sizer_02.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_03.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141202Z">
        <seg>overview_sizer_03.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_04.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141203Z">
        <seg>overview_sizer_04.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_05.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141203Z">
        <seg>overview_sizer_05.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_06.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141223Z">
        <seg>overview_sizer_06.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_07.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141309Z">
        <seg>overview_sizer_07.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_08.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141653Z">
        <seg>overview_sizer_08.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_09.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141805Z">
        <seg>overview_sizer_09.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_10.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141806Z">
        <seg>overview_sizer_10.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_sizer_11.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T141822Z">
        <seg>overview_sizer_11.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_unicode_codes.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T033327Z">
        <seg>overview_unicode_codes.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>overview_unicode_glyphs.png</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T013332Z">
        <seg>overview_unicode_glyphs.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>printf("Compiled at %s\n", __DATE__);
#endif // Unicode/ANSI</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160636Z">
        <seg>printf("Compiled at %s\n", __DATE__);
#endif // Unicode/ANSI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>printf("Hello, %s", (const char *)s.c_str())</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T125205Z">
        <seg>printf("Hello, %s", (const char *)s.c_str())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>printf("Hello, %s", (const char *)s.mb_str())</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T125001Z">
        <seg>printf("Hello, %s", (const char *)s.mb_str())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>printf("Hello, %s", s.c_str())</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124606Z">
        <seg>printf("Hello, %s", s.c_str())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>program can't continue, abort immediately</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T110410Z">
        <seg>プログラムを継続できないため、ただちに中断します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>public:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162435Z">
        <seg>public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return 0;
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162801Z">
        <seg>return 0;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return true;
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161010Z">
        <seg>return true;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s.c_str() + n</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123831Z">
        <seg>s.c_str() + n</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s[n].GetValue()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T122634Z">
        <seg>s[n].GetValue()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>should be rewritten as</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T151602Z">
        <seg>これは以下のように書き換えるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>somewhere in the class declaration.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T015006Z">
        <seg>クラス宣言内のどこかに挿入する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the_frame-&gt;Show(true);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152700Z">
        <seg>the_frame-&gt;Show(true);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>the_frame-&gt;Show(true);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161008Z">
        <seg>the_frame-&gt;Show(true);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T142940Z">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145451Z">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T145551Z">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T144050Z">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112134Z">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>topsizer-&gt;SetSizeHints( this );   // set size hints to honour minimum size
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T113023Z">
        <seg>topsizer-&gt;SetSizeHints( this );   // 最小サイズを守るためのサイズヒントを設定する
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>trace messages are also only enabled in debug mode</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T110441Z">
        <seg>トレースメッセージもデバッグモード時のみ有効化されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>using wxStdDialogButtonSizer;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T150528Z">
        <seg>wxStdDialogButtonSizer を使用する;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>using an intermediate sizer under the main sizer, a false top-level sizer that can be relied on to exist for the purposes of manipulating child sizers and windows;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T154305Z">
        <seg>メインのサイザーの下に仲介サイザーを使用する; これは偽のトップレベルサイザーで、子サイザーとウィンドウを操作するために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>virtual bool OnInit();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161004Z">
        <seg>virtual bool OnInit();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void MyTextCtrl::OnChar(wxKeyEvent&amp; event)
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022521Z">
        <seg>void MyTextCtrl::OnChar(wxKeyEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void MyWindow::OnMyCmd(wxCommandEvent&amp; event)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141638Z">
        <seg>void MyWindow::OnMyCmd(wxCommandEvent&amp; event)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void OnExit(wxCommandEvent&amp; event);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081800Z">
        <seg>void OnExit(wxCommandEvent&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>void OnSize(wxSizeEvent&amp; event);

protected:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T081802Z">
        <seg>void OnSize(wxSizeEvent&amp; event);

protected:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wchar_t wch = L'*';</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160622Z">
        <seg>wchar_t wch = L'*';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>we call event.Skip() so the</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022637Z">
        <seg>wxWidgets の規定クラスや</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>we don't call event.Skip() so the</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022818Z">
        <seg>このイベントを他の場所で処理することはないため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>which does work.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T171317Z">
        <seg>これは正常に動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>will log the message if it was preceded by:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T133057Z">
        <seg>このメッセージは先に以下の処理を行なっている場合に記録されます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>will work exactly as expected.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T045825Z">
        <seg>期待した通りに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>work as expected.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T041919Z">
        <seg>これは期待した通りに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>works both with wxWidgets 3.0 and previous library versions and so should be used for writing code which should be compatible with both 2.8 and 3.0.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123346Z">
        <seg>wxWidgets 3.0 と以前のバージョンの両方で動作します。そのため、2.8 と 3.0 で互換性のあるコードを書かなければならない場合はこのように書くべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wouldn't work if the encoding used on the user system is incompatible with ISO-8859-1 (or even if the sources were compiled under different locale in the case of gcc).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T080912Z">
        <seg>これはユーザのシステムが ISO-8859-1 と互換性がない場合 (gcc の場合、別のロケールでコンパイルされたとしても) 、うまく動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wprintf(L"Compiled at %s\n", __TDATE__);
#else // ANSI</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160628Z">
        <seg>wprintf(L"Compiled at %s\n", __TDATE__);
#else // ANSI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wx</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130518T020455Z">
        <seg>wx</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxALIGN_CENTER ); // no border and centre horizontally</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112848Z">
        <seg>wxALIGN_CENTER ); // ボーダーなしで水平方向に中央寄せ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxALIGN_CENTRE (same as wxALIGN_CENTER) is defined as (wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130521T162105Z">
        <seg>wxALIGN_CENTRE (wxALIGN_CENTER と同じです) は (wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL) として定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxALIGN_LEFT, wxALIGN_TOP, wxALIGN_RIGHT, wxALIGN_BOTTOM, wxALIGN_CENTER_HORIZONTAL and wxALIGN_CENTER_VERTICAL do what they say.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130521T161853Z">
        <seg>wxALIGN_LEFT、wxALIGN_TOP、wxALIGN_RIGHT、wxALIGN_BOTTOM、wxALIGN_CENTER_HORIZONTAL、wxALIGN_CENTER_VERTICAL はその名前の通りのことを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxALL,        //   and make border all around</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112250Z">
        <seg>wxALL,        //  全方向にボーダーを持たせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxALL,       // make border all around (implicit top alignment)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112744Z">
        <seg>wxALL,       // 全方向にボーダーを持たせる (暗黙的に上寄せになる)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxActivateEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055055Z">
        <seg>wxActivateEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxApp Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T135011Z">
        <seg>wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxApp overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T155912Z">
        <seg>wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBACKWARD  // return wxID_BACKWARD</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T120016Z">
        <seg>wxBACKWARD  // wxID_BACKWARD を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBell();</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022832Z">
        <seg>wxBell();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBitmap</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T141839Z">
        <seg>wxBitmap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBitmap bmp("bmpname", wxBITMAP_TYPE_RESOURCE);
#else // Unix</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T140810Z">
        <seg>wxBitmap bmp("bmpname", wxBITMAP_TYPE_RESOURCE);
#else // Unix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBitmap bmp(bmpname_xpm, wxBITMAP_TYPE_XPM);
#endif</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T140813Z">
        <seg>wxBitmap bmp(bmpname_xpm, wxBITMAP_TYPE_XPM);
#endif</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBitmapHandler</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T153117Z">
        <seg>wxBitmapHandler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T145417Z">
        <seg>wxBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112306Z">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112044Z">
        <seg>wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer::CalcMin</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T145430Z">
        <seg>wxBoxSizer::CalcMin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer::GetOrientation</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T145437Z">
        <seg>wxBoxSizer::GetOrientation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer::RecalcSizes</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T145420Z">
        <seg>wxBoxSizer::RecalcSizes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxBoxSizer::wxBoxSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T145407Z">
        <seg>wxBoxSizer::wxBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxCANCEL // return wxID_CANCEL</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115856Z">
        <seg>wxCANCEL // wxID_CANCEL を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxCHMHelpController *m_helpCtrl;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162752Z">
        <seg>wxCHMHelpController *m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxCHMHelpController m_helpCtrl;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T162436Z">
        <seg>wxCHMHelpController m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxChar ch = wxT('*');</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T161652Z">
        <seg>wxChar ch = wxT('*');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxChar is defined to be</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T123159Z">
        <seg>wxChar は次のように定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxClientDC dc(window);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T141639Z">
        <seg>wxClientDC dc(window);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxCloseEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055130Z">
        <seg>wxCloseEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxCommandEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T080732Z">
        <seg>wxCommandEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxCommandEvent event( wxEVT_MY_EVENT, GetId() );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155830Z">
        <seg>wxCommandEvent event( wxEVT_MY_EVENT, GetId() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxConfig Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T153747Z">
        <seg>wxConfig の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxConfig classes overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130610T145546Z">
        <seg>wxConfig クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxConfigBase defines the basic interface of all config classes.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T153829Z">
        <seg>wxConfigBase はすべてのコンフィグクラスの基本インタフェースを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxCursor</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142214Z">
        <seg>wxCursor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112043Z">
        <seg>wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDbTable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004405Z">
        <seg>wxDbTable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDialog Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T143724Z">
        <seg>wxDialog の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDialog overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T145538Z">
        <seg>wxDialog の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDir is a helper class for enumerating the files or subdirectories of a directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T065649Z">
        <seg>wxDir はディレクトリ内のファイル、サブディレクトリを列挙するためのヘルパークラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDir is a portable equivalent of Unix open/read/closedir functions which allow enumerating of the fi...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T070654Z">
        <seg>wxDir は ファイルやディレクトリの列挙を行う Unix の open/read/closedir 関数と同じことを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxDropFilesEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081025Z">
        <seg>wxDropFilesEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxEXPAND |    // make horizontally stretchable</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T112224Z">
        <seg>wxEXPAND |    // 水平方向にリサイズ可能にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxEraseEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055213Z">
        <seg>wxEraseEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055041Z">
        <seg>wxEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxEvent* Clone();

private:</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164310Z">
        <seg>wxEvent* Clone();

private:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFORWARD   // return wxID_FORWARD</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T120007Z">
        <seg>wxFORWARD   // wxID_FORWARD を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFile</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T070910Z">
        <seg>wxFile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFile file;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T025918Z">
        <seg>wxFile file;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFile may be used for low-level IO.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T055758Z">
        <seg>wxFile は低レベル入出力のために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFlexGridSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T153320Z">
        <seg>wxFlexGridSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFocusEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055226Z">
        <seg>wxFocusEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxFrame *the_frame = new wxFrame(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130527T161006Z">
        <seg>wxFrame *the_frame = new wxFrame(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxGridSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T152805Z">
        <seg>wxGridSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxHELP   // return wxID_HELP</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115957Z">
        <seg>wxHELP   // wxID_HELP を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxIcon</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T142124Z">
        <seg>wxIcon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxIcon icon(wxICON(mondrian));

// Equivalent to:

#if defined(__WXGTK__) || defined(__WXMOTIF__)
wxIcon icon(mondrian_xpm);
#endif

#if defined(__WXMSW__)
wxIcon icon("mondrian");
#endif</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T140344Z">
        <seg>wxIcon icon(wxICON(mondrian));

// これは以下と同等:

#if defined(__WXGTK__) || defined(__WXMOTIF__)
wxIcon icon(mondrian_xpm);
#endif

#if defined(__WXMSW__)
wxIcon icon("mondrian");
#endif</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxIdleEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055239Z">
        <seg>wxIdleEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxInitDialogEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055245Z">
        <seg>wxInitDialogEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxJoystickEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055253Z">
        <seg>wxJoystickEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxKeyEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055232Z">
        <seg>wxKeyEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxListCtrl overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004420Z">
        <seg>wxListCtrl の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxListEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081505Z">
        <seg>wxListEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLocale class encapsulates all language-dependent settings and is a generalization of the C locale c...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T035939Z">
        <seg>wxLocale クラスは C 言語におけるロケールの概念を一般化したものであり、言語に依存するすべての設定をカプセル化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog *logger=new wxLogStream(&amp;cout);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T015309Z">
        <seg>wxLog *logger=new wxLogStream(&amp;cout);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog Classes Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T143645Z">
        <seg>wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog class defines the interface for the log targets used by wxWidgets logging functions as explaine...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T072429Z">
        <seg>wxLog クラスは wxWidgets のロギング関数で使用されるログターゲットのインタフェースを定義するクラスです。 詳細は wxLog クラスの概要を参照してください、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog classes overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T003245Z">
        <seg>wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLog::SetActiveTarget(logger);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T015312Z">
        <seg>wxLog::SetActiveTarget(logger);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogBuffer is a very simple implementation of log sink which simply collects all the logged messages...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T130142Z">
        <seg>wxLogBuffer はログ出力先の非常に単純な実装で、すべてのログメッセージを単純に文字列へ集めます。 (ただし、デバッグメッセージは除きます。なぜなら、普通、デバッグメッセージはただちに出力されるので、後で集めることにおそらく関心がないためです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogFormatter class is used to format the log messages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T130957Z">
        <seg>wxLogFormatter クラスはログメッセージをフォーマットするのに使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogMessage("..."); // ok</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T030253Z">
        <seg>wxLogMessage("..."); // ok</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxLogNull logNo;</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T030137Z">
        <seg>wxLogNull logNo;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxMORE      // return wxID_MORE</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T120032Z">
        <seg>wxMORE      // wxID_MORE を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxMenuEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055300Z">
        <seg>wxMenuEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxMouseEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055304Z">
        <seg>wxMouseEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxMoveEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055314Z">
        <seg>wxMoveEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNO     // return wxID_NO</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115802Z">
        <seg>wxNO     // wxID_NO を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNO_DEFAULT // make the wxNO button the default, otherwise wxYES or wxOK button will be default</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115839Z">
        <seg>wxNO_DEFAULT // wxNO ボタンをデフォルトにします。これを指定しない場合、wxYES ボタンか wxOK ボタンがデフォルトになります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNotebook::AddPage</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060859Z">
        <seg>wxNotebook::AddPage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNotebook::AdvanceSelection</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060937Z">
        <seg>wxNotebook::AdvanceSelection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNotebook::DeletePage</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060939Z">
        <seg>wxNotebook::DeletePage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxNotebook::SetSelection</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T060941Z">
        <seg>wxNotebook::SetSelection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxOK     // return wxID_OK</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115848Z">
        <seg>wxOK     // wxID_OK を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPaintEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055321Z">
        <seg>wxPaintEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPlotCurve   *m_curve;
};

DECLARE_EVENT_TYPE( wxEVT_PLOT_ACTION, -1 )

typedef void (wxEvtHandler::*wxPlotEventFunction)(wxPlotEvent&amp;);

#define EVT_PLOT(id, fn) \</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164314Z">
        <seg>wxPlotCurve   *m_curve;
};

DECLARE_EVENT_TYPE( wxEVT_PLOT_ACTION, -1 )

typedef void (wxEvtHandler::*wxPlotEventFunction)(wxPlotEvent&amp;);

#define EVT_PLOT(id, fn) \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPlotCurve *GetCurve()</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164224Z">
        <seg>wxPlotCurve *GetCurve()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPlotCurve *curve = event.GetCurve();
}


// user code sending the event

void MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164445Z">
        <seg>wxPlotCurve *curve = event.GetCurve();
}


// イベントを送信するユーザコード

void MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPlotEvent event( wxEVT_PLOT_ACTION, GetId() );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164447Z">
        <seg>wxPlotEvent event( wxEVT_PLOT_ACTION, GetId() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPlotEvent( wxEventType commandType = wxEVT_NULL, int id = 0 );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164215Z">
        <seg>wxPlotEvent( wxEventType commandType = wxEVT_NULL, int id = 0 );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPrintf("Hello, %s", s)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124736Z">
        <seg>wxPrintf("Hello, %s", s)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPrintf("Hello, %s", s.c_str())</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T124916Z">
        <seg>wxPrintf("Hello, %s", s.c_str())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPrintf("Red is %d", Red);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T130835Z">
        <seg>wxPrintf("Red is %d", Red);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxPropertySheetDialog and wxWizard</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T151329Z">
        <seg>wxPropertySheetDialog と wxWizard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxQueryLayoutInfoEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055326Z">
        <seg>wxQueryLayoutInfoEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSETUP     // return wxID_SETUP</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T120027Z">
        <seg>wxSETUP     // wxID_SETUP を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxScrollEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081735Z">
        <seg>wxScrollEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxScrollWinEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055501Z">
        <seg>wxScrollWinEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSetCursorEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055409Z">
        <seg>wxSetCursorEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizeEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055455Z">
        <seg>wxSizeEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizer is the abstract base class used for laying out subwindows in a window.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T135038Z">
        <seg>wxSizer はウィンドウ内にサブウィンドウを配置するために使用される抽象基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T113935Z">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizerFlags(0).Center() );</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T114010Z">
        <seg>wxSizerFlags(0).Center() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSizerFlags(1).Align().Expand().Border(wxALL, 10));</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T113656Z">
        <seg>wxSizerFlags(1).Align().Expand().Border(wxALL, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSplitterEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T081859Z">
        <seg>wxSplitterEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxStaticBoxSixer is the same as a wxBoxSizer, but surrounded by a static box.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T152110Z">
        <seg>wxStaticBoxSixer は wxBoxSizer と同じですが、スタティックボックスで周りを囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxStaticBoxSizer</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130520T152038Z">
        <seg>wxStaticBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxStaticBoxSizer is a sizer derived from wxBoxSizer but adds a static box around the sizer...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T135216Z">
        <seg>wxStaticBoxSizer は wxBoxSizer を継承したサイザーですが、サイザーの周囲にスタティックボックスを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxStaticCastEvent( wxPlotEventFunction, &amp; fn ), (wxObject *) NULL ),


// code implementing the event type and the event class

DEFINE_EVENT_TYPE( wxEVT_PLOT_ACTION )

wxPlotEvent::wxPlotEvent( ...


// user code intercepting the event

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164431Z">
        <seg>wxStaticCastEvent( wxPlotEventFunction, &amp; fn ), (wxObject *) NULL ),


// イベント型とイベントクラスを定義するコード

DEFINE_EVENT_TYPE( wxEVT_PLOT_ACTION )

wxPlotEvent::wxPlotEvent( ...


// イベントを捕まえるユーザコード

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString s = wxT("Hello, world!");</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T161654Z">
        <seg>wxString s = wxT("Hello, world!");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString str(ascii_str, wxConvUTF8);</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T144207Z">
        <seg>wxString str(ascii_str, wxConvUTF8);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxString text = event.GetText();
}


// user code sending the event

void MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T155828Z">
        <seg>wxString text = event.GetText();
}


// イベントを送信するユーザコード

void MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxSysColourChangedEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T055534Z">
        <seg>wxSysColourChangedEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTempFile is a very small file designed to make replacing the files contents safer - see its documentation for more details.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T064731Z">
        <seg>wxTempFile はより安全にファイルの置換を行うためのとても小さなファイルです。詳細は ドキュメント を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTempFile provides a relatively safe way to replace the contents of the existing file...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T071855Z">
        <seg>wxTempFile は既存のファイルの置換を行うための比較的安全な方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTextFile is a general purpose class for working with small text files on line by line basis.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T064827Z">
        <seg>wxTextFile は小さなテキストファイルを行単位で扱うための汎用的なクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTimerEvent object is passed to the event handler of timer events (see wxTimer::SetOwner).</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T153757Z">
        <seg>wxTimerEvent はタイマーイベントのイベントハンドラへ引き渡されるオブジェクトです。 (wxTimer::SetOwner 参照) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTopLevelWindow is a common base class for wxDialog and wxFrame.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T154557Z">
        <seg>wxTopLevelWindow は wxDialog と wxFrame の共通の基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTreeCtrl::Delete</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T061011Z">
        <seg>wxTreeCtrl::Delete</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTreeCtrl::DeleteAllItems</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T061013Z">
        <seg>wxTreeCtrl::DeleteAllItems</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTreeCtrl::EditLabel</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T061014Z">
        <seg>wxTreeCtrl::EditLabel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxTreeEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T082226Z">
        <seg>wxTreeEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxUpdateUIEvent</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T082317Z">
        <seg>wxUpdateUIEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxValidator is the base class for a family of validator classes that mediate between a class of contr...</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T135218Z">
        <seg>wxValidator はコントロールクラスとアプリケーションデータを仲介する、バリデータクラスファミリーの基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets 2.8.12: A portable C++ and Python GUI toolkit</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T131846Z">
        <seg>wxWidgets 2.8.12: A portable C++ and Python GUI toolkit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets does not provide translations for all of these currently.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T043604Z">
        <seg>修飾子の翻訳について、今のところ wxWidgets はすべてに対応しているわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets does not yet handle translated special key names such as Backspace, End, Insert, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T003951Z">
        <seg>Backspace、End、Insert といった特殊キーの名前が翻訳された場合、wxWidgets はまだ取り扱うことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets has support for compiling in Unicode mode on the platforms which support it.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130430T155655Z">
        <seg>wxWidgets は Unicode に対応しているプラットフォームであれば Unicode モードでコンパイルすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets has the notion of a log target: it is just a class deriving from wxLog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T111358Z">
        <seg>wxWidgets では ログターゲット という考え方があります: これは単純に wxLog を継承したクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets has the notion of a log target: it is just a class deriving from wxLog.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T022242Z">
        <seg>wxWidgets では ログターゲット という考え方があります: これは単純に wxLog を継承したクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets looks for a wxStdDialogButtonSizer and uses it for the non-scrolling part.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130604T151656Z">
        <seg>wxWidgets は wxStdDialogButtonSizer を探してその部分を非スクロール領域として使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets provides facilities for message translation with it's wxLocale class and is itself fully translated into several languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T040006Z">
        <seg>wxWidgets は wxLocale クラスを使用したメッセージ翻訳機能を提供しており、wxWidgets 自体がいくつかの言語に完全に翻訳されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets provides facilities for message translation with its wxLocale class and is itself fully translated into several languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T152447Z">
        <seg>wxWidgets は wxLocale クラスを使用したメッセージ翻訳機能を提供しており、wxWidgets 自体がいくつかの言語に完全に翻訳されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets provides some functions and classes to facilitate working with files.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T055028Z">
        <seg>wxWidgets はファイルの取り扱いを手助けするための関数やクラスを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets provides the macros __TFILE__, __TDATE__ and __TTIME__ which behave exactly as the standard ones except that they produce ANSI strings in ANSI build and Unicode ones in the Unicode build.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130501T160219Z">
        <seg>wxWidgets では __TFILE__、 __TDATE__、 __TTIME__ マクロを提供しており、これらは ANSI ビルド時には ANSI 文字列に、 Unicode ビルド時には Unicode 文字列になることを除き、標準トークンとまったく同じに振る舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets uses the message catalogs which are binary compatible with gettext catalogs and this allows to use all of the programs in this package to work with them.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130502T160117Z">
        <seg>wxWidgets では gettext のカタログとバイナリ互換性のあるメッセージカタログを使用します。これにより、メッセージカタログを扱う際に gettext のすべてのプログラムを使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets uses the system wchar_t in wxString implementation by default under all systems.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T092511Z">
        <seg>すべてのシステムにおいて、wxWidgets はデフォルトで wxString の実装に wchar_t を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: Bitmaps and Icons</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130609T152925Z">
        <seg>wxWidgets: wxWidgets: ビットマップとアイコン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: Device Contexts</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130529T143051Z">
        <seg>wxWidgets: wxWidgets: デバイスコンテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: Environment Variables</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130523T155606Z">
        <seg>wxWidgets: wxWidgets: 環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: Events and Event Handling</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T151119Z">
        <seg>wxWidgets: wxWidgets: イベントとイベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: File Classes and Functions</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T132425Z">
        <seg>wxWidgets: wxWidgets: ファイルクラスと関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: Internationalization</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130504T035449Z">
        <seg>wxWidgets: wxWidgets: 国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: Sizers Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T135003Z">
        <seg>wxWidgets: wxWidgets: サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: Unicode Support in wxWidgets</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T004606Z">
        <seg>wxWidgets: wxWidgets: wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxApp Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130528T152152Z">
        <seg>wxWidgets: wxWidgets: wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxConfig Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130612T153807Z">
        <seg>wxWidgets: wxWidgets: wxConfig の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxDialog Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130531T151530Z">
        <seg>wxWidgets: wxWidgets: wxDialog の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxLog Classes Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T090608Z">
        <seg>wxWidgets: wxWidgets: wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWindow is the base class for all windows and represents any visible object on screen.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130507T152539Z">
        <seg>wxWindow はすべてのウィンドウの基底クラスであり、画面上に表示されるすべての可視オブジェクトを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWindow's sizers hierarchy is parallel to the wxWindow children hierarchy: child windows are children of their parent window and the sizer (or sizers) form separate hierarchy attached to the window with wxWindow::SetSizer().</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130503T172216Z">
        <seg>wxWindow's sizers hierarchy is parallel to the wxWindow children hierarchy: child windows are children of their parent window and the sizer (or sizers) form separate hierarchy attached to the window with wxWindow::SetSizer().</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxWizard is the central class for implementing 'wizard-like' dialogs.</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130606T151645Z">
        <seg>wxWizard はウィザード風のダイアログを実装するための中心的なクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxYES    // return wxID_YES</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115747Z">
        <seg>wxYES    // wxID_YES を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wxYES_NO // Add Yes/No subpanel</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130522T115739Z">
        <seg>wxYES_NO // Yes/No サブパネルを追加します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022523Z">
        <seg>{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{ return m_curve; }</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T164225Z">
        <seg>{ return m_curve; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022720Z">
        <seg>}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}
}</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130505T022834Z">
        <seg>}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}
};

MyFunctor myFunctor;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130512T060828Z">
        <seg>}
};

MyFunctor myFunctor;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>} // ~wxLogNull called, old log sink restored</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130525T030224Z">
        <seg>} // ~wxLogNull が呼ばれ、古いログ出力先が元に戻される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>} // ~wxLogNull called, old log sink restored</seg>
      </tuv>
      <tuv lang="JA" changeid="owner" changedate="20130526T114545Z">
        <seg>} // ~wxLogNull が呼ばれ、古いログ出力先が元に戻される</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
