<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="2.6.3_1" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv xml:lang="EN-US">
        <seg>"Content-Type: text/plain; charset=CHARSET\n"</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123419Z">
        <seg>"Content-Type: text/plain; charset=CHARSET\n"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>"Save changed data?", "My app", wxYES_NO|wxCANCEL);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160314Z">
        <seg>"Save changed data?", "My app", wxYES_NO|wxCANCEL);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 1999-02-19 16:03+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"
"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING\n"</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123322Z">
        <seg>#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 1999-02-19 16:03+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"
"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING\n"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 1999-02-19 16:03+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"
"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=iso8859-2\n"
"Content-Transfer-Encoding: 8bit\n"</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123639Z">
        <seg>#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 1999-02-19 16:03+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"
"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=iso8859-2\n"
"Content-Transfer-Encoding: 8bit\n"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># Copyright (C) YEAR Free Software Foundation, Inc.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123319Z">
        <seg># Copyright (C) YEAR Free Software Foundation, Inc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123321Z">
        <seg># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># SOME DESCRIPTIVE TITLE.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123318Z">
        <seg># SOME DESCRIPTIVE TITLE.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#define wxID_ANY                -1

#define wxID_LOWEST             4999

#define wxID_OPEN               5000
#define wxID_CLOSE              5001
#define wxID_NEW                5002
#define wxID_SAVE               5003
#define wxID_SAVEAS             5004
#define wxID_REVERT             5005
#define wxID_EXIT               5006
#define wxID_UNDO               5007
#define wxID_REDO               5008
#define wxID_HELP               5009
#define wxID_PRINT              5010
#define wxID_PRINT_SETUP        5011
#define wxID_PREVIEW            5012
#define wxID_ABOUT              5013
#define wxID_HELP_CONTENTS      5014
#define wxID_HELP_COMMANDS      5015
#define wxID_HELP_PROCEDURES    5016
#define wxID_HELP_CONTEXT       5017

#define wxID_CUT                5030
#define wxID_COPY               5031
#define wxID_PASTE              5032
#define wxID_CLEAR              5033
#define wxID_FIND               5034
#define wxID_DUPLICATE          5035
#define wxID_SELECTALL          5036
#define wxID_DELETE             5037
#define wxID_REPLACE            5038
#define wxID_REPLACE_ALL        5039
#define wxID_PROPERTIES         5040

#define wxID_VIEW_DETAILS       5041
#define wxID_VIEW_LARGEICONS    5042
#define wxID_VIEW_SMALLICONS    5043
#define wxID_VIEW_LIST          5044
#define wxID_VIEW_SORTDATE      5045
#define wxID_VIEW_SORTNAME      5046
#define wxID_VIEW_SORTSIZE      5047
#define wxID_VIEW_SORTTYPE      5048

#define wxID_FILE1              5050
#define wxID_FILE2              5051
#define wxID_FILE3              5052
#define wxID_FILE4              5053
#define wxID_FILE5              5054
#define wxID_FILE6              5055
#define wxID_FILE7              5056
#define wxID_FILE8              5057
#define wxID_FILE9              5058

#define wxID_OK                 5100
#define wxID_CANCEL             5101
#define wxID_APPLY              5102
#define wxID_YES                5103
#define wxID_NO                 5104
#define wxID_STATIC             5105

#define wxID_HIGHEST            5999</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080120Z">
        <seg>#define wxID_ANY                -1

#define wxID_LOWEST             4999

#define wxID_OPEN               5000
#define wxID_CLOSE              5001
#define wxID_NEW                5002
#define wxID_SAVE               5003
#define wxID_SAVEAS             5004
#define wxID_REVERT             5005
#define wxID_EXIT               5006
#define wxID_UNDO               5007
#define wxID_REDO               5008
#define wxID_HELP               5009
#define wxID_PRINT              5010
#define wxID_PRINT_SETUP        5011
#define wxID_PREVIEW            5012
#define wxID_ABOUT              5013
#define wxID_HELP_CONTENTS      5014
#define wxID_HELP_COMMANDS      5015
#define wxID_HELP_PROCEDURES    5016
#define wxID_HELP_CONTEXT       5017

#define wxID_CUT                5030
#define wxID_COPY               5031
#define wxID_PASTE              5032
#define wxID_CLEAR              5033
#define wxID_FIND               5034
#define wxID_DUPLICATE          5035
#define wxID_SELECTALL          5036
#define wxID_DELETE             5037
#define wxID_REPLACE            5038
#define wxID_REPLACE_ALL        5039
#define wxID_PROPERTIES         5040

#define wxID_VIEW_DETAILS       5041
#define wxID_VIEW_LARGEICONS    5042
#define wxID_VIEW_SMALLICONS    5043
#define wxID_VIEW_LIST          5044
#define wxID_VIEW_SORTDATE      5045
#define wxID_VIEW_SORTNAME      5046
#define wxID_VIEW_SORTSIZE      5047
#define wxID_VIEW_SORTTYPE      5048

#define wxID_FILE1              5050
#define wxID_FILE2              5051
#define wxID_FILE3              5052
#define wxID_FILE4              5053
#define wxID_FILE5              5054
#define wxID_FILE6              5055
#define wxID_FILE7              5056
#define wxID_FILE8              5057
#define wxID_FILE9              5058

#define wxID_OK                 5100
#define wxID_CANCEL             5101
#define wxID_APPLY              5102
#define wxID_YES                5103
#define wxID_NO                 5104
#define wxID_STATIC             5105

#define wxID_HIGHEST            5999</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#if wxUSE_UNICODE</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160620Z">
        <seg>#if wxUSE_UNICODE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#include "mondrian.xpm"</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T135751Z">
        <seg>#include "mondrian.xpm"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#include "sample.xpm"</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154217Z">
        <seg>#include "sample.xpm"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&amp;myFrameHandler, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060237Z">
        <seg>&amp;myFrameHandler, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&amp;s[n]</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123351Z">
        <seg>&amp;s[n]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxChar<ept i="0">&lt;/a0&gt;</ept>)s[n]</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123200Z">
        <seg>(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxChar<ept i="0">&lt;/a0&gt;</ept>)s[n]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(<bpt i="0" x="0">&lt;s0&gt;</bpt>char<ept i="0">&lt;/s0&gt;</ept> *)(<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>c_str<ept i="3">&lt;/a3&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130438Z">
        <seg>(<bpt i="0" x="0">&lt;s0&gt;</bpt>char<ept i="0">&lt;/s0&gt;</ept> *)(<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>c_str<ept i="3">&lt;/a3&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(But only command events, so you can't catch mouse move events in a child control in the parent window in the same way because <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMouseEvent<ept i="1">&lt;/a1&gt;</ept> doesn't derive from <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023846Z">
        <seg> (しかし、これが可能なのはコマンドイベントのみです。そのため、同じ方法で子コントロールでのマウス移動イベントを親ウィンドウで捕まえることはできません。なぜなら <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMouseEvent<ept i="1">&lt;/a1&gt;</ept> は <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> を継承していないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Debug build only.) This variable can be set to a comma-separated list of trace masks used in <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept> calls; <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::AddTraceMask<ept i="1">&lt;/a1&gt;</ept> is called for every mask in the list during wxWidgets initialization.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154850Z">
        <seg>(デバッグビルドのみ) この変数は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept> の呼び出しの中で使用されるトレースマスクのカンマ区切りリストを設定します; wxWidgets の初期化中にリスト内の各マスクに対して <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::AddTraceMask<ept i="1">&lt;/a1&gt;</ept> が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Debug build only.) This variable can be set to a comma-separated list of trace masks used in wxLogTrace calls; <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask<ept i="0">&lt;/a0&gt;</ept> is called for every mask in the list during wxWidgets initialization.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155852Z">
        <seg>(デバッグビルドのみ) この変数は wxLogTrace の呼び出しの中で使用されるトレースマスクのカンマ区切りリストを設定します; wxWidgets の初期化中にリスト内の各マスクに対して <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask<ept i="0">&lt;/a0&gt;</ept> が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(In a Unicode build of wxWidgets, the constructor ignores the passed conversion object and retains the Unicode data.)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T145639Z">
        <seg>(Unicode ビルド版の wxWidgets の場合、コンストラクタは引き渡された変換オブジェクトを無視し、Unicode データのまま保持します)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Make sure that the header is <bpt i="0" x="0">&lt;b0&gt;</bpt>not<ept i="0">&lt;/b0&gt;</ept> marked as <bpt i="1" x="1">&lt;e1&gt;</bpt>fuzzy<ept i="1">&lt;/e1&gt;</ept>.)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134722Z">
        <seg>(ヘッダが <bpt i="1" x="1">&lt;e1&gt;</bpt>fuzzy<ept i="1">&lt;/e1&gt;</ept> としてマーク <bpt i="0" x="0">&lt;b0&gt;</bpt>されない<ept i="0">&lt;/b0&gt;</ept> ようにしてください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Make sure that the header is <bpt i="0" x="0">&lt;b0&gt;</bpt>not<ept i="0">&lt;/b0&gt;</ept> marked as <bpt i="1" x="1">&lt;i1&gt;</bpt>fuzzy<ept i="1">&lt;/i1&gt;</ept>.)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T135025Z">
        <seg>(ヘッダが <bpt i="1" x="1">&lt;i1&gt;</bpt>あいまい<ept i="1">&lt;/i1&gt;</ept> に <bpt i="0" x="0">&lt;b0&gt;</bpt>ならない<ept i="0">&lt;/b0&gt;</ept> ようにしてください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Note however that Windows itself has built-in support for surrogate pairs in UTF-16, such as for drawing strings on screen.)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T032822Z">
        <seg>(ただ、画面への文字列の描画など、Windows は元々 UTF-16 のサロゲートペアに対応しています)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Note that even UTF-32 is still not completely trivial as the mapping is different for little and big-endian architectures).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T032240Z">
        <seg> (UTF-32 であっても、リトルエンディアンとビッグエンディアンではバイト列へのマッピングが異なるため、完全に自明とはまだ言えないことに注意してください。) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(The macro wxWX2MBbuf reflects the correct return value of cWX2MB (either char* or wxCharBuffer), except for the const.)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T150332Z">
        <seg>(wxWX2MBbuf マクロは const でないことを除いて、cWX2MB の戻り値 (char* または wxCharBuffer) と同じ型になります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Unix only.) Overrides installation prefix.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154923Z">
        <seg>(Unix のみ) インストールプレフィックスを上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(notice the absence of <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept>, it is not needed at all with wxWidgets functions)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034246Z">
        <seg>(<bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> を使用していないことに注目してください。wxWidgets の関数にはそれは必要ありません)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(referring to the image, if <bpt i="0" x="0">&lt;c0&gt;</bpt>A-&gt;ProcessEvent<ept i="0">&lt;/c0&gt;</ept> is called and it doesn't handle the event, <bpt i="1" x="1">&lt;c1&gt;</bpt>B-&gt;ProcessEvent<ept i="1">&lt;/c1&gt;</ept> will be called and so on...).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151810Z">
        <seg>(図を参照すると分かるように、<bpt i="0" x="0">&lt;c0&gt;</bpt>A-&gt;ProcessEvent<ept i="0">&lt;/c0&gt;</ept> でイベントが処理されないと <bpt i="1" x="1">&lt;c1&gt;</bpt>B-&gt;ProcessEvent<ept i="1">&lt;/c1&gt;</ept> が呼び出され、これが繰り返されます。) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(referring to the image, if <bpt i="0" x="0">&lt;c0&gt;</bpt>W-&gt;ProcessEvent<ept i="0">&lt;/c0&gt;</ept> is called, it immediately calls <bpt i="1" x="1">&lt;c1&gt;</bpt>A-&gt;ProcessEvent<ept i="1">&lt;/c1&gt;</ept>; if nor <bpt i="2" x="2">&lt;c2&gt;</bpt>A<ept i="2">&lt;/c2&gt;</ept> nor <bpt i="3" x="3">&lt;c3&gt;</bpt>B<ept i="3">&lt;/c3&gt;</ept> handle the event, then the <bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindow<ept i="4">&lt;/a4&gt;</ept> itself is used -- i.e. the dynamically bind event handlers and static event table entries of <bpt i="5" x="5">&lt;a5&gt;</bpt>wxWindow<ept i="5">&lt;/a5&gt;</ept> are looked as the last possibility, after all pushed event handlers were tested).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T153318Z">
        <seg>(図を見ると分かるように、<bpt i="0" x="0">&lt;c0&gt;</bpt>W-&gt;ProcessEvent<ept i="0">&lt;/c0&gt;</ept> が呼ばれるとすぐに <bpt i="1" x="1">&lt;c1&gt;</bpt>A-&gt;ProcessEvent<ept i="1">&lt;/c1&gt;</ept> を呼び出します; もし <bpt i="2" x="2">&lt;c2&gt;</bpt>A<ept i="2">&lt;/c2&gt;</ept> でも <bpt i="3" x="3">&lt;c3&gt;</bpt>B<ept i="3">&lt;/c3&gt;</ept> でもイベントを処理しなかった場合、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindow<ept i="4">&lt;/a4&gt;</ept> 自身が使用されます。つまり、登録されたすべてのイベントハンドラを調べた後に<bpt i="5" x="5">&lt;a5&gt;</bpt>wxWindow<ept i="5">&lt;/a5&gt;</ept> の動的イベントハンドラと静的イベントテーブルを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(void)m_docManager-&gt;CreateDocument(f, wxDOC_SILENT);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040148Z">
        <seg>(void)m_docManager-&gt;CreateDocument(f, wxDOC_SILENT);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(wxMGL only.) Redirects stderr output to a file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155530Z">
        <seg>(wxMGL のみ) 標準エラー出力をファイルへリダイレクトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(wxMGL only.) Sets MGL video mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155415Z">
        <seg>(wxMGL のみ) MGL ビデオモードを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) (wxNotifyEventFunction) \</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164320Z">
        <seg>(wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) (wxNotifyEventFunction) \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122641Z">
        <seg> </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081759Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...

protected:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015442Z">
        <seg>...

protected:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
<bpt i="0" x="0">&lt;s0&gt;</bpt>// The constructor initializes the stream buffer and open the file descriptor<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>// associated to the name of the file.<ept i="1">&lt;/s1&gt;</ept>
wxFileInputStream in_stream(<bpt i="2" x="2">&lt;s2&gt;</bpt>"the_file_to_be_read"<ept i="2">&lt;/s2&gt;</ept>);

<bpt i="3" x="3">&lt;s3&gt;</bpt>// Ok, read some bytes ... nb_datas is expressed in bytes.<ept i="3">&lt;/s3&gt;</ept>
in_stream.Read(data, nb_datas);
<bpt i="4" x="4">&lt;s4&gt;</bpt>if<ept i="4">&lt;/s4&gt;</ept> (in_stream.LastError() != wxSTREAM_NOERROR) {</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141352Z">
        <seg>...
<bpt i="0" x="0">&lt;s0&gt;</bpt>// コンストラクタではストリームバッファの初期化と<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>// ファイル名に関連付けられたファイルディスクリプタのオープンが行われる。<ept i="1">&lt;/s1&gt;</ept>
wxFileInputStream in_stream(<bpt i="2" x="2">&lt;s2&gt;</bpt>"the_file_to_be_read"<ept i="2">&lt;/s2&gt;</ept>);

<bpt i="3" x="3">&lt;s3&gt;</bpt>// Ok、データを読み込む ... nb_datas はバイト単位で表す。<ept i="3">&lt;/s3&gt;</ept>
in_stream.Read(data, nb_datas);
<bpt i="4" x="4">&lt;s4&gt;</bpt>if<ept i="4">&lt;/s4&gt;</ept> (in_stream.LastError() != wxSTREAM_NOERROR) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
}

<bpt i="7" x="7">&lt;s7&gt;</bpt>int<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>MyApp::OnExit<ept i="8">&lt;/a8&gt;</ept>()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124602Z">
        <seg>...
}

<bpt i="7" x="7">&lt;s7&gt;</bpt>int<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>MyApp::OnExit<ept i="8">&lt;/a8&gt;</ept>()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
}

int MyApp::OnExit()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162758Z">
        <seg>...
}

int MyApp::OnExit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
};</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162439Z">
        <seg>...
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
};

<bpt i="4" x="4">&lt;s4&gt;</bpt>bool<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>MyApp::OnInit<ept i="5">&lt;/a5&gt;</ept>()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124559Z">
        <seg>...
};

<bpt i="4" x="4">&lt;s4&gt;</bpt>bool<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>MyApp::OnInit<ept i="5">&lt;/a5&gt;</ept>()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
};

bool MyApp::OnInit()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162754Z">
        <seg>...
};

bool MyApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>... <bpt i="55" x="55">&lt;s55&gt;</bpt>do<ept i="55">&lt;/s55&gt;</ept> something with <bpt i="56" x="56">&lt;s56&gt;</bpt>event<ept i="56">&lt;/s56&gt;</ept>.GetPoint() ...
}


<bpt i="57" x="57">&lt;s57&gt;</bpt>// example of code generating the event:<ept i="57">&lt;/s57&gt;</ept>
<bpt i="58" x="58">&lt;s58&gt;</bpt>void<ept i="58">&lt;/s58&gt;</ept> MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T122444Z">
        <seg>...<bpt i="56" x="56">&lt;s56&gt;</bpt>event<ept i="56">&lt;/s56&gt;</ept>.GetPoint() を使用して処理を行なう...
}


<bpt i="57" x="57">&lt;s57&gt;</bpt>// イベントを生成するコードの例:<ept i="57">&lt;/s57&gt;</ept>
<bpt i="58" x="58">&lt;s58&gt;</bpt>void<ept i="58">&lt;/s58&gt;</ept> MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>... process error ourselves ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030154Z">
        <seg>... 自分自身でエラー処理を行なう ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>... update the frame <bpt i="4" x="4">&lt;s4&gt;</bpt>using<ept i="4">&lt;/s4&gt;</ept> the <bpt i="5" x="5">&lt;s5&gt;</bpt>new<ept i="5">&lt;/s5&gt;</ept> size ...
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034644Z">
        <seg>... 新しいサイズを使用してフレームを更新する ...
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...failure (or we may <bpt i="13" x="13">&lt;s13&gt;</bpt>try<ept i="13">&lt;/s13&gt;</ept> iso8859-1/7bit ASCII)...
}
...display text...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143540Z">
        <seg>...失敗 (iso8859-1/7ビット ASCII を試すかもしれない)...
}
...テキストを表示する...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...failure (or we may try iso8859-1/7bit ASCII)...
}
...display text...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T135341Z">
        <seg>...失敗 (iso8859-1/7ビット ASCII を試すかもしれない)...
}
...テキストを表示する...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// ....</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155751Z">
        <seg>// ....</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// Create a new client</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134751Z">
        <seg>// 新しいクライアントを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// Do something.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143827Z">
        <seg>// 処理を行なう。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// For a complete list, look into the documentation at wxStreamBase.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143805Z">
        <seg>// 完全な一覧は wxStreamBase のドキュメントを参照のこと。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// Give it some contents</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155943Z">
        <seg>// 何か値を設定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// Oh oh, something bad happens.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143746Z">
        <seg>// おっと、何か良くないことが起こった。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// Ok, moves to the beginning of the stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143855Z">
        <seg>// Ok、ストリームの先頭へ移動する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// Ok, read some bytes ... nb_datas is expressed in bytes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143741Z">
        <seg>// Ok、データを読み込む ... nb_datas はバイト単位で表す。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// Send it</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155956Z">
        <seg>// 送信する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// The constructor initializes the stream buffer and open the file descriptor</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141708Z">
        <seg>// コンストラクタではストリームバッファの初期化と</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// What is my current position ?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T144308Z">
        <seg>// 現在位置はどこ?
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// You can also get the last number of bytes REALLY put into the buffer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143834Z">
        <seg>// また、バッファへ実際に書き込んだバイト数を取得することもできる。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// You can also inline all like this.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143821Z">
        <seg>// このようにインラインにすることもできる。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// accessors</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164223Z">
        <seg>// アクセサ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// an easy and portable way to create a bitmap
wxBitmap bmp(wxBITMAP(bmpname));

// which is roughly equivalent to the following
#if defined(__WXMSW__) || defined(__WXPM__)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T140806Z">
        <seg>// ビットマップを作成する、簡単で移植性のある方法
wxBitmap bmp(wxBITMAP(bmpname));

// これは以下のコードと大体同じです
#if defined(__WXMSW__) || defined(__WXPM__)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// associated to the name of the file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143731Z">
        <seg>// ファイル名に関連付けられたファイルディスクリプタのオープンが行われる。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// code defining event

class wxPlotEvent: public wxNotifyEvent
{
public:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164155Z">
        <seg>// イベントを定義するコード

class wxPlotEvent: public wxNotifyEvent
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// create text ctrl with minimal size 100x60</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112131Z">
        <seg>// 最小サイズ 100x60 のテキストコントロールを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// create text ctrl with minimal size 100x60 that is horizontally and</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113559Z">
        <seg>// 最小サイズ 100x60 のテキストコントロールを作成し、水平方向と</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// delete all vowels from the string
wxString DeleteAllVowels(const wxString&amp; original)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080433Z">
        <seg>// 文字列から母音をすべて削除する
wxString DeleteAllVowels(const wxString&amp; original)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// do something</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155813Z">
        <seg>//処理を行う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// event can be processed either in the base wxWidgets class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022654Z">
        <seg>// ネイティブコントロールでもイベントを処理するため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// event is not processed anywhere else.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040205Z">
        <seg>// event.Skip() は呼び出さない。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// illegal key hit.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022741Z">
        <seg>// 対象外のキーが押下された。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// in the header of the source file
BEGIN_DECLARE_EVENT_TYPES()
DECLARE_EVENT_TYPE(name, value)
END_DECLARE_EVENT_TYPES()

// in the implementation
DEFINE_EVENT_TYPE(name)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T154147Z">
        <seg>// ヘッダファイルで使用する
BEGIN_DECLARE_EVENT_TYPES()
DECLARE_EVENT_TYPE(name, value)
END_DECLARE_EVENT_TYPES()

// ソースファイルで使用する
DEFINE_EVENT_TYPE(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// in the stream counted from the beginning.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143901Z">
        <seg>// 最後の位置を返却する。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// key code is within legal range.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022716Z">
        <seg>// キーコードが正しい範囲に入っている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// or the native control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040200Z">
        <seg>// event.Skip() を呼び出す。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// required for sending with wxPostEvent()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164309Z">
        <seg>// wxPostEvent() で必要になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// this function converts the input string to uppercase, output it to the screen
// and returns the result
const char *SayHELLO(const wxString&amp; input)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T053434Z">
        <seg>// この関数は入力された文字列を大文字に変換し、画面に表示した上で
// 結果を返却する
const char *SayHELLO(const wxString&amp; input)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// vertically stretchable with a border width of 10</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113647Z">
        <seg>// 垂直方向にリサイズ可能で、ボーダーの太さは 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// we want to get a dialog that is stretchable because it
// has a text ctrl at the top and two buttons at the bottom

MyDialog::MyDialog(wxFrame *parent, wxWindowID id, const wxString &amp;title )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112038Z">
        <seg>// 上部にテキストコントロールと下部にふたつのボタンを持つので
// リサイズ可能なダイアログにしたい

MyDialog::MyDialog(wxFrame *parent, wxWindowID id, const wxString &amp;title )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// with an all-around border with a width of 10 and implicit top alignment</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114006Z">
        <seg>// 太さ 10 のボーダーを全方向に持たせ、暗黙的に上揃えにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// wxFile.Open() normally complains if file can't be opened, we don't want it</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030136Z">
        <seg>// 通常はファイルを開けなかった場合に wxFile.Open() がエラーメッセージを出力するが、そうさせたくない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// wxFileInputStream will close the file descriptor on destruction.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T142045Z">
        <seg>// wxFileInputStream はデストラクタでファイルディスクリプタを閉じる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>//create a sizer with no border and centered horizontally</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114002Z">
        <seg>//サイザーを作成し、ボーダーなしで水平方向に中央揃えにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>//create two buttons that are horizontally unstretchable,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113933Z">
        <seg>//ふたつのボタンを作成し、水平方向にはリサイズ不可にして、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,                // make vertically unstretchable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112830Z">
        <seg>0,                // 垂直方向にはリサイズ不可にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,                <bpt i="56" x="56">&lt;s56&gt;</bpt>// make vertically unstretchable<ept i="56">&lt;/s56&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144100Z">
        <seg>0,                <bpt i="56" x="56">&lt;s56&gt;</bpt>// 垂直方向にはリサイズ不可にする<ept i="56">&lt;/s56&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,           // make horizontally unstretchable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112328Z">
        <seg>0,           // 水平方向にはリサイズ不可にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,           <bpt i="41" x="41">&lt;s41&gt;</bpt>// make horizontally unstretchable<ept i="41">&lt;/s41&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143831Z">
        <seg>0,           <bpt i="41" x="41">&lt;s41&gt;</bpt>// 水平方向にはリサイズ不可にする<ept i="41">&lt;/s41&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,           <bpt i="51" x="51">&lt;s51&gt;</bpt>// make horizontally unstretchable<ept i="51">&lt;/s51&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144025Z">
        <seg>0,           <bpt i="51" x="51">&lt;s51&gt;</bpt>// 水平方向にはリサイズ不可にする<ept i="51">&lt;/s51&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>1,            // make vertically stretchable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112215Z">
        <seg>1,            // 垂直方向にリサイズ可能にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>1,            <bpt i="25" x="25">&lt;s25&gt;</bpt>// make vertically stretchable<ept i="25">&lt;/s25&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143000Z">
        <seg>1,            <bpt i="25" x="25">&lt;s25&gt;</bpt>// 垂直方向にリサイズ可能にする<ept i="25">&lt;/s25&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );         // set border width to 10</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112305Z">
        <seg>10 );         // ボーダーの幅は 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );         <bpt i="30" x="30">&lt;s30&gt;</bpt>// set border width to 10<ept i="30">&lt;/s30&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143812Z">
        <seg>10 );         <bpt i="30" x="30">&lt;s30&gt;</bpt>// ボーダーの幅は 10 にする<ept i="30">&lt;/s30&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );        // set border width to 10</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112809Z">
        <seg>10 );        // ボーダーの幅は 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );        <bpt i="44" x="44">&lt;s44&gt;</bpt>// set border width to 10<ept i="44">&lt;/s44&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143850Z">
        <seg>10 );        <bpt i="44" x="44">&lt;s44&gt;</bpt>// ボーダーの幅は 10 にする<ept i="44">&lt;/s44&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );        <bpt i="54" x="54">&lt;s54&gt;</bpt>// set border width to 10<ept i="54">&lt;/s54&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144048Z">
        <seg>10 );        <bpt i="54" x="54">&lt;s54&gt;</bpt>// ボーダーの幅は 10 にする<ept i="54">&lt;/s54&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>: <bpt i="9" x="9">&lt;a9&gt;</bpt>wxEvent<ept i="9">&lt;/a9&gt;</ept>(winid, eventType),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150432Z">
        <seg>: <bpt i="9" x="9">&lt;a9&gt;</bpt>wxEvent<ept i="9">&lt;/a9&gt;</ept>(winid, eventType),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>: wxDialog(parent, id, title, wxDefaultPosition, wxDefaultSize,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112039Z">
        <seg>: wxDialog(parent, id, title, wxDefaultPosition, wxDefaultSize,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Background: The need for conversion<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152255Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>背景: 変換に対する要件<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Data transfer<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032109Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>データの転送<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Device contexts<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141947Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>デバイスコンテキスト<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Internationalization Sample<ept i="0">&lt;/a0&gt;</ept> - Shows you how all this looks in practice.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043643Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>国際化サンプル<ept i="0">&lt;/a0&gt;</ept> - 国際化を実際にどういう風に行うのかを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Introduction<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074645Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>イントロダクション<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Laying out window elements with sizers<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132046Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>サイザーを利用したウィンドウ要素の配置<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>String class: wxString<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T043127Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>文字列クラス: wxString<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Supported bitmap file formats<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T141054Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>対応しているビットマップファイル形式<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>The idea behind sizers<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T122848Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>サイザーの背後にある考え方<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>What is Unicode?<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155433Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Unicode とは?<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Writing Non-English Applications<ept i="0">&lt;/a0&gt;</ept> - It focuses on handling charsets related problems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041638Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>非英語アプリケーションの作成<ept i="0">&lt;/a0&gt;</ept> - 文字コードに関連した問題について取り組む場合に参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept> Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152201Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept> の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="0">&lt;/a0&gt;</ept>(MyFrame, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022450Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="0">&lt;/a0&gt;</ept>(MyFrame, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer::wxBoxSizer<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145926Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer::wxBoxSizer<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> can lay out its children either vertically or horizontally, depending on what flag is being used in its constructor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T150612Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> はコンストラクタで使用されたフラグに基づいて、子コントロールを垂直方向または水平方向のいずれかに配置できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxCAPTION<ept i="0">&lt;/a0&gt;</ept> | <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMINIMIZE_BOX<ept i="1">&lt;/a1&gt;</ept> | <bpt i="2" x="2">&lt;a2&gt;</bpt>wxMAXIMIZE_BOX<ept i="2">&lt;/a2&gt;</ept> | <bpt i="3" x="3">&lt;a3&gt;</bpt>wxRESIZE_BORDER<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153941Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxCAPTION<ept i="0">&lt;/a0&gt;</ept> | <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMINIMIZE_BOX<ept i="1">&lt;/a1&gt;</ept> | <bpt i="2" x="2">&lt;a2&gt;</bpt>wxMAXIMIZE_BOX<ept i="2">&lt;/a2&gt;</ept> | <bpt i="3" x="3">&lt;a3&gt;</bpt>wxRESIZE_BORDER<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxCSConv<ept i="0">&lt;/a0&gt;</ept> cust(user_encoding);
printf(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Data: %s\n"<ept i="1">&lt;/s1&gt;</ept>, (<bpt i="2" x="2">&lt;s2&gt;</bpt>const<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;s3&gt;</bpt>char<ept i="3">&lt;/s3&gt;</ept>*) str.mb_str(cust));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151940Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxCSConv<ept i="0">&lt;/a0&gt;</ept> cust(user_encoding);
printf(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Data: %s\n"<ept i="1">&lt;/s1&gt;</ept>, (<bpt i="2" x="2">&lt;s2&gt;</bpt>const<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;s3&gt;</bpt>char<ept i="3">&lt;/s3&gt;</ept>*) str.mb_str(cust));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxCalendarCtrl<ept i="0">&lt;/a0&gt;</ept> has native implementation in wxGTK, but it has less features than the generic one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152211Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxCalendarCtrl<ept i="0">&lt;/a0&gt;</ept> は wxGTK でネイティブ実装を持つようになりました。ただし、汎用のものと比べて機能は少ないです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient<ept i="0">&lt;/a0&gt;</ept> - This represents the client application, and is used only within a client program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T145435Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient<ept i="0">&lt;/a0&gt;</ept> - これはクライアントアプリケーションを表しており、クライアントプログラムの中でだけ使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> - This represents the connection from the client to the server.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T145525Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> - これはクライアントからサーバへのコネクションを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDECLARE_EVENT_TABLE<ept i="0">&lt;/a0&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T014946Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDECLARE_EVENT_TABLE<ept i="0">&lt;/a0&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept> Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T151537Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept> の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept> therefore supplies a global <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialogLayoutAdapter<ept i="1">&lt;/a1&gt;</ept> class that implements automatic scrolling adaptation for most sizer-based custom dialogs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T152657Z">
        <seg>そのために <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept> ではグローバルな <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialogLayoutAdapter<ept i="1">&lt;/a1&gt;</ept> クラスを提供しており、このクラスではサイザーを利用した大半のダイアログに対して自動スクロール機能を適用させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDir<ept i="0">&lt;/a0&gt;</ept> is a helper class for enumerating the files or subdirectories of a directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072758Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDir<ept i="0">&lt;/a0&gt;</ept> はディレクトリ内のファイル、サブディレクトリを列挙するためのヘルパークラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDropSource<ept i="0">&lt;/a0&gt;</ept> dragSource( <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134855Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDropSource<ept i="0">&lt;/a0&gt;</ept> dragSource( <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept> file;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113205Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept> file;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept> may be used for low-level IO.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072442Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept> は低レベル入出力のために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFilterInputStream<ept i="0">&lt;/a0&gt;</ept> and wxFileterOutputStream are the base class definitions for stream filtering.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T140357Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFilterInputStream<ept i="0">&lt;/a0&gt;</ept> と wxFilterOutputStream はフィルタリング用の基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFlexGridSizer<ept i="0">&lt;/a0&gt;</ept> is a sizer which lays out its children in a two-dimensional table with all table fields in one row having the same height and all fields in one column having the same width, but all rows or all columns are not necessarily the same height or width as in the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGridSizer<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115123Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFlexGridSizer<ept i="0">&lt;/a0&gt;</ept> は子コントロールを 2 次元の表にレイアウトするサイザーです。同じ行中のセルは同じ高さを持ち、同じ列中のセルは同じ幅を持ちますが、すべての行と列が <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGridSizer<ept i="1">&lt;/a1&gt;</ept> のように同じ高さや幅を持つ必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridBagSizer<ept i="0">&lt;/a0&gt;</ept> is a rather special kind of sizer which, unlike the other classes, allows to directly put the elements at the given position in the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145838Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridBagSizer<ept i="0">&lt;/a0&gt;</ept> はかなり特殊な種類のサイザーで、他のクラスと異なり、サイザー内の指定した位置に子コントロールを直接配置することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> is a sizer which lays out its children in a two-dimensional table with all table fields having the same size, i.e. the width of each field is the width of the widest child, the height of each field is the height of the tallest child.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135720Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> は子コントロールを 2 次元の表にレイアウトするサイザーで、表中のセルはすべて同じ大きさを持ちます。つまり、各セルの幅はもっとも幅の広い子コントロールの幅になり、高さはもっとも高い子コントロールの高さになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> is a two-dimensional sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152816Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> は 2 次元のサイザーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxIcon<ept i="0">&lt;/a0&gt;</ept> icon(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxICON<ept i="1">&lt;/a1&gt;</ept>(sample));

<bpt i="2" x="2">&lt;s2&gt;</bpt>// The above line is equivalent to this:<ept i="2">&lt;/s2&gt;</ept>

<bpt i="3" x="3">&lt;s3&gt;</bpt>#if defined(__WXGTK__) || defined(__WXMOTIF__)<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;s4&gt;</bpt><ept i="4">&lt;/s4&gt;</ept>    <bpt i="5" x="5">&lt;a5&gt;</bpt>wxIcon<ept i="5">&lt;/a5&gt;</ept> icon(sample_xpm);
<bpt i="6" x="6">&lt;s6&gt;</bpt>#endif<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;s7&gt;</bpt><ept i="7">&lt;/s7&gt;</ept>
<bpt i="8" x="8">&lt;s8&gt;</bpt>#if defined(__WXMSW__)<ept i="8">&lt;/s8&gt;</ept>
<bpt i="9" x="9">&lt;s9&gt;</bpt><ept i="9">&lt;/s9&gt;</ept>    <bpt i="10" x="10">&lt;a10&gt;</bpt>wxIcon<ept i="10">&lt;/a10&gt;</ept> icon(<bpt i="11" x="11">&lt;s11&gt;</bpt>"sample"<ept i="11">&lt;/s11&gt;</ept>);
<bpt i="12" x="12">&lt;s12&gt;</bpt>#endif<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154539Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxIcon<ept i="0">&lt;/a0&gt;</ept> icon(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxICON<ept i="1">&lt;/a1&gt;</ept>(sample));

<bpt i="2" x="2">&lt;s2&gt;</bpt>// 上の行はこれと同等:<ept i="2">&lt;/s2&gt;</ept>

<bpt i="3" x="3">&lt;s3&gt;</bpt>#if defined(__WXGTK__) || defined(__WXMOTIF__)<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;s4&gt;</bpt><ept i="4">&lt;/s4&gt;</ept>    <bpt i="5" x="5">&lt;a5&gt;</bpt>wxIcon<ept i="5">&lt;/a5&gt;</ept> icon(sample_xpm);
<bpt i="6" x="6">&lt;s6&gt;</bpt>#endif<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;s7&gt;</bpt><ept i="7">&lt;/s7&gt;</ept>
<bpt i="8" x="8">&lt;s8&gt;</bpt>#if defined(__WXMSW__)<ept i="8">&lt;/s8&gt;</ept>
<bpt i="9" x="9">&lt;s9&gt;</bpt><ept i="9">&lt;/s9&gt;</ept>    <bpt i="10" x="10">&lt;a10&gt;</bpt>wxIcon<ept i="10">&lt;/a10&gt;</ept> icon(<bpt i="11" x="11">&lt;s11&gt;</bpt>"sample"<ept i="11">&lt;/s11&gt;</ept>);
<bpt i="12" x="12">&lt;s12&gt;</bpt>#endif<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxInputStream<ept i="0">&lt;/a0&gt;</ept> is the base class for read-only streams.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T140256Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxInputStream<ept i="0">&lt;/a0&gt;</ept> は読み取り専用ストリームの基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask<ept i="0">&lt;/a0&gt;</ept>( wxTRACE_OleCalls );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T133058Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask<ept i="0">&lt;/a0&gt;</ept>( wxTRACE_OleCalls );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> Classes Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T090619Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>* logger = <bpt i="1" x="1">&lt;s1&gt;</bpt>new<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStream<ept i="2">&lt;/a2&gt;</ept>(&amp;cout);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091557Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>* logger = <bpt i="1" x="1">&lt;s1&gt;</bpt>new<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStream<ept i="2">&lt;/a2&gt;</ept>(&amp;cout);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogBuffer<ept i="0">&lt;/a0&gt;</ept>: This target collects all the logged messages in an internal buffer allowing to show them later to the user all at once.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113120Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogBuffer<ept i="0">&lt;/a0&gt;</ept>: このターゲットはすべてのログメッセージを内部バッファに収集し、後で一括してユーザに通知できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogDebug()<ept i="0">&lt;/a0&gt;</ept> is <bpt i="1" x="1">&lt;b1&gt;</bpt>the<ept i="1">&lt;/b1&gt;</ept> right function for debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091154Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogDebug<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;b1&gt;</bpt>まさに<ept i="1">&lt;/b1&gt;</ept> デバッグ出力に適切な関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogError()<ept i="0">&lt;/a0&gt;</ept> is the function to use for error messages, i.e. the messages that must be shown to the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131440Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogError<ept i="0">&lt;/a0&gt;</ept> はエラーメッセージ (ユーザに通知しなければならないメッセージ) 用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogFatalError()<ept i="0">&lt;/a0&gt;</ept> which is like <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogError()<ept i="1">&lt;/a1&gt;</ept>, but also terminates the program with the exit code 3 (using <bpt i="2" x="2">&lt;e2&gt;</bpt>abort()<ept i="2">&lt;/e2&gt;</ept> standard function).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131421Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogFatalError<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogError<ept i="1">&lt;/a1&gt;</ept> と似ていますが、(<bpt i="2" x="2">&lt;e2&gt;</bpt>abort()<ept i="2">&lt;/e2&gt;</ept> 標準関数を使用して) リターンコード 3 でプログラムを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogGui<ept i="0">&lt;/a0&gt;</ept>: This is the standard log target for wxWidgets applications (it is used by default if you don't do anything) and provides the most reasonable handling of all types of messages for given platform.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112827Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogGui<ept i="0">&lt;/a0&gt;</ept>: これは wxWidgets アプリケーションの標準ログターゲット (何もしない場合にデフォルトで使用されます) で、指定されたプラットフォームについて、メッセージのすべての型に対してもっとも合理的な処理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogMessage()<ept i="0">&lt;/a0&gt;</ept> is for all normal, informational messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131739Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogMessage<ept i="0">&lt;/a0&gt;</ept> はすべての通常 (通知) メッセージ用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogNull<ept i="0">&lt;/a0&gt;</ept>: The last log class is quite particular: it doesn't do anything.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113150Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogNull<ept i="0">&lt;/a0&gt;</ept>: 最後のログクラスは極めて特殊です: これは何も行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStatus()<ept i="0">&lt;/a0&gt;</ept> is for status messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T085809Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStatus()<ept i="0">&lt;/a0&gt;</ept> はステータスメッセージ用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStderr<ept i="0">&lt;/a0&gt;</ept>: This class logs messages to a <bpt i="1" x="1">&lt;c1&gt;</bpt>FILE *<ept i="1">&lt;/c1&gt;</ept>, using stderr by default as its name suggests.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112815Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStderr<ept i="0">&lt;/a0&gt;</ept>: このクラスはメッセージを <bpt i="1" x="1">&lt;c1&gt;</bpt>FILE *<ept i="1">&lt;/c1&gt;</ept> へ出力します。その名の通り、デフォルトでは stderr へ出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStream<ept i="0">&lt;/a0&gt;</ept>: This class has the same functionality as <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogStderr<ept i="1">&lt;/a1&gt;</ept>, but uses <bpt i="2" x="2">&lt;e2&gt;</bpt>ostream<ept i="2">&lt;/e2&gt;</ept> and cerr instead of <bpt i="3" x="3">&lt;c3&gt;</bpt>FILE *<ept i="3">&lt;/c3&gt;</ept> and stderr.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112822Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStream<ept i="0">&lt;/a0&gt;</ept>: このクラスは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogStderr<ept i="1">&lt;/a1&gt;</ept> と同じ機能を持ちますが、<bpt i="3" x="3">&lt;c3&gt;</bpt>FILE *<ept i="3">&lt;/c3&gt;</ept> と stderr の代わりに <bpt i="2" x="2">&lt;e2&gt;</bpt>ostream<ept i="2">&lt;/e2&gt;</ept> と cerr を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogSysError()<ept i="0">&lt;/a0&gt;</ept> is mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T090926Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogSysError<ept i="0">&lt;/a0&gt;</ept> は主に wxWidgets 自身で使用されますが、システムコール (API 関数) の失敗後のエラーログを記録するのに便利かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace()<ept i="0">&lt;/a0&gt;</ept> as <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogDebug()<ept i="1">&lt;/a1&gt;</ept> only does something in debug build.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091414Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept> も <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogDebug<ept i="1">&lt;/a1&gt;</ept> と同じようにデバッグビルド時のみ動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept>( wxTRACE_OleCalls, <bpt i="1" x="1">&lt;s1&gt;</bpt>"IFoo::Bar() called"<ept i="1">&lt;/s1&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132930Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept>( wxTRACE_OleCalls, <bpt i="1" x="1">&lt;s1&gt;</bpt>"IFoo::Bar() called"<ept i="1">&lt;/s1&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogVerbose()<ept i="0">&lt;/a0&gt;</ept> is for verbose output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131800Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogVerbose<ept i="0">&lt;/a0&gt;</ept> は詳細な出力用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogWarning()<ept i="0">&lt;/a0&gt;</ept> for warnings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131627Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogWarning()<ept i="0">&lt;/a0&gt;</ept> は警告メッセージ用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogWindow<ept i="0">&lt;/a0&gt;</ept>: This log target provides a "log console" which collects all messages generated by the application and also passes them to the previous active log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112841Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogWindow<ept i="0">&lt;/a0&gt;</ept>: このログターゲットはアプリケーションの生成するすべてのメッセージを収集する "ログコンソール" を提供するとともに、前に有効だったログターゲットに収集したメッセージを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T150904Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::FromUTF8<ept i="1">&lt;/a1&gt;</ept>(<bpt i="2" x="2">&lt;s2&gt;</bpt>"Salut \xC3\xA0 toi!"<ept i="2">&lt;/s2&gt;</ept>));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082537Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::FromUTF8<ept i="1">&lt;/a1&gt;</ept>(<bpt i="2" x="2">&lt;s2&gt;</bpt>"Salut \xC3\xA0 toi!"<ept i="2">&lt;/s2&gt;</ept>));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Hello, world!"<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041452Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Hello, world!"<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Salut à toi!"<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T042102Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Salut à toi!"<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(L<bpt i="1" x="1">&lt;s1&gt;</bpt>"Salut \u00E0 toi!"<ept i="1">&lt;/s1&gt;</ept>); <bpt i="2" x="2">&lt;s2&gt;</bpt>// U+00E0 is "Latin Small Letter a with Grave"<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041853Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(L<bpt i="1" x="1">&lt;s1&gt;</bpt>"Salut \u00E0 toi!"<ept i="1">&lt;/s1&gt;</ept>); <bpt i="2" x="2">&lt;s2&gt;</bpt>// U+00E0 は "グレイヴ付きのラテン小文字の a" です<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::AddPage<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155707Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::AddPage<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::AdvanceSelection<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155945Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::AdvanceSelection<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::DeletePage<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160016Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::DeletePage<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::SetSelection<ept i="0">&lt;/a0&gt;</ept>: Use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxNotebook::ChangeSelection<ept i="1">&lt;/a1&gt;</ept> instead, as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxNotebook::SetSelection<ept i="2">&lt;/a2&gt;</ept> is deprecated</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160216Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::SetSelection<ept i="0">&lt;/a0&gt;</ept>: <bpt i="2" x="2">&lt;a2&gt;</bpt>wxNotebook::SetSelection<ept i="2">&lt;/a2&gt;</ept> は非推奨のため、代わりに <bpt i="1" x="1">&lt;a1&gt;</bpt>wxNotebook::ChangeSelection<ept i="1">&lt;/a1&gt;</ept> を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxProtocol<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxURL<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFTP<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxHTTP<ept i="3">&lt;/a3&gt;</ept> - Classes for programming popular Internet protocols.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T124457Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxProtocol<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxURL<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxFTP<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxHTTP<ept i="3">&lt;/a3&gt;</ept> - よく知られているインターネットプロトコルのプログラミング用クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxProtocol<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxURL<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFTP<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxHTTP<ept i="3">&lt;/a3&gt;</ept>: classes for programming popular Internet protocols.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T153418Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxProtocol<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxURL<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxFTP<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxHTTP<ept i="3">&lt;/a3&gt;</ept>: よく知られているインターネットプロトコルのプログラミング用クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxServer<ept i="0">&lt;/a0&gt;</ept> - This represents the server application, and is used only within a server program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T145446Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxServer<ept i="0">&lt;/a0&gt;</ept> - これはサーバアプリケーションを表しており、サーバプログラムの中でだけ使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer::Fit()<ept i="0">&lt;/a0&gt;</ept>: this sets the size of the window to be large enough to accommodate the minimum size needed by the sizer, (along with a few other constraints...).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T155600Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer::Fit()<ept i="0">&lt;/a0&gt;</ept>: これは (他のいくつかの制約とあわせて) サイザーの要求する最小サイズを充分満たすようにウィンドウサイズを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer::Layout()<ept i="0">&lt;/a0&gt;</ept>: recalculates the minimum space needed by each item in the sizer, and then lays out the items within the space currently allotted to the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T155831Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer::Layout()<ept i="0">&lt;/a0&gt;</ept>: サイザー内の各要素が必要とする最小サイズを再計算し、現在サイザーに割り当てられているスペース内に各要素を配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>Sizer overview<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145922Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>Sizer の概要<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145841Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSocketEvent<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSocketBase<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSocketClient<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxSocketServer<ept i="3">&lt;/a3&gt;</ept> - Classes for the low-level TCP/IP API.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151844Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSocketEvent<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSocketBase<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxSocketClient<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxSocketServer<ept i="3">&lt;/a3&gt;</ept> - 低レベルのTCP/IP API 用クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSocketEvent<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSocketBase<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSocketClient<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxSocketServer<ept i="3">&lt;/a3&gt;</ept>: classes for the low-level TCP/IP API.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T153219Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSocketEvent<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSocketBase<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxSocketClient<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxSocketServer<ept i="3">&lt;/a3&gt;</ept>: 低レベルのTCP/IP API 用クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSixer<ept i="0">&lt;/a0&gt;</ept> is the same as a wxBoxSizer, but surrounded by a static box.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152747Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSixer<ept i="0">&lt;/a0&gt;</ept> は wxBoxSizer と同じですが、スタティックボックスで周りを囲まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSizer<ept i="0">&lt;/a0&gt;</ept> is a sizer derived from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBoxSizer<ept i="1">&lt;/a1&gt;</ept> but adds a static box around the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145729Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSizer<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBoxSizer<ept i="1">&lt;/a1&gt;</ept> を継承したサイザーですが、サイザーの周囲にスタティックボックスを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSizer<ept i="0">&lt;/a0&gt;</ept> is a sizer derived from wxBoxSizer but adds a static box around the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115224Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSizer<ept i="0">&lt;/a0&gt;</ept> は wxBoxSizer を継承したサイザーですが、サイザーの周囲にスタティックボックスを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStreamBase<ept i="0">&lt;/a0&gt;</ept> is the base definition of a stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T140006Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStreamBase<ept i="0">&lt;/a0&gt;</ept> はストリームの基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStreamBuffer<ept i="0">&lt;/a0&gt;</ept> is a cache manager for <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStreamBase<ept i="1">&lt;/a1&gt;</ept>: it manages a stream buffer linked to a stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T140208Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStreamBuffer<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStreamBase<ept i="1">&lt;/a1&gt;</ept> 用のキャッシュマネージャです: このクラスはストリームに関連付けられたストリームバッファを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::mb_str()<ept i="0">&lt;/a0&gt;</ept> converts the string to the encoding used by the current locale and so can return an empty string if the string contains characters not representable in it as explained in <bpt i="1" x="1">&lt;a1&gt;</bpt>Data Loss due To Unicode Conversion Errors<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161442Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::mb_str()<ept i="0">&lt;/a0&gt;</ept> は文字列を現在のロケールで使用されているエンコーディングに変換します。そのため、<bpt i="1" x="1">&lt;a1&gt;</bpt>Unicode の変換エラーによるデータ喪失<ept i="1">&lt;/a1&gt;</ept> で述べたように、変換先のエンコーディングで表現できない文字が含まれている場合に空文字列を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxToString<ept i="1">&lt;/a1&gt;</ept>(Colour col)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153108Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxToString<ept i="1">&lt;/a1&gt;</ept>(Colour col)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> API provides implicit conversion of the internal Unicode string contents to narrow, char strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T134230Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> API は内部の Unicode 文字列からナロー (char) 文字列への暗黙的な変換を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T025849Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> also provides two convenience functions: <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::From8BitData()<ept i="1">&lt;/a1&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::To8BitData()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T162920Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> はさらに 2 つの便利な関数を提供しています: <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::From8BitData()<ept i="1">&lt;/a1&gt;</ept> と <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::To8BitData()<ept i="2">&lt;/a2&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> can be used to store binary data (even if it contains <bpt i="1" x="1">&lt;c1&gt;</bpt>NULs<ept i="1">&lt;/c1&gt;</ept>) using the functions <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::To8BitData<ept i="2">&lt;/a2&gt;</ept> and <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::From8BitData<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T153726Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::To8BitData<ept i="2">&lt;/a2&gt;</ept> 関数と <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::From8BitData<ept i="3">&lt;/a3&gt;</ept> 関数を使用して、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> にバイナリデータ (<bpt i="1" x="1">&lt;c1&gt;</bpt>NUL<ept i="1">&lt;/c1&gt;</ept> を含むこともできます) を格納することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> input_str(input_data);
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> str(input_str.wc_str(wxConvUTF8), *wxConvCurrent);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152058Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> input_str(input_data);
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> str(input_str.wc_str(wxConvUTF8), *wxConvCurrent);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> is a class which represents a Unicode string of arbitrary length and containing arbitrary Unicode characters.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030216Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> は任意の長さで、任意の Unicode 文字を含む Unicode 文字列を表すクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s = <bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>;
wxString::const_iterator i;
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> (i = s.<bpt i="3" x="3">&lt;a3&gt;</bpt>begin<ept i="3">&lt;/a3&gt;</ept>(); i != s.<bpt i="4" x="4">&lt;a4&gt;</bpt>end<ept i="4">&lt;/a4&gt;</ept>(); ++i)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120259Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s = <bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>;
wxString::const_iterator i;
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> (i = s.<bpt i="3" x="3">&lt;a3&gt;</bpt>begin<ept i="3">&lt;/a3&gt;</ept>(); i != s.<bpt i="4" x="4">&lt;a4&gt;</bpt>end<ept i="4">&lt;/a4&gt;</ept>(); ++i)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;s3&gt;</bpt>const<ept i="3">&lt;/s3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>wchar_t<ept i="4">&lt;/s4&gt;</ept> *p = s.<bpt i="5" x="5">&lt;a5&gt;</bpt>wc_str<ept i="5">&lt;/a5&gt;</ept>(); *p; p++ )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T153022Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;s3&gt;</bpt>const<ept i="3">&lt;/s3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>wchar_t<ept i="4">&lt;/s4&gt;</ept> *p = s.<bpt i="5" x="5">&lt;a5&gt;</bpt>wc_str<ept i="5">&lt;/a5&gt;</ept>(); *p; p++ )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;s3&gt;</bpt>size_t<ept i="3">&lt;/s3&gt;</ept> i = 0; i &lt; s.<bpt i="4" x="4">&lt;a4&gt;</bpt>length<ept i="4">&lt;/a4&gt;</ept>(); i++ )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151500Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;s3&gt;</bpt>size_t<ept i="3">&lt;/s3&gt;</ept> i = 0; i &lt; s.<bpt i="4" x="4">&lt;a4&gt;</bpt>length<ept i="4">&lt;/a4&gt;</ept>(); i++ )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( wxString::const_iterator i = s.<bpt i="3" x="3">&lt;a3&gt;</bpt>begin<ept i="3">&lt;/a3&gt;</ept>(); i != s.<bpt i="4" x="4">&lt;a4&gt;</bpt>end<ept i="4">&lt;/a4&gt;</ept>(); ++i )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151615Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( wxString::const_iterator i = s.<bpt i="3" x="3">&lt;a3&gt;</bpt>begin<ept i="3">&lt;/a3&gt;</ept>(); i != s.<bpt i="4" x="4">&lt;a4&gt;</bpt>end<ept i="4">&lt;/a4&gt;</ept>(); ++i )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> server = <bpt i="1" x="1">&lt;s1&gt;</bpt>"4242"<ept i="1">&lt;/s1&gt;</ept>;
<bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> hostName;
<bpt i="3" x="3">&lt;a3&gt;</bpt>wxGetHostName<ept i="3">&lt;/a3&gt;</ept>(hostName);

<bpt i="4" x="4">&lt;s4&gt;</bpt>// Create a new client<ept i="4">&lt;/s4&gt;</ept>
MyClient *client = <bpt i="5" x="5">&lt;s5&gt;</bpt>new<ept i="5">&lt;/s5&gt;</ept> MyClient;
connection = (MyConnection *)client-&gt;MakeConnection(hostName, server, <bpt i="6" x="6">&lt;s6&gt;</bpt>"IPC TEST"<ept i="6">&lt;/s6&gt;</ept>);

<bpt i="7" x="7">&lt;s7&gt;</bpt>if<ept i="7">&lt;/s7&gt;</ept> (!connection)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130820T152805Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> server = <bpt i="1" x="1">&lt;s1&gt;</bpt>"4242"<ept i="1">&lt;/s1&gt;</ept>;
<bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> hostName;
<bpt i="3" x="3">&lt;a3&gt;</bpt>wxGetHostName<ept i="3">&lt;/a3&gt;</ept>(hostName);

<bpt i="4" x="4">&lt;s4&gt;</bpt>// 新しいクライアントを作成する<ept i="4">&lt;/s4&gt;</ept>
MyClient *client = <bpt i="5" x="5">&lt;s5&gt;</bpt>new<ept i="5">&lt;/s5&gt;</ept> MyClient;
connection = (MyConnection *)client-&gt;MakeConnection(hostName, server, <bpt i="6" x="6">&lt;s6&gt;</bpt>"IPC TEST"<ept i="6">&lt;/s6&gt;</ept>);

<bpt i="7" x="7">&lt;s7&gt;</bpt>if<ept i="7">&lt;/s7&gt;</ept> (!connection)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> str(input_data, *wxConvCurrent);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151855Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> str(input_data, *wxConvCurrent);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> str(input_data, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept>(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxT<ept i="2">&lt;/a2&gt;</ept>(<bpt i="3" x="3">&lt;s3&gt;</bpt>"koi8-r"<ept i="3">&lt;/s3&gt;</ept>)));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151912Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> str(input_data, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept>(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxT<ept i="2">&lt;/a2&gt;</ept>(<bpt i="3" x="3">&lt;s3&gt;</bpt>"koi8-r"<ept i="3">&lt;/s3&gt;</ept>)));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> str(input_data, wxConvUTF8);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151900Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> str(input_data, wxConvUTF8);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> str(wxConvUTF8.cMB2WC(input_data), *wxConvCurrent);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152022Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> str(wxConvUTF8.cMB2WC(input_data), *wxConvCurrent);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTempFile<ept i="0">&lt;/a0&gt;</ept> is a very small file designed to make replacing the files contents safer - see its documentation for more details.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072734Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTempFile<ept i="0">&lt;/a0&gt;</ept> はより安全にファイルの置換を行うためのとても小さなファイルです。詳細はドキュメントを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl::ChangeValue<ept i="0">&lt;/a0&gt;</ept> can be used instead of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl::SetValue<ept i="1">&lt;/a1&gt;</ept> but the other functions, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>Replace<ept i="2">&lt;/a2&gt;</ept> or <bpt i="3" x="3">&lt;a3&gt;</bpt>WriteText<ept i="3">&lt;/a3&gt;</ept> don't have event-free equivalents</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041031Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl::SetValue<ept i="1">&lt;/a1&gt;</ept> の代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl::ChangeValue<ept i="0">&lt;/a0&gt;</ept> を使用できますが、<bpt i="2" x="2">&lt;a2&gt;</bpt>Replace<ept i="2">&lt;/a2&gt;</ept> や <bpt i="3" x="3">&lt;a3&gt;</bpt>WriteText<ept i="3">&lt;/a3&gt;</ept> といった他の関数にはイベントを送信せずに同じことを行う関数はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl::ChangeValue<ept i="0">&lt;/a0&gt;</ept> can be used instead of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl::SetValue<ept i="1">&lt;/a1&gt;</ept> but the other functions, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTextCtrl::Replace<ept i="2">&lt;/a2&gt;</ept> or <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextCtrl::WriteText<ept i="3">&lt;/a3&gt;</ept> don't have event-free equivalents.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160802Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl::SetValue<ept i="1">&lt;/a1&gt;</ept> の代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl::ChangeValue<ept i="0">&lt;/a0&gt;</ept> を使用できますが、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxTextCtrl::Replace<ept i="2">&lt;/a2&gt;</ept> や <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextCtrl::WriteText<ept i="3">&lt;/a3&gt;</ept> といった他の関数にはイベントを送信せずに同じことを行う関数はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept> *txt1 = <bpt i="1" x="1">&lt;s1&gt;</bpt>new<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTextCtrl<ept i="2">&lt;/a2&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150536Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept> *txt1 = <bpt i="1" x="1">&lt;s1&gt;</bpt>new<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTextCtrl<ept i="2">&lt;/a2&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextDataObject<ept i="0">&lt;/a0&gt;</ept> my_data(<bpt i="1" x="1">&lt;s1&gt;</bpt>"This text will be dragged."<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134620Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextDataObject<ept i="0">&lt;/a0&gt;</ept> my_data(<bpt i="1" x="1">&lt;s1&gt;</bpt>"This text will be dragged."<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextFile<ept i="0">&lt;/a0&gt;</ept> is a general purpose class for working with small text files on line by line basis.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072746Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextFile<ept i="0">&lt;/a0&gt;</ept> は小さなテキストファイルを行単位で扱うための汎用的なクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::Delete<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160247Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::Delete<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::DeleteAllItems<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160305Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::DeleteAllItems<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::EditLabel<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160330Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::EditLabel<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator<ept i="0">&lt;/a0&gt;</ept> Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150026Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator<ept i="0">&lt;/a0&gt;</ept> の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Fit()<ept i="0">&lt;/a0&gt;</ept>: this method sets the size of a window to fit around its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T154758Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Fit()<ept i="0">&lt;/a0&gt;</ept>: この関数は子コントロールにフィットするようにウィンドウのサイズを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Freeze<ept i="0">&lt;/a0&gt;</ept>/Thaw() are not virtual any more, if you overrode them in your code you need to override DoFreeze/Thaw() instead now.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152121Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Freeze<ept i="0">&lt;/a0&gt;</ept>/Thaw() はもはや仮想関数ではなくなりました。コードの中でそれらをオーバーライドしている場合、代わりに DoFreeze/Thaw() をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::GetEffectiveMinSize()<ept i="0">&lt;/a0&gt;</ept>: returns a blending of the widget's minimal size and best size, giving precedence to the minimal size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T154325Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::GetEffectiveMinSize()<ept i="0">&lt;/a0&gt;</ept>: ウィジェットの最小サイズと最適サイズを混ぜあわせたものを返却します。このサイズは最小サイズよりも優先されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::IsEnabled()<ept i="0">&lt;/a0&gt;</ept> now returns false if a window parent (and not necessarily the window itself) is disabled, new function IsThisEnabled() with the same behaviour as old IsEnabled() was added.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T144713Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::IsEnabled()<ept i="0">&lt;/a0&gt;</ept> はウィンドウの親 (ウィンドウ自身である必要はありません) が無効化されている場合に false を返却するようになりました。そのため、以前の IsEnabled() と同じ振る舞いをする新しい関数 IsThisEnabled() が追加されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Layout()<ept i="0">&lt;/a0&gt;</ept>: if the window has a sizer then it sets the space given to the sizer to the current size of the window, which results in a call to <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizer::Layout()<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T160130Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Layout()<ept i="0">&lt;/a0&gt;</ept>: ウィンドウがサイザーを持つ場合に、現在のウィンドウサイズにあわせてサイザーが利用可能なスペースを設定します。これにより <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizer::Layout()<ept i="1">&lt;/a1&gt;</ept> が呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetInitialSize()<ept i="0">&lt;/a0&gt;</ept>: this is a little different than the typical size setters.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T154549Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetInitialSize()<ept i="0">&lt;/a0&gt;</ept>: これは通常のサイズ設定関数とは少しだけ異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWizard<ept i="0">&lt;/a0&gt;</ept> uses its own CanDoLayoutAdaptation and DoLayoutAdaptation functions rather than the global adapter: again, only the wizard pages are made scrollable.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T154424Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWizard<ept i="0">&lt;/a0&gt;</ept> はグローバルなアダプタではなく、独自の CanDoLayoutAdaptation と DoLayoutAdaptation 関数を使用します。繰り返しになりますが、ウィザードページのみがスクロール可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxYES_NO<ept i="0">&lt;/a0&gt;</ept>     <bpt i="1" x="1">&lt;s1&gt;</bpt>// Add Yes/No subpanel<ept i="1">&lt;/s1&gt;</ept>
<bpt i="2" x="2">&lt;a2&gt;</bpt>wxYES<ept i="2">&lt;/a2&gt;</ept>        <bpt i="3" x="3">&lt;s3&gt;</bpt>// return wxID_YES<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;a4&gt;</bpt>wxNO<ept i="4">&lt;/a4&gt;</ept>         <bpt i="5" x="5">&lt;s5&gt;</bpt>// return wxID_NO<ept i="5">&lt;/s5&gt;</ept>
<bpt i="6" x="6">&lt;a6&gt;</bpt>wxNO_DEFAULT<ept i="6">&lt;/a6&gt;</ept> <bpt i="7" x="7">&lt;s7&gt;</bpt>// make the wxNO button the default,<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T150103Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxYES_NO<ept i="0">&lt;/a0&gt;</ept>     <bpt i="1" x="1">&lt;s1&gt;</bpt>// Yes/No サブパネルを追加します<ept i="1">&lt;/s1&gt;</ept>
<bpt i="2" x="2">&lt;a2&gt;</bpt>wxYES<ept i="2">&lt;/a2&gt;</ept>        <bpt i="3" x="3">&lt;s3&gt;</bpt>// wxID_YES を返却します<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;a4&gt;</bpt>wxNO<ept i="4">&lt;/a4&gt;</ept>         <bpt i="5" x="5">&lt;s5&gt;</bpt>// wxID_NO を返却します<ept i="5">&lt;/s5&gt;</ept>
<bpt i="6" x="6">&lt;a6&gt;</bpt>wxNO_DEFAULT<ept i="6">&lt;/a6&gt;</ept> <bpt i="7" x="7">&lt;s7&gt;</bpt>// wxNO ボタンをデフォルトにします。<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>Conversion between Unicode and multibyte strings<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T151903Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>Unicode とマルチバイト文字列間の変換<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>Converting strings<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152326Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>文字列の変換<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>CreateButtonSizer<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115755Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>CreateButtonSizer<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>Event macros summary<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075037Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>イベントマクロの概要<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>SetReturnCode<ept i="10">&lt;/a10&gt;</ept>(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxID_OK<ept i="11">&lt;/a11&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153613Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>SetReturnCode<ept i="10">&lt;/a10&gt;</ept>(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxID_OK<ept i="11">&lt;/a11&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>Stream classes<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T133212Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>ストリームクラス<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>Transferring and validating data<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T142222Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>データの転送と検証<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>Tuning wxString for your application<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T043657Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>wxString のチューニング<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>wxDEFAULT_DIALOG_STYLE<ept i="10">&lt;/a10&gt;</ept> | <bpt i="11" x="11">&lt;a11&gt;</bpt>wxRESIZE_BORDER<ept i="11">&lt;/a11&gt;</ept>)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142908Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>wxDEFAULT_DIALOG_STYLE<ept i="10">&lt;/a10&gt;</ept> | <bpt i="11" x="11">&lt;a11&gt;</bpt>wxRESIZE_BORDER<ept i="11">&lt;/a11&gt;</ept>)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>wxLogGui<ept i="10">&lt;/a10&gt;</ept>,<it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003253Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>wxLogGui<ept i="10">&lt;/a10&gt;</ept>,<it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="11" x="11">&lt;a11&gt;</bpt>wxPoint<ept i="11">&lt;/a11&gt;</ept> GetPoint()<bpt i="12" x="12">&lt;s12&gt;</bpt> const <ept i="12">&lt;/s12&gt;</ept>{ <bpt i="13" x="13">&lt;s13&gt;</bpt>return<ept i="13">&lt;/s13&gt;</ept> m_pos; }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150440Z">
        <seg><bpt i="11" x="11">&lt;a11&gt;</bpt>wxPoint<ept i="11">&lt;/a11&gt;</ept> GetPoint()<bpt i="12" x="12">&lt;s12&gt;</bpt> const <ept i="12">&lt;/s12&gt;</ept>{ <bpt i="13" x="13">&lt;s13&gt;</bpt>return<ept i="13">&lt;/s13&gt;</ept> m_pos; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt><bpt i="13" x="13">&lt;b13&gt;</bpt>wxApp overview<ept i="13">&lt;/b13&gt;</ept><ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="14">&lt;br14&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152025Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt><bpt i="13" x="13">&lt;b13&gt;</bpt>wxApp の概要<ept i="13">&lt;/b13&gt;</ept><ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="14">&lt;br14&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>Converting buffers<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152332Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>バッファの変換<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>Custom event summary<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075046Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>カスタムイベントの概要<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>Internationalization<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T054118Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>国際化<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>Multi-threaded applications<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T141712Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>マルチスレッドアプリケーション<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxBoxSizer<ept i="12">&lt;/a12&gt;</ept> *topsizer = <bpt i="13" x="13">&lt;s13&gt;</bpt>new<ept i="13">&lt;/s13&gt;</ept> <bpt i="14" x="14">&lt;a14&gt;</bpt>wxBoxSizer<ept i="14">&lt;/a14&gt;</ept>( <bpt i="15" x="15">&lt;a15&gt;</bpt>wxVERTICAL<ept i="15">&lt;/a15&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142858Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxBoxSizer<ept i="12">&lt;/a12&gt;</ept> *topsizer = <bpt i="13" x="13">&lt;s13&gt;</bpt>new<ept i="13">&lt;/s13&gt;</ept> <bpt i="14" x="14">&lt;a14&gt;</bpt>wxBoxSizer<ept i="14">&lt;/a14&gt;</ept>( <bpt i="15" x="15">&lt;a15&gt;</bpt>wxVERTICAL<ept i="15">&lt;/a15&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxLog::SetComponentLevel<ept i="12">&lt;/a12&gt;</ept>(<bpt i="13" x="13">&lt;s13&gt;</bpt>"wx/base/module"<ept i="13">&lt;/s13&gt;</ept>, <bpt i="14" x="14">&lt;a14&gt;</bpt>wxLOG_Trace<ept i="14">&lt;/a14&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111102Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxLog::SetComponentLevel<ept i="12">&lt;/a12&gt;</ept>(<bpt i="13" x="13">&lt;s13&gt;</bpt>"wx/base/module"<ept i="13">&lt;/s13&gt;</ept>, <bpt i="14" x="14">&lt;a14&gt;</bpt>wxLOG_Trace<ept i="14">&lt;/a14&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxLogNull<ept i="12">&lt;/a12&gt;</ept>,<it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003253Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxLogNull<ept i="12">&lt;/a12&gt;</ept>,<it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="13" x="13">&lt;a13&gt;</bpt>wxString<ept i="13">&lt;/a13&gt;</ept> text = <bpt i="14" x="14">&lt;s14&gt;</bpt>event<ept i="14">&lt;/s14&gt;</ept>.GetString();
}

<bpt i="15" x="15">&lt;s15&gt;</bpt>// example of code handling the event with Bind&lt;&gt;():<ept i="15">&lt;/s15&gt;</ept>
MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150132Z">
        <seg><bpt i="13" x="13">&lt;a13&gt;</bpt>wxString<ept i="13">&lt;/a13&gt;</ept> text = <bpt i="14" x="14">&lt;s14&gt;</bpt>event<ept i="14">&lt;/s14&gt;</ept>.GetString();
}

<bpt i="15" x="15">&lt;s15&gt;</bpt>// Bind&lt;&gt;() によるイベント処理のコード例:<ept i="15">&lt;/s15&gt;</ept>
MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="144" x="144">&lt;a144&gt;</bpt><bpt i="145" x="145">&lt;b145&gt;</bpt>Multithreading overview<ept i="145">&lt;/b145&gt;</ept><ept i="144">&lt;/a144&gt;</ept><it pos="begin" x="146">&lt;br146&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T141747Z">
        <seg><bpt i="144" x="144">&lt;a144&gt;</bpt><bpt i="145" x="145">&lt;b145&gt;</bpt>マルチスレッドの概要<ept i="145">&lt;/b145&gt;</ept><ept i="144">&lt;/a144&gt;</ept><it pos="begin" x="146">&lt;br146&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="147" x="147">&lt;a147&gt;</bpt><bpt i="148" x="148">&lt;b148&gt;</bpt>Drag and drop overview<ept i="148">&lt;/b148&gt;</ept><ept i="147">&lt;/a147&gt;</ept><it pos="begin" x="149">&lt;br149&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T155053Z">
        <seg><bpt i="147" x="147">&lt;a147&gt;</bpt><bpt i="148" x="148">&lt;b148&gt;</bpt>ドラッグ・アンド・ドロップの概要<ept i="148">&lt;/b148&gt;</ept><ept i="147">&lt;/a147&gt;</ept><it pos="begin" x="149">&lt;br149&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>Drag and drop<ept i="14">&lt;/a14&gt;</ept><it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T155130Z">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>ドラッグ・アンド・ドロップ<ept i="14">&lt;/a14&gt;</ept><it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>Working with program options: wxConfig<ept i="14">&lt;/a14&gt;</ept><it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T145441Z">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>プログラムオプションの使用: wxConfig<ept i="14">&lt;/a14&gt;</ept><it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>Writing non-English applications<ept i="14">&lt;/a14&gt;</ept><it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T120100Z">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>非英語アプリケーションの作成<ept i="14">&lt;/a14&gt;</ept><it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>wxLogChain<ept i="14">&lt;/a14&gt;</ept>,<it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003254Z">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>wxLogChain<ept i="14">&lt;/a14&gt;</ept>,<it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="156" x="156">&lt;a156&gt;</bpt><bpt i="157" x="157">&lt;b157&gt;</bpt>Interprocess communication overview<ept i="157">&lt;/b157&gt;</ept><ept i="156">&lt;/a156&gt;</ept><it pos="begin" x="158">&lt;br158&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T152051Z">
        <seg><bpt i="156" x="156">&lt;a156&gt;</bpt><bpt i="157" x="157">&lt;b157&gt;</bpt>プロセス間通信の概要<ept i="157">&lt;/b157&gt;</ept><ept i="156">&lt;/a156&gt;</ept><it pos="begin" x="158">&lt;br158&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="168" x="168">&lt;a168&gt;</bpt><bpt i="169" x="169">&lt;b169&gt;</bpt>Environment variables<ept i="169">&lt;/b169&gt;</ept><ept i="168">&lt;/a168&gt;</ept><it pos="begin" x="170">&lt;br170&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T160335Z">
        <seg><bpt i="168" x="168">&lt;a168&gt;</bpt><bpt i="169" x="169">&lt;b169&gt;</bpt>環境変数<ept i="169">&lt;/b169&gt;</ept><ept i="168">&lt;/a168&gt;</ept><it pos="begin" x="170">&lt;br170&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;a16&gt;</bpt>wxLogPassThrough<ept i="16">&lt;/a16&gt;</ept>,<it pos="begin" x="17">&lt;br17&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003254Z">
        <seg><bpt i="16" x="16">&lt;a16&gt;</bpt>wxLogPassThrough<ept i="16">&lt;/a16&gt;</ept>,<it pos="begin" x="17">&lt;br17&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;a16&gt;</bpt>wxMessageBox<ept i="16">&lt;/a16&gt;</ept>(topic, data);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152916Z">
        <seg><bpt i="16" x="16">&lt;a16&gt;</bpt>wxMessageBox<ept i="16">&lt;/a16&gt;</ept>(topic, data);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;a16&gt;</bpt>wxString<ept i="16">&lt;/a16&gt;</ept> test2 = <bpt i="17" x="17">&lt;a17&gt;</bpt>wxString::FromUTF8<ept i="17">&lt;/a17&gt;</ept>(<bpt i="18" x="18">&lt;s18&gt;</bpt>"\x41\xC3\xA0\xE2\x82\xAC"<ept i="18">&lt;/s18&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034743Z">
        <seg><bpt i="16" x="16">&lt;a16&gt;</bpt>wxString<ept i="16">&lt;/a16&gt;</ept> test2 = <bpt i="17" x="17">&lt;a17&gt;</bpt>wxString::FromUTF8<ept i="17">&lt;/a17&gt;</ept>(<bpt i="18" x="18">&lt;s18&gt;</bpt>"\x41\xC3\xA0\xE2\x82\xAC"<ept i="18">&lt;/s18&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="18" x="18">&lt;a18&gt;</bpt>Logging overview<ept i="18">&lt;/a18&gt;</ept><it pos="begin" x="19">&lt;br19&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T124414Z">
        <seg><bpt i="18" x="18">&lt;a18&gt;</bpt>ロギングの概要<ept i="18">&lt;/a18&gt;</ept><it pos="begin" x="19">&lt;br19&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="18" x="18">&lt;a18&gt;</bpt>wxStreamToTextRedirector<ept i="18">&lt;/a18&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003254Z">
        <seg><bpt i="18" x="18">&lt;a18&gt;</bpt>wxStreamToTextRedirector<ept i="18">&lt;/a18&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="19" x="19">&lt;a19&gt;</bpt>wxCommandEvent<ept i="19">&lt;/a19&gt;</ept> event(MY_EVENT, GetId());</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150152Z">
        <seg><bpt i="19" x="19">&lt;a19&gt;</bpt>wxCommandEvent<ept i="19">&lt;/a19&gt;</ept> event(MY_EVENT, GetId());</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxInputStream<ept i="1">&lt;/a1&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxOutputStream<ept i="2">&lt;/a2&gt;</ept> classes inherit from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxStreamBase<ept i="3">&lt;/a3&gt;</ept> and provide specialized methods for input and output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T140146Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxInputStream<ept i="1">&lt;/a1&gt;</ept> クラスと <bpt i="2" x="2">&lt;a2&gt;</bpt>wxOutputStream<ept i="2">&lt;/a2&gt;</ept> クラスは <bpt i="3" x="3">&lt;a3&gt;</bpt>wxStreamBase<ept i="3">&lt;/a3&gt;</ept> を継承しており、入出力に関する専用の関数を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> does however guarantee that messages logged by each thread will appear in order in which they were logged.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120250Z">
        <seg>ただし、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> は各スレッドで記録されたメッセージは記録された順に表示されることを保証しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxOutputStream<ept i="1">&lt;/a1&gt;</ept> does the same thing for write-only streams.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T140315Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxOutputStream<ept i="1">&lt;/a1&gt;</ept> も同じことを行いますが、こちらは書き込み専用のストリーム用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> test = <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::FromUTF8<ept i="2">&lt;/a2&gt;</ept>(<bpt i="3" x="3">&lt;s3&gt;</bpt>"\xF0\x90\x8C\x80"<ept i="3">&lt;/s3&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034038Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> test = <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::FromUTF8<ept i="2">&lt;/a2&gt;</ept>(<bpt i="3" x="3">&lt;s3&gt;</bpt>"\xF0\x90\x8C\x80"<ept i="3">&lt;/s3&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="20" x="20">&lt;a20&gt;</bpt>Event handling overview<ept i="20">&lt;/a20&gt;</ept><it pos="begin" x="21">&lt;br21&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T072009Z">
        <seg><bpt i="20" x="20">&lt;a20&gt;</bpt>イベント処理の概要<ept i="20">&lt;/a20&gt;</ept><it pos="begin" x="21">&lt;br21&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="20" x="20">&lt;a20&gt;</bpt>wxDECLARE_EVENT_TABLE<ept i="20">&lt;/a20&gt;</ept>()
};</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024755Z">
        <seg><bpt i="20" x="20">&lt;a20&gt;</bpt>wxDECLARE_EVENT_TABLE<ept i="20">&lt;/a20&gt;</ept>()
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="22" x="22">&lt;a22&gt;</bpt>Interprocess communication<ept i="22">&lt;/a22&gt;</ept><it pos="begin" x="23">&lt;br23&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T152032Z">
        <seg><bpt i="22" x="22">&lt;a22&gt;</bpt>プロセス間通信<ept i="22">&lt;/a22&gt;</ept><it pos="begin" x="23">&lt;br23&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="22" x="22">&lt;a22&gt;</bpt>wxConnectionBase<ept i="22">&lt;/a22&gt;</ept>* <bpt i="23" x="23">&lt;a23&gt;</bpt>OnMakeConnection<ept i="23">&lt;/a23&gt;</ept>(<bpt i="24" x="24">&lt;s24&gt;</bpt>void<ept i="24">&lt;/s24&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152920Z">
        <seg><bpt i="22" x="22">&lt;a22&gt;</bpt>wxConnectionBase<ept i="22">&lt;/a22&gt;</ept>* <bpt i="23" x="23">&lt;a23&gt;</bpt>OnMakeConnection<ept i="23">&lt;/a23&gt;</ept>(<bpt i="24" x="24">&lt;s24&gt;</bpt>void<ept i="24">&lt;/s24&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="24" x="24">&lt;a24&gt;</bpt><bpt i="25" x="25">&lt;b25&gt;</bpt>wxString overview<ept i="25">&lt;/b25&gt;</ept><ept i="24">&lt;/a24&gt;</ept><it pos="begin" x="26">&lt;br26&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T043157Z">
        <seg><bpt i="24" x="24">&lt;a24&gt;</bpt><bpt i="25" x="25">&lt;b25&gt;</bpt>wxString の概要<ept i="25">&lt;/b25&gt;</ept><ept i="24">&lt;/a24&gt;</ept><it pos="begin" x="26">&lt;br26&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="24" x="24">&lt;a24&gt;</bpt>Window styles<ept i="24">&lt;/a24&gt;</ept><it pos="begin" x="25">&lt;br25&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153751Z">
        <seg><bpt i="24" x="24">&lt;a24&gt;</bpt>ウィンドウスタイル<ept i="24">&lt;/a24&gt;</ept><it pos="begin" x="25">&lt;br25&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>Window deletion overview<ept i="26">&lt;/a26&gt;</ept><it pos="begin" x="27">&lt;br27&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T033648Z">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>ウィンドウ削除の概要<ept i="26">&lt;/a26&gt;</ept><it pos="begin" x="27">&lt;br27&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>wxEXPAND<ept i="26">&lt;/a26&gt;</ept> |    <bpt i="27" x="27">&lt;s27&gt;</bpt>// make horizontally stretchable<ept i="27">&lt;/s27&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T152907Z">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>wxEXPAND<ept i="26">&lt;/a26&gt;</ept> |    <bpt i="27" x="27">&lt;s27&gt;</bpt>// 水平方向にリサイズ可能にし、<ept i="27">&lt;/s27&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>wxSizerFlags<ept i="26">&lt;/a26&gt;</ept>(1).Align().Expand().Border(<bpt i="27" x="27">&lt;a27&gt;</bpt>wxALL<ept i="27">&lt;/a27&gt;</ept>, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145457Z">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>wxSizerFlags<ept i="26">&lt;/a26&gt;</ept>(1).Align().Expand().Border(<bpt i="27" x="27">&lt;a27&gt;</bpt>wxALL<ept i="27">&lt;/a27&gt;</ept>, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>Environment variables<ept i="28">&lt;/a28&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T160418Z">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>環境変数<ept i="28">&lt;/a28&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>wxALL<ept i="28">&lt;/a28&gt;</ept>,        <bpt i="29" x="29">&lt;s29&gt;</bpt>//   and make border all around<ept i="29">&lt;/s29&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143803Z">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>wxALL<ept i="28">&lt;/a28&gt;</ept>,        <bpt i="29" x="29">&lt;s29&gt;</bpt>//   全方向にボーダーを持たせる<ept i="29">&lt;/s29&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>wxBoxSizer<ept i="28">&lt;/a28&gt;</ept> *button_sizer = <bpt i="29" x="29">&lt;s29&gt;</bpt>new<ept i="29">&lt;/s29&gt;</ept> <bpt i="30" x="30">&lt;a30&gt;</bpt>wxBoxSizer<ept i="30">&lt;/a30&gt;</ept>( <bpt i="31" x="31">&lt;a31&gt;</bpt>wxHORIZONTAL<ept i="31">&lt;/a31&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145459Z">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>wxBoxSizer<ept i="28">&lt;/a28&gt;</ept> *button_sizer = <bpt i="29" x="29">&lt;s29&gt;</bpt>new<ept i="29">&lt;/s29&gt;</ept> <bpt i="30" x="30">&lt;a30&gt;</bpt>wxBoxSizer<ept i="30">&lt;/a30&gt;</ept>( <bpt i="31" x="31">&lt;a31&gt;</bpt>wxHORIZONTAL<ept i="31">&lt;/a31&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Background: The wxString class<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152306Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>背景: wxString クラス<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Bitmap format handlers<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T141105Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>ビットマップ形式ハンドラ<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Bitmaps and icons<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T134107Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>ビットマップとアイコン<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Comparison of wxString to other string classes<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T043347Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxString と他の文字列クラスとの比較<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Examples<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032123Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>例<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>How events are processed<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074703Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>イベント処理の仕組み<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Programming with wxBoxSizer<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115650Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxBoxSizer を用いたプログラミング<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Unicode and ANSI modes<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155445Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Unicode モードと ANSI モード<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxBoxSizer::RecalcSizes<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145926Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxBoxSizer::RecalcSizes<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxClientDC<ept i="2">&lt;/a2&gt;</ept> dc(window);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154319Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxClientDC<ept i="2">&lt;/a2&gt;</ept> dc(window);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxDragResult<ept i="2">&lt;/a2&gt;</ept> result = dragSource.DoDragDrop( <bpt i="3" x="3">&lt;s3&gt;</bpt>true<ept i="3">&lt;/s3&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134858Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxDragResult<ept i="2">&lt;/a2&gt;</ept> result = dragSource.DoDragDrop( <bpt i="3" x="3">&lt;s3&gt;</bpt>true<ept i="3">&lt;/s3&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxFontEncoding<ept i="2">&lt;/a2&gt;</ept> alternative;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143521Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxFontEncoding<ept i="2">&lt;/a2&gt;</ept> alternative;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::SetComponentLevel<ept i="2">&lt;/a2&gt;</ept>(<bpt i="3" x="3">&lt;s3&gt;</bpt>"MyProgram/DB"<ept i="3">&lt;/s3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLOG_FatalError<ept i="4">&lt;/a4&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110710Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::SetComponentLevel<ept i="2">&lt;/a2&gt;</ept>(<bpt i="3" x="3">&lt;s3&gt;</bpt>"MyProgram/DB"<ept i="3">&lt;/s3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLOG_FatalError<ept i="4">&lt;/a4&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogNull<ept i="2">&lt;/a2&gt;</ept> logNo;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113228Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogNull<ept i="2">&lt;/a2&gt;</ept> logNo;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStderr<ept i="2">&lt;/a2&gt;</ept>,<it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003251Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStderr<ept i="2">&lt;/a2&gt;</ept>,<it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxObject<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145842Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxObject<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxSize<ept i="2">&lt;/a2&gt;</ept> size = <bpt i="3" x="3">&lt;s3&gt;</bpt>event<ept i="3">&lt;/s3&gt;</ept>.GetSize();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034455Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxSize<ept i="2">&lt;/a2&gt;</ept> size = <bpt i="3" x="3">&lt;s3&gt;</bpt>event<ept i="3">&lt;/s3&gt;</ept>.GetSize();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="31" x="31">&lt;a31&gt;</bpt>wxBoxSizer<ept i="31">&lt;/a31&gt;</ept> *button_sizer = <bpt i="32" x="32">&lt;s32&gt;</bpt>new<ept i="32">&lt;/s32&gt;</ept> <bpt i="33" x="33">&lt;a33&gt;</bpt>wxBoxSizer<ept i="33">&lt;/a33&gt;</ept>( <bpt i="34" x="34">&lt;a34&gt;</bpt>wxHORIZONTAL<ept i="34">&lt;/a34&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143816Z">
        <seg><bpt i="31" x="31">&lt;a31&gt;</bpt>wxBoxSizer<ept i="31">&lt;/a31&gt;</ept> *button_sizer = <bpt i="32" x="32">&lt;s32&gt;</bpt>new<ept i="32">&lt;/s32&gt;</ept> <bpt i="33" x="33">&lt;a33&gt;</bpt>wxBoxSizer<ept i="33">&lt;/a33&gt;</ept>( <bpt i="34" x="34">&lt;a34&gt;</bpt>wxHORIZONTAL<ept i="34">&lt;/a34&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="33" x="33">&lt;a33&gt;</bpt><bpt i="34" x="34">&lt;b34&gt;</bpt>Unicode support in wxWidgets<ept i="34">&lt;/b34&gt;</ept><ept i="33">&lt;/a33&gt;</ept><it pos="begin" x="35">&lt;br35&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132107Z">
        <seg><bpt i="33" x="33">&lt;a33&gt;</bpt><bpt i="34" x="34">&lt;b34&gt;</bpt>wxWidgets における Unicode 対応<ept i="34">&lt;/b34&gt;</ept><ept i="33">&lt;/a33&gt;</ept><it pos="begin" x="35">&lt;br35&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="36" x="36">&lt;a36&gt;</bpt><bpt i="37" x="37">&lt;b37&gt;</bpt>wxMBConv classes overview<ept i="37">&lt;/b37&gt;</ept><ept i="36">&lt;/a36&gt;</ept><it pos="begin" x="38">&lt;br38&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T151915Z">
        <seg><bpt i="36" x="36">&lt;a36&gt;</bpt><bpt i="37" x="37">&lt;b37&gt;</bpt>wxMBConv クラスの概要<ept i="37">&lt;/b37&gt;</ept><ept i="36">&lt;/a36&gt;</ept><it pos="begin" x="38">&lt;br38&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="39" x="39">&lt;a39&gt;</bpt><bpt i="40" x="40">&lt;b40&gt;</bpt>Internationalization<ept i="40">&lt;/b40&gt;</ept><ept i="39">&lt;/a39&gt;</ept><it pos="begin" x="41">&lt;br41&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132119Z">
        <seg><bpt i="39" x="39">&lt;a39&gt;</bpt><bpt i="40" x="40">&lt;b40&gt;</bpt>国際化<ept i="40">&lt;/b40&gt;</ept><ept i="39">&lt;/a39&gt;</ept><it pos="begin" x="41">&lt;br41&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;a3&gt;</bpt>wxLog::SetActiveTarget<ept i="3">&lt;/a3&gt;</ept>(logger);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091559Z">
        <seg><bpt i="3" x="3">&lt;a3&gt;</bpt>wxLog::SetActiveTarget<ept i="3">&lt;/a3&gt;</ept>(logger);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="40" x="40">&lt;a40&gt;</bpt>wxSizerFlags<ept i="40">&lt;/a40&gt;</ept>(0).Align().Border(<bpt i="41" x="41">&lt;a41&gt;</bpt>wxALL<ept i="41">&lt;/a41&gt;</ept>, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145530Z">
        <seg><bpt i="40" x="40">&lt;a40&gt;</bpt>wxSizerFlags<ept i="40">&lt;/a40&gt;</ept>(0).Align().Border(<bpt i="41" x="41">&lt;a41&gt;</bpt>wxALL<ept i="41">&lt;/a41&gt;</ept>, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="42" x="42">&lt;a42&gt;</bpt><bpt i="43" x="43">&lt;b43&gt;</bpt>Writing non-English applications<ept i="43">&lt;/b43&gt;</ept><ept i="42">&lt;/a42&gt;</ept><it pos="begin" x="44">&lt;br44&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T120447Z">
        <seg><bpt i="42" x="42">&lt;a42&gt;</bpt><bpt i="43" x="43">&lt;b43&gt;</bpt>非英語アプリケーションの作成<ept i="43">&lt;/b43&gt;</ept><ept i="42">&lt;/a42&gt;</ept><it pos="begin" x="44">&lt;br44&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="42" x="42">&lt;a42&gt;</bpt>wxALL<ept i="42">&lt;/a42&gt;</ept>,       <bpt i="43" x="43">&lt;s43&gt;</bpt>// make border all around (implicit top alignment)<ept i="43">&lt;/s43&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143841Z">
        <seg><bpt i="42" x="42">&lt;a42&gt;</bpt>wxALL<ept i="42">&lt;/a42&gt;</ept>,       <bpt i="43" x="43">&lt;s43&gt;</bpt>// 全方向にボーダーを持たせる (暗黙的に上寄せになる)<ept i="43">&lt;/s43&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="48" x="48">&lt;a48&gt;</bpt><bpt i="49" x="49">&lt;b49&gt;</bpt>File classes and functions overview<ept i="49">&lt;/b49&gt;</ept><ept i="48">&lt;/a48&gt;</ept><it pos="begin" x="50">&lt;br50&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132149Z">
        <seg><bpt i="48" x="48">&lt;a48&gt;</bpt><bpt i="49" x="49">&lt;b49&gt;</bpt>ファイルクラスと関数の概要<ept i="49">&lt;/b49&gt;</ept><ept i="48">&lt;/a48&gt;</ept><it pos="begin" x="50">&lt;br50&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="48" x="48">&lt;a48&gt;</bpt>wxSizerFlags<ept i="48">&lt;/a48&gt;</ept>(0).Align().Border(<bpt i="49" x="49">&lt;a49&gt;</bpt>wxALL<ept i="49">&lt;/a49&gt;</ept>, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145538Z">
        <seg><bpt i="48" x="48">&lt;a48&gt;</bpt>wxSizerFlags<ept i="48">&lt;/a48&gt;</ept>(0).Align().Border(<bpt i="49" x="49">&lt;a49&gt;</bpt>wxALL<ept i="49">&lt;/a49&gt;</ept>, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>Events generated by the user vs programmatically generated events<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074731Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>ユーザの生成したイベントとプログラム的に生成したイベント<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>More DDE details<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032143Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>DDE の詳細<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>Programming with wxGridSizer<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115658Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxGridSizer を用いたプログラミング<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>Some advice about using wxString<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T043402Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxStringを使用するにあたってのアドバイス<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>Unicode support in wxWidgets<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T165146Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxWidgets における Unicode 対応<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>Window sizing<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T154032Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>ウインドウのサイズ<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxBoxSizer::CalcMin<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145926Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxBoxSizer::CalcMin<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogStream<ept i="4">&lt;/a4&gt;</ept>,<it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003252Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogStream<ept i="4">&lt;/a4&gt;</ept>,<it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxMBConv classes<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152311Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxMBConv クラス<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> vowels( <bpt i="5" x="5">&lt;s5&gt;</bpt>"aeuioAEIOU"<ept i="5">&lt;/s5&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121146Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> vowels( <bpt i="5" x="5">&lt;s5&gt;</bpt>"aeuioAEIOU"<ept i="5">&lt;/s5&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> will therefore inherit the performance characteristics from <bpt i="5" x="5">&lt;c5&gt;</bpt>std::string<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T155700Z">
        <seg>したがって、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> はその性能上の特徴を <bpt i="5" x="5">&lt;c5&gt;</bpt>std::string<ept i="5">&lt;/c5&gt;</ept> から引き継ぐことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="51" x="51">&lt;a51&gt;</bpt><bpt i="52" x="52">&lt;b52&gt;</bpt>wxStreams overview<ept i="52">&lt;/b52&gt;</ept><ept i="51">&lt;/a51&gt;</ept><it pos="begin" x="53">&lt;br53&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T133220Z">
        <seg><bpt i="51" x="51">&lt;a51&gt;</bpt><bpt i="52" x="52">&lt;b52&gt;</bpt>wxStreams の概要<ept i="52">&lt;/b52&gt;</ept><ept i="51">&lt;/a51&gt;</ept><it pos="begin" x="53">&lt;br53&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="52" x="52">&lt;a52&gt;</bpt>wxALL<ept i="52">&lt;/a52&gt;</ept>,       <bpt i="53" x="53">&lt;s53&gt;</bpt>// make border all around (implicit top alignment)<ept i="53">&lt;/s53&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144038Z">
        <seg><bpt i="52" x="52">&lt;a52&gt;</bpt>wxALL<ept i="52">&lt;/a52&gt;</ept>,       <bpt i="53" x="53">&lt;s53&gt;</bpt>// 全方向にボーダーを持たせる (暗黙的に上寄せになる)<ept i="53">&lt;/s53&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="52" x="52">&lt;a52&gt;</bpt>wxSizerFlags<ept i="52">&lt;/a52&gt;</ept>(0).Center() );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145555Z">
        <seg><bpt i="52" x="52">&lt;a52&gt;</bpt>wxSizerFlags<ept i="52">&lt;/a52&gt;</ept>(0).Center() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="54" x="54">&lt;a54&gt;</bpt><bpt i="55" x="55">&lt;b55&gt;</bpt>wxLog classes overview<ept i="55">&lt;/b55&gt;</ept><ept i="54">&lt;/a54&gt;</ept><it pos="begin" x="56">&lt;br56&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T124444Z">
        <seg><bpt i="54" x="54">&lt;a54&gt;</bpt><bpt i="55" x="55">&lt;b55&gt;</bpt>wxLog クラスの概要<ept i="55">&lt;/b55&gt;</ept><ept i="54">&lt;/a54&gt;</ept><it pos="begin" x="56">&lt;br56&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="57" x="57">&lt;a57&gt;</bpt>wxALIGN_CENTER<ept i="57">&lt;/a57&gt;</ept> ); <bpt i="58" x="58">&lt;s58&gt;</bpt>// no border and centre horizontally<ept i="58">&lt;/s58&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144109Z">
        <seg><bpt i="57" x="57">&lt;a57&gt;</bpt>wxALIGN_CENTER<ept i="57">&lt;/a57&gt;</ept> ); <bpt i="58" x="58">&lt;s58&gt;</bpt>// ボーダーなしで水平方向に中央寄せ<ept i="58">&lt;/s58&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;a5&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="5">&lt;/a5&gt;</ept> should be overridden if you simply want to redirect the log messages somewhere else, without changing their formatting.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112214Z">
        <seg>メッセージの形式を変更することなく、ログメッセージを単純に他の場所へリダイレクトしたいだけの場合、<bpt i="5" x="5">&lt;a5&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="5">&lt;/a5&gt;</ept> をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;a5&gt;</bpt>wxUniChar<ept i="5">&lt;/a5&gt;</ept> uni_ch = *i;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120301Z">
        <seg><bpt i="5" x="5">&lt;a5&gt;</bpt>wxUniChar<ept i="5">&lt;/a5&gt;</ept> uni_ch = *i;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="60" x="60">&lt;a60&gt;</bpt><bpt i="61" x="61">&lt;b61&gt;</bpt>wxConfig classes overview<ept i="61">&lt;/b61&gt;</ept><ept i="60">&lt;/a60&gt;</ept><it pos="begin" x="62">&lt;br62&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T145503Z">
        <seg><bpt i="60" x="60">&lt;a60&gt;</bpt><bpt i="61" x="61">&lt;b61&gt;</bpt>wxConfig クラスの概要<ept i="61">&lt;/b61&gt;</ept><ept i="60">&lt;/a60&gt;</ept><it pos="begin" x="62">&lt;br62&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="66" x="66">&lt;a66&gt;</bpt><bpt i="67" x="67">&lt;b67&gt;</bpt>Event handling overview<ept i="67">&lt;/b67&gt;</ept><ept i="66">&lt;/a66&gt;</ept><it pos="begin" x="68">&lt;br68&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132222Z">
        <seg><bpt i="66" x="66">&lt;a66&gt;</bpt><bpt i="67" x="67">&lt;b67&gt;</bpt>イベント処理の概要<ept i="67">&lt;/b67&gt;</ept><ept i="66">&lt;/a66&gt;</ept><it pos="begin" x="68">&lt;br68&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Application class: wxApp<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T151947Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>アプリケーションクラス: wxApp<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Other string related functions and classes<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T043431Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>文字列に関する他の関数やクラス<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Pluggable event handlers<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074926Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>動的イベントハンドラ<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Programming with wxFlexGridSizer<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115708Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxFlexGridSizer を用いたプログラミング<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Unicode and the outside world<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155523Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Unicode と外部の世界<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxBoxSizer::GetOrientation<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145927Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxBoxSizer::GetOrientation<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxCSConv<ept i="6">&lt;/a6&gt;</ept> convFrom(<bpt i="7" x="7">&lt;a7&gt;</bpt>wxFontMapper::Get<ept i="7">&lt;/a7&gt;</ept>()-&gt;GetEncodingName(enc));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143515Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxCSConv<ept i="6">&lt;/a6&gt;</ept> convFrom(<bpt i="7" x="7">&lt;a7&gt;</bpt>wxFontMapper::Get<ept i="7">&lt;/a7&gt;</ept>()-&gt;GetEncodingName(enc));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogTextCtrl<ept i="6">&lt;/a6&gt;</ept>,<it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003252Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogTextCtrl<ept i="6">&lt;/a6&gt;</ept>,<it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxMBConv objects<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152316Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxMBConv オブジェクト<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> output = input.<bpt i="7" x="7">&lt;a7&gt;</bpt>Upper<ept i="7">&lt;/a7&gt;</ept>();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113911Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> output = input.<bpt i="7" x="7">&lt;a7&gt;</bpt>Upper<ept i="7">&lt;/a7&gt;</ept>();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> result;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121148Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> result;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> s;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142517Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> s;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="72" x="72">&lt;a72&gt;</bpt><bpt i="73" x="73">&lt;b73&gt;</bpt>Window styles<ept i="73">&lt;/b73&gt;</ept><ept i="72">&lt;/a72&gt;</ept><it pos="begin" x="74">&lt;br74&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153801Z">
        <seg><bpt i="72" x="72">&lt;a72&gt;</bpt><bpt i="73" x="73">&lt;b73&gt;</bpt>ウィンドウスタイル<ept i="73">&lt;/b73&gt;</ept><ept i="72">&lt;/a72&gt;</ept><it pos="begin" x="74">&lt;br74&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="75" x="75">&lt;a75&gt;</bpt><bpt i="76" x="76">&lt;b76&gt;</bpt>Window deletion overview<ept i="76">&lt;/b76&gt;</ept><ept i="75">&lt;/a75&gt;</ept><it pos="begin" x="77">&lt;br77&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T033659Z">
        <seg><bpt i="75" x="75">&lt;a75&gt;</bpt><bpt i="76" x="76">&lt;b76&gt;</bpt>ウィンドウ削除の概要<ept i="76">&lt;/b76&gt;</ept><ept i="75">&lt;/a75&gt;</ept><it pos="begin" x="77">&lt;br77&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="78" x="78">&lt;a78&gt;</bpt><bpt i="79" x="79">&lt;b79&gt;</bpt>wxDialog overview<ept i="79">&lt;/b79&gt;</ept><ept i="78">&lt;/a78&gt;</ept><it pos="begin" x="80">&lt;br80&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T151413Z">
        <seg><bpt i="78" x="78">&lt;a78&gt;</bpt><bpt i="79" x="79">&lt;b79&gt;</bpt>wxDialog の概要<ept i="79">&lt;/b79&gt;</ept><ept i="78">&lt;/a78&gt;</ept><it pos="begin" x="80">&lt;br80&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>EndModal<ept i="7">&lt;/a7&gt;</ept>(<bpt i="8" x="8">&lt;a8&gt;</bpt>wxID_OK<ept i="8">&lt;/a8&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153610Z">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>EndModal<ept i="7">&lt;/a7&gt;</ept>(<bpt i="8" x="8">&lt;a8&gt;</bpt>wxID_OK<ept i="8">&lt;/a8&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>wxFrame<ept i="7">&lt;/a7&gt;</ept> *the_frame = <bpt i="8" x="8">&lt;s8&gt;</bpt>new<ept i="8">&lt;/s8&gt;</ept> <bpt i="9" x="9">&lt;a9&gt;</bpt>wxFrame<ept i="9">&lt;/a9&gt;</ept>(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152659Z">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>wxFrame<ept i="7">&lt;/a7&gt;</ept> *the_frame = <bpt i="8" x="8">&lt;s8&gt;</bpt>new<ept i="8">&lt;/s8&gt;</ept> <bpt i="9" x="9">&lt;a9&gt;</bpt>wxFrame<ept i="9">&lt;/a9&gt;</ept>(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>wxLog::SetComponentLevel<ept i="7">&lt;/a7&gt;</ept>(<bpt i="8" x="8">&lt;s8&gt;</bpt>"MyProgram/DB/Trans"<ept i="8">&lt;/s8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxLOG_Trace<ept i="9">&lt;/a9&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110923Z">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>wxLog::SetComponentLevel<ept i="7">&lt;/a7&gt;</ept>(<bpt i="8" x="8">&lt;s8&gt;</bpt>"MyProgram/DB/Trans"<ept i="8">&lt;/s8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxLOG_Trace<ept i="9">&lt;/a9&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="81" x="81">&lt;a81&gt;</bpt><bpt i="82" x="82">&lt;b82&gt;</bpt>wxValidator overview<ept i="82">&lt;/b82&gt;</ept><ept i="81">&lt;/a81&gt;</ept><it pos="begin" x="83">&lt;br83&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T142232Z">
        <seg><bpt i="81" x="81">&lt;a81&gt;</bpt><bpt i="82" x="82">&lt;b82&gt;</bpt>wxValidator の概要<ept i="82">&lt;/b82&gt;</ept><ept i="81">&lt;/a81&gt;</ept><it pos="begin" x="83">&lt;br83&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="87" x="87">&lt;a87&gt;</bpt><bpt i="88" x="88">&lt;b88&gt;</bpt>Sizer overview<ept i="88">&lt;/b88&gt;</ept><ept i="87">&lt;/a87&gt;</ept><it pos="begin" x="89">&lt;br89&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132236Z">
        <seg><bpt i="87" x="87">&lt;a87&gt;</bpt><bpt i="88" x="88">&lt;b88&gt;</bpt>サイザーの概要<ept i="88">&lt;/b88&gt;</ept><ept i="87">&lt;/a87&gt;</ept><it pos="begin" x="89">&lt;br89&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Dialogs<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T151401Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>ダイアログ<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>File classes and functions<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132259Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>ファイルクラスと関数<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Programming with wxStaticBoxSizer<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115715Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxStaticBoxSizer を用いたプログラミング<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Reference counting and why you shouldn't care about it<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T043644Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>参照カウンタと、それを意識しなくて良い理由<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Unicode support in wxWidgets<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092759Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxWidgets における Unicode 対応<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Unicode-related compilation settings<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155549Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Unicode 関連のコンパイル設定<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Window identifiers<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074938Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>ウィンドウ識別子<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxCSConv<ept i="8">&lt;/a8&gt;</ept> convTo(<bpt i="9" x="9">&lt;a9&gt;</bpt>wxFontMapper::Get<ept i="9">&lt;/a9&gt;</ept>()-&gt;GetEncodingName(alternative));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143513Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxCSConv<ept i="8">&lt;/a8&gt;</ept> convTo(<bpt i="9" x="9">&lt;a9&gt;</bpt>wxFontMapper::Get<ept i="9">&lt;/a9&gt;</ept>()-&gt;GetEncodingName(alternative));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxCSConv<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152317Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxCSConv<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogMessage<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;s9&gt;</bpt>"..."<ept i="9">&lt;/s9&gt;</ept>); <bpt i="10" x="10">&lt;s10&gt;</bpt>// ok<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114550Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogMessage<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;s9&gt;</bpt>"..."<ept i="9">&lt;/s9&gt;</ept>); <bpt i="10" x="10">&lt;s10&gt;</bpt>// ok<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogWindow<ept i="8">&lt;/a8&gt;</ept>,<it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003253Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogWindow<ept i="8">&lt;/a8&gt;</ept>,<it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxMessageBox<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;s9&gt;</bpt>"Failed to make connection to server"<ept i="9">&lt;/s9&gt;</ept>, <bpt i="10" x="10">&lt;s10&gt;</bpt>"Client Demo Error"<ept i="10">&lt;/s10&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T153045Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxMessageBox<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;s9&gt;</bpt>"Failed to make connection to server"<ept i="9">&lt;/s9&gt;</ept>, <bpt i="10" x="10">&lt;s10&gt;</bpt>"Client Demo Error"<ept i="10">&lt;/s10&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxTextValidator<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;a9&gt;</bpt>wxFILTER_ALPHA<ept i="9">&lt;/a9&gt;</ept>, &amp;g_data.m_string));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150543Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxTextValidator<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;a9&gt;</bpt>wxFILTER_ALPHA<ept i="9">&lt;/a9&gt;</ept>, &amp;g_data.m_string));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="96" x="96">&lt;a96&gt;</bpt><bpt i="97" x="97">&lt;b97&gt;</bpt>Bitmaps and icons overview<ept i="97">&lt;/b97&gt;</ept><ept i="96">&lt;/a96&gt;</ept><it pos="begin" x="98">&lt;br98&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T134134Z">
        <seg><bpt i="96" x="96">&lt;a96&gt;</bpt><bpt i="97" x="97">&lt;b97&gt;</bpt>ビットマップとアイコンの概要<ept i="97">&lt;/b97&gt;</ept><ept i="96">&lt;/a96&gt;</ept><it pos="begin" x="98">&lt;br98&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="99" x="99">&lt;a99&gt;</bpt><bpt i="100" x="100">&lt;b100&gt;</bpt>Device context overview<ept i="100">&lt;/b100&gt;</ept><ept i="99">&lt;/a99&gt;</ept><it pos="begin" x="101">&lt;br101&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T142001Z">
        <seg><bpt i="99" x="99">&lt;a99&gt;</bpt><bpt i="100" x="100">&lt;b100&gt;</bpt>デバイスコンテキストの概要<ept i="100">&lt;/b100&gt;</ept><ept i="99">&lt;/a99&gt;</ept><it pos="begin" x="101">&lt;br101&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"Best Client Size"<ept i="0">&lt;/b0&gt;</ept>: this is simply the client size corresponding to the best window size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T145347Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"最適クライアントサイズ"<ept i="0">&lt;/b0&gt;</ept>: これは単に最適ウィンドウサイズのクライアントサイズ版です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"Best Size"<ept i="0">&lt;/b0&gt;</ept>: the best size of a widget depends on what kind of widget it is, and usually also on the contents of the widget.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T144818Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"最適サイズ"<ept i="0">&lt;/b0&gt;</ept>: ウィジェットの最適サイズはウィジェットの種類と、通常はウィジェットの内容物に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"Client Size"<ept i="0">&lt;/b0&gt;</ept>: the client size represents the widget's area inside of any borders belonging to the widget and is the area that can be drawn upon in a <bpt i="1" x="1">&lt;c1&gt;</bpt>EVT_PAINT<ept i="1">&lt;/c1&gt;</ept> event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T144135Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"クライアントサイズ"<ept i="0">&lt;/b0&gt;</ept>: クライアントサイズはボーダーの内側の領域を表しており、この領域は <bpt i="1" x="1">&lt;c1&gt;</bpt>EVT_PAINT<ept i="1">&lt;/c1&gt;</ept> イベントで描画できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"Initial Size"<ept i="0">&lt;/b0&gt;</ept>: the initial size of a widget is the size given to the constructor of the widget, if any.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T152101Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"初期サイズ"<ept i="0">&lt;/b0&gt;</ept>: ウィジェットの初期サイズはウィジェットのコンストラクタで指定されたサイズのことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"Maximum Size"<ept i="0">&lt;/b0&gt;</ept>: just like for the minimal size, the maximum size is normally explicitly set by the programmer with the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetMaxSize()<ept i="1">&lt;/a1&gt;</ept> method or with <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSizeHints()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T150656Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"最大サイズ"<ept i="0">&lt;/b0&gt;</ept>: 最小サイズと同じように、最大サイズは通常、プログラマが <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetMaxSize()<ept i="1">&lt;/a1&gt;</ept> 関数か <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSizeHints()<ept i="2">&lt;/a2&gt;</ept> 関数のどちらかを使用して明示的に設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"Minimal Size"<ept i="0">&lt;/b0&gt;</ept>: the minimal size of a widget is a size that is normally explicitly set by the programmer either with the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetMinSize()<ept i="1">&lt;/a1&gt;</ept> method or with the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSizeHints()<ept i="2">&lt;/a2&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T151459Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"最小サイズ"<ept i="0">&lt;/b0&gt;</ept>: ウィジェットの最小サイズは通常、プログラマが <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetMinSize()<ept i="1">&lt;/a1&gt;</ept> 関数か <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSizeHints()<ept i="2">&lt;/a2&gt;</ept> 関数のどちらかを使用して明示的に設定するサイズです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"Size"<ept i="0">&lt;/b0&gt;</ept>: this is the current size of the window and it can be explicitly set or fetched with the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetSize()<ept i="1">&lt;/a1&gt;</ept> or <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::GetSize()<ept i="2">&lt;/a2&gt;</ept> methods.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T144044Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"サイズ"<ept i="0">&lt;/b0&gt;</ept>: これはウィンドウの現在のサイズで、<bpt i="1" x="1">&lt;a1&gt;</bpt>SetSize()<ept i="1">&lt;/a1&gt;</ept> 関数や <bpt i="2" x="2">&lt;a2&gt;</bpt>GetSize()<ept i="2">&lt;/a2&gt;</ept> 関数で明示的に設定・取得することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"Virtual Size"<ept i="0">&lt;/b0&gt;</ept>: the virtual size is the size of the potentially viewable area of the widget.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T153457Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>"仮想サイズ"<ept i="0">&lt;/b0&gt;</ept>: 仮想サイズはウィジェットで潜在的に表示可能な領域のサイズのことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxClientDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154030Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxClientDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxPaintDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154136Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxPaintDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxScreenDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T153911Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxScreenDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxSize<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> <it pos="end" x="2">&lt;/b2&gt;</it> <bpt i="3" x="3">&lt;b3&gt;</bpt>CalcMin<ept i="3">&lt;/b3&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150638Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxSize<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> <it pos="end" x="2">&lt;/b2&gt;</it> <bpt i="3" x="3">&lt;b3&gt;</bpt>CalcMin<ept i="3">&lt;/b3&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> is Unicode friendly:<ept i="0">&lt;/b0&gt;</ept> it allows to easily convert to and from ANSI and Unicode strings (see <bpt i="2" x="2">&lt;a2&gt;</bpt>Unicode Support in wxWidgets<ept i="2">&lt;/a2&gt;</ept> for more details) and maps to <bpt i="3" x="3">&lt;c3&gt;</bpt>std::wstring<ept i="3">&lt;/c3&gt;</ept> transparently.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T160948Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Unicode との親和性:<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> は簡単に ANSI 文字列や Unicode 文字列と相互に変換できます (詳細は <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWidgets における Unicode 対応<ept i="2">&lt;/a2&gt;</ept> を参照してください) し、透過的に <bpt i="3" x="3">&lt;c3&gt;</bpt>std::wstring<ept i="3">&lt;/c3&gt;</ept> へマッピングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindowDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154309Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindowDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A border:<ept i="0">&lt;/b0&gt;</ept> The border is just empty space and is used to separate dialog items in a dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142045Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ボーダー :<ept i="0">&lt;/b0&gt;</ept> ボーダーは単なる空白スペースで、ダイアログ内でコントロール同士を分けるために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A border<ept i="0">&lt;/b0&gt;</ept>: The border is just empty space and is used to separate dialog items in a dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141211Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ボーダー :<ept i="0">&lt;/b0&gt;</ept> ボーダーは単なる空白スペースで、ダイアログ内でコントロール同士を分けるために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A minimal size:<ept i="0">&lt;/b0&gt;</ept> This minimal size is usually identical to the initial size of the controls and may either be set explicitly in the wxSize field of the control constructor or may be calculated by wxWidgets, typically by setting the height and/or the width of the item to -1.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T133301Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>最小サイズ :<ept i="0">&lt;/b0&gt;</ept> 通常、この最小サイズはコントロールの初期サイズと同じであり、コントロールのコンストラクタの wxSize フィールドに明示的に設定されるか、(普通は高さや幅に -1 を設定することで) wxWidgets によって計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A minimal size<ept i="0">&lt;/b0&gt;</ept>: This minimal size is usually identical to the initial size of the controls and may either be set explicitly in the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSize<ept i="1">&lt;/a1&gt;</ept> field of the control constructor or may be calculated by wxWidgets, typically by setting the height and/or the width of the item to -1.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141200Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>最小サイズ :<ept i="0">&lt;/b0&gt;</ept> 通常、この最小サイズはコントロールの初期サイズと同じであり、コントロールのコンストラクタの <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSize<ept i="1">&lt;/a1&gt;</ept> フィールドに明示的に設定されるか、(普通は高さや幅に -1 を設定することで) wxWidgets によって計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A stretch factor:<ept i="0">&lt;/b0&gt;</ept> If a sizer contains more than one child and it is offered more space than its children and their borders need, the question arises how to distribute the surplus space among the children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T145521Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ストレッチ係数 :<ept i="0">&lt;/b0&gt;</ept> サイザーがひとつ以上の子コントロールを持ち、子コントロールとそのボーダーの必要とするサイズ以上のサイズを持つ場合、余剰スペースを子コントロールに対してどのように分配するかが問題となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A stretch factor<ept i="0">&lt;/b0&gt;</ept>: If a sizer contains more than one child and it is offered more space than its children and their borders need, the question arises how to distribute the surplus space among the children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141230Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ストレッチ係数 :<ept i="0">&lt;/b0&gt;</ept> サイザーがひとつ以上の子コントロールを持ち、子コントロールとそのボーダーの必要とするサイズ以上のサイズを持つ場合、余剰スペースを子コントロールに対してどのように分配するかが問題となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Advise:<ept i="0">&lt;/b0&gt;</ept> The client asks to be advised of any change in data associated with a particular item.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033222Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Advise:<ept i="0">&lt;/b0&gt;</ept> 特定の項目に関連するデータの変更をクライアントへ通知するように要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>An alignment:<ept i="0">&lt;/b0&gt;</ept> Often, a dialog item is given more space than its minimal size plus its border.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T123510Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>アライメント :<ept i="0">&lt;/b0&gt;</ept> ダイアログアイテムに対して、最小サイズとボーダーのスペースよりも多くのスペースを与えることはよくあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>An alignment<ept i="0">&lt;/b0&gt;</ept>: Often, a dialog item is given more space than its minimal size plus its border.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141221Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>アライメント :<ept i="0">&lt;/b0&gt;</ept> ダイアログアイテムに対して、最小サイズとボーダーのスペースよりも多くのスペースを与えることはよくあります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>BestSize<ept i="0">&lt;/b0&gt;</ept>: The best size of a widget depends on what kind of widget it is, and usually also on the contents of the widget.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T154825Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>最適サイズ<ept i="0">&lt;/b0&gt;</ept>: ウィジェットの最適サイズはウィジェットの種類と、通常はウィジェットの内容物に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ClientSize<ept i="0">&lt;/b0&gt;</ept>: The client size represents the widget's area inside of any borders belonging to the widget and is the area that can be drawn upon in a <bpt i="1" x="1">&lt;t1&gt;</bpt>EVT_PAINT<ept i="1">&lt;/t1&gt;</ept> event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T150512Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>クライアントサイズ<ept i="0">&lt;/b0&gt;</ept>: クライアントサイズはボーダーの内側の領域を表しており、この領域は <bpt i="1" x="1">&lt;t1&gt;</bpt>EVT_PAINT<ept i="1">&lt;/t1&gt;</ept> イベントで描画できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Compatibility:<ept i="0">&lt;/b0&gt;</ept> This class tries to combine almost full compatibility with the old wxWidgets 1.xx <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> class, some reminiscence of MFC's CString class and 90% of the functionality of <bpt i="2" x="2">&lt;c2&gt;</bpt>std::string<ept i="2">&lt;/c2&gt;</ept> class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T160044Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>互換性<ept i="0">&lt;/b0&gt;</ept> このクラスは wxWidgets 1.xx の <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> クラス、および昔懐かしい MFC の CString クラスとほぼ完全に互換性があり、<bpt i="2" x="2">&lt;c2&gt;</bpt>std::string<ept i="2">&lt;/c2&gt;</ept> クラスの機能の 90% と互換性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Compatibility<ept i="0">&lt;/b0&gt;</ept> This class tries to combine almost full compatibility with the old wxWidgets 1.xx wxString class, some reminiscence to MFC CString class and 90% of the functionality of std::string class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T050803Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>互換性<ept i="0">&lt;/b0&gt;</ept> このクラスは wxWidgets 1.xx の wxString クラス、および昔懐かしい MFC の CString クラスとほぼ完全に互換性があり、std::string クラスの機能の 90% と互換性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Completeness:<ept i="0">&lt;/b0&gt;</ept> Usually, an error message should be presented to the user when some operation fails.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091816Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>完全性 :<ept i="0">&lt;/b0&gt;</ept> 通常、処理が失敗した場合にはエラーメッセージが表示されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Completeness<ept i="0">&lt;/b0&gt;</ept> Usually, an error message should be presented to the user when some operation fails.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015937Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>完全性<ept i="0">&lt;/b0&gt;</ept> 通常、処理が失敗した場合にはエラーメッセージが表示されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Drag start:<ept i="0">&lt;/b0&gt;</ept> To start the dragging process (typically in response to a mouse click) you must call <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDropSource::DoDragDrop<ept i="1">&lt;/a1&gt;</ept> like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T160418Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ドラッグの開始 :<ept i="0">&lt;/b0&gt;</ept> (一般的にはマウスクリックに応じて) ドラッグ処理を開始するには、このように <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDropSource::DoDragDrop<ept i="1">&lt;/a1&gt;</ept> を呼び出す必要があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Drag start<ept i="0">&lt;/b0&gt;</ept>: To start the dragging process (typically in response to a mouse click) you must call <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDropSource::DoDragDrop<ept i="1">&lt;/a1&gt;</ept> like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134807Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ドラッグの開始 :<ept i="0">&lt;/b0&gt;</ept> (一般的にはマウスクリックに応じて) ドラッグ処理を開始するには、このように <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDropSource::DoDragDrop<ept i="1">&lt;/a1&gt;</ept> を呼び出す必要があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Dragging:<ept i="0">&lt;/b0&gt;</ept> The call to DoDragDrop() blocks the program until the user releases the mouse button (unless you override the <bpt i="1" x="1">&lt;a1&gt;</bpt>GiveFeedback<ept i="1">&lt;/a1&gt;</ept> function to do something special).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T131525Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ドラッグ:<ept i="0">&lt;/b0&gt;</ept> (<bpt i="1" x="1">&lt;a1&gt;</bpt>GiveFeedback<ept i="1">&lt;/a1&gt;</ept>  関数をオーバーライドして特別なことをさせない限り) DoDragDrop() を呼び出すと、ユーザがマウスのボタンを放すまでプログラムがブロックされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Dragging:<ept i="0">&lt;/b0&gt;</ept> The call to DoDragDrop() blocks the program until the user releases the mouse button (unless you override the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDropSource::GiveFeedback<ept i="1">&lt;/a1&gt;</ept> function to do something special).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135112Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ドラッグ:<ept i="0">&lt;/b0&gt;</ept> (<bpt i="1" x="1">&lt;a1&gt;</bpt>GiveFeedback<ept i="1">&lt;/a1&gt;</ept>  関数をオーバーライドして特別なことをさせない限り) DoDragDrop() を呼び出すと、ユーザがマウスのボタンを放すまでプログラムがブロックされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Drop:<ept i="0">&lt;/b0&gt;</ept> When the user releases the mouse over a window, wxWidgets asks the associated <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDropTarget<ept i="1">&lt;/a1&gt;</ept> object if it accepts the data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135831Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ドロップ :<ept i="0">&lt;/b0&gt;</ept> ユーザがウィンドウ上でマウスを放すと、wxWidgets は関連付けられた <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDropTarget<ept i="1">&lt;/a1&gt;</ept> オブジェクトへ、そのデータを受け付けるか問い合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Drop:<ept i="0">&lt;/b0&gt;</ept> When the user releases the mouse over a window, wxWidgets asks the associated wxDropTarget object if it accepts the data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T132245Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ドロップ :<ept i="0">&lt;/b0&gt;</ept> ユーザがウィンドウ上でマウスを放すと、wxWidgets は関連付けられた wxDropTarget オブジェクトへ、そのデータを受け付けるか問い合わせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Efficiency:<ept i="0">&lt;/b0&gt;</ept> Since wxWidgets 3.0 <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> uses <bpt i="2" x="2">&lt;c2&gt;</bpt>std::string<ept i="2">&lt;/c2&gt;</ept> (in UTF8 mode under Linux, Unix and OS X) or <bpt i="3" x="3">&lt;c3&gt;</bpt>std::wstring<ept i="3">&lt;/c3&gt;</ept> (in UTF16 mode under Windows) internally by default to store its contents.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T155239Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>効率性:<ept i="0">&lt;/b0&gt;</ept> wxWidgets 3.0 の <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> ではデフォルトで <bpt i="2" x="2">&lt;c2&gt;</bpt>std::string<ept i="2">&lt;/c2&gt;</ept> (Linux、Unix、OS X の UTF8 モード時) または <bpt i="3" x="3">&lt;c3&gt;</bpt>std::wstring<ept i="3">&lt;/c3&gt;</ept> (Windows の UTF16 モード時) を内部的に使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Efficiency<ept i="0">&lt;/b0&gt;</ept> This class was made to be as efficient as possible: both in terms of size (each wxString objects takes exactly the same space as a <bpt i="1" x="1">&lt;i1&gt;</bpt> char *<ept i="1">&lt;/i1&gt;</ept> pointer, sing <bpt i="2" x="2">&lt;a2&gt;</bpt>reference counting<ept i="2">&lt;/a2&gt;</ept>) and speed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T045829Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>効率性<ept i="0">&lt;/b0&gt;</ept> このクラスはできるだけ効率的に動作するように作られています: これはサイズ (個々の wxString オブジェクトは <bpt i="2" x="2">&lt;a2&gt;</bpt>参照カウンタ<ept i="2">&lt;/a2&gt;</ept> のおかげで <bpt i="1" x="1">&lt;i1&gt;</bpt> char *<ept i="1">&lt;/i1&gt;</ept> ポインタと完全に同じサイズです) と性能面の両方についてです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Execute:<ept i="0">&lt;/b0&gt;</ept> the client calls the server with a data string representing a command to be executed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032457Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Execute:<ept i="0">&lt;/b0&gt;</ept> 実行するコマンドを表すデータ文字列を指定してクライアントからサーバを呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Flexibility:<ept i="0">&lt;/b0&gt;</ept> The output of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> functions can be redirected or suppressed entirely based on their importance, which is either impossible or difficult to do with traditional methods.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091643Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>柔軟性 :<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> 関数の出力はその重要度に応じてリダイレクトしたり抑制したりできます。これは従来の関数では不可能、もしくは困難なことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Flexibility<ept i="0">&lt;/b0&gt;</ept> The output of wxLog functions can be redirected or suppressed entirely based on their importance, which is either impossible or difficult to do with traditional methods.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T090235Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>柔軟性<ept i="0">&lt;/b0&gt;</ept> wxLog 関数の出力はその重要度に応じてリダイレクトしたり抑制したりできます。これは従来の関数では不可能、もしくは困難なことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>GetEffectiveMinSize()<ept i="0">&lt;/b0&gt;</ept>: (formerly <bpt i="1" x="1">&lt;t1&gt;</bpt>GetBestFittingSize<ept i="1">&lt;/t1&gt;</ept>) A blending of the widget's min size and best size, giving precedence to the min size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T142850Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>GetEffectiveMinSize()<ept i="0">&lt;/b0&gt;</ept>: (以前は <bpt i="1" x="1">&lt;t1&gt;</bpt>GetBestFittingSize<ept i="1">&lt;/t1&gt;</ept> でした) ウィジェットの最小サイズと最適サイズを混ぜあわせたもので、最小サイズよりも優先されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>InitialSize<ept i="0">&lt;/b0&gt;</ept>: The initial size of a widget is the size given to the constructor of the widget, if any.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T150639Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>初期サイズ<ept i="0">&lt;/b0&gt;</ept>: ウィジェットの初期サイズはウィジェットのコンストラクタで指定されたサイズのことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Initialization:<ept i="0">&lt;/b0&gt;</ept> For a window to be a drop target, it needs to have an associated <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDropTarget<ept i="1">&lt;/a1&gt;</ept> object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T131927Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>初期化 :<ept i="0">&lt;/b0&gt;</ept> ウィンドウをドロップ先にするには、ウィンドウを <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDropTarget<ept i="1">&lt;/a1&gt;</ept> オブジェクトへ関連付ける必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>MinSize<ept i="0">&lt;/b0&gt;</ept>: The min size of a widget is a size that is normally explicitly set by the programmer either with the <bpt i="1" x="1">&lt;t1&gt;</bpt>SetMinSize()<ept i="1">&lt;/t1&gt;</ept> method or the <bpt i="2" x="2">&lt;t2&gt;</bpt>SetSizeHints()<ept i="2">&lt;/t2&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T160016Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>最小サイズ<ept i="0">&lt;/b0&gt;</ept>: ウィジェットの最小サイズは通常、プログラマが <bpt i="1" x="1">&lt;t1&gt;</bpt>SetMinSize()<ept i="1">&lt;/t1&gt;</ept> 関数か <bpt i="2" x="2">&lt;t2&gt;</bpt>SetSizeHints()<ept i="2">&lt;/t2&gt;</ept> 関数のどちらかを使用して明示的に設定するサイズです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Note:<ept i="0">&lt;/b0&gt;</ept> bitmap handlers are not implemented on all platforms, and new ones rarely need to be implemented since wxImage can be used for loading most formats, as noted earlier.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T143314Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>注:<ept i="0">&lt;/b0&gt;</ept> ビットマップハンドラはすべてのプラットフォームで実装されているわけでありませんし、新しいものを実装する必要もほとんどないでしょう。なぜなら、前で述べたように wxImage を使用することで大半の形式を読み込むことができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Note:<ept i="0">&lt;/b0&gt;</ept> this section is strictly about performance issues and is absolutely not necessary to read for using wxString class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T075921Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>注:<ept i="0">&lt;/b0&gt;</ept> この章では性能に関する問題のみを取り扱っており、wxString クラスを使用するだけであれば読む必要はまったくありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Pay close attention to Step 5.<ept i="0">&lt;/b0&gt;</ept> People often overlook or get confused by this powerful feature of the wxWidgets event processing system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T031315Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ステップ 5 に注意してください。<ept i="0">&lt;/b0&gt;</ept> wxWidgets のイベント処理システムの持つこの強力な機能はしばしば見落とされたり、人を混乱させたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Poke:<ept i="0">&lt;/b0&gt;</ept> The client sends a data string associated with an item string directly to the server.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033100Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Poke:<ept i="0">&lt;/b0&gt;</ept> ある項目に関連するデータ文字列をクライアントからサーバへ直接送信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Portability:<ept i="0">&lt;/b0&gt;</ept> It is a common practice to use <bpt i="1" x="1">&lt;e1&gt;</bpt>printf()<ept i="1">&lt;/e1&gt;</ept> statements or cout/cerr C++ streams for writing out some (debug or otherwise) information.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091656Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>移植性 :<ept i="0">&lt;/b0&gt;</ept> デバッグ情報や他の情報の出力に <bpt i="1" x="1">&lt;e1&gt;</bpt>printf()<ept i="1">&lt;/e1&gt;</ept> や cout/cerr などの C++ ストリームを使用するのはごく普通のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Portability<ept i="0">&lt;/b0&gt;</ept> It is a common practice to use <bpt i="1" x="1">&lt;i1&gt;</bpt>printf()<ept i="1">&lt;/i1&gt;</ept> statements or cout/cerr C++ streams for writing out some (debug or otherwise) information.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015828Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>移植性<ept i="0">&lt;/b0&gt;</ept> デバッグ情報や他の情報の出力に <bpt i="1" x="1">&lt;i1&gt;</bpt>printf()<ept i="1">&lt;/i1&gt;</ept> や cout/cerr などの C++ ストリームを使用するのはごく普通のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Preparation:<ept i="0">&lt;/b0&gt;</ept> First of all, a data object must be created and initialized with the data you wish to drag.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T160254Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>準備:<ept i="0">&lt;/b0&gt;</ept> まず最初に、データオブジェクトを作成し、ドラッグしたいデータで初期化する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Processing the result:<ept i="0">&lt;/b0&gt;</ept> DoDragDrop() returns an <bpt i="1" x="1">&lt;i1&gt;</bpt>effect code<ept i="1">&lt;/i1&gt;</ept> which is one of the values of <bpt i="2" x="2">&lt;t2&gt;</bpt>wxDragResult<ept i="2">&lt;/t2&gt;</ept> enum (explained <bpt i="3" x="3">&lt;a3&gt;</bpt>here<ept i="3">&lt;/a3&gt;</ept>):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T131721Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>結果の処理 :<ept i="0">&lt;/b0&gt;</ept> DoDragDrop() は <bpt i="2" x="2">&lt;t2&gt;</bpt>wxDragResult<ept i="2">&lt;/t2&gt;</ept> 列挙型のいずれかの値を <bpt i="1" x="1">&lt;i1&gt;</bpt>影響コード<ept i="1">&lt;/i1&gt;</ept> (effect code) として返却します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Processing the result<ept i="0">&lt;/b0&gt;</ept>: DoDragDrop() returns an <bpt i="1" x="1">&lt;e1&gt;</bpt>effect<ept i="1">&lt;/e1&gt;</ept> code which is one of the values of <bpt i="2" x="2">&lt;c2&gt;</bpt>wxDragResult<ept i="2">&lt;/c2&gt;</ept> enum (explained in <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDropTarget<ept i="3">&lt;/a3&gt;</ept> page):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T140717Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>結果の処理 :<ept i="0">&lt;/b0&gt;</ept> DoDragDrop() は (<bpt i="3" x="3">&lt;a3&gt;</bpt>wxDropTarget<ept i="3">&lt;/a3&gt;</ept> で説明している)  <bpt i="2" x="2">&lt;c2&gt;</bpt>wxDragResult<ept i="2">&lt;/c2&gt;</ept> 列挙型のいずれかの値を <bpt i="1" x="1">&lt;e1&gt;</bpt>影響コード<ept i="1">&lt;/e1&gt;</ept> (effect code) として返却します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Request:<ept i="0">&lt;/b0&gt;</ept> the client asks the server for a particular data string associated with a given item string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032733Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Request:<ept i="0">&lt;/b0&gt;</ept> 指定した項目に関連する特定のデータ文字列をクライアントからサーバへ要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Rich set of functions:<ept i="0">&lt;/b0&gt;</ept> Some of the functions present in <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> are very useful but don't exist in most of other string classes: for example, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::AfterFirst<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::BeforeLast<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::Printf<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T160021Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>豊富な関数群<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> に存在するいくつかの関数はとても便利ですが、他の文字列クラスの大半には存在しません: 例えば、<bpt i="2" x="2">&lt;a2&gt;</bpt>AfterFirst<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>BeforeLast<ept i="3">&lt;/a3&gt;</ept>、<bpt i="4" x="4">&lt;a4&gt;</bpt>Printf<ept i="4">&lt;/a4&gt;</ept> などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Rich set of functions<ept i="0">&lt;/b0&gt;</ept> Some of the functions present in wxString are very useful but don't exist in most of other string classes: for example, <bpt i="1" x="1">&lt;a1&gt;</bpt>AfterFirst<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>BeforeLast<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>operator&lt;&lt;<ept i="3">&lt;/a3&gt;</ept> or <bpt i="4" x="4">&lt;a4&gt;</bpt>Printf<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T051031Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>豊富な関数群<ept i="0">&lt;/b0&gt;</ept> wxString に存在するいくつかの関数はとても便利ですが、他の文字列クラスの大半には存在しません: 例えば、<bpt i="1" x="1">&lt;a1&gt;</bpt>AfterFirst<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>BeforeLast<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>operator&lt;&lt;<ept i="3">&lt;/a3&gt;</ept>、<bpt i="4" x="4">&lt;a4&gt;</bpt>Printf<ept i="4">&lt;/a4&gt;</ept> などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>SECURITY NOTE:<ept i="0">&lt;/b0&gt;</ept> Using Internet domain sockets is extremely insecure for IPC as there is absolutely no access control for them, use Unix domain sockets whenever possible!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032948Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>セキュリティ上の注意:<ept i="0">&lt;/b0&gt;</ept> インターネットドメインソケットを使用したプロセス間通信は非常に危険です。なぜなら、これらの通信に対するアクセス制御はまったく行われないためです。可能な限り、Unix ドメインソケットを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>SearchEventTable<ept i="0">&lt;/b0&gt;</ept> is called for this event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T024421Z">
        <seg>このイベントハンドラから <bpt i="0" x="0">&lt;b0&gt;</bpt>SearchEventTable<ept i="0">&lt;/b0&gt;</ept> が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>SetInitialSize(size)<ept i="0">&lt;/b0&gt;</ept>: (formerly <bpt i="1" x="1">&lt;t1&gt;</bpt>SetBestFittingSize<ept i="1">&lt;/t1&gt;</ept>) This is a little different than the typical size setters.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T151718Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>SetInitialSize(size)<ept i="0">&lt;/b0&gt;</ept>: (以前は <bpt i="1" x="1">&lt;t1&gt;</bpt>SetBestFittingSize<ept i="1">&lt;/t1&gt;</ept> でした) これは通常のサイズ設定関数とは少しだけ異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Size<ept i="0">&lt;/b0&gt;</ept>: The size of a widget can be explicitly set or fetched with the <bpt i="1" x="1">&lt;t1&gt;</bpt>SetSize()<ept i="1">&lt;/t1&gt;</ept> or <bpt i="2" x="2">&lt;t2&gt;</bpt>GetSize()<ept i="2">&lt;/t2&gt;</ept> methods.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T150301Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>サイズ<ept i="0">&lt;/b0&gt;</ept>: ウィジェットのサイズは <bpt i="1" x="1">&lt;t1&gt;</bpt>SetSize()<ept i="1">&lt;/t1&gt;</ept> 関数や <bpt i="2" x="2">&lt;t2&gt;</bpt>GetSize()<ept i="2">&lt;/t2&gt;</ept> 関数で明示的に設定・取得することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>The end:<ept i="0">&lt;/b0&gt;</ept> After processing the data, DoDragDrop() returns either wxDragCopy or wxDragMove depending on the state of the keys &lt;Ctrl&gt;, &lt;Shift&gt; and &lt;Alt&gt; at the moment of the drop.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T132458Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>終了 :<ept i="0">&lt;/b0&gt;</ept> ドロップ時の &lt;Ctrl&gt;、&lt;Shift&gt;、&lt;Alt&gt; キーの状態に応じて、データ処理のあとに DoDragDrop() は wxDragCopy または wxDragMove  のいずれの値かを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>The end<ept i="0">&lt;/b0&gt;</ept>: After processing the data, DoDragDrop() returns either wxDragCopy or wxDragMove depending on the state of the keys Ctrl, Shift and Alt at the moment of the drop.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T140128Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>終了 :<ept i="0">&lt;/b0&gt;</ept> ドロップ時の Ctrl、Shift、Alt キーの状態に応じて、データ処理のあとに DoDragDrop() は wxDragCopy または wxDragMove  のいずれの値かを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>The usage of std::string compatible functions is strongly advised!<ept i="0">&lt;/b0&gt;</ept> It will both make your code more familiar to other C++ programmers (who are supposed to have knowledge of std::string but not of wxString), let you reuse the same code in both wxWidgets and other programs (by just typedefing wxString as std::string when used outside wxWidgets) and by staying compatible with future versions of wxWidgets which will probably start using std::string sooner or later too.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T092930Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>std::string 互換の関数を使用することを強く推奨します!<ept i="0">&lt;/b0&gt;</ept> そうすることで、(std::string に関する知識はあっても wxString のことは知らないであろう) 他の C++ プログラマにとってより馴染みのあるコードにできますし、(wxWidgets 外でコードを使用するときは wxString を std::string として typedef することで) wxWidgets とそれ以外のプログラムで同じコードを再利用することもできます。また、wxWidgets の将来のバージョンとの互換性も保てます。なぜなら、遅かれ早かれ、おそらく wxWidgets で std::string を使用し始めるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Unicode<ept i="0">&lt;/b0&gt;</ept> wxString is Unicode friendly: it allows to easily convert to and from ANSI and Unicode strings in any build mode (see the <bpt i="1" x="1">&lt;a1&gt;</bpt>Unicode overview<ept i="1">&lt;/a1&gt;</ept> for more details) and maps to either <bpt i="2" x="2">&lt;t2&gt;</bpt>string<ept i="2">&lt;/t2&gt;</ept> or <bpt i="3" x="3">&lt;t3&gt;</bpt>wstring<ept i="3">&lt;/t3&gt;</ept> transparently depending on the current mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T051318Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ユニコード<ept i="0">&lt;/b0&gt;</ept> wxString は Unicode との親和性が高いです: どのビルドモードでも簡単に ANSI 文字列や Unicode 文字列と相互に変換できます (詳細は <bpt i="1" x="1">&lt;a1&gt;</bpt>Unicode の概要<ept i="1">&lt;/a1&gt;</ept> を参照してください) し、現在のビルドモードに応じて透過的に <bpt i="2" x="2">&lt;t2&gt;</bpt>string<ept i="2">&lt;/t2&gt;</ept> か <bpt i="3" x="3">&lt;t3&gt;</bpt>wstring<ept i="3">&lt;/t3&gt;</ept> のいずれかにマッピングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Used by wxWidgets:<ept i="0">&lt;/b0&gt;</ept> And, of course, this class is used everywhere inside wxWidgets so there is no performance loss which would result from conversions of objects of any other string class (including <bpt i="1" x="1">&lt;c1&gt;</bpt>std::string<ept i="1">&lt;/c1&gt;</ept>) to <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> internally by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T112543Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxWidgets での使用<ept i="0">&lt;/b0&gt;</ept> もちろん、このクラスは wxWidgets 内部のあらゆるところで使用されています。そのため、wxWidgets が内部的に (<bpt i="1" x="1">&lt;c1&gt;</bpt>std::string<ept i="1">&lt;/c1&gt;</ept> を含む) 他の文字列クラスを <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> へ変換することによる性能劣化が発生しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Used by wxWidgets<ept i="0">&lt;/b0&gt;</ept> And, of course, this class is used everywhere inside wxWidgets so there is no performance loss which would result from conversions of objects of any other string class (including std::string) to wxString internally by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T051634Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxWidgets での使用<ept i="0">&lt;/b0&gt;</ept> もちろん、このクラスは wxWidgets 内部のあらゆるところで使用されています。そのため、wxWidgets が内部的に (std::string を含む) 他の文字列クラスを wxString へ変換することによる性能劣化が発生しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Warning:<ept i="0">&lt;/b0&gt;</ept> gettext versions &lt; 0.10 are known to be buggy, so you should find a later version of it!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T160602Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>注意:<ept i="0">&lt;/b0&gt;</ept> gettext バージョン &lt; 0.10 はバグが多いため、最新版を利用するべきです!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>int<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;b1&gt;</bpt>GetOrientation<ept i="1">&lt;/b1&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150703Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>int<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;b1&gt;</bpt>GetOrientation<ept i="1">&lt;/b1&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>sizer.Fit(window)<ept i="0">&lt;/b0&gt;</ept>: This sets the size of the window to be large enough to accommodate the minimum size needed by the sizer, (along with a few other constraints...) If the sizer is the one that is assigned to the window then this should be equivalent to <bpt i="1" x="1">&lt;t1&gt;</bpt>window.Fit()<ept i="1">&lt;/t1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T152651Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>sizer.Fit(window)<ept i="0">&lt;/b0&gt;</ept>: これは (他のいくつかの制約とあわせて) サイザーの要求する最小サイズを充分満たすようにウィンドウサイズを設定します。ウィンドウに割り当てられているサイザーがひとつだけの場合は <bpt i="1" x="1">&lt;t1&gt;</bpt>window.Fit()<ept i="1">&lt;/t1&gt;</ept> と等価になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>sizer.Layout()<ept i="0">&lt;/b0&gt;</ept>: Recalculates the minimum space needed by each item in the sizer, and then lays out the items within the space currently allotted to the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T152814Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>sizer.Layout()<ept i="0">&lt;/b0&gt;</ept>: サイザー内の各要素が必要とする最小サイズを再計算し、現在サイザーに割り当てられているスペース内に各要素を配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>void<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;b1&gt;</bpt>RecalcSizes<ept i="1">&lt;/b1&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150049Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>void<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;b1&gt;</bpt>RecalcSizes<ept i="1">&lt;/b1&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>window.Fit()<ept i="0">&lt;/b0&gt;</ept>: The <bpt i="1" x="1">&lt;t1&gt;</bpt>Fit()<ept i="1">&lt;/t1&gt;</ept> method sets the size of a window to fit around its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T152136Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>window.Fit()<ept i="0">&lt;/b0&gt;</ept>: <bpt i="1" x="1">&lt;t1&gt;</bpt>Fit()<ept i="1">&lt;/t1&gt;</ept> 関数は子コントロールにフィットするようにウィンドウのサイズを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>window.Layout()<ept i="0">&lt;/b0&gt;</ept>: If the window has a sizer then it sets the space given to the sizer to the current size of the window, which results in a call to <bpt i="1" x="1">&lt;t1&gt;</bpt>sizer.Layout()<ept i="1">&lt;/t1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T143548Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>window.Layout()<ept i="0">&lt;/b0&gt;</ept>: ウィンドウがサイザーを持つ場合に、現在のウィンドウサイズにあわせてサイザーが利用可能なスペースを設定します。これにより <bpt i="1" x="1">&lt;t1&gt;</bpt>sizer.Layout()<ept i="1">&lt;/t1&gt;</ept> が呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/b0&gt;</ept>(<bpt i="1" x="1">&lt;b1&gt;</bpt>int <ept i="1">&lt;/b1&gt;</ept><bpt i="2" x="2">&lt;i2&gt;</bpt>orient<ept i="2">&lt;/i2&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145929Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/b0&gt;</ept>(<bpt i="1" x="1">&lt;b1&gt;</bpt>int <ept i="1">&lt;/b1&gt;</ept><bpt i="2" x="2">&lt;i2&gt;</bpt>orient<ept i="2">&lt;/i2&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxClientDC.<ept i="0">&lt;/b0&gt;</ept> Use this to paint on the client area of window (the part without borders and other decorations), but do not use it from within an <bpt i="1" x="1">&lt;a1&gt;</bpt>wxPaintEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141425Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxClientDC<ept i="0">&lt;/b0&gt;</ept>。ウィンドウのクライアントエリア (ボーダーや他の装飾を除いた部分) に描画するときに使用します。ただし、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxPaintEvent<ept i="1">&lt;/a1&gt;</ept> の中で使用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogDebug<ept i="0">&lt;/b0&gt;</ept> is <bpt i="1" x="1">&lt;b1&gt;</bpt>the<ept i="1">&lt;/b1&gt;</ept> right function for debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011629Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogDebug<ept i="0">&lt;/b0&gt;</ept> は <bpt i="1" x="1">&lt;b1&gt;</bpt>まさに<ept i="1">&lt;/b1&gt;</ept> デバッグ出力に適切な関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogError<ept i="0">&lt;/b0&gt;</ept> is the function to use for error messages, i.e. the messages that must be shown to the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010103Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogError<ept i="0">&lt;/b0&gt;</ept> はエラーメッセージ (ユーザに通知しなければならないメッセージ) 用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogFatalError<ept i="0">&lt;/b0&gt;</ept> which is like <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogError<ept i="1">&lt;/i1&gt;</ept>, but also terminates the program with the exit code 3 (using <bpt i="2" x="2">&lt;i2&gt;</bpt>abort()<ept i="2">&lt;/i2&gt;</ept> standard function).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005238Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogFatalError<ept i="0">&lt;/b0&gt;</ept> は <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogError<ept i="1">&lt;/i1&gt;</ept> と似ていますが、(<bpt i="2" x="2">&lt;i2&gt;</bpt>abort()<ept i="2">&lt;/i2&gt;</ept> 標準関数を使用して) リターンコード 3 でプログラムを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogGui<ept i="0">&lt;/b0&gt;</ept> This is the standard log target for wxWidgets applications (it is used by default if you don't do anything) and provides the most reasonable handling of all types of messages for given platform.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T090443Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogGui<ept i="0">&lt;/b0&gt;</ept> これは wxWidgets アプリケーションの標準ログターゲット (何もしない場合にデフォルトで使用されます) で、指定されたプラットフォームについて、メッセージのすべての型に対してもっとも合理的な処理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogMessage<ept i="0">&lt;/b0&gt;</ept> is for all normal, informational messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010056Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogMessage<ept i="0">&lt;/b0&gt;</ept> はすべての通常 (通知) メッセージ用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogNull<ept i="0">&lt;/b0&gt;</ept> The last log class is quite particular: it doesn't do anything.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025643Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogNull<ept i="0">&lt;/b0&gt;</ept> 最後のログクラスは極めて特殊です: これは何も行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStatus<ept i="0">&lt;/b0&gt;</ept> is for status messages - they will go into the status bar of the active or specified (as the first argument) <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> if it has one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011009Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStatus<ept i="0">&lt;/b0&gt;</ept> はステータスメッセージ用の関数で、このメッセージはアクティブまたは第一引数で指定された <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> がステータスバーを持つ場合に、ステータスバーへ出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStderr<ept i="0">&lt;/b0&gt;</ept> This class logs messages to a <bpt i="1" x="1">&lt;i1&gt;</bpt>FILE *<ept i="1">&lt;/i1&gt;</ept>, using stderr by default as its name suggests.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T024402Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStderr<ept i="0">&lt;/b0&gt;</ept> このクラスはメッセージを <bpt i="1" x="1">&lt;i1&gt;</bpt>FILE *<ept i="1">&lt;/i1&gt;</ept> へ出力します。その名の通り、デフォルトでは stderr へ出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStream<ept i="0">&lt;/b0&gt;</ept> This class has the same functionality as wxLogStderr, but uses <bpt i="1" x="1">&lt;i1&gt;</bpt>ostream<ept i="1">&lt;/i1&gt;</ept> and cerr instead of <bpt i="2" x="2">&lt;i2&gt;</bpt>FILE *<ept i="2">&lt;/i2&gt;</ept> and stderr.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T024353Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStream<ept i="0">&lt;/b0&gt;</ept> このクラスは wxLogStderr と同じ機能を持ちますが、<bpt i="2" x="2">&lt;i2&gt;</bpt>FILE *<ept i="2">&lt;/i2&gt;</ept> と stderr の代わりに <bpt i="1" x="1">&lt;i1&gt;</bpt>ostream<ept i="1">&lt;/i1&gt;</ept> と cerr を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogSysError<ept i="0">&lt;/b0&gt;</ept> is mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011243Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogSysError<ept i="0">&lt;/b0&gt;</ept> は主に wxWidgets 自身で使用されますが、システムコール (API 関数) の失敗後のエラーログを記録するのに便利かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogTrace<ept i="0">&lt;/b0&gt;</ept> as <bpt i="1" x="1">&lt;b1&gt;</bpt>wxLogDebug<ept i="1">&lt;/b1&gt;</ept> only does something in debug build.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T012357Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogTrace<ept i="0">&lt;/b0&gt;</ept> も <bpt i="1" x="1">&lt;b1&gt;</bpt>wxLogDebug<ept i="1">&lt;/b1&gt;</ept> と同じようにデバッグビルド時のみ動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogVerbose<ept i="0">&lt;/b0&gt;</ept> is for verbose output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010049Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogVerbose<ept i="0">&lt;/b0&gt;</ept> は詳細な出力用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogWarning<ept i="0">&lt;/b0&gt;</ept> for warnings - they are also normally shown to the user, but don't interrupt the program work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010113Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogWarning<ept i="0">&lt;/b0&gt;</ept> は警告メッセージ (通常はユーザに通知されますが、プログラムの動作を妨げないメッセージ） 用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogWindow<ept i="0">&lt;/b0&gt;</ept> This log target provides a "log console" which collects all messages generated by the application and also passes them to the previous active log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025402Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogWindow<ept i="0">&lt;/b0&gt;</ept> このログターゲットはアプリケーションの生成するすべてのメッセージを収集する "ログコンソール" を提供するとともに、前に有効だったログターゲットに収集したメッセージを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxPaintDC.<ept i="0">&lt;/b0&gt;</ept> Use this to paint on the client area of a window, but <bpt i="1" x="1">&lt;i1&gt;</bpt>only<ept i="1">&lt;/i1&gt;</ept> from within a <bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintEvent<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141422Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxPaintDC<ept i="0">&lt;/b0&gt;</ept>。ウィンドウのクライアントエリアに描画するときに使用しますが、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintEvent<ept i="2">&lt;/a2&gt;</ept> の中で <bpt i="1" x="1">&lt;i1&gt;</bpt>のみ<ept i="1">&lt;/i1&gt;</ept> 使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxScreenDC.<ept i="0">&lt;/b0&gt;</ept> Use this to paint on the screen, as opposed to an individual window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141428Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxScreenDC<ept i="0">&lt;/b0&gt;</ept>。個別のウィンドウではなく、スクリーン上に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxWindowDC.<ept i="0">&lt;/b0&gt;</ept> Use this to paint on the whole area of a window, including decorations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141502Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxWindowDC<ept i="0">&lt;/b0&gt;</ept>。装飾を含む、ウィンドウ全体に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;b2&gt;</bpt>Tip:<ept i="2">&lt;/b2&gt;</ept> under Windows, you must either run the program under debugger or use a 3rd party program such as <bpt i="3" x="3">&lt;a3&gt;</bpt>DbgView<ept i="3">&lt;/a3&gt;</ept> to actually see the debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T012227Z">
        <seg><bpt i="2" x="2">&lt;b2&gt;</bpt>ヒント:<ept i="2">&lt;/b2&gt;</ept> Windows でデバッグ出力を確認するためにはデバッガーを使用するか、<bpt i="3" x="3">&lt;a3&gt;</bpt>DbgView<ept i="3">&lt;/a3&gt;</ept> のようなサードパーティーのプログラムを使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/c0&gt;</ept> is defined as 1 now to indicate Unicode support.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033722Z">
        <seg>Unicode に対応しているため、現在、 <bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/c0&gt;</ept> は 1 として定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/c0&gt;</ept> is now defined as <bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept> by default to indicate Unicode support.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T122430Z">
        <seg>Unicode に対応していることを表すため、現在ではデフォルトで <bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/c0&gt;</ept> が <bpt i="1" x="1">&lt;c1&gt;</bpt>1<ept i="1">&lt;/c1&gt;</ept> に定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Event class<ept i="0">&lt;/e0&gt;</ept> carried by the event: each event has some information associated with it and this data is represented by an object of a class derived from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T034810Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>イベントクラス<ept i="0">&lt;/e0&gt;</ept> : 各イベントは自分自身に関連する情報を持っており、これは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent<ept i="1">&lt;/a1&gt;</ept> の継承クラスで表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Event source<ept i="0">&lt;/e0&gt;</ept>: <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent<ept i="1">&lt;/a1&gt;</ept> stores the object which generated the event and, for windows, its identifier (see <bpt i="2" x="2">&lt;a2&gt;</bpt>Window Identifiers<ept i="2">&lt;/a2&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T142755Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>イベント発生元<ept i="0">&lt;/e0&gt;</ept> : <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent<ept i="1">&lt;/a1&gt;</ept> はイベントを生成したオブジェクトや、生成元がウィンドウの場合はその識別子 (<bpt i="2" x="2">&lt;a2&gt;</bpt>ウィンドウ識別子<ept i="2">&lt;/a2&gt;</ept> 参照) を格納しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Event type<ept i="0">&lt;/e0&gt;</ept>: this is simply a value of type wxEventType which uniquely identifies the type of the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T021606Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>イベント型<ept i="0">&lt;/e0&gt;</ept> : イベントの型を一意に識別するための wxEventType 型の値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>OnInit<ept i="0">&lt;/e0&gt;</ept> will usually create a top window as a bare minimum.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T123716Z">
        <seg>通常、<bpt i="0" x="0">&lt;e0&gt;</bpt>OnInit<ept i="0">&lt;/e0&gt;</ept> では最低限、トップウィンドウを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Please pay close attention to step 6!<ept i="0">&lt;/e0&gt;</ept> People often overlook or get confused by this powerful feature of the wxWidgets event processing system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T145251Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>ステップ 6 に注意してください。<ept i="0">&lt;/e0&gt;</ept> wxWidgets のイベント処理システムの持つこの強力な機能はしばしば見落とされたり、人を混乱させたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;i0&gt;</bpt>orient<ept i="0">&lt;/i0&gt;</ept> may be either of wxVERTICAL or wxHORIZONTAL for creating either a column sizer or a row sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150042Z">
        <seg>列サイザー、行サイザーを作成する場合、 <bpt i="0" x="0">&lt;i0&gt;</bpt>orient<ept i="0">&lt;/i0&gt;</ept> はそれぞれ wxVERTICAL または wxHORIZONTAL になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;i2&gt;</bpt>OnInit<ept i="2">&lt;/i2&gt;</ept> will usually create a top window as a bare minimum.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T123741Z">
        <seg>通常、<bpt i="2" x="2">&lt;i2&gt;</bpt>OnInit<ept i="2">&lt;/i2&gt;</ept> では最低限、トップウィンドウを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&lt;meta http-equiv="Content-Type" content="text/html; charset=iso8859-2"&gt;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T133258Z">
        <seg>&lt;meta http-equiv="Content-Type" content="text/html; charset=iso8859-2"&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&lt;meta http-equiv=<bpt i="0" x="0">&lt;s0&gt;</bpt>"Content-Type"<ept i="0">&lt;/s0&gt;</ept> content=<bpt i="1" x="1">&lt;s1&gt;</bpt>"text/html; charset=iso8859-2"<ept i="1">&lt;/s1&gt;</ept>&gt;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T144554Z">
        <seg>&lt;meta http-equiv=<bpt i="0" x="0">&lt;s0&gt;</bpt>"Content-Type"<ept i="0">&lt;/s0&gt;</ept> content=<bpt i="1" x="1">&lt;s1&gt;</bpt>"text/html; charset=iso8859-2"<ept i="1">&lt;/s1&gt;</ept>&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>    #include &lt;fstream&gt;<ept i="0">&lt;/s0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T143010Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>    #include &lt;fstream&gt;<ept i="0">&lt;/s0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt># SOME DESCRIPTIVE TITLE.<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt><ept i="1">&lt;/s1&gt;</ept><bpt i="2" x="2">&lt;s2&gt;</bpt># Copyright (C) YEAR Free Software Foundation, Inc.<ept i="2">&lt;/s2&gt;</ept>
<bpt i="3" x="3">&lt;s3&gt;</bpt><ept i="3">&lt;/s3&gt;</ept><bpt i="4" x="4">&lt;s4&gt;</bpt># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.<ept i="4">&lt;/s4&gt;</ept>
<bpt i="5" x="5">&lt;s5&gt;</bpt><ept i="5">&lt;/s5&gt;</ept><bpt i="6" x="6">&lt;s6&gt;</bpt>#<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;s7&gt;</bpt><ept i="7">&lt;/s7&gt;</ept>msgid <bpt i="8" x="8">&lt;s8&gt;</bpt>""<ept i="8">&lt;/s8&gt;</ept>
msgstr <bpt i="9" x="9">&lt;s9&gt;</bpt>""<ept i="9">&lt;/s9&gt;</ept>
<bpt i="10" x="10">&lt;s10&gt;</bpt>"Project-Id-Version: PACKAGE VERSION\n"<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;s11&gt;</bpt>"POT-Creation-Date: 1999-02-19 16:03+0100\n"<ept i="11">&lt;/s11&gt;</ept>
<bpt i="12" x="12">&lt;s12&gt;</bpt>"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"<ept i="12">&lt;/s12&gt;</ept>
<bpt i="13" x="13">&lt;s13&gt;</bpt>"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"<ept i="13">&lt;/s13&gt;</ept>
<bpt i="14" x="14">&lt;s14&gt;</bpt>"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"<ept i="14">&lt;/s14&gt;</ept>
<bpt i="15" x="15">&lt;s15&gt;</bpt>"MIME-Version: 1.0\n"<ept i="15">&lt;/s15&gt;</ept>
<bpt i="16" x="16">&lt;s16&gt;</bpt>"Content-Type: text/plain; charset=CHARSET\n"<ept i="16">&lt;/s16&gt;</ept>
<bpt i="17" x="17">&lt;s17&gt;</bpt>"Content-Transfer-Encoding: ENCODING\n"<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134543Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt># SOME DESCRIPTIVE TITLE.<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt><ept i="1">&lt;/s1&gt;</ept><bpt i="2" x="2">&lt;s2&gt;</bpt># Copyright (C) YEAR Free Software Foundation, Inc.<ept i="2">&lt;/s2&gt;</ept>
<bpt i="3" x="3">&lt;s3&gt;</bpt><ept i="3">&lt;/s3&gt;</ept><bpt i="4" x="4">&lt;s4&gt;</bpt># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.<ept i="4">&lt;/s4&gt;</ept>
<bpt i="5" x="5">&lt;s5&gt;</bpt><ept i="5">&lt;/s5&gt;</ept><bpt i="6" x="6">&lt;s6&gt;</bpt>#<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;s7&gt;</bpt><ept i="7">&lt;/s7&gt;</ept>msgid <bpt i="8" x="8">&lt;s8&gt;</bpt>""<ept i="8">&lt;/s8&gt;</ept>
msgstr <bpt i="9" x="9">&lt;s9&gt;</bpt>""<ept i="9">&lt;/s9&gt;</ept>
<bpt i="10" x="10">&lt;s10&gt;</bpt>"Project-Id-Version: PACKAGE VERSION\n"<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;s11&gt;</bpt>"POT-Creation-Date: 1999-02-19 16:03+0100\n"<ept i="11">&lt;/s11&gt;</ept>
<bpt i="12" x="12">&lt;s12&gt;</bpt>"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"<ept i="12">&lt;/s12&gt;</ept>
<bpt i="13" x="13">&lt;s13&gt;</bpt>"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"<ept i="13">&lt;/s13&gt;</ept>
<bpt i="14" x="14">&lt;s14&gt;</bpt>"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"<ept i="14">&lt;/s14&gt;</ept>
<bpt i="15" x="15">&lt;s15&gt;</bpt>"MIME-Version: 1.0\n"<ept i="15">&lt;/s15&gt;</ept>
<bpt i="16" x="16">&lt;s16&gt;</bpt>"Content-Type: text/plain; charset=CHARSET\n"<ept i="16">&lt;/s16&gt;</ept>
<bpt i="17" x="17">&lt;s17&gt;</bpt>"Content-Transfer-Encoding: ENCODING\n"<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt># SOME DESCRIPTIVE TITLE.<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt><ept i="1">&lt;/s1&gt;</ept><bpt i="2" x="2">&lt;s2&gt;</bpt># Copyright (C) YEAR Free Software Foundation, Inc.<ept i="2">&lt;/s2&gt;</ept>
<bpt i="3" x="3">&lt;s3&gt;</bpt><ept i="3">&lt;/s3&gt;</ept><bpt i="4" x="4">&lt;s4&gt;</bpt># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.<ept i="4">&lt;/s4&gt;</ept>
<bpt i="5" x="5">&lt;s5&gt;</bpt><ept i="5">&lt;/s5&gt;</ept><bpt i="6" x="6">&lt;s6&gt;</bpt>#<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;s7&gt;</bpt><ept i="7">&lt;/s7&gt;</ept>msgid <bpt i="8" x="8">&lt;s8&gt;</bpt>""<ept i="8">&lt;/s8&gt;</ept>
msgstr <bpt i="9" x="9">&lt;s9&gt;</bpt>""<ept i="9">&lt;/s9&gt;</ept>
<bpt i="10" x="10">&lt;s10&gt;</bpt>"Project-Id-Version: PACKAGE VERSION\n"<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;s11&gt;</bpt>"POT-Creation-Date: 1999-02-19 16:03+0100\n"<ept i="11">&lt;/s11&gt;</ept>
<bpt i="12" x="12">&lt;s12&gt;</bpt>"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"<ept i="12">&lt;/s12&gt;</ept>
<bpt i="13" x="13">&lt;s13&gt;</bpt>"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"<ept i="13">&lt;/s13&gt;</ept>
<bpt i="14" x="14">&lt;s14&gt;</bpt>"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"<ept i="14">&lt;/s14&gt;</ept>
<bpt i="15" x="15">&lt;s15&gt;</bpt>"MIME-Version: 1.0\n"<ept i="15">&lt;/s15&gt;</ept>
<bpt i="16" x="16">&lt;s16&gt;</bpt>"Content-Type: text/plain; charset=iso8859-2\n"<ept i="16">&lt;/s16&gt;</ept>
<bpt i="17" x="17">&lt;s17&gt;</bpt>"Content-Transfer-Encoding: 8bit\n"<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134546Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt># SOME DESCRIPTIVE TITLE.<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt><ept i="1">&lt;/s1&gt;</ept><bpt i="2" x="2">&lt;s2&gt;</bpt># Copyright (C) YEAR Free Software Foundation, Inc.<ept i="2">&lt;/s2&gt;</ept>
<bpt i="3" x="3">&lt;s3&gt;</bpt><ept i="3">&lt;/s3&gt;</ept><bpt i="4" x="4">&lt;s4&gt;</bpt># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.<ept i="4">&lt;/s4&gt;</ept>
<bpt i="5" x="5">&lt;s5&gt;</bpt><ept i="5">&lt;/s5&gt;</ept><bpt i="6" x="6">&lt;s6&gt;</bpt>#<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;s7&gt;</bpt><ept i="7">&lt;/s7&gt;</ept>msgid <bpt i="8" x="8">&lt;s8&gt;</bpt>""<ept i="8">&lt;/s8&gt;</ept>
msgstr <bpt i="9" x="9">&lt;s9&gt;</bpt>""<ept i="9">&lt;/s9&gt;</ept>
<bpt i="10" x="10">&lt;s10&gt;</bpt>"Project-Id-Version: PACKAGE VERSION\n"<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;s11&gt;</bpt>"POT-Creation-Date: 1999-02-19 16:03+0100\n"<ept i="11">&lt;/s11&gt;</ept>
<bpt i="12" x="12">&lt;s12&gt;</bpt>"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"<ept i="12">&lt;/s12&gt;</ept>
<bpt i="13" x="13">&lt;s13&gt;</bpt>"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"<ept i="13">&lt;/s13&gt;</ept>
<bpt i="14" x="14">&lt;s14&gt;</bpt>"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"<ept i="14">&lt;/s14&gt;</ept>
<bpt i="15" x="15">&lt;s15&gt;</bpt>"MIME-Version: 1.0\n"<ept i="15">&lt;/s15&gt;</ept>
<bpt i="16" x="16">&lt;s16&gt;</bpt>"Content-Type: text/plain; charset=iso8859-2\n"<ept i="16">&lt;/s16&gt;</ept>
<bpt i="17" x="17">&lt;s17&gt;</bpt>"Content-Transfer-Encoding: 8bit\n"<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// We want to get a dialog that is stretchable because it<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>// has a text ctrl at the top and two buttons at the bottom.<ept i="1">&lt;/s1&gt;</ept>

MyDialog::MyDialog(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept> *parent, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindowID<ept i="3">&lt;/a3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>id<ept i="4">&lt;/s4&gt;</ept>, <bpt i="5" x="5">&lt;s5&gt;</bpt>const<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> &amp;title )
: <bpt i="7" x="7">&lt;a7&gt;</bpt>wxDialog<ept i="7">&lt;/a7&gt;</ept>(parent, id, title, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxDefaultPosition<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxDefaultSize<ept i="9">&lt;/a9&gt;</ept>,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142852Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// 上部にテキストコントロールと下部にふたつのボタンを持つので<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>// リサイズ可能なダイアログにしたい。<ept i="1">&lt;/s1&gt;</ept>

MyDialog::MyDialog(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept> *parent, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindowID<ept i="3">&lt;/a3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>id<ept i="4">&lt;/s4&gt;</ept>, <bpt i="5" x="5">&lt;s5&gt;</bpt>const<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> &amp;title )
: <bpt i="7" x="7">&lt;a7&gt;</bpt>wxDialog<ept i="7">&lt;/a7&gt;</ept>(parent, id, title, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxDefaultPosition<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxDefaultSize<ept i="9">&lt;/a9&gt;</ept>,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// an easy and portable way to create a bitmap<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap<ept i="1">&lt;/a1&gt;</ept> bmp(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxBITMAP<ept i="2">&lt;/a2&gt;</ept>(bmpname));

<bpt i="3" x="3">&lt;s3&gt;</bpt>// which is roughly equivalent to the following<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;s4&gt;</bpt>#if defined(__WXMSW__) || defined(__WXPM__)<ept i="4">&lt;/s4&gt;</ept>
<bpt i="5" x="5">&lt;s5&gt;</bpt><ept i="5">&lt;/s5&gt;</ept>    <bpt i="6" x="6">&lt;a6&gt;</bpt>wxBitmap<ept i="6">&lt;/a6&gt;</ept> bmp(<bpt i="7" x="7">&lt;s7&gt;</bpt>"bmpname"<ept i="7">&lt;/s7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxBITMAP_TYPE_BMP_RESOURCE<ept i="8">&lt;/a8&gt;</ept>);
<bpt i="9" x="9">&lt;s9&gt;</bpt>#else // Unix<ept i="9">&lt;/s9&gt;</ept>
<bpt i="10" x="10">&lt;s10&gt;</bpt><ept i="10">&lt;/s10&gt;</ept>    <bpt i="11" x="11">&lt;a11&gt;</bpt>wxBitmap<ept i="11">&lt;/a11&gt;</ept> bmp(bmpname_xpm, <bpt i="12" x="12">&lt;a12&gt;</bpt>wxBITMAP_TYPE_XPM<ept i="12">&lt;/a12&gt;</ept>);
<bpt i="13" x="13">&lt;s13&gt;</bpt>#endif<ept i="13">&lt;/s13&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154736Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// ビットマップを作成する、簡単で移植性のある方法<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap<ept i="1">&lt;/a1&gt;</ept> bmp(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxBITMAP<ept i="2">&lt;/a2&gt;</ept>(bmpname));

<bpt i="3" x="3">&lt;s3&gt;</bpt>// これは以下のコードと大体同じです<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;s4&gt;</bpt>#if defined(__WXMSW__) || defined(__WXPM__)<ept i="4">&lt;/s4&gt;</ept>
<bpt i="5" x="5">&lt;s5&gt;</bpt><ept i="5">&lt;/s5&gt;</ept>    <bpt i="6" x="6">&lt;a6&gt;</bpt>wxBitmap<ept i="6">&lt;/a6&gt;</ept> bmp(<bpt i="7" x="7">&lt;s7&gt;</bpt>"bmpname"<ept i="7">&lt;/s7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxBITMAP_TYPE_BMP_RESOURCE<ept i="8">&lt;/a8&gt;</ept>);
<bpt i="9" x="9">&lt;s9&gt;</bpt>#else // Unix<ept i="9">&lt;/s9&gt;</ept>
<bpt i="10" x="10">&lt;s10&gt;</bpt><ept i="10">&lt;/s10&gt;</ept>    <bpt i="11" x="11">&lt;a11&gt;</bpt>wxBitmap<ept i="11">&lt;/a11&gt;</ept> bmp(bmpname_xpm, <bpt i="12" x="12">&lt;a12&gt;</bpt>wxBITMAP_TYPE_XPM<ept i="12">&lt;/a12&gt;</ept>);
<bpt i="13" x="13">&lt;s13&gt;</bpt>#endif<ept i="13">&lt;/s13&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// define a new event class<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>class <ept i="1">&lt;/s1&gt;</ept>MyPlotEvent: <bpt i="2" x="2">&lt;s2&gt;</bpt>public<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEvent<ept i="3">&lt;/a3&gt;</ept>
{
<bpt i="4" x="4">&lt;s4&gt;</bpt>public<ept i="4">&lt;/s4&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150427Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// 新しいイベントクラスを定義する<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>class <ept i="1">&lt;/s1&gt;</ept>MyPlotEvent: <bpt i="2" x="2">&lt;s2&gt;</bpt>public<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEvent<ept i="3">&lt;/a3&gt;</ept>
{
<bpt i="4" x="4">&lt;s4&gt;</bpt>public<ept i="4">&lt;/s4&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// delete all vowels from the string<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> DeleteAllVowels(<bpt i="2" x="2">&lt;s2&gt;</bpt>const<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept>&amp; original)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121143Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// 文字列から母音をすべて削除する<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> DeleteAllVowels(<bpt i="2" x="2">&lt;s2&gt;</bpt>const<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept>&amp; original)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// disable all database error messages, everybody knows databases never<ept i="0">&lt;/s0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110908Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// 絶対にデータベースが失敗しないことを誰もが知っているため、<ept i="0">&lt;/s0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// first test, using exotic characters outside of the Unicode BMP:<ept i="0">&lt;/s0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034036Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// 最初のテストでは Unicode BMP 外の文字を使用する:<ept i="0">&lt;/s0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// this function converts the input string to uppercase,<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>// output it to the screen and returns the result<ept i="1">&lt;/s1&gt;</ept>
<bpt i="2" x="2">&lt;s2&gt;</bpt>const<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;s3&gt;</bpt>char<ept i="3">&lt;/s3&gt;</ept> *SayHELLO(<bpt i="4" x="4">&lt;s4&gt;</bpt>const<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept>&amp; input)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113855Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// この関数は入力された文字列を大文字に変換し、画面に表示した上で<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>// 結果を返却する<ept i="1">&lt;/s1&gt;</ept>
<bpt i="2" x="2">&lt;s2&gt;</bpt>const<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;s3&gt;</bpt>char<ept i="3">&lt;/s3&gt;</ept> *SayHELLO(<bpt i="4" x="4">&lt;s4&gt;</bpt>const<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept>&amp; input)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// this is typically in a header: it just declares MY_EVENT event type<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDECLARE_EVENT<ept i="1">&lt;/a1&gt;</ept>(MY_EVENT, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept>);

<bpt i="3" x="3">&lt;s3&gt;</bpt>// this is a definition so can't be in a header<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;a4&gt;</bpt>wxDEFINE_EVENT<ept i="4">&lt;/a4&gt;</ept>(MY_EVENT, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxCommandEvent<ept i="5">&lt;/a5&gt;</ept>);

<bpt i="6" x="6">&lt;s6&gt;</bpt>// example of code handling the event with event tables<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;a7&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="7">&lt;/a7&gt;</ept>(MyFrame, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxFrame<ept i="8">&lt;/a8&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150052Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// このマクロは一般的にヘッダファイル内で使用します: これは MY_EVENT イベント型を定義するだけです<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDECLARE_EVENT<ept i="1">&lt;/a1&gt;</ept>(MY_EVENT, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept>);

<bpt i="3" x="3">&lt;s3&gt;</bpt>// これは定義なのでヘッダ内で使用することはできません<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;a4&gt;</bpt>wxDEFINE_EVENT<ept i="4">&lt;/a4&gt;</ept>(MY_EVENT, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxCommandEvent<ept i="5">&lt;/a5&gt;</ept>);

<bpt i="6" x="6">&lt;s6&gt;</bpt>// イベントテーブルによるイベント処理のコード例<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;a7&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="7">&lt;/a7&gt;</ept>(MyFrame, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxFrame<ept i="8">&lt;/a8&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>DerivedApp : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152654Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>DerivedApp : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyApp : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124532Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyApp : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyConnection: <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxConnection<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152908Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyConnection: <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxConnection<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyFrame : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024704Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyFrame : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScopedCharBuffer<ept i="1">&lt;/a1&gt;</ept> p(s.<bpt i="2" x="2">&lt;a2&gt;</bpt>ToUTF8<ept i="2">&lt;/a2&gt;</ept>());
puts(p);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171253Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScopedCharBuffer<ept i="1">&lt;/a1&gt;</ept> p(s.<bpt i="2" x="2">&lt;a2&gt;</bpt>ToUTF8<ept i="2">&lt;/a2&gt;</ept>());
puts(p);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> <bpt i="1" x="1">&lt;s1&gt;</bpt>char<ept i="1">&lt;/s1&gt;</ept> *p = s.<bpt i="2" x="2">&lt;a2&gt;</bpt>ToUTF8<ept i="2">&lt;/a2&gt;</ept>();
...
puts(p); <bpt i="3" x="3">&lt;s3&gt;</bpt>// or call any other function taking const char *<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170753Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> <bpt i="1" x="1">&lt;s1&gt;</bpt>char<ept i="1">&lt;/s1&gt;</ept> *p = s.<bpt i="2" x="2">&lt;a2&gt;</bpt>ToUTF8<ept i="2">&lt;/a2&gt;</ept>();
...
puts(p); <bpt i="3" x="3">&lt;s3&gt;</bpt>// または const char * を受け取る他の関数の呼び出し<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> wxWX2MBbuf tmp_buf = wxConvCurrent-&gt;cWX2MB(unicode_data);
<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *tmp_str = (<bpt i="3" x="3">&lt;s3&gt;</bpt>const<ept i="3">&lt;/s3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>char<ept i="4">&lt;/s4&gt;</ept>*) tmp_buf;
printf(<bpt i="5" x="5">&lt;s5&gt;</bpt>"Data: %s\n"<ept i="5">&lt;/s5&gt;</ept>, tmp_str);
process_data(tmp_str);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152104Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> wxWX2MBbuf tmp_buf = wxConvCurrent-&gt;cWX2MB(unicode_data);
<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *tmp_str = (<bpt i="3" x="3">&lt;s3&gt;</bpt>const<ept i="3">&lt;/s3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>char<ept i="4">&lt;/s4&gt;</ept>*) tmp_buf;
printf(<bpt i="5" x="5">&lt;s5&gt;</bpt>"Data: %s\n"<ept i="5">&lt;/s5&gt;</ept>, tmp_str);
process_data(tmp_str);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>enum<ept i="0">&lt;/s0&gt;</ept> Colour { Red, Green, Blue };</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152921Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>enum<ept i="0">&lt;/s0&gt;</ept> Colour { Red, Green, Blue };</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>enum<ept i="0">&lt;/s0&gt;</ept> { Red, Green, Blue };</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130832Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>enum<ept i="0">&lt;/s0&gt;</ept> { Red, Green, Blue };</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>if<ept i="0">&lt;/s0&gt;</ept> (!<bpt i="1" x="1">&lt;a1&gt;</bpt>wxFontMapper::Get<ept i="1">&lt;/a1&gt;</ept>()-&gt;IsEncodingAvailable(enc, facename))
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143523Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>if<ept i="0">&lt;/s0&gt;</ept> (!<bpt i="1" x="1">&lt;a1&gt;</bpt>wxFontMapper::Get<ept i="1">&lt;/a1&gt;</ept>()-&gt;IsEncodingAvailable(enc, facename))
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>struct <ept i="0">&lt;/s0&gt;</ept>MyFunctor
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060809Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>struct <ept i="0">&lt;/s0&gt;</ept>MyFunctor
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>switch<ept i="0">&lt;/s0&gt;</ept> ( s[n] )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122458Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>switch<ept i="0">&lt;/s0&gt;</ept> ( s[n] )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>switch<ept i="0">&lt;/s0&gt;</ept> (result)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135302Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>switch<ept i="0">&lt;/s0&gt;</ept> (result)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>using namespace <ept i="0">&lt;/s0&gt;</ept>boost;

<bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> MyHandler::OnExit( <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp; )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060938Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>using namespace <ept i="0">&lt;/s0&gt;</ept>boost;

<bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> MyHandler::OnExit( <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp; )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> HandleExit( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> &amp; )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060659Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> HandleExit( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> &amp; )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrame::OnExit(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; WXUNUSED(event))
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034205Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrame::OnExit(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; WXUNUSED(event))
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrame::OnSize(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizeEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034454Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrame::OnSize(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizeEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrameHandler::OnFrameExit( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> &amp; )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060207Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrameHandler::OnFrameExit( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> &amp; )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyHandler::OnExit( <bpt i="1" x="1">&lt;s1&gt;</bpt>int<ept i="1">&lt;/s1&gt;</ept> exitCode, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp;, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> goodByeMessage )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061147Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyHandler::OnExit( <bpt i="1" x="1">&lt;s1&gt;</bpt>int<ept i="1">&lt;/s1&gt;</ept> exitCode, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp;, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> goodByeMessage )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyWindow::OnMyCmd(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154318Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyWindow::OnMyCmd(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> OpenLogFile(<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *filename);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142514Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> OpenLogFile(<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *filename);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> wxDialog::OnOK(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153601Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> wxDialog::OnOK(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// accessors<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155555Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// アクセサ<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// also enable tracing messages from wxWidgets dynamic module loading<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111013Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// また、wxWidgets の動的モジュールロード機能の<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// do nothing<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135358Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// 何も行わない<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>if<ept i="10">&lt;/s10&gt;</ept> ( s.<bpt i="11" x="11">&lt;a11&gt;</bpt>length<ept i="11">&lt;/a11&gt;</ept>() != 1 )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153115Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>if<ept i="10">&lt;/s10&gt;</ept> ( s.<bpt i="11" x="11">&lt;a11&gt;</bpt>length<ept i="11">&lt;/a11&gt;</ept>() != 1 )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>if<ept i="10">&lt;/s10&gt;</ept> (vowels.Find( *i ) == <bpt i="11" x="11">&lt;a11&gt;</bpt>wxNOT_FOUND<ept i="11">&lt;/a11&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121156Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>if<ept i="10">&lt;/s10&gt;</ept> (vowels.Find( *i ) == <bpt i="11" x="11">&lt;a11&gt;</bpt>wxNOT_FOUND<ept i="11">&lt;/a11&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>return<ept i="10">&lt;/s10&gt;</ept> 0;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124606Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>return<ept i="10">&lt;/s10&gt;</ept> 0;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>void<ept i="10">&lt;/s10&gt;</ept> OnExit(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCommandEvent<ept i="11">&lt;/a11&gt;</ept>&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024715Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>void<ept i="10">&lt;/s10&gt;</ept> OnExit(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCommandEvent<ept i="11">&lt;/a11&gt;</ept>&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="11" x="11">&lt;s11&gt;</bpt>// mechanism<ept i="11">&lt;/s11&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111052Z">
        <seg><bpt i="11" x="11">&lt;s11&gt;</bpt>// トレースメッセージも有効化する<ept i="11">&lt;/s11&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="11" x="11">&lt;s11&gt;</bpt>break<ept i="11">&lt;/s11&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135400Z">
        <seg><bpt i="11" x="11">&lt;s11&gt;</bpt>break<ept i="11">&lt;/s11&gt;</ept>;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="11" x="11">&lt;s11&gt;</bpt>return<ept i="11">&lt;/s11&gt;</ept> NULL;
}

connection-&gt;StartAdvise(<bpt i="12" x="12">&lt;s12&gt;</bpt>"Item"<ept i="12">&lt;/s12&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T153049Z">
        <seg><bpt i="11" x="11">&lt;s11&gt;</bpt>return<ept i="11">&lt;/s11&gt;</ept> NULL;
}

connection-&gt;StartAdvise(<bpt i="12" x="12">&lt;s12&gt;</bpt>"Item"<ept i="12">&lt;/s12&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>// do something<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150109Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>// 処理を行なう<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>// prints "wxString reports a length of 1 character(s)" on Linux<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034612Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>// Linux では "wxString reports a length of 1 character(s)" と表示される<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>else<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143527Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>else<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>return<ept i="12">&lt;/s12&gt;</ept> <bpt i="13" x="13">&lt;s13&gt;</bpt>false<ept i="13">&lt;/s13&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153117Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>return<ept i="12">&lt;/s12&gt;</ept> <bpt i="13" x="13">&lt;s13&gt;</bpt>false<ept i="13">&lt;/s13&gt;</ept>;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>return<ept i="12">&lt;/s12&gt;</ept> <bpt i="13" x="13">&lt;s13&gt;</bpt>true<ept i="13">&lt;/s13&gt;</ept>;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152703Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>return<ept i="12">&lt;/s12&gt;</ept> <bpt i="13" x="13">&lt;s13&gt;</bpt>true<ept i="13">&lt;/s13&gt;</ept>;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>return<ept i="12">&lt;/s12&gt;</ept> result;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121159Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>return<ept i="12">&lt;/s12&gt;</ept> result;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>void<ept i="12">&lt;/s12&gt;</ept> OnButton1(<bpt i="13" x="13">&lt;a13&gt;</bpt>wxCommandEvent<ept i="13">&lt;/a13&gt;</ept>&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T020036Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>void<ept i="12">&lt;/s12&gt;</ept> OnButton1(<bpt i="13" x="13">&lt;a13&gt;</bpt>wxCommandEvent<ept i="13">&lt;/a13&gt;</ept>&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="13" x="13">&lt;s13&gt;</bpt>// prints "wxString reports a length of 2 character(s)" on Windows<ept i="13">&lt;/s13&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034628Z">
        <seg><bpt i="13" x="13">&lt;s13&gt;</bpt>// Windows では "wxString reports a length of 2 character(s)" と表示される<ept i="13">&lt;/s13&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>// implement the base class pure virtual<ept i="14">&lt;/s14&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150512Z">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>// 基底クラスの純粋仮想関数を実装する<ept i="14">&lt;/s14&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>// since wxString on Windows doesn't have surrogate pairs support!<ept i="14">&lt;/s14&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034656Z">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>// これは Windows の wxString はサロゲートペアに対応していないからだ!<ept i="14">&lt;/s14&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>int<ept i="14">&lt;/s14&gt;</ept> size, <bpt i="15" x="15">&lt;a15&gt;</bpt>wxIPCFormat<ept i="15">&lt;/a15&gt;</ept> format)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152915Z">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>int<ept i="14">&lt;/s14&gt;</ept> size, <bpt i="15" x="15">&lt;a15&gt;</bpt>wxIPCFormat<ept i="15">&lt;/a15&gt;</ept> format)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>switch<ept i="14">&lt;/s14&gt;</ept> ( s[0].GetValue() )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153119Z">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>switch<ept i="14">&lt;/s14&gt;</ept> ( s[0].GetValue() )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>void<ept i="14">&lt;/s14&gt;</ept> OnSize(<bpt i="15" x="15">&lt;a15&gt;</bpt>wxSizeEvent<ept i="15">&lt;/a15&gt;</ept>&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T020037Z">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>void<ept i="14">&lt;/s14&gt;</ept> OnSize(<bpt i="15" x="15">&lt;a15&gt;</bpt>wxSizeEvent<ept i="15">&lt;/a15&gt;</ept>&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="15" x="15">&lt;s15&gt;</bpt>// second test, this time using characters part of the Unicode BMP:<ept i="15">&lt;/s15&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034740Z">
        <seg><bpt i="15" x="15">&lt;s15&gt;</bpt>// ふたつ目のテストでは Unicode BMP の文字を使用する:<ept i="15">&lt;/s15&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="15" x="15">&lt;s15&gt;</bpt>case<ept i="15">&lt;/s15&gt;</ept> <bpt i="16" x="16">&lt;s16&gt;</bpt>'R'<ept i="16">&lt;/s16&gt;</ept>: *col = Red; <bpt i="17" x="17">&lt;s17&gt;</bpt>return<ept i="17">&lt;/s17&gt;</ept> <bpt i="18" x="18">&lt;s18&gt;</bpt>true<ept i="18">&lt;/s18&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153121Z">
        <seg><bpt i="15" x="15">&lt;s15&gt;</bpt>case<ept i="15">&lt;/s15&gt;</ept> <bpt i="16" x="16">&lt;s16&gt;</bpt>'R'<ept i="16">&lt;/s16&gt;</ept>: *col = Red; <bpt i="17" x="17">&lt;s17&gt;</bpt>return<ept i="17">&lt;/s17&gt;</ept> <bpt i="18" x="18">&lt;s18&gt;</bpt>true<ept i="18">&lt;/s18&gt;</ept>;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="15" x="15">&lt;s15&gt;</bpt>virtual<ept i="15">&lt;/s15&gt;</ept> <bpt i="16" x="16">&lt;a16&gt;</bpt>wxEvent<ept i="16">&lt;/a16&gt;</ept> *<bpt i="17" x="17">&lt;a17&gt;</bpt>Clone<ept i="17">&lt;/a17&gt;</ept>()<bpt i="18" x="18">&lt;s18&gt;</bpt> const <ept i="18">&lt;/s18&gt;</ept>{ <bpt i="19" x="19">&lt;s19&gt;</bpt>return<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;s20&gt;</bpt>new<ept i="20">&lt;/s20&gt;</ept> MyPlotEvent(*<bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>); }

<bpt i="22" x="22">&lt;s22&gt;</bpt>private<ept i="22">&lt;/s22&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150515Z">
        <seg><bpt i="15" x="15">&lt;s15&gt;</bpt>virtual<ept i="15">&lt;/s15&gt;</ept> <bpt i="16" x="16">&lt;a16&gt;</bpt>wxEvent<ept i="16">&lt;/a16&gt;</ept> *<bpt i="17" x="17">&lt;a17&gt;</bpt>Clone<ept i="17">&lt;/a17&gt;</ept>()<bpt i="18" x="18">&lt;s18&gt;</bpt> const <ept i="18">&lt;/s18&gt;</ept>{ <bpt i="19" x="19">&lt;s19&gt;</bpt>return<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;s20&gt;</bpt>new<ept i="20">&lt;/s20&gt;</ept> MyPlotEvent(*<bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>); }

<bpt i="22" x="22">&lt;s22&gt;</bpt>private<ept i="22">&lt;/s22&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// create text ctrl with minimal size 100x60 that is horizontally and<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145437Z">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// 最小サイズ 100x60 のテキストコントロールを作成し、水平方向と<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// create text ctrl with minimal size 100x60<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142933Z">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// 最小サイズ 100x60 のテキストコントロールを作成する<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// it's common to call the event handlers OnSomething() but there is no<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T020204Z">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// イベントハンドラは OnSomething() という名前にするのが一般的ですが、<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="17" x="17">&lt;s17&gt;</bpt>// obligation to do that; this one is an event handler too:<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024748Z">
        <seg><bpt i="17" x="17">&lt;s17&gt;</bpt>// そうしなければならないわけではありません； これもイベントハンドラです:<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="17" x="17">&lt;s17&gt;</bpt>// vertically stretchable with a border width of 10<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T153110Z">
        <seg><bpt i="17" x="17">&lt;s17&gt;</bpt>// 垂直方向にリサイズ可能で、ボーダーの太さは 10 にする<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="18" x="18">&lt;s18&gt;</bpt>new<ept i="18">&lt;/s18&gt;</ept> <bpt i="19" x="19">&lt;a19&gt;</bpt>wxTextCtrl<ept i="19">&lt;/a19&gt;</ept>( <bpt i="20" x="20">&lt;s20&gt;</bpt>this<ept i="20">&lt;/s20&gt;</ept>, -1, <bpt i="21" x="21">&lt;s21&gt;</bpt>"My text."<ept i="21">&lt;/s21&gt;</ept>, <bpt i="22" x="22">&lt;a22&gt;</bpt>wxDefaultPosition<ept i="22">&lt;/a22&gt;</ept>, <bpt i="23" x="23">&lt;a23&gt;</bpt>wxSize<ept i="23">&lt;/a23&gt;</ept>(100,60), <bpt i="24" x="24">&lt;a24&gt;</bpt>wxTE_MULTILINE<ept i="24">&lt;/a24&gt;</ept>),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142947Z">
        <seg><bpt i="18" x="18">&lt;s18&gt;</bpt>new<ept i="18">&lt;/s18&gt;</ept> <bpt i="19" x="19">&lt;a19&gt;</bpt>wxTextCtrl<ept i="19">&lt;/a19&gt;</ept>( <bpt i="20" x="20">&lt;s20&gt;</bpt>this<ept i="20">&lt;/s20&gt;</ept>, -1, <bpt i="21" x="21">&lt;s21&gt;</bpt>"My text."<ept i="21">&lt;/s21&gt;</ept>, <bpt i="22" x="22">&lt;a22&gt;</bpt>wxDefaultPosition<ept i="22">&lt;/a22&gt;</ept>, <bpt i="23" x="23">&lt;a23&gt;</bpt>wxSize<ept i="23">&lt;/a23&gt;</ept>(100,60), <bpt i="24" x="24">&lt;a24&gt;</bpt>wxTE_MULTILINE<ept i="24">&lt;/a24&gt;</ept>),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="18" x="18">&lt;s18&gt;</bpt>void<ept i="18">&lt;/s18&gt;</ept> DoTest(<bpt i="19" x="19">&lt;a19&gt;</bpt>wxCommandEvent<ept i="19">&lt;/a19&gt;</ept>&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T020304Z">
        <seg><bpt i="18" x="18">&lt;s18&gt;</bpt>void<ept i="18">&lt;/s18&gt;</ept> DoTest(<bpt i="19" x="19">&lt;a19&gt;</bpt>wxCommandEvent<ept i="19">&lt;/a19&gt;</ept>&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="19" x="19">&lt;s19&gt;</bpt>// this is the UTF8 encoding of capital letter A followed by<ept i="19">&lt;/s19&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T035455Z">
        <seg><bpt i="19" x="19">&lt;s19&gt;</bpt>// これは大文字の A、'グレーブ付きの小文字の a'、<ept i="19">&lt;/s19&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="19" x="19">&lt;s19&gt;</bpt>case<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;s20&gt;</bpt>'G'<ept i="20">&lt;/s20&gt;</ept>: *col = Green; <bpt i="21" x="21">&lt;s21&gt;</bpt>return<ept i="21">&lt;/s21&gt;</ept> <bpt i="22" x="22">&lt;s22&gt;</bpt>true<ept i="22">&lt;/s22&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153122Z">
        <seg><bpt i="19" x="19">&lt;s19&gt;</bpt>case<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;s20&gt;</bpt>'G'<ept i="20">&lt;/s20&gt;</ept>: *col = Green; <bpt i="21" x="21">&lt;s21&gt;</bpt>return<ept i="21">&lt;/s21&gt;</ept> <bpt i="22" x="22">&lt;s22&gt;</bpt>true<ept i="22">&lt;/s22&gt;</ept>;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="19" x="19">&lt;s19&gt;</bpt>new<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;a20&gt;</bpt>wxTextCtrl<ept i="20">&lt;/a20&gt;</ept>( <bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>, -1, <bpt i="22" x="22">&lt;s22&gt;</bpt>"My text."<ept i="22">&lt;/s22&gt;</ept>, <bpt i="23" x="23">&lt;a23&gt;</bpt>wxDefaultPosition<ept i="23">&lt;/a23&gt;</ept>, <bpt i="24" x="24">&lt;a24&gt;</bpt>wxSize<ept i="24">&lt;/a24&gt;</ept>(100,60), <bpt i="25" x="25">&lt;a25&gt;</bpt>wxTE_MULTILINE<ept i="25">&lt;/a25&gt;</ept>),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145454Z">
        <seg><bpt i="19" x="19">&lt;s19&gt;</bpt>new<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;a20&gt;</bpt>wxTextCtrl<ept i="20">&lt;/a20&gt;</ept>( <bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>, -1, <bpt i="22" x="22">&lt;s22&gt;</bpt>"My text."<ept i="22">&lt;/s22&gt;</ept>, <bpt i="23" x="23">&lt;a23&gt;</bpt>wxDefaultPosition<ept i="23">&lt;/a23&gt;</ept>, <bpt i="24" x="24">&lt;a24&gt;</bpt>wxSize<ept i="24">&lt;/a24&gt;</ept>(100,60), <bpt i="25" x="25">&lt;a25&gt;</bpt>wxTE_MULTILINE<ept i="25">&lt;/a25&gt;</ept>),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>// fail anyhow<ept i="1">&lt;/s1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110921Z">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>// データベースのすべてのエラーメッセージを無効化する<ept i="1">&lt;/s1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>// wxFile.Open() normally complains if file can't be opened, we don't want it<ept i="1">&lt;/s1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113225Z">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>// 通常はファイルを開けなかった場合に wxFile.Open() がエラーメッセージを出力するが、そうさせたくない<ept i="1">&lt;/s1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>case<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDragCopy<ept i="2">&lt;/a2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135306Z">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>case<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDragCopy<ept i="2">&lt;/a2&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> MyFunc(<bpt i="2" x="2">&lt;s2&gt;</bpt>const<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept>&amp; filename)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T143012Z">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> MyFunc(<bpt i="2" x="2">&lt;s2&gt;</bpt>const<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept>&amp; filename)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> operator()( <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp; )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060812Z">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> operator()( <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp; )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="20" x="20">&lt;s20&gt;</bpt>// 'small case letter a with grave' followed by the 'euro sign'<ept i="20">&lt;/s20&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T035441Z">
        <seg><bpt i="20" x="20">&lt;s20&gt;</bpt>// 'ユーロ記号' を UTF8 で符号化したもので、<ept i="20">&lt;/s20&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="20" x="20">&lt;s20&gt;</bpt>event<ept i="20">&lt;/s20&gt;</ept>.SetEventObject(<bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150154Z">
        <seg><bpt i="20" x="20">&lt;s20&gt;</bpt>event<ept i="20">&lt;/s20&gt;</ept>.SetEventObject(<bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="21" x="21">&lt;s21&gt;</bpt>// they are 3 Unicode code-points encoded as:<ept i="21">&lt;/s21&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T035543Z">
        <seg><bpt i="21" x="21">&lt;s21&gt;</bpt>// 3 個の Unicode コードポイントは次のように符号化される:<ept i="21">&lt;/s21&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="22" x="22">&lt;s22&gt;</bpt>// - 3 UTF16 code units under Windows<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T035604Z">
        <seg><bpt i="22" x="22">&lt;s22&gt;</bpt>// - Windows では 3 個の UTF16 コード単位<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="22" x="22">&lt;s22&gt;</bpt>// Give it some contents<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155523Z">
        <seg><bpt i="22" x="22">&lt;s22&gt;</bpt>// 何か値を設定する<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>// - 6 UTF8 code units under Linux<ept i="23">&lt;/s23&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T035620Z">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>// - Linux では 6 個の UTF8 コード単位<ept i="23">&lt;/s23&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>case<ept i="23">&lt;/s23&gt;</ept> <bpt i="24" x="24">&lt;s24&gt;</bpt>'B'<ept i="24">&lt;/s24&gt;</ept>: *col = Blue; <bpt i="25" x="25">&lt;s25&gt;</bpt>return<ept i="25">&lt;/s25&gt;</ept> <bpt i="26" x="26">&lt;s26&gt;</bpt>true<ept i="26">&lt;/s26&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153123Z">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>case<ept i="23">&lt;/s23&gt;</ept> <bpt i="24" x="24">&lt;s24&gt;</bpt>'B'<ept i="24">&lt;/s24&gt;</ept>: *col = Blue; <bpt i="25" x="25">&lt;s25&gt;</bpt>return<ept i="25">&lt;/s25&gt;</ept> <bpt i="26" x="26">&lt;s26&gt;</bpt>true<ept i="26">&lt;/s26&gt;</ept>;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>const<ept i="23">&lt;/s23&gt;</ept> <bpt i="24" x="24">&lt;a24&gt;</bpt>wxPoint<ept i="24">&lt;/a24&gt;</ept> m_pos;
};

<bpt i="25" x="25">&lt;s25&gt;</bpt>// we define a single MY_PLOT_CLICKED event type associated with the class<ept i="25">&lt;/s25&gt;</ept>
<bpt i="26" x="26">&lt;s26&gt;</bpt>// above but typically you are going to have more than one event type, e.g. you<ept i="26">&lt;/s26&gt;</ept>
<bpt i="27" x="27">&lt;s27&gt;</bpt>// could also have MY_PLOT_ZOOMED or MY_PLOT_PANNED &amp;c -- in which case you<ept i="27">&lt;/s27&gt;</ept>
<bpt i="28" x="28">&lt;s28&gt;</bpt>// would just add more similar lines here<ept i="28">&lt;/s28&gt;</ept>
<bpt i="29" x="29">&lt;a29&gt;</bpt>wxDEFINE_EVENT<ept i="29">&lt;/a29&gt;</ept>(MY_PLOT_CLICKED, MyPlotEvent);


<bpt i="30" x="30">&lt;s30&gt;</bpt>// if you want to support old compilers you need to use some ugly macros:<ept i="30">&lt;/s30&gt;</ept>
<bpt i="31" x="31">&lt;s31&gt;</bpt>typedef<ept i="31">&lt;/s31&gt;</ept> void (<bpt i="32" x="32">&lt;a32&gt;</bpt>wxEvtHandler<ept i="32">&lt;/a32&gt;</ept>::*MyPlotEventFunction)(MyPlotEvent&amp;);
<bpt i="33" x="33">&lt;s33&gt;</bpt>#define MyPlotEventHandler(func) wxEVENT_HANDLER_CAST(MyPlotEventFunction, func)<ept i="33">&lt;/s33&gt;</ept>
<bpt i="34" x="34">&lt;s34&gt;</bpt><ept i="34">&lt;/s34&gt;</ept>
<bpt i="35" x="35">&lt;s35&gt;</bpt>// if your code is only built using reasonably modern compilers, you could just<ept i="35">&lt;/s35&gt;</ept>
<bpt i="36" x="36">&lt;s36&gt;</bpt>// do this instead:<ept i="36">&lt;/s36&gt;</ept>
<bpt i="37" x="37">&lt;s37&gt;</bpt>#define MyPlotEventHandler(func) (&amp;func)<ept i="37">&lt;/s37&gt;</ept>
<bpt i="38" x="38">&lt;s38&gt;</bpt><ept i="38">&lt;/s38&gt;</ept>
<bpt i="39" x="39">&lt;s39&gt;</bpt>// finally define a macro for creating the event table entries for the new<ept i="39">&lt;/s39&gt;</ept>
<bpt i="40" x="40">&lt;s40&gt;</bpt>// event type<ept i="40">&lt;/s40&gt;</ept>
<bpt i="41" x="41">&lt;s41&gt;</bpt>//<ept i="41">&lt;/s41&gt;</ept>
<bpt i="42" x="42">&lt;s42&gt;</bpt>// remember that you don't need this at all if you only use Bind&lt;&gt;() and that<ept i="42">&lt;/s42&gt;</ept>
<bpt i="43" x="43">&lt;s43&gt;</bpt>// you can replace MyPlotEventHandler(func) with just &amp;func unless you use a<ept i="43">&lt;/s43&gt;</ept>
<bpt i="44" x="44">&lt;s44&gt;</bpt>// really old compiler<ept i="44">&lt;/s44&gt;</ept>
<bpt i="45" x="45">&lt;s45&gt;</bpt>#define MY_EVT_PLOT_CLICK(id, func) \<ept i="45">&lt;/s45&gt;</ept>
<bpt i="46" x="46">&lt;s46&gt;</bpt>    wx__DECLARE_EVT1(MY_PLOT_CLICKED, id, MyPlotEventHandler(func))<ept i="46">&lt;/s46&gt;</ept>
<bpt i="47" x="47">&lt;s47&gt;</bpt><ept i="47">&lt;/s47&gt;</ept>

<bpt i="48" x="48">&lt;s48&gt;</bpt>// example of code handling the event (you will use one of these methods, not<ept i="48">&lt;/s48&gt;</ept>
<bpt i="49" x="49">&lt;s49&gt;</bpt>// both, of course):<ept i="49">&lt;/s49&gt;</ept>
<bpt i="50" x="50">&lt;a50&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="50">&lt;/a50&gt;</ept>(MyFrame, <bpt i="51" x="51">&lt;a51&gt;</bpt>wxFrame<ept i="51">&lt;/a51&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T152446Z">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>const<ept i="23">&lt;/s23&gt;</ept> <bpt i="24" x="24">&lt;a24&gt;</bpt>wxPoint<ept i="24">&lt;/a24&gt;</ept> m_pos;
};

<bpt i="25" x="25">&lt;s25&gt;</bpt>// 上記のクラスに関連する MY_PLOT_CLICKED イベント型をひとつだけ定義しますが、<ept i="25">&lt;/s25&gt;</ept>
<bpt i="26" x="26">&lt;s26&gt;</bpt>// 通常は複数のイベント型を持つようになるでしょう。例えば、<ept i="26">&lt;/s26&gt;</ept>
<bpt i="27" x="27">&lt;s27&gt;</bpt>// MY_PLOT_ZOOMED や MY_PLOT_PANNED などです。<ept i="27">&lt;/s27&gt;</ept>
<bpt i="28" x="28">&lt;s28&gt;</bpt>// そのような場合はこれと似たような行をここに追加するだけです。<ept i="28">&lt;/s28&gt;</ept>
<bpt i="29" x="29">&lt;a29&gt;</bpt>wxDEFINE_EVENT<ept i="29">&lt;/a29&gt;</ept>(MY_PLOT_CLICKED, MyPlotEvent);


<bpt i="30" x="30">&lt;s30&gt;</bpt>// 古いコンパイラをサポートしたい場合、いくつかの醜いマクロを使用する必要があります:<ept i="30">&lt;/s30&gt;</ept>
<bpt i="31" x="31">&lt;s31&gt;</bpt>typedef<ept i="31">&lt;/s31&gt;</ept> void (<bpt i="32" x="32">&lt;a32&gt;</bpt>wxEvtHandler<ept i="32">&lt;/a32&gt;</ept>::*MyPlotEventFunction)(MyPlotEvent&amp;);
<bpt i="33" x="33">&lt;s33&gt;</bpt>#define MyPlotEventHandler(func) wxEVENT_HANDLER_CAST(MyPlotEventFunction, func)<ept i="33">&lt;/s33&gt;</ept>
<bpt i="34" x="34">&lt;s34&gt;</bpt><ept i="34">&lt;/s34&gt;</ept>
<bpt i="35" x="35">&lt;s35&gt;</bpt>// ほどほどにモダンなコンパイラのみでビルドする場合、<ept i="35">&lt;/s35&gt;</ept>
<bpt i="36" x="36">&lt;s36&gt;</bpt>// 代わりに以下のようにするだけです:<ept i="36">&lt;/s36&gt;</ept>
<bpt i="37" x="37">&lt;s37&gt;</bpt>#define MyPlotEventHandler(func) (&amp;func)<ept i="37">&lt;/s37&gt;</ept>
<bpt i="38" x="38">&lt;s38&gt;</bpt><ept i="38">&lt;/s38&gt;</ept>
<bpt i="39" x="39">&lt;s39&gt;</bpt>// 最後に、新しいイベント型のイベントテーブルエントリを作成するマクロを<ept i="39">&lt;/s39&gt;</ept>
<bpt i="40" x="40">&lt;s40&gt;</bpt>// 定義します<ept i="40">&lt;/s40&gt;</ept>
<bpt i="41" x="41">&lt;s41&gt;</bpt>//<ept i="41">&lt;/s41&gt;</ept>
<bpt i="42" x="42">&lt;s42&gt;</bpt>// Bind&lt;&gt;() のみを使用する場合はこうする必要がまったくないことと、<ept i="42">&lt;/s42&gt;</ept>
<bpt i="43" x="43">&lt;s43&gt;</bpt>// 本当に古いコンパイラを使うのでなければ MyPlotEventHandler(func) の代わりに &amp;func とすることができることを<ept i="43">&lt;/s43&gt;</ept>
<bpt i="44" x="44">&lt;s44&gt;</bpt>// 覚えておいてください<ept i="44">&lt;/s44&gt;</ept>
<bpt i="45" x="45">&lt;s45&gt;</bpt>#define MY_EVT_PLOT_CLICK(id, func) \<ept i="45">&lt;/s45&gt;</ept>
<bpt i="46" x="46">&lt;s46&gt;</bpt>    wx__DECLARE_EVT1(MY_PLOT_CLICKED, id, MyPlotEventHandler(func))<ept i="46">&lt;/s46&gt;</ept>
<bpt i="47" x="47">&lt;s47&gt;</bpt><ept i="47">&lt;/s47&gt;</ept>

<bpt i="48" x="48">&lt;s48&gt;</bpt>// イベント処理のサンプルコード (これらの関数のひとつを使用することになるでしょう。<ept i="48">&lt;/s48&gt;</ept>
<bpt i="49" x="49">&lt;s49&gt;</bpt>// もちろん、両方使うことはありません):<ept i="49">&lt;/s49&gt;</ept>
<bpt i="50" x="50">&lt;a50&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="50">&lt;/a50&gt;</ept>(MyFrame, <bpt i="51" x="51">&lt;a51&gt;</bpt>wxFrame<ept i="51">&lt;/a51&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>event<ept i="23">&lt;/s23&gt;</ept>.SetString(<bpt i="24" x="24">&lt;s24&gt;</bpt>"Hello"<ept i="24">&lt;/s24&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150203Z">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>event<ept i="23">&lt;/s23&gt;</ept>.SetString(<bpt i="24" x="24">&lt;s24&gt;</bpt>"Hello"<ept i="24">&lt;/s24&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="24" x="24">&lt;s24&gt;</bpt>// (without considering the final NULL)<ept i="24">&lt;/s24&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T035629Z">
        <seg><bpt i="24" x="24">&lt;s24&gt;</bpt>// (ただし終端の NULL は除く)<ept i="24">&lt;/s24&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="25" x="25">&lt;s25&gt;</bpt>// Do send it<ept i="25">&lt;/s25&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155533Z">
        <seg><bpt i="25" x="25">&lt;s25&gt;</bpt>// 送信する<ept i="25">&lt;/s25&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="25" x="25">&lt;s25&gt;</bpt>return<ept i="25">&lt;/s25&gt;</ept> <bpt i="26" x="26">&lt;s26&gt;</bpt>new<ept i="26">&lt;/s26&gt;</ept> MyConnection;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152922Z">
        <seg><bpt i="25" x="25">&lt;s25&gt;</bpt>return<ept i="25">&lt;/s25&gt;</ept> <bpt i="26" x="26">&lt;s26&gt;</bpt>new<ept i="26">&lt;/s26&gt;</ept> MyConnection;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="26" x="26">&lt;s26&gt;</bpt>// prints "wxString reports a length of 3 character(s)" on Linux<ept i="26">&lt;/s26&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T035910Z">
        <seg><bpt i="26" x="26">&lt;s26&gt;</bpt>// Linux では "wxString reports a length of 3 character(s)" と表示される<ept i="26">&lt;/s26&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="27" x="27">&lt;s27&gt;</bpt>// prints "wxString reports a length of 3 character(s)" on Windows<ept i="27">&lt;/s27&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T035921Z">
        <seg><bpt i="27" x="27">&lt;s27&gt;</bpt>// Windows では "wxString reports a length of 3 character(s)" と表示される<ept i="27">&lt;/s27&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="27" x="27">&lt;s27&gt;</bpt>return<ept i="27">&lt;/s27&gt;</ept> <bpt i="28" x="28">&lt;s28&gt;</bpt>false<ept i="28">&lt;/s28&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T154452Z">
        <seg><bpt i="27" x="27">&lt;s27&gt;</bpt>return<ept i="27">&lt;/s27&gt;</ept> <bpt i="28" x="28">&lt;s28&gt;</bpt>false<ept i="28">&lt;/s28&gt;</ept>;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// Do something useful.<ept i="2">&lt;/s2&gt;</ept>
}

MyFrameHandler myFrameHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060232Z">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// 何か有用なことを行う。<ept i="2">&lt;/s2&gt;</ept>
}

MyFrameHandler myFrameHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// Do something useful<ept i="2">&lt;/s2&gt;</ept>
}

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060723Z">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// 何か有用なことを行う<ept i="2">&lt;/s2&gt;</ept>
}

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// when the user selects "Exit" from the menu we should close<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T160138Z">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// ユーザがメニューから "Exit" を選択したときには終了する必要がある。<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>if<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;a3&gt;</bpt>Validate<ept i="3">&lt;/a3&gt;</ept>() &amp;&amp; <bpt i="4" x="4">&lt;a4&gt;</bpt>TransferDataFromWindow<ept i="4">&lt;/a4&gt;</ept>() )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153606Z">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>if<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;a3&gt;</bpt>Validate<ept i="3">&lt;/a3&gt;</ept>() &amp;&amp; <bpt i="4" x="4">&lt;a4&gt;</bpt>TransferDataFromWindow<ept i="4">&lt;/a4&gt;</ept>() )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>return<ept i="2">&lt;/s2&gt;</ept> col == Red ?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153110Z">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>return<ept i="2">&lt;/s2&gt;</ept> col == Red ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="32" x="32">&lt;s32&gt;</bpt>//create two buttons that are horizontally unstretchable,<ept i="32">&lt;/s32&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145510Z">
        <seg><bpt i="32" x="32">&lt;s32&gt;</bpt>//ふたつのボタンを作成し、水平方向にはリサイズ不可にして、<ept i="32">&lt;/s32&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="33" x="33">&lt;s33&gt;</bpt>// with an all-around border with a width of 10 and implicit top alignment<ept i="33">&lt;/s33&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145520Z">
        <seg><bpt i="33" x="33">&lt;s33&gt;</bpt>// 太さ 10 のボーダーを全方向に持たせ、暗黙的に上揃えにする<ept i="33">&lt;/s33&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="35" x="35">&lt;s35&gt;</bpt>new<ept i="35">&lt;/s35&gt;</ept> <bpt i="36" x="36">&lt;a36&gt;</bpt>wxButton<ept i="36">&lt;/a36&gt;</ept>( <bpt i="37" x="37">&lt;s37&gt;</bpt>this<ept i="37">&lt;/s37&gt;</ept>, <bpt i="38" x="38">&lt;a38&gt;</bpt>wxID_OK<ept i="38">&lt;/a38&gt;</ept>, <bpt i="39" x="39">&lt;s39&gt;</bpt>"OK"<ept i="39">&lt;/s39&gt;</ept> ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145526Z">
        <seg><bpt i="35" x="35">&lt;s35&gt;</bpt>new<ept i="35">&lt;/s35&gt;</ept> <bpt i="36" x="36">&lt;a36&gt;</bpt>wxButton<ept i="36">&lt;/a36&gt;</ept>( <bpt i="37" x="37">&lt;s37&gt;</bpt>this<ept i="37">&lt;/s37&gt;</ept>, <bpt i="38" x="38">&lt;a38&gt;</bpt>wxID_OK<ept i="38">&lt;/a38&gt;</ept>, <bpt i="39" x="39">&lt;s39&gt;</bpt>"OK"<ept i="39">&lt;/s39&gt;</ept> ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="36" x="36">&lt;s36&gt;</bpt>new<ept i="36">&lt;/s36&gt;</ept> <bpt i="37" x="37">&lt;a37&gt;</bpt>wxButton<ept i="37">&lt;/a37&gt;</ept>( <bpt i="38" x="38">&lt;s38&gt;</bpt>this<ept i="38">&lt;/s38&gt;</ept>, <bpt i="39" x="39">&lt;a39&gt;</bpt>wxID_OK<ept i="39">&lt;/a39&gt;</ept>, <bpt i="40" x="40">&lt;s40&gt;</bpt>"OK"<ept i="40">&lt;/s40&gt;</ept> ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143820Z">
        <seg><bpt i="36" x="36">&lt;s36&gt;</bpt>new<ept i="36">&lt;/s36&gt;</ept> <bpt i="37" x="37">&lt;a37&gt;</bpt>wxButton<ept i="37">&lt;/a37&gt;</ept>( <bpt i="38" x="38">&lt;s38&gt;</bpt>this<ept i="38">&lt;/s38&gt;</ept>, <bpt i="39" x="39">&lt;a39&gt;</bpt>wxID_OK<ept i="39">&lt;/a39&gt;</ept>, <bpt i="40" x="40">&lt;s40&gt;</bpt>"OK"<ept i="40">&lt;/s40&gt;</ept> ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>"R"<ept i="3">&lt;/s3&gt;</ept> : col == Green ?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153111Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>"R"<ept i="3">&lt;/s3&gt;</ept> : col == Green ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// Do something useful<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060825Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// 何か有用なことを行う<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// Do something useful<ept i="3">&lt;/s3&gt;</ept>
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060951Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// 何か有用なことを行う<ept i="3">&lt;/s3&gt;</ept>
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// copy the data<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135340Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// データをコピーする<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// in UTF8 the character U+00E0 is encoded as 0xC3A0<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082644Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// UTF-8 では U+00E0 は 0xC3A0 と符号化される<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>if<ept i="3">&lt;/s3&gt;</ept> ( !file.<bpt i="4" x="4">&lt;a4&gt;</bpt>Open<ept i="4">&lt;/a4&gt;</ept>(<bpt i="5" x="5">&lt;s5&gt;</bpt>"bar"<ept i="5">&lt;/s5&gt;</ept>) )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113231Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>if<ept i="3">&lt;/s3&gt;</ept> ( !file.<bpt i="4" x="4">&lt;a4&gt;</bpt>Open<ept i="4">&lt;/a4&gt;</ept>(<bpt i="5" x="5">&lt;s5&gt;</bpt>"bar"<ept i="5">&lt;/s5&gt;</ept>) )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>if<ept i="3">&lt;/s3&gt;</ept> (<bpt i="4" x="4">&lt;a4&gt;</bpt>wxFontMapper::Get<ept i="4">&lt;/a4&gt;</ept>()-&gt;GetAltForEncoding(enc, &amp;alternative,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143520Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>if<ept i="3">&lt;/s3&gt;</ept> (<bpt i="4" x="4">&lt;a4&gt;</bpt>wxFontMapper::Get<ept i="4">&lt;/a4&gt;</ept>()-&gt;GetAltForEncoding(enc, &amp;alternative,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>this<ept i="3">&lt;/s3&gt;</ept>, -1, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxT<ept i="4">&lt;/a4&gt;</ept>(<bpt i="5" x="5">&lt;s5&gt;</bpt>""<ept i="5">&lt;/s5&gt;</ept>), <bpt i="6" x="6">&lt;a6&gt;</bpt>wxDefaultPosition<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxDefaultSize<ept i="7">&lt;/a7&gt;</ept>, 0,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150537Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>this<ept i="3">&lt;/s3&gt;</ept>, -1, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxT<ept i="4">&lt;/a4&gt;</ept>(<bpt i="5" x="5">&lt;s5&gt;</bpt>""<ept i="5">&lt;/s5&gt;</ept>), <bpt i="6" x="6">&lt;a6&gt;</bpt>wxDefaultPosition<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxDefaultSize<ept i="7">&lt;/a7&gt;</ept>, 0,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>void<ept i="3">&lt;/s3&gt;</ept> OpenLogFile(<bpt i="4" x="4">&lt;s4&gt;</bpt>const<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> *filename);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142516Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>void<ept i="3">&lt;/s3&gt;</ept> OpenLogFile(<bpt i="4" x="4">&lt;s4&gt;</bpt>const<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> *filename);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="43" x="43">&lt;s43&gt;</bpt>new<ept i="43">&lt;/s43&gt;</ept> <bpt i="44" x="44">&lt;a44&gt;</bpt>wxButton<ept i="44">&lt;/a44&gt;</ept>( <bpt i="45" x="45">&lt;s45&gt;</bpt>this<ept i="45">&lt;/s45&gt;</ept>, <bpt i="46" x="46">&lt;a46&gt;</bpt>wxID_CANCEL<ept i="46">&lt;/a46&gt;</ept>, <bpt i="47" x="47">&lt;s47&gt;</bpt>"Cancel"<ept i="47">&lt;/s47&gt;</ept> ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145535Z">
        <seg><bpt i="43" x="43">&lt;s43&gt;</bpt>new<ept i="43">&lt;/s43&gt;</ept> <bpt i="44" x="44">&lt;a44&gt;</bpt>wxButton<ept i="44">&lt;/a44&gt;</ept>( <bpt i="45" x="45">&lt;s45&gt;</bpt>this<ept i="45">&lt;/s45&gt;</ept>, <bpt i="46" x="46">&lt;a46&gt;</bpt>wxID_CANCEL<ept i="46">&lt;/a46&gt;</ept>, <bpt i="47" x="47">&lt;s47&gt;</bpt>"Cancel"<ept i="47">&lt;/s47&gt;</ept> ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="46" x="46">&lt;s46&gt;</bpt>new<ept i="46">&lt;/s46&gt;</ept> <bpt i="47" x="47">&lt;a47&gt;</bpt>wxButton<ept i="47">&lt;/a47&gt;</ept>( <bpt i="48" x="48">&lt;s48&gt;</bpt>this<ept i="48">&lt;/s48&gt;</ept>, <bpt i="49" x="49">&lt;a49&gt;</bpt>wxID_CANCEL<ept i="49">&lt;/a49&gt;</ept>, <bpt i="50" x="50">&lt;s50&gt;</bpt>"Cancel"<ept i="50">&lt;/s50&gt;</ept> ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143855Z">
        <seg><bpt i="46" x="46">&lt;s46&gt;</bpt>new<ept i="46">&lt;/s46&gt;</ept> <bpt i="47" x="47">&lt;a47&gt;</bpt>wxButton<ept i="47">&lt;/a47&gt;</ept>( <bpt i="48" x="48">&lt;s48&gt;</bpt>this<ept i="48">&lt;/s48&gt;</ept>, <bpt i="49" x="49">&lt;a49&gt;</bpt>wxID_CANCEL<ept i="49">&lt;/a49&gt;</ept>, <bpt i="50" x="50">&lt;s50&gt;</bpt>"Cancel"<ept i="50">&lt;/s50&gt;</ept> ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>"G"<ept i="4">&lt;/s4&gt;</ept> : <bpt i="5" x="5">&lt;s5&gt;</bpt>"B"<ept i="5">&lt;/s5&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153112Z">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>"G"<ept i="4">&lt;/s4&gt;</ept> : <bpt i="5" x="5">&lt;s5&gt;</bpt>"B"<ept i="5">&lt;/s5&gt;</ept>;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>// Do something useful<ept i="4">&lt;/s4&gt;</ept>
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061205Z">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>// 何か有用なことを行う<ept i="4">&lt;/s4&gt;</ept>
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>// U+10300 is "OLD ITALIC LETTER A" and is part of Unicode Plane 1<ept i="4">&lt;/s4&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T125819Z">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>// U+10300 は "OLD ITALIC LETTER A" で、Unicode Plane 1 の一部である<ept i="4">&lt;/s4&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>break<ept i="4">&lt;/s4&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T144141Z">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>break<ept i="4">&lt;/s4&gt;</ept>;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>const<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFilterClassFactory<ept i="5">&lt;/a5&gt;</ept> *fcf;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T013317Z">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>const<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFilterClassFactory<ept i="5">&lt;/a5&gt;</ept> *fcf;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>virtual<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;s5&gt;</bpt>bool<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>OnInit<ept i="6">&lt;/a6&gt;</ept>();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152657Z">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>virtual<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;s5&gt;</bpt>bool<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>OnInit<ept i="6">&lt;/a6&gt;</ept>();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="50" x="50">&lt;s50&gt;</bpt>//create a sizer with no border and centered horizontally<ept i="50">&lt;/s50&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145549Z">
        <seg><bpt i="50" x="50">&lt;s50&gt;</bpt>//サイザーを作成し、ボーダーなしで水平方向に中央揃えにする<ept i="50">&lt;/s50&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>// Oh oh, something bad happens.<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141409Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>// おっと、何か良くないことが起こった。<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>// but enable tracing for the transactions as somehow our changes don't<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110833Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>// しかし、どういうわけか時たま変更のコミットに失敗するため、<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>// in UTF8 it's encoded as 0xF0 0x90 0x8C 0x80<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034208Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>// UTF8 では 0xF0 0x90 0x8C 0x80 として符号化される<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>case<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>wxDragMove<ept i="6">&lt;/a6&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135323Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>case<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>wxDragMove<ept i="6">&lt;/a6&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>if<ept i="5">&lt;/s5&gt;</ept> ( <bpt i="6" x="6">&lt;a6&gt;</bpt>IsModal<ept i="6">&lt;/a6&gt;</ept>() )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153608Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>if<ept i="5">&lt;/s5&gt;</ept> ( <bpt i="6" x="6">&lt;a6&gt;</bpt>IsModal<ept i="6">&lt;/a6&gt;</ept>() )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>int<ept i="5">&lt;/s5&gt;</ept> m_whatever;

<bpt i="6" x="6">&lt;s6&gt;</bpt>private<ept i="6">&lt;/s6&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015445Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>int<ept i="5">&lt;/s5&gt;</ept> m_whatever;

<bpt i="6" x="6">&lt;s6&gt;</bpt>private<ept i="6">&lt;/s6&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> ch = *i</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151627Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> ch = *i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> ch = s[i];</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151504Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> ch = s[i];</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="60" x="60">&lt;s60&gt;</bpt>// accordingly and prevent it from being resized<ept i="60">&lt;/s60&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144931Z">
        <seg><bpt i="60" x="60">&lt;s60&gt;</bpt>// ウィンドウのサイズを調整し、<ept i="60">&lt;/s60&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="60" x="60">&lt;s60&gt;</bpt>event<ept i="60">&lt;/s60&gt;</ept>.SetEventObject(<bpt i="61" x="61">&lt;s61&gt;</bpt>this<ept i="61">&lt;/s61&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151359Z">
        <seg><bpt i="60" x="60">&lt;s60&gt;</bpt>event<ept i="60">&lt;/s60&gt;</ept>.SetEventObject(<bpt i="61" x="61">&lt;s61&gt;</bpt>this<ept i="61">&lt;/s61&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="61" x="61">&lt;s61&gt;</bpt>// to smaller size<ept i="61">&lt;/s61&gt;</ept>
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145001Z">
        <seg><bpt i="61" x="61">&lt;s61&gt;</bpt>// より小さくリサイズされないようにする<ept i="61">&lt;/s61&gt;</ept>
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// ... process error ourselves ...<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114638Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// ... 自分自身でエラー処理を行なう ...<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// For a complete list, look into the documentation at wxStreamBase.<ept i="6">&lt;/s6&gt;</ept>
}

<bpt i="7" x="7">&lt;s7&gt;</bpt>// You can also inline all like this.<ept i="7">&lt;/s7&gt;</ept>
<bpt i="8" x="8">&lt;s8&gt;</bpt>if<ept i="8">&lt;/s8&gt;</ept> (in_stream.Read(data, nb_datas).LastError() != wxSTREAM_NOERROR) {</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141435Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// 完全な一覧は wxStreamBase のドキュメントを参照のこと。<ept i="6">&lt;/s6&gt;</ept>
}

<bpt i="7" x="7">&lt;s7&gt;</bpt>// このようにインラインにすることもできる。<ept i="7">&lt;/s7&gt;</ept>
<bpt i="8" x="8">&lt;s8&gt;</bpt>if<ept i="8">&lt;/s8&gt;</ept> (in_stream.Read(data, nb_datas).LastError() != wxSTREAM_NOERROR) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// do something with it<ept i="6">&lt;/s6&gt;</ept>
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035106Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// なんらかの処理<ept i="6">&lt;/s6&gt;</ept>
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// get committed sometimes<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110838Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// トランザクションのトレースは有効化する<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// it's a single Unicode code-point encoded as:<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034421Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// これは単一の Unicode コードポイントとして次のように符号化される:<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>bool<ept i="6">&lt;/s6&gt;</ept> <bpt i="7" x="7">&lt;a7&gt;</bpt>wxFromString<ept i="7">&lt;/a7&gt;</ept>(<bpt i="8" x="8">&lt;s8&gt;</bpt>const<ept i="8">&lt;/s8&gt;</ept> <bpt i="9" x="9">&lt;a9&gt;</bpt>wxString<ept i="9">&lt;/a9&gt;</ept>&amp; s, Colour* col)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153113Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>bool<ept i="6">&lt;/s6&gt;</ept> <bpt i="7" x="7">&lt;a7&gt;</bpt>wxFromString<ept i="7">&lt;/a7&gt;</ept>(<bpt i="8" x="8">&lt;s8&gt;</bpt>const<ept i="8">&lt;/s8&gt;</ept> <bpt i="9" x="9">&lt;a9&gt;</bpt>wxString<ept i="9">&lt;/a9&gt;</ept>&amp; s, Colour* col)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>wchar_t<ept i="6">&lt;/s6&gt;</ept> ch = *i</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T153029Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>wchar_t<ept i="6">&lt;/s6&gt;</ept> ch = *i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// - a UTF16 surrogate pair under Windows<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034446Z">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// - Windows では UTF16 サロゲートペア<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// Notice that as the event handlers normally are not called from outside<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015529Z">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// 通常、イベントハンドラはクラス外から呼ばれることはないため、<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// do something with it<ept i="7">&lt;/s7&gt;</ept>
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T153059Z">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// これを使って何かする<ept i="7">&lt;/s7&gt;</ept>
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// move the data<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135332Z">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// データを移動する<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>bool<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>OnAdvise<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;s9&gt;</bpt>const<ept i="9">&lt;/s9&gt;</ept> <bpt i="10" x="10">&lt;a10&gt;</bpt>wxString<ept i="10">&lt;/a10&gt;</ept>&amp; topic, <bpt i="11" x="11">&lt;s11&gt;</bpt>const<ept i="11">&lt;/s11&gt;</ept> <bpt i="12" x="12">&lt;a12&gt;</bpt>wxString<ept i="12">&lt;/a12&gt;</ept>&amp; item, <bpt i="13" x="13">&lt;s13&gt;</bpt>char<ept i="13">&lt;/s13&gt;</ept> *data,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152914Z">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>bool<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>OnAdvise<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;s9&gt;</bpt>const<ept i="9">&lt;/s9&gt;</ept> <bpt i="10" x="10">&lt;a10&gt;</bpt>wxString<ept i="10">&lt;/a10&gt;</ept>&amp; topic, <bpt i="11" x="11">&lt;s11&gt;</bpt>const<ept i="11">&lt;/s11&gt;</ept> <bpt i="12" x="12">&lt;a12&gt;</bpt>wxString<ept i="12">&lt;/a12&gt;</ept>&amp; item, <bpt i="13" x="13">&lt;s13&gt;</bpt>char<ept i="13">&lt;/s13&gt;</ept> *data,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>for<ept i="7">&lt;/s7&gt;</ept> ( i = original.<bpt i="8" x="8">&lt;a8&gt;</bpt>begin<ept i="8">&lt;/a8&gt;</ept>(); i != original.<bpt i="9" x="9">&lt;a9&gt;</bpt>end<ept i="9">&lt;/a9&gt;</ept>(); ++i )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121154Z">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>for<ept i="7">&lt;/s7&gt;</ept> ( i = original.<bpt i="8" x="8">&lt;a8&gt;</bpt>begin<ept i="8">&lt;/a8&gt;</ept>(); i != original.<bpt i="9" x="9">&lt;a9&gt;</bpt>end<ept i="9">&lt;/a9&gt;</ept>(); ++i )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;s8&gt;</bpt>// - a UTF8 multiple-bytes sequence under Linux<ept i="8">&lt;/s8&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034502Z">
        <seg><bpt i="8" x="8">&lt;s8&gt;</bpt>// - Linux では UTF8 マルチバイトシーケンス<ept i="8">&lt;/s8&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;s8&gt;</bpt>// otherwise wxYES or wxOK button will be default<ept i="8">&lt;/s8&gt;</ept>

<bpt i="9" x="9">&lt;a9&gt;</bpt>wxOK<ept i="9">&lt;/a9&gt;</ept>     <bpt i="10" x="10">&lt;s10&gt;</bpt>// return wxID_OK<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCANCEL<ept i="11">&lt;/a11&gt;</ept> <bpt i="12" x="12">&lt;s12&gt;</bpt>// return wxID_CANCEL<ept i="12">&lt;/s12&gt;</ept>
<bpt i="13" x="13">&lt;a13&gt;</bpt>wxHELP<ept i="13">&lt;/a13&gt;</ept>   <bpt i="14" x="14">&lt;s14&gt;</bpt>// return wxID_HELP<ept i="14">&lt;/s14&gt;</ept>

<bpt i="15" x="15">&lt;a15&gt;</bpt>wxFORWARD<ept i="15">&lt;/a15&gt;</ept>   <bpt i="16" x="16">&lt;s16&gt;</bpt>// return wxID_FORWARD<ept i="16">&lt;/s16&gt;</ept>
<bpt i="17" x="17">&lt;a17&gt;</bpt>wxBACKWARD<ept i="17">&lt;/a17&gt;</ept>  <bpt i="18" x="18">&lt;s18&gt;</bpt>// return wxID_BACKWARD<ept i="18">&lt;/s18&gt;</ept>
<bpt i="19" x="19">&lt;a19&gt;</bpt>wxSETUP<ept i="19">&lt;/a19&gt;</ept>     <bpt i="20" x="20">&lt;s20&gt;</bpt>// return wxID_SETUP<ept i="20">&lt;/s20&gt;</ept>
<bpt i="21" x="21">&lt;a21&gt;</bpt>wxMORE<ept i="21">&lt;/a21&gt;</ept>      <bpt i="22" x="22">&lt;s22&gt;</bpt>// return wxID_MORE<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T150353Z">
        <seg><bpt i="8" x="8">&lt;s8&gt;</bpt>// これを指定しない場合、wxYES ボタンか wxOK ボタンがデフォルトになります<ept i="8">&lt;/s8&gt;</ept>

<bpt i="9" x="9">&lt;a9&gt;</bpt>wxOK<ept i="9">&lt;/a9&gt;</ept>     <bpt i="10" x="10">&lt;s10&gt;</bpt>// wxID_OK を返却します<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCANCEL<ept i="11">&lt;/a11&gt;</ept> <bpt i="12" x="12">&lt;s12&gt;</bpt>// wxID_CANCEL を返却します<ept i="12">&lt;/s12&gt;</ept>
<bpt i="13" x="13">&lt;a13&gt;</bpt>wxHELP<ept i="13">&lt;/a13&gt;</ept>   <bpt i="14" x="14">&lt;s14&gt;</bpt>// wxID_HELP を返却します<ept i="14">&lt;/s14&gt;</ept>

<bpt i="15" x="15">&lt;a15&gt;</bpt>wxFORWARD<ept i="15">&lt;/a15&gt;</ept>   <bpt i="16" x="16">&lt;s16&gt;</bpt>// wxID_FORWARD を返却します<ept i="16">&lt;/s16&gt;</ept>
<bpt i="17" x="17">&lt;a17&gt;</bpt>wxBACKWARD<ept i="17">&lt;/a17&gt;</ept>  <bpt i="18" x="18">&lt;s18&gt;</bpt>// wxID_BACKWARD を返却します<ept i="18">&lt;/s18&gt;</ept>
<bpt i="19" x="19">&lt;a19&gt;</bpt>wxSETUP<ept i="19">&lt;/a19&gt;</ept>     <bpt i="20" x="20">&lt;s20&gt;</bpt>// wxID_SETUP を返却します<ept i="20">&lt;/s20&gt;</ept>
<bpt i="21" x="21">&lt;a21&gt;</bpt>wxMORE<ept i="21">&lt;/a21&gt;</ept>      <bpt i="22" x="22">&lt;s22&gt;</bpt>// wxID_MORE を返却します<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><it pos="begin" x="8">&lt;s8&gt;</it>// the class, they normally are private.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015549Z">
        <seg><it pos="begin" x="8">&lt;s8&gt;</it>// 普通は private にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;s8&gt;</bpt>break<ept i="8">&lt;/s8&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T144144Z">
        <seg><bpt i="8" x="8">&lt;s8&gt;</bpt>break<ept i="8">&lt;/s8&gt;</ept>;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>// (without considering the final NULL)<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034537Z">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>// (ただし終端の NULL は除く)<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>// Do something.<ept i="9">&lt;/s9&gt;</ept>
}

<bpt i="10" x="10">&lt;s10&gt;</bpt>// You can also get the last number of bytes REALLY put into the buffer.<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;s11&gt;</bpt>size_t<ept i="11">&lt;/s11&gt;</ept> really_read = in_stream.LastRead();

<it pos="begin" x="12">&lt;s12&gt;</it>// Ok, moves to the beginning of the stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141513Z">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>// 処理を行なう。<ept i="9">&lt;/s9&gt;</ept>
}

<bpt i="10" x="10">&lt;s10&gt;</bpt>// また、バッファへ実際に書き込んだバイト数を取得することもできる。<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;s11&gt;</bpt>size_t<ept i="11">&lt;/s11&gt;</ept> really_read = in_stream.LastRead();

<it pos="begin" x="12">&lt;s12&gt;</it>// Ok、ストリームの先頭へ移動する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>// to be public.<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015621Z">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>// する必要はありません。<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>default<ept i="9">&lt;/s9&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135346Z">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>default<ept i="9">&lt;/s9&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>delete<ept i="9">&lt;/s9&gt;</ept> m_helpCtrl;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124605Z">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>delete<ept i="9">&lt;/s9&gt;</ept> m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>else<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153611Z">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>else<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>return<ept i="9">&lt;/s9&gt;</ept> output;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113916Z">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>return<ept i="9">&lt;/s9&gt;</ept> output;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&lt;wx/sizer.h&gt;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145850Z">
        <seg>&lt;wx/sizer.h&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient<ept i="0">&lt;/a0&gt;</ept> object initiates the client part of a client-server DDE-like (Dynamic Data Exchange) conversation (available in both Windows and Unix).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150436Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient<ept i="0">&lt;/a0&gt;</ept> オブジェクトは DDE 風 (Dynamic Data Exchange) 通信のクライアント・サーバ通信のクライアント部分を初期化します。(Windows と Unix の両方で利用可能です)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDC<ept i="0">&lt;/a0&gt;</ept> is a <bpt i="1" x="1">&lt;e1&gt;</bpt>device<ept i="1">&lt;/e1&gt;</ept> context onto which graphics and text can be drawn.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154211Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDC<ept i="0">&lt;/a0&gt;</ept> は図形やテキストを描画可能な <bpt i="1" x="1">&lt;e1&gt;</bpt>デバイスコンテキスト<ept i="1">&lt;/e1&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>glyph<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> is a particular image (usually part of a font) that represents a character or part of a character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031637Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>グリフ<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> とは、文字、あるいは文字の一部を表現する特定のイメージです。 (通常はフォントの一部です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>EVT_LEAVE_WINDOW(MyFrame::OnMouseLeave)<ept i="0">&lt;/c0&gt;</ept> line in the frame event table has no effect as mouse move (including entering and leaving) events are not propagated up to the parent window (at least not by default).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T025639Z">
        <seg>フレームのイベントテーブル内に <bpt i="0" x="0">&lt;c0&gt;</bpt>EVT_LEAVE_WINDOW(MyFrame::OnMouseLeave)<ept i="0">&lt;/c0&gt;</ept> を書いても効果がありません。なぜなら、マウス移動 (フレームへの出入りも含みます) イベントは (少なくともデフォルトでは) 親ウィンドウへ伝播しないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A better solution is to write programs in such way that they may be compiled either in ANSI (traditional) mode or in the Unicode one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150238Z">
        <seg>より良い解決策としては、(従来の) ANSI モードと Unicode モードのどちらでもコンパイルできるようにプログラムを書くことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A bitmap created dynamically or loaded from a file can be selected into a memory device context (instance of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMemoryDC<ept i="0">&lt;/a0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T135209Z">
        <seg>動的に作成した、またはファイルから読み込んだビットマップはメモリデバイスコンテキスト (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxMemoryDC<ept i="0">&lt;/a0&gt;</ept> のインスタンス) で選択可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A book control is a convenient way of displaying multiple pages of information, displayed one page at...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T150935Z">
        <seg>ブックコントロールは複数のページを持つ情報を表示する際に、一度にひとつのページを表示する便利な手段です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A button is a control that contains a text string, and is one of the most common elements of a GUI...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153555Z">
        <seg>ボタンはテキストを含んだコントロールであり、もっとも一般的な GUI 要素のひとつです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class that can handle events from the windowing system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T151312Z">
        <seg>ウィンドウから送信されるベントを処理可能なクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A close window or end session event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055212Z">
        <seg>ウィンドウの終了、またはセッションの終了イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A common example of a functor is boost::function&lt;&gt;:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060913Z">
        <seg>ファンクタの一般的な例は boost::function&lt;&gt; です:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A common example of such problem arises with <bpt i="0" x="0">&lt;c0&gt;</bpt>std::fstream<ept i="0">&lt;/c0&gt;</ept> class constructor in Microsoft Visual C++ standard library implementation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142847Z">
        <seg>この問題の一般的な例は Microsoft Visual C++  標準ライブラリにおける <bpt i="0" x="0">&lt;c0&gt;</bpt>std::fstream<ept i="0">&lt;/c0&gt;</ept> クラスのコンストラクタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A critical section object is used for exactly the same purpose as a wxMutex.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150738Z">
        <seg>クリティカルセクションは wxMutex とまったく同じ目的で使用されるオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A cursor is a small bitmap usually used for denoting where the mouse pointer is, with a picture that ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T153806Z">
        <seg>カーソルは小さな矩形のビットマップで、マウスポインタの位置を表すためにマウスクリックを示す画像付きでよく使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A data string is a fourth element of some messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T150556Z">
        <seg>いくつかのメッセージではデータ文字列が 4 番目の要素になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dialog box is a window with a title bar and sometimes a system menu, which can be moved around the ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142222Z">
        <seg>ダイアログボックスはタイトルバーと、たまにシステムメニューを持つ、移動可能なウィンドウです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dialog box is similar to a panel, in that it is a window which can be used for placing controls, with the following exceptions:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T145610Z">
        <seg>ダイアログボックスはパネルに似ており、コントロールを配置するために使用するウィンドウですが、以下の例外があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dialog initialisation event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055253Z">
        <seg>ダイアログの初期化イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A few years ago, a solution was proposed: the Unicode standard.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152809Z">
        <seg>数年前にひとつの解決策が提案されました: それが Unicode 規格です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A filter stream has the capability of a normal stream but it can be placed on top of another stream...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130952Z">
        <seg>フィルタストリームは通常のストリームと同じ機能を持っていますが、他のストリームの上に配置することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A flex grid sizer is a sizer which lays out its children in a two-dimensional table with all table fi...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140306Z">
        <seg>可変グリッドサイザーは子コントロールを 2 次元の表にレイアウトするサイザーです。同じ行中のセルは同じ高さを持ち、同じ列中のセルは同じ幅を持ちますが、すべての行と列が wxGridSizer のように同じ高さや幅を持つ必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A frame is a window whose size and position can (usually) be changed by the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T010152Z">
        <seg>フレームは (通常は) ユーザがサイズや位置を変更可能なウィンドウです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A grid sizer is a sizer which lays out its children in a two-dimensional table with all table fields ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135807Z">
        <seg>グリッドサイザーは子コントロールを 2 次元の表にレイアウトするサイザーで、表中のセルはすべて同じ大きさを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A handler method in another object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T000029Z">
        <seg>別のオブジェクトのハンドラ関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A joystick event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055300Z">
        <seg>ジョイスティックイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A keypress event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055239Z">
        <seg>キー押下イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A large number of systems out there still depends on the old 8-bit encodings, hampered by the huge amounts of legacy code still widely deployed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T153415Z">
        <seg>いまだに多くのシステムは旧来の 8 ビットエンコーディングに依存しており、膨大なレガシーコードがいまだに使用されていることがネックになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A macro, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxICON()<ept i="0">&lt;/a0&gt;</ept>, is available which creates an icon using an XPM on the appropriate platform, or an icon resource on Windows:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154640Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxICON()<ept i="0">&lt;/a0&gt;</ept> マクロを使用すると、適切なプラットフォームでは XPM を、Windows ではアイコンリソースを利用してアイコンを作成することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A macro, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxICON<ept i="0">&lt;/a0&gt;</ept>, is available which creates an icon using an XPM on the appropriate platform, or an icon resource on Windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T140323Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxICON<ept i="0">&lt;/a0&gt;</ept> マクロを使用すると、適切なプラットフォームでは XPM を、Windows ではアイコンリソースを利用してアイコンを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A memory device context provides a means to draw graphics onto a bitmap.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T145713Z">
        <seg>メモリデバイスコンテキストはビットマップ上に描画するための方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A menu event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055304Z">
        <seg>メニューイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A method in another object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T042153Z">
        <seg>別のオブジェクトの関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mouse event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055312Z">
        <seg>マウスイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A move event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055320Z">
        <seg>移動イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mutex object is a synchronization object whose state is set to signaled when it is not owned by any...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150710Z">
        <seg>ミューテックスオブジェクトは同期オブジェクトであり、いずれかのスレッドからも所有されていない場合はシグナル状態に、いずれかのスレッドで所有されている場合は非シグナル状態になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A paint event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055325Z">
        <seg>描画イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A paint event is sent when a window's contents needs to be repainted.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154007Z">
        <seg>ペイントイベントはウィンドウのコンテンツを再描画する必要があるときに送信されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A predefined drop target for dealing with text data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T133822Z">
        <seg>テキストデータに特化した、定義済みのドロップ先。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A printer device context is specific to MSW and Mac, and allows access to any printer with a Windows ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150032Z">
        <seg>プリンタデバイスコンテキストは MSW と Mac に特有のデバイスコンテキストで、Windows や Macintosh のドライバを使用してプリンタへアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A programmer creating a new validator class should provide the following functionality.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143837Z">
        <seg>新しいバリデータクラスを作成する場合、次の機能を提供する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range of commonly-used control events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080921Z">
        <seg>よく使われる一連のコントロールイベント。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A scroll event sent by a scrolled window (not a scroll bar)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055533Z">
        <seg>(スクロールバーではなく) スクロール可能なウィンドウから送信されるスクロールイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A size event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055500Z">
        <seg>リサイズイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A size event holds information about size change events of wxWindow.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015436Z">
        <seg>リサイズイベントは wxWindow のサイズ変更イベントに関する情報を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A smart SetSize that will fill in default size components with the window's best size values...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T154525Z">
        <seg>デフォルトサイズをウィンドウの最適サイズの値で補う、賢い SetSize。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A special version of wxLogChain which uses itself as the new log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130639Z">
        <seg>wxLogChain の特別版で、自分自身を新しいログターゲットとして使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A standard .po file begins with a header like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T122931Z">
        <seg>標準の .po ファイルはこのようなヘッダで始まります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A static function enabling or disabling layout adaptation for all dialogs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T144348Z">
        <seg>すべてのダイアログに対してレイアウトの適応を有効化・無効化する静的関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A static function for setting the current layout adapter object, returning the old adapter...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T153419Z">
        <seg>現在のレイアウトアダプタオブジェクトを設定し、古いアダプタを返却する静的関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A surrounding frame is implicitly created.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T145647Z">
        <seg>周囲を囲むフレームが暗黙的に作成される。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A system colour change event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055543Z">
        <seg>システムカラーの変更イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A text control allows text to be displayed and edited.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160411Z">
        <seg>テキストの表示と編集が可能なテキストコントロール。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A thread is basically a path of execution through a program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150240Z">
        <seg>スレッドはプログラム内の基本的な実行パスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A tree control presents information as a hierarchy, with items that may be expanded to show further i...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T032633Z">
        <seg>ツリーコントロールでは情報を (項目を展開すると追加の項目が現れる) 階層として表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A tree event holds information about events associated with wxTreeCtrl objects.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T032350Z">
        <seg>ツリーイベントは wxTreeCtrl オブジェクトに関連するイベントの情報を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A validator constructor is responsible for allowing the programmer to specify the kind of validation required, and perhaps a pointer to a C++ variable that is used for storing the data for the control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T145038Z">
        <seg>バリデータのコンストラクタでは必要な検証の種類をプログラマが指定できるようにしてください。また、コントロールの値を格納する C++ 変数のポインタもおそらく受け取る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A validator is an object that can be plugged into a control (such as a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept>), and mediates between C++ data and the control, transferring the data in either direction and validating it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150500Z">
        <seg>バリデータは (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept> などの) コントロールに接続可能なオブジェクトで、C++ のデータとコントロールとを仲介 (双方向のデータ転送と検証) します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A validator is an object that can be plugged into a control (such as a wxTextCtrl), and mediates between C++ data and the control, transferring the data in either direction and validating it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T142716Z">
        <seg>バリデータは (wxTextCtrl などの) コントロールに接続可能なオブジェクトで、C++ のデータとコントロールとを仲介 (双方向のデータ転送と検証) します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value of more than zero is interpreted in relation to the sum of all stretch factors in the children of the respective sizer, i.e. if two children get a stretch factor of 1, they will get half the extra space each <bpt i="1" x="1">&lt;e1&gt;</bpt>independent of whether one control has a minimal sizer inferior to the other or not<ept i="1">&lt;/e1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141308Z">
        <seg>0 より大きい値はサイザー内の子コントロールに設定されたすべてのストレッチ係数の合計に基づいて解釈されます。つまり、ふたつの子コントロールのストレッチ係数に 1 を指定した場合、<bpt i="1" x="1">&lt;e1&gt;</bpt>一方のコントロールの最小サイズがもう一方より小さいかどうかによらず<ept i="1">&lt;/e1&gt;</ept> 、余剰スペースは二等分されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value of more than zero is interpreted in relation to the sum of all stretch factors in the children of the respective sizer, i.e. if two children get a stretch factor of 1, they will get half the extra space each <bpt i="1" x="1">&lt;i1&gt;</bpt>independent of whether one control has a minimal sizer inferior to the other or not<ept i="1">&lt;/i1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T123716Z">
        <seg>0 より大きい値はサイザー内の子コントロールに設定されたすべてのストレッチ係数の合計に基づいて解釈されます。つまり、ふたつの子コントロールのストレッチ係数に 1 を指定した場合、<bpt i="1" x="1">&lt;i1&gt;</bpt>一方のコントロールの最小サイズがもう一方より小さいかどうかによらず<ept i="1">&lt;/i1&gt;</ept> 、余剰スペースは二等分されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value uniquely identifying the type of the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150339Z">
        <seg>イベントの型を一意に識別する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A variable, wxConvCurrent, points to the conversion object that the user interface is supposed to use, in the case that the user interface is not Unicode-based (like with GTK+ 1.2).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130716T160903Z">
        <seg>wxConvCurrent 変数は (GTK+ 1.2 のように) ユーザインタフェースが Unicode ベースでない場合に、ユーザインタフェースで使用する変換オブジェクトを指しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A window focus event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055231Z">
        <seg>ウィンドウフォーカスイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A window or application activation event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055130Z">
        <seg>ウィンドウまたはアプリケーションのアクティブ化イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxClient object initiates the client part of a client-server DDE-like (Dynamic Data Exchange) conversation (available in both Windows and Unix).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151425Z">
        <seg>wxClient オブジェクトは DDE 風 (Dynamic Data Exchange) 通信のクライアント・サーバ通信のクライアント部分を初期化します。(Windows と Unix の両方で利用可能です)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxClient object represents the client part of a client-server DDE-like (Dynamic Data Exchange) conv...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151551Z">
        <seg>wxClient オブジェクトは DDE 風 (Dynamic Data Exchange) 通信のクライアント部分を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxClientDC must be constructed if an application wishes to paint on the client area of a window fro...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150230Z">
        <seg>wxClientDC は EVT_PAINT() イベントハンドラ以外の場所でクライアントエリアを描画する場合に使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxConnection object represents the connection between a client and a server.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151519Z">
        <seg>wxConnection オブジェクトはクライアント・サーバ間のコネクションを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxDC is a "device context" onto which graphics and text can be drawn.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T144316Z">
        <seg>wxDC は図形やテキストを描画可能なデバイスコンテキストです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxDC is a <bpt i="0" x="0">&lt;i0&gt;</bpt>device context<ept i="0">&lt;/i0&gt;</ept> onto which graphics and text can be drawn.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140552Z">
        <seg>wxDC は図形やテキストを描画可能な <bpt i="0" x="0">&lt;i0&gt;</bpt>デバイスコンテキスト<ept i="0">&lt;/i0&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxDDEServer object represents the server part of a client-server DDE (Dynamic Data Exchange) conver...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T124641Z">
        <seg>wxDDEServer オブジェクトはクライアント・サーバ DDE (Dynamic Data Exchange) 通信のサーバ部分を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxDataFormat is an encapsulation of a platform-specific format handle which is used by the system f...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134515Z">
        <seg>wxDataFormat はクリップボードやドラッグ・アンド・ドロップに関するプラットフォーム独自の処理を隠蔽するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxDataObject represents data that can be copied to or from the clipboard, or dragged and dropped...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T133129Z">
        <seg>wxDataObject はクリップボードから/へコピーしたり、ドラッグやドロップしたりすることが可能なデータを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxFile performs raw file I/O.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T070227Z">
        <seg>wxFile は低レベルファイル入出力を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxMemoryBuffer is a useful data structure for storing arbitrary sized blocks of memory...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T162831Z">
        <seg>wxMemoryBuffer は任意のサイズのメモリブロックを格納するのに役立つデータ構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxPaintDC must be constructed if an application wishes to paint on the client area of a window from...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150348Z">
        <seg>wxClientDC は EVT_PAINT() イベントハンドラ内でクライアントエリアを描画する場合に使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxPoint is a useful data structure for graphics operations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150355Z">
        <seg>wxPoint は図形操作のための有用なデータ構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxScreenDC can be used to paint on the screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150056Z">
        <seg>wxScreenDC はスクリーン上へ描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxServer object represents the server part of a client-server DDE-like (Dynamic Data Exchange) conv...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151338Z">
        <seg>wxServer オブジェクトは DDE 風 (Dynamic Data Exchange) 通信のサーバ部分を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxSize is a useful data structure for graphics operations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034450Z">
        <seg>wxSize は図形操作のための有用なデータ構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxSizer that can lay out items in a virtual grid like a wxFlexGridSizer but in this case explicit p...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140810Z">
        <seg>wxFlexGridSizer のように子コントロールを仮想のグリッドに配置しますが、wxGBPosition を使用してコントロールを明示的に配置することが可能です。また、wxGBSpan を使用することで、複数の行または列にまたがってコントロールを配置することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxTCPServer object represents the server part of a client-server conversation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T124728Z">
        <seg>wxTCPServer はクライアント・サーバ通信のサーバ部分を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxWidgets application automatically exits when the last top level window (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxFrame<ept i="0">&lt;/a0&gt;</ept> or <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog<ept i="1">&lt;/a1&gt;</ept>), is destroyed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T142403Z">
        <seg>wxWidgets アプリケーションは最後のトップレベルウィンドウ (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxFrame<ept i="0">&lt;/a0&gt;</ept> または <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog<ept i="1">&lt;/a1&gt;</ept>) が破棄されたときに自動的に終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxWidgets application does not have a <bpt i="0" x="0">&lt;e0&gt;</bpt>main<ept i="0">&lt;/e0&gt;</ept> procedure; the equivalent is the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxApp::OnInit<ept i="1">&lt;/a1&gt;</ept> member defined for a class derived from <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T151105Z">
        <seg>wxWidgets アプリケーションは <bpt i="0" x="0">&lt;e0&gt;</bpt>main<ept i="0">&lt;/e0&gt;</ept> 関数を持ちません。それと同等の関数が <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept> を継承したクラスで定義される <bpt i="1" x="1">&lt;a1&gt;</bpt>wxApp::OnInit<ept i="1">&lt;/a1&gt;</ept> メンバ関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxWidgets application does not have a <bpt i="0" x="0">&lt;i0&gt;</bpt>main<ept i="0">&lt;/i0&gt;</ept> procedure; the equivalent is the <bpt i="1" x="1">&lt;a1&gt;</bpt>OnInit<ept i="1">&lt;/a1&gt;</ept> member defined for a class derived from wxApp.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160017Z">
        <seg>wxWidgets アプリケーションは <bpt i="0" x="0">&lt;i0&gt;</bpt>main<ept i="0">&lt;/i0&gt;</ept> 関数を持ちません。それと同等の関数が wxApp を継承したクラスで定義される <bpt i="1" x="1">&lt;a1&gt;</bpt>OnInit<ept i="1">&lt;/a1&gt;</ept> メンバ関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxWindowDC must be constructed if an application wishes to paint on the whole area of a window (cli...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150635Z">
        <seg>wxWindowDC はウィンドウ全体 (クライアントエリアと装飾部分) を描画する場合に使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Able to contain the complete set of characters in use in one unified global coding system, it would resolve the character set problems once and for all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T153121Z">
        <seg>使用されている文字の一式をひとつの統一的な符号化システムに含めることができるため、これは文字コードに関する問題を完全に解決します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Accessing a UTF-8 string by index can be very <bpt i="2" x="2">&lt;b2&gt;</bpt>inefficient<ept i="2">&lt;/b2&gt;</ept> because a single character is represented by a variable number of bytes so that the entire string has to be parsed in order to find the character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T115146Z">
        <seg>インデックスによる UTF-8 文字列へのアクセスは非常に <bpt i="2" x="2">&lt;b2&gt;</bpt>非効率的<ept i="2">&lt;/b2&gt;</ept> です。なぜなら、1 文字が可変バイトで表されるため、該当する文字を見つけるために文字列全体を解析する必要があるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Acknowledgements</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T062043Z">
        <seg>謝辞</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adaptation for <bpt i="0" x="0">&lt;a0&gt;</bpt>wxPropertySheetDialog<ept i="0">&lt;/a0&gt;</ept> is always done by simply making the pages scrollable, since <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::GetContentWindow<ept i="1">&lt;/a1&gt;</ept> returns the dialog's book control and this is handled by the standard layout adapter.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T154359Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxPropertySheetDialog<ept i="0">&lt;/a0&gt;</ept> に対する適応は単純にページをスクロール可能にするだけです。なぜなら、 <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::GetContentWindow<ept i="1">&lt;/a1&gt;</ept> がダイアログのブックコントロールを返却し、このコントロールが標準のレイアウトアダプタで処理されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add the mask to the list of allowed masks for wxLogTrace().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155753Z">
        <seg>wxLogTrace() の許可マスクのリストへマスクを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Additionally, columns and rows can be declared to be stretchable if the sizer is assigned a size different from the one it requested.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T130250Z">
        <seg>加えて、サイザーの必要とするサイズと異なるサイズを指定した場合に、列や行をリサイズ可能にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Additionally, in the case of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> you can build a stack (implemented using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> double-linked list) using <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::PushEventHandler()<ept i="2">&lt;/a2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T152144Z">
        <seg>加えて <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> の場合、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::PushEventHandler()<ept i="2">&lt;/a2&gt;</ept> を使用してスタック (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> の双方向リンクリストで実装されます) を構築することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Additionally, you can customize the way full log messages are constructed from the components (such as time stamp, source file information, logging thread ID and so on).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T123024Z">
        <seg>加えて、ログメッセージを (タイムスタンプ、ソースファイルの情報、スレッドID などの) 部品から構築する方法を完全にカスタマイズすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds a handler to the end of the static list of format handlers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155206Z">
        <seg>形式ハンドラの静的一覧の末尾にハンドラを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds a new page.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155614Z">
        <seg>新しいページを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds an identifier to be regarded as a main button for the non-scrolling area of a dialog...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T153038Z">
        <seg>ダイアログの非スクロール領域にするメインボタンとして扱う識別子を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Advice About Using wxString</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030054Z">
        <seg>wxStringを使用するにあたってのアドバイス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After having enumerated all the functions which are normally used to log the messages, and why would you want to use them we now describe how all this works.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T022130Z">
        <seg>メッセージのロギングに通常使用するすべての関数と、それらを使用する理由について列挙したので、これらの動作方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After having enumerated all the functions which are normally used to log the messages, and why would you want to use them, we now describe how all this works.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111348Z">
        <seg>メッセージのロギングに通常使用するすべての関数と、それらを使用する理由について列挙したので、これらの動作方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Again, the best way to ensure that this problem doesn't arise is to rebuild your code using a compiler which warns about function signature mismatch (you can use <bpt i="4" x="4">&lt;c4&gt;</bpt>-Woverloaded-virtual<ept i="4">&lt;/c4&gt;</ept> g++ option).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T143948Z">
        <seg>繰り返しますが、この問題が発生しないようにする最良の方法は、関数のシグネチャの不一致を警告するコンパイラでリビルドすることです。(これには <bpt i="4" x="4">&lt;c4&gt;</bpt>-Woverloaded-virtual<ept i="4">&lt;/c4&gt;</ept> g++ オプションを使用できます。)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Again, this mostly will be unnoticeable but can result in some problems:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124419Z">
        <seg>これはほとんど目立ちませんが、いくつかの問題を引き起こすことがあります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept> methods</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061029Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept> のすべての関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All children are given the same size, which is the minimal size required by the biggest child, in this case the text control in the left bottom border.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153019Z">
        <seg>子コントロールはすべて同じサイズ (最大の子コントロールの必要とする最小サイズ) が与えられます。この例では左下のテキストコントロールが最大の子コントロールです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All considerations for wxObject-derived <bpt i="0" x="0">&lt;a0&gt;</bpt>reference counted<ept i="0">&lt;/a0&gt;</ept> objects are valid also for wxString, even if it does not derive from wxObject.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T074406Z">
        <seg>wxString は wxObject を継承していませんが、wxObject を継承した <bpt i="0" x="0">&lt;a0&gt;</bpt>参照カウント<ept i="0">&lt;/a0&gt;</ept> オブジェクトと同様のことが wxString にも当てはまります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All formats that are supported by the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142028Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> クラスの対応するすべての形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All of them have the same syntax as <bpt i="2" x="2">&lt;e2&gt;</bpt>printf()<ept i="2">&lt;/e2&gt;</ept> or <bpt i="3" x="3">&lt;e3&gt;</bpt>vprintf()<ept i="3">&lt;/e3&gt;</ept> , i.e. they take the format string as the first argument and respectively a variable number of arguments or a variable argument list pointer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131219Z">
        <seg>これらの関数はすべて <bpt i="2" x="2">&lt;e2&gt;</bpt>printf()<ept i="2">&lt;/e2&gt;</ept> や <bpt i="3" x="3">&lt;e3&gt;</bpt>vprintf()<ept i="3">&lt;/e3&gt;</ept> と同じ構文を持ちます。つまり、第一引数にフォーマット文字列を取り、続けて可変引数か可変引数リストのポインタを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All of them have the same syntax as <bpt i="2" x="2">&lt;i2&gt;</bpt>printf()<ept i="2">&lt;/i2&gt;</ept> or <bpt i="3" x="3">&lt;i3&gt;</bpt>vprintf()<ept i="3">&lt;/i3&gt;</ept> , i.e. they take the format string as the first argument and respectively a variable number of arguments or a variable argument list pointer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005012Z">
        <seg>これらの関数はすべて <bpt i="2" x="2">&lt;i2&gt;</bpt>printf()<ept i="2">&lt;/i2&gt;</ept> や <bpt i="3" x="3">&lt;i3&gt;</bpt>vprintf()<ept i="3">&lt;/i3&gt;</ept> と同じ構文を持ちます。つまり、第一引数にフォーマット文字列を取り、続けて可変引数か可変引数リストのポインタを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All sizers are containers, that is, they are used to lay out one dialog item (or several dialog items), which they contain.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T143422Z">
        <seg>サイザーはすべてコンテナです。つまり、ひとつ (または複数) のダイアログアイテムを内部に配置するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All strings in the catalog are encoded using this charset.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123523Z">
        <seg>カタログ内のすべての文字列はこの文字コードで符号化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All the children apart from standard buttons are reparented onto a new <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScrolledWindow<ept i="0">&lt;/a0&gt;</ept> object, using the old top-level sizer for the scrolled window and creating a new top-level sizer to lay out the scrolled window and standard button sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T152307Z">
        <seg>標準ボタン以外のすべての子コントロールの親は新しい <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScrolledWindow<ept i="0">&lt;/a0&gt;</ept> オブジェクトに変更されます。このとき、以前のトップレベルサイザーはスクロール可能なウィンドウに使用され、スクロール可能なウィンドウと標準ボタンサイザーを配置するために新しいトップレベルサイザーが作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All the details about how to use them may be found in the description of the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfigBase<ept i="0">&lt;/a0&gt;</ept> class and the documentation of the file, registry and INI file based implementations mentions all the features/limitations specific to each one of these versions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T145852Z">
        <seg>使用方法についての詳細は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfigBase<ept i="0">&lt;/a0&gt;</ept> クラスの説明の中で記載しています。また、ファイル、レジストリ、INI ファイルベースの実装についてのドキュメントでは、それぞれのバージョン独自の機能/制限について触れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All validator classes must implement the Clone() function, which returns an identical copy of itself...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T152357Z">
        <seg>すべてのバリデータクラスは自身と同一なコピーを返却する Clone() 関数を実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All wxWidgets functions, such as wxPrintf(), <bpt i="5" x="5">&lt;a5&gt;</bpt>wxLogMessage()<ept i="5">&lt;/a5&gt;</ept> &amp;c still work with it, but passing it to <bpt i="6" x="6">&lt;c6&gt;</bpt>printf()<ept i="6">&lt;/c6&gt;</ept> will now result in a crash.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T152354Z">
        <seg>wxPrintf()、<bpt i="5" x="5">&lt;a5&gt;</bpt>wxLogMessage()<ept i="5">&lt;/a5&gt;</ept> など、すべての wxWidgets 関数は引き続き動作しますが、<bpt i="6" x="6">&lt;c6&gt;</bpt>printf()<ept i="6">&lt;/c6&gt;</ept> にこの戻り値を渡すとプログラムがクラッシュするでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All wxWidgets platforms support XPMs for small bitmaps and icons.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T140218Z">
        <seg>小さなビットマップやアイコンに使用される XPM について、wxWidgets はすべてのプラットフォームで対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All you need to do is override the MB2WC and WC2MB methods.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130716T160553Z">
        <seg>必要なことは MB2WC 関数と WC2MB 関数をオーバーライドすることだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Allocating more memory may bring important performance benefits for programs using (relatively) few very long strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T082630Z">
        <seg>より多くのメモリを割り当てることで、(相対的に) とても長い文字列を使用するプログラムでは性能が大きく向上することでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Allocating too much extra memory would help to improve the speed in this situation, but due to a great number of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> objects typically used in a program would also increase the memory consumption too much.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121211Z">
        <seg>この場合では余分なメモリを割り当てることで処理速度が改善されましたが、通常のプログラムでは非常に多くの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> が使用されるため、メモリ消費量も大きく増加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Allocating too much extra memory would help to improve the speed in this situation, but due to a great number of wxString objects typically used in a program would also increase the memory consumption too much.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080908Z">
        <seg>この場合では余分なメモリを割り当てることで処理速度が改善されましたが、通常のプログラムでは非常に多くの wxString が使用されるため、メモリ消費量も大きく増加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Allows the programmer to specify whether the application will exit when the top-level frame is delete...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T153140Z">
        <seg>トップレベルウィンドウが削除されたときにアプリケーションを終了するかどうかをユーザが指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Allows you to add a custom event table entry by specifying the event identifier (such as wxEVT_SIZE), the window identifier, and a member function to call.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160419Z">
        <seg>(wxEVT_SIZE といった) イベント識別子、ウィンドウ識別子、呼び出すメンバ関数を指定してカスタムイベントのエントリをイベントテーブルへ追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Almost last but very, very far from least is the increased flexibility which allows to bind an event to:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T042136Z">
        <seg>大事なことを一つ言い残しましたが、バインド対象についても柔軟性が向上しており、イベントを以下のものにバインドできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also note that if all string arguments to your functions are passed as <bpt i="6" x="6">&lt;i6&gt;</bpt>const wxString&amp;<ept i="6">&lt;/i6&gt;</ept> (see the section <bpt i="7" x="7">&lt;a7&gt;</bpt>Some advice<ept i="7">&lt;/a7&gt;</ept>) this situation will almost never arise because for constant references the correct operator is called automatically.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T075827Z">
        <seg>また、関数の引数の文字列をすべて <bpt i="6" x="6">&lt;i6&gt;</bpt>const wxString&amp;<ept i="6">&lt;/i6&gt;</ept> で受け取っている場合 (<bpt i="7" x="7">&lt;a7&gt;</bpt>アドバイス<ept i="7">&lt;/a7&gt;</ept> の章を参照)、この問題がほとんど発生しないことに注意してください。なぜなら、const 参照に対しては自動的に正しい演算子が呼ばれるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also notice that <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::EnableLogging()<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogNull<ept i="1">&lt;/a1&gt;</ept> class which uses it only affect the current thread, i.e. logging messages may still be generated by the other threads after a call to <bpt i="2" x="2">&lt;c2&gt;</bpt>EnableLogging(false)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120458Z">
        <seg>また、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::EnableLogging()<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogNull<ept i="1">&lt;/a1&gt;</ept> クラスは現在のスレッドにのみ影響することに注意してください。つまり、<bpt i="2" x="2">&lt;c2&gt;</bpt>EnableLogging(false)<ept i="2">&lt;/c2&gt;</ept> を呼んだ後でも他のスレッドでは依然としてログメッセージが生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also notice that in spite of the availability of these functions, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxString<ept i="7">&lt;/a7&gt;</ept> is not the ideal class for storing arbitrary binary data as they can take up to 4 times more space than needed (when using <bpt i="8" x="8">&lt;c8&gt;</bpt>wchar_t<ept i="8">&lt;/c8&gt;</ept> internal representation on the systems where size of wide characters is 4 bytes) and you should consider using <bpt i="9" x="9">&lt;a9&gt;</bpt>wxMemoryBuffer<ept i="9">&lt;/a9&gt;</ept> instead.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T165938Z">
        <seg>また、これらの関数が存在しているにも関わらず、任意のバイナリデータを格納するのに <bpt i="7" x="7">&lt;a7&gt;</bpt>wxString<ept i="7">&lt;/a7&gt;</ept> は理想的なクラスとは言えないことに注意してください。なぜなら、必要とされる量の最大 4 倍の領域を消費する (ワイド文字が 4 バイトのシステムで内部表現に <bpt i="8" x="8">&lt;c8&gt;</bpt>wchar_t<ept i="8">&lt;/c8&gt;</ept> を使用するときがこれに該当します) ためです。代わりに <bpt i="9" x="9">&lt;a9&gt;</bpt>wxMemoryBuffer<ept i="9">&lt;/a9&gt;</ept> を使用することを検討してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also notice that most of the existing wxWidgets tutorials and discussions use the event tables because they historically preceded the apparition of dynamic event handling in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022125Z">
        <seg>既存の wxWidgets のチュートリアルや議論の大半ではイベントテーブルを使用していることにも注意してください。これは歴史的に、wxWidgets で動的イベント処理が可能になる前から、それらの文書が存在するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also please notice that there are additional steps in the event handling for the windows-making part of wxWidgets document-view framework, i.e., <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDocParentFrame<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDocChildFrame<ept i="1">&lt;/a1&gt;</ept> and their MDI equivalents <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDocMDIParentFrame<ept i="2">&lt;/a2&gt;</ept> and <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDocMDIChildFrame<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T151644Z">
        <seg>また、wxWidgets ドキュメント/フレームワークのウィンドウ部分、つまり、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxDocParentFrame<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDocChildFrame<ept i="1">&lt;/a1&gt;</ept> と、その MDI 版である <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDocMDIParentFrame<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxDocMDIChildFrame<ept i="3">&lt;/a3&gt;</ept> でのイベント処理には追加のステップが存在することにも注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also, the hhp project file needs one additional line in the <bpt i="0" x="0">&lt;c0&gt;</bpt>OPTIONS<ept i="0">&lt;/c0&gt;</ept> section:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T144718Z">
        <seg>また、hhp プロジェクトファイルの <bpt i="0" x="0">&lt;c0&gt;</bpt>OPTIONS<ept i="0">&lt;/c0&gt;</ept> セクションに一行追加する必要があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also, the string and character constants should be encoded using wide characters (<bpt i="0" x="0">&lt;t0&gt;</bpt>wchar_t<ept i="0">&lt;/t0&gt;</ept> type) which typically take 2 or 4 bytes instead of <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> which only takes one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T151853Z">
        <seg>また、文字列や文字定数は <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> (1 バイト) の代わりにワイド文字 (<bpt i="0" x="0">&lt;t0&gt;</bpt>wchar_t<ept i="0">&lt;/t0&gt;</ept> 型、通常 2 か 4 バイト) で符号化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, you may derive from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextDropTarget<ept i="3">&lt;/a3&gt;</ept> or <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFileDropTarget<ept i="4">&lt;/a4&gt;</ept> and override their OnDropText() or OnDropFiles() method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T161714Z">
        <seg>もしくは、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextDropTarget<ept i="3">&lt;/a3&gt;</ept> や <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFileDropTarget<ept i="4">&lt;/a4&gt;</ept> を継承し、それらのクラスの OnDropText() 関数や OnDropFiles() 関数をオーバーライドするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, you may derive from <bpt i="4" x="4">&lt;a4&gt;</bpt>wxTextDropTarget<ept i="4">&lt;/a4&gt;</ept> or <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFileDropTarget<ept i="5">&lt;/a5&gt;</ept> and override their OnDropText() or OnDropFiles() method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135719Z">
        <seg>もしくは、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxTextDropTarget<ept i="4">&lt;/a4&gt;</ept> や <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFileDropTarget<ept i="5">&lt;/a5&gt;</ept> を継承し、それらのクラスの OnDropText() 関数や OnDropFiles() 関数をオーバーライドするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, you may use <bpt i="4" x="4">&lt;c4&gt;</bpt>-a<ept i="4">&lt;/c4&gt;</ept> option to extract all the strings, but it will usually result in many strings being found which don't have to be translated at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040610Z">
        <seg>代わりに <bpt i="4" x="4">&lt;c4&gt;</bpt>-a<ept i="4">&lt;/c4&gt;</ept> オプションを使用することもできますが、そうするとまったく翻訳する必要のない文字列が大量に見つかることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, you may use <bpt i="2" x="2">&lt;t2&gt;</bpt>-a<ept i="2">&lt;/t2&gt;</ept> option to extract all the strings, but it will usually result in many strings being found which don't have to be translated at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001039Z">
        <seg>代わりに <bpt i="2" x="2">&lt;t2&gt;</bpt>-a<ept i="2">&lt;/t2&gt;</ept> オプションを使用することもできますが、そうするとまったく翻訳する必要のない文字列が大量に見つかることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although everything works fine inside the program, things can get nasty when it tries to communicate with the outside world which, sadly, often expects ANSI strings (a notable exception is the entire Win32 API which accepts either Unicode or ANSI strings and which thus makes it unnecessary to ever perform any conversions in the program).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T143311Z">
        <seg>プログラム内部ではすべてうまく動作するとしても、外部の世界とやり取りしようとすると、それらは悲しいことにしばしば ANSI 文字列を想定しているため、ひどいことになります。 (特筆すべき例外として、すべての Win32 API は Unicode 文字列と ANSI 文字列の両方を受け付けるため、プログラム内でなんらかの変換を行う必要がまったくありません）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although internationalization of an application (i18n for short) involves far more than just translating its text messages to another message - date, time and currency formats need changing too, some languages are written left to right and others right to left, character encoding may differ and many other things may need changing too - it is a necessary first step.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T042842Z">
        <seg>アプリケーションの国際化 (略して i18n) には単にテキストメッセージを他のメッセージに翻訳すること以上のことが含まれます。日付や時間、通貨の形式も変更する必要がありますし、ある言語は左から右へ、別の言語では右から左へ表記するでしょう。文字コードも異なりますし、他にもたくさんのことを変更する必要がありますが、これは必要な最初のステップです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although it works just fine under Unix, these messages go strictly nowhere under Windows where the stdout of GUI programs is not assigned to anything.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T085347Z">
        <seg>ただし、これは Unix では正常に動作しますが、GUI プログラムの標準出力がどこにも割り当てられない Windows では厳密にどこにも出力されません.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although the implicit conversion to C strings is applied automatically by the compiler in the case of</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T054358Z">
        <seg>次のような場合であれば、コンパイラによって自動的に C 文字列への暗黙的な変換が行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always enclose literal string constants in <bpt i="0" x="0">&lt;a0&gt;</bpt>wxT()<ept i="0">&lt;/a0&gt;</ept> macro unless they're already converted to the right representation (another standard wxWidgets macro <bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept> does it, for example, so there is no need for <bpt i="2" x="2">&lt;t2&gt;</bpt>wxT()<ept i="2">&lt;/t2&gt;</ept> in this case) or you intend to pass the constant directly to an external function which doesn't accept wide-character strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151824Z">
        <seg>リテラル文字列をすでに正しい表現に変換している (例えば、別の標準 wxWidgets マクロ <bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept> も <bpt i="2" x="2">&lt;t2&gt;</bpt>wxT()<ept i="2">&lt;/t2&gt;</ept> と同じ事を行うため、この場合は  <bpt i="2" x="2">&lt;t2&gt;</bpt>wxT()<ept i="2">&lt;/t2&gt;</ept> を使う必要はありません) か、ワイド文字列を受け付けない外部関数へ直接リテラル文字列を渡すのでない限り、リテラル文字列は常に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxT()<ept i="0">&lt;/a0&gt;</ept> で囲む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always use <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> instead of <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151820Z">
        <seg><bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> の代わりに常に <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An application closes by destroying all windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160515Z">
        <seg>アプリケーションはすべてのウィンドウを破棄することで終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An arbitrary functor like boost::function&lt;&gt;.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T000123Z">
        <seg>boost::function&lt;&gt; のような任意のファンクタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An enumeration for formats .</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152904Z">
        <seg>フォーマット用の列挙型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An erase background event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055225Z">
        <seg>背景の消去イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An event is a structure holding information about an event passed to a callback or member function...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153238Z">
        <seg>wxEvent はコールバック関数かメンバ関数に渡されるイベントの情報を格納した構造体です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An event table is placed in an implementation file to tell wxWidgets how to map events to member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075334Z">
        <seg>イベントテーブルはソースファイルに配置され、wxWidgets にイベントとメンバ関数のマッピング方法を知らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An example of defining an application follows:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160959Z">
        <seg>アプリケーションを定義する例は以下の通りです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An icon is a small rectangular bitmap usually used for denoting a minimized application.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T153354Z">
        <seg>アイコンは小さな矩形のビットマップで、最小化されたアプリケーションを表すためによく使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An idle event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055244Z">
        <seg>アイドルイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An ordinary function like a static method or a global function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T000110Z">
        <seg>静的関数やグローバル関数のような普通の関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Anatomy of a Validator</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150349Z">
        <seg>バリデータの構造</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Anatomy of a validator</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143820Z">
        <seg>バリデータの構造</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And all components are children of the unnamed root component.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T105001Z">
        <seg>そして、すべてのコンポーネントは無名のルートコンポーネントの子になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And as with <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::FromUTF8()<ept i="3">&lt;/a3&gt;</ept> example above, you can always use <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::ToUTF8()<ept i="4">&lt;/a4&gt;</ept> to retrieve the string contents in UTF-8 encoding -- this, unlike converting to <bpt i="5" x="5">&lt;c5&gt;</bpt>char*<ept i="5">&lt;/c5&gt;</ept> using the current locale, never fails.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T091819Z">
        <seg>また、上の <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::FromUTF8()<ept i="3">&lt;/a3&gt;</ept> を使ったサンプルのように、UTF-8 で符号化された文字列を取得するために常に <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::ToUTF8()<ept i="4">&lt;/a4&gt;</ept> を使うことができます。この方法は、現在のロケールを使用して <bpt i="5" x="5">&lt;c5&gt;</bpt>char*<ept i="5">&lt;/c5&gt;</ept> に変換する方法と比較して、変換に失敗することがありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And finally you can bind to an arbitrary functor and use it as an event handler:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060806Z">
        <seg>そして、最後に任意のファンクタをバインドし、イベントハンドラとして使用することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And finally, the standard preprocessor tokens enumerated above expand to ANSI strings but it is more likely that Unicode strings are wanted in the Unicode build.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151410Z">
        <seg>最後に、上に挙げた標準プリプロセッサトークンは ANSI 文字列として展開されますが、Unicode ビルドの際には Unicode 文字列の方が必要なことが多いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And the answer is that:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T052351Z">
        <seg>そして、その答えは次の通りです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And the very last string-related class is <bpt i="0" x="0">&lt;a0&gt;</bpt>wxArrayString<ept i="0">&lt;/a0&gt;</ept>: it is just a version of the "template" dynamic array class which is specialized to work with strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T074041Z">
        <seg>そして、文字列に関する最後のクラスが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxArrayString<ept i="0">&lt;/a0&gt;</ept> です: これは単なる "テンプレート" 動的配列クラスの一種で、文字列に対して使用するように特殊化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And this is what the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> classes do.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151636Z">
        <seg>そしてこれこそが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> クラスの行なうことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And this is what the wxMBConv classes do.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T151303Z">
        <seg>そしてこれこそが wxMBConv クラスの行なうことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And while the events are normally generated by wxWidgets itself, you can also do this, which is especially useful when using custom events (see <bpt i="0" x="0">&lt;a0&gt;</bpt>Custom Event Summary<ept i="0">&lt;/a0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T160615Z">
        <seg>また、通常、イベントは wxWidgets 自身によって生成されますが、あなたがこれを行うことも可能です。これはカスタムイベントを使用する場合に特に有用です。 (<bpt i="0" x="0">&lt;a0&gt;</bpt>カスタムイベントの概要<ept i="0">&lt;/a0&gt;</ept> 参照) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another aspect of the application shutdown is <bpt i="0" x="0">&lt;a0&gt;</bpt>OnExit<ept i="0">&lt;/a0&gt;</ept> which is called when the application exits but <bpt i="1" x="1">&lt;i1&gt;</bpt>before<ept i="1">&lt;/i1&gt;</ept> wxWidgets cleans up its internal structures.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162318Z">
        <seg>アプリケーションの終了の別の側面は <bpt i="0" x="0">&lt;a0&gt;</bpt>OnExit<ept i="0">&lt;/a0&gt;</ept> です。この関数はアプリケーションの終了時に呼ばれますが、wxWidgets の内部構造が破棄される<bpt i="1" x="1">&lt;i1&gt;</bpt>前<ept i="1">&lt;/i1&gt;</ept>に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another aspect of the application shutdown is <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::OnExit<ept i="0">&lt;/a0&gt;</ept> which is called when the application exits but <bpt i="1" x="1">&lt;e1&gt;</bpt>before<ept i="1">&lt;/e1&gt;</ept> wxWidgets cleans up its internal structures.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T133120Z">
        <seg>アプリケーションの終了の別の側面は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::OnExit<ept i="0">&lt;/a0&gt;</ept> です。この関数はアプリケーションの終了時に呼ばれますが、wxWidgets の内部構造が破棄される<bpt i="1" x="1">&lt;e1&gt;</bpt>前<ept i="1">&lt;/e1&gt;</ept>に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another class of problems is related to the fact that the value returned by <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> itself is also not just a pointer to a buffer but a value of helper class wxCStrData which is implicitly convertible to both narrow and wide strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034210Z">
        <seg>発生しうる別の問題は <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> 自身の返却する値もまたバッファのポインタではなく、暗黙的にナロー文字列やワイド文字列へ変換可能なヘルパークラス wxCStrData であることに関連しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another possibility which exists now is to provide an overload of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxToString()<ept i="0">&lt;/a0&gt;</ept> (and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFromString()<ept i="1">&lt;/a1&gt;</ept>) for your own type, e.g.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153105Z">
        <seg>別の方法としては、独自の型用に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxToString()<ept i="0">&lt;/a0&gt;</ept> (と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFromString()<ept i="1">&lt;/a1&gt;</ept>) をオーバーロードすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another two-dimensional sizer derived from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141821Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> を継承した別の 2 次元サイザーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another two-dimensional sizer derived from wxGridSizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153345Z">
        <seg>wxGridSizer を継承した別の 2 次元サイザーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another very widespread standard is <bpt i="0" x="0">&lt;b0&gt;</bpt>UTF-16<ept i="0">&lt;/b0&gt;</ept> which is used by Microsoft Windows: it encodes the first (approximately) 64 thousands of Unicode code points (the BMP plane) using 16-bit code units (2 bytes) and uses a pair of 16-bit code units to encode the characters beyond this.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T031629Z">
        <seg>非常に広く使われている別の規格として、Microsoft Windows で使われている <bpt i="0" x="0">&lt;b0&gt;</bpt>UTF-16<ept i="0">&lt;/b0&gt;</ept> があります。これは最初の約 64,000 個の Unicode コードポイント (基本多言語面) を 16 ビット (2 バイト) のコード単位で符号化し、それ以降の文字は 16 ビットのコード単位の組で符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another, similar, alternative is to use pointer arithmetic:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151839Z">
        <seg>別の方法としては、ポインタ計算を使う方法があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any character may have one or more glyph associated; e.g. some of the possible glyphs for the capital letter 'A' are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T013331Z">
        <seg>どの文字も 1 つまたは複数のグリフと関連付けられています; 例えば、大文字の 'A' であれば以下のようなグリフが関連付けられているかもしれません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any wxWidgets function accepts arguments of either type as both kinds of strings are implicitly converted to <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept>, so both</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041335Z">
        <seg>どの wxWidgets 関数も引数を暗黙的に <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept> へ変換するため、どちらの型でも受け付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Apart from defining your event class, you also need to define your own event table macro if you want to use event tables for handling events of this type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150302Z">
        <seg>イベントクラスの定義とは別に、独自のイベントテーブルマクロも定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Apart from defining your event class, you will also need to define your own event table macro (which is quite long).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042400Z">
        <seg>イベントクラスの定義とは別に、独自のイベントテーブルマクロも定義する必要があります。 (そしてこれは非常に長くなります) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends a child to the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142326Z">
        <seg>サイザーに子コントロールを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Application Shutdown</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152206Z">
        <seg>アプリケーションの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Application shutdown</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161738Z">
        <seg>アプリケーションの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a convenience, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::CreateButtonSizer(long flags)<ept i="0">&lt;/a0&gt;</ept> can be used to create a standard button sizer in which standard buttons are displayed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145939Z">
        <seg>利便性のために、標準的なボタンを表示する標準ボタンサイザーを作成するのに <bpt i="0" x="0">&lt;a0&gt;</bpt>CreateButtonSizer (long フラグ)<ept i="0">&lt;/a0&gt;</ept> を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a convenience, CreateButtonSizer ( long flags ) can be used to create a standard button sizer in which standard buttons are displayed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T131746Z">
        <seg>利便性のために、標準的なボタンを表示する標準ボタンサイザーを作成するのに CreateButtonSizer (long フラグ) を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a slight extension of the above, the handlers can also be unbound at any time with Unbind&lt;&gt;() (and maybe rebound later).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024945Z">
        <seg>この延長として、Unbind&lt;&gt;() を使ってイベントハンドラのバインディングを任意のタイミングで解除することもできます。 (また、あとから再バインドするかもしれません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an event type is a variable, it can also be declared using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDECLARE_EVENT()<ept i="1">&lt;/a1&gt;</ept> if necessary.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155125Z">
        <seg>イベント型は変数なので、必要であれば <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDECLARE_EVENT()<ept i="1">&lt;/a1&gt;</ept> を使用して宣言することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an ever greater variety of mobile hardware comes to market, it becomes more imperative for wxWidgets applications to adapt to these platforms without putting too much burden on the programmer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T144118Z">
        <seg>様々なモバイル端末が市場に出回るにつれ、プログラマに過度の負担をかけることなく、アプリケーションをそれらのプラットフォームへ適応させることが wxWidgets に求められるようになってきました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an example, trying to open a non-existing file will usually provoke an error message, but if for some reasons it is unwanted, just use this construction:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025916Z">
        <seg>例として、存在しないファイルを開こうとすると通常はエラーメッセージが表示されますが、何らかの理由でそれを望まない場合、次のようにするだけです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an example, we will construct a dialog that will contain a text field at the top and two buttons at the bottom.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T162557Z">
        <seg>例として、上部にテキストフィールドを持ち、下部にふたつのボタンを持つダイアログを構築します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As each event is uniquely defined by its event type, defining a custom event starts with defining a new event type for it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155001Z">
        <seg>各イベントはイベント型によって一意に定義されるため、カスタムインベントは新しいイベント型を定義するところから始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As for the (real) trace messages, their handling depends on the currently enabled trace masks: if <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask()<ept i="0">&lt;/a0&gt;</ept> was called for the mask of the given message, it will be logged, otherwise nothing happens.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132927Z">
        <seg>(本当の) トレースメッセージについては、現在有効になっているトレースマスクに応じて処理が行われます: 指定されたメッセージのマスクに対して <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask()<ept i="0">&lt;/a0&gt;</ept> が呼ばれている場合はメッセージが記録されますが、そうでない場合は何も起こりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As it is common to have more than one object generating events of the same type (e.g. a typical window contains several buttons, all generating the same button click event), checking the event source object or its id allows to distinguish between them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T041217Z">
        <seg>複数のオブジェクトが同じ型のイベントを生成すること (例えば、一般的なウィンドウは複数のボタンを持ちますが、それらはすべて同じボタンクリックイベントを生成します) はよくあるため、イベントの生成元オブジェクトやその識別子を確認することで生成元を区別することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As it is easy to see comparing the last fragment with the one above, this macro expands to nothing in the (usual) ANSI mode and prefixes <bpt i="1" x="1">&lt;t1&gt;</bpt>'L'<ept i="1">&lt;/t1&gt;</ept> to its argument in the Unicode mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T163504Z">
        <seg>最後の部分を上記の例と比較すると簡単に分かるように、このマクロは (通常の) ANSI モードでは何も起こりませんが、Unicode モードでは引数の接頭語 <bpt i="1" x="1">&lt;t1&gt;</bpt>'L'<ept i="1">&lt;/t1&gt;</ept> として展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above most controls will also set this size value as the control's min size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T150923Z">
        <seg>上で述べたように、ほとんどのコントロールではこのサイズがコントロールの最小サイズとしても使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above most controls will also set this size value as the control's minimal size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T152221Z">
        <seg>上で述べたように、ほとんどのコントロールではこのサイズがコントロールの最小サイズとしても使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, any window belonging to a sizer may have a border, and it can be specified which of the four sides may have this border, using the wxTOP, wxLEFT, wxRIGHT and wxBOTTOM constants or wxALL for all directions (and you may also use wxNORTH, wxWEST etc instead).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141926Z">
        <seg>上で述べたように、サイザーに所属するウィンドウはどれもボーダーを持ち、四方向のどの方向にボーダーを持たせるか指定することができます。これには wxTOP、wxLEFT、wxRIGHT、wxBOTTOM 定数か、全方向を表す wxALL を使用します。 (代わりに wxNORTH、wxWEST などを使用することも可能です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, any window belonging to a sizer may have border, and it can be specified which of the four sides may have this border, using the wxTOP, wxLEFT, wxRIGHT and wxBOTTOM constants or wxALL for all directions (and you may also use wxNORTH, wxWEST etc instead).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T110348Z">
        <seg>上で述べたように、サイザーに所属するウィンドウはどれもボーダーを持ち、四方向のどの方向にボーダーを持たせるか指定することができます。これには wxTOP、wxLEFT、wxRIGHT、wxBOTTOM 定数か、全方向を表す wxALL を使用します。 (代わりに wxNORTH、wxWEST などを使用することも可能です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, only command events are recursively applied to the parents event handler in the library itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T054917Z">
        <seg>上で述べたように、コマンドイベントだけが親コントロールのイベントハンドラで再帰的に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, the events of the classes deriving from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> are propagated by default to the parent window if they are not processed in this window itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T154600Z">
        <seg>以前述べたように、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を継承したクラスのイベントは、ウィンドウ自身で処理されなかった場合にデフォルトで親ウィンドウまで伝播します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, under Unix systems <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> class can use variable-width UTF-8 encoding for internal representation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T141540Z">
        <seg>上で述べたように、Unix システムでは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> クラスの内部表現に可変長の UTF-8 を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned before, all event handlers take a wxEvent-derived argument whose exact class differs according to the type of event and the class of the originating window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T033216Z">
        <seg>以前述べたように、すべてのイベントハンドラは wxEvent を継承した引数を取りますが、その引数のクラスはイベントの型と発生元ウィンドウのクラスに応じて異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned before, the member functions that handle events do not have to be virtual.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T080644Z">
        <seg>前に述べたように、イベントを処理するメンバ関数は仮想関数である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As most programs use character strings, the standard C library provides quite a few functions to work with them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T071911Z">
        <seg>多くのプログラムで文字列が使用されていますが、標準 C ライブラリではそれらのプログラムで使用できる関数をほんの少ししか提供していません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As not all platforms supported by wxWidgets support Unicode (fully) yet, in many cases it is unwise to write a program which can only work in Unicode environment.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T145921Z">
        <seg>wxWidgets の対応しているすべてのプラットフォームで Unicode が (完全に) サポートされているわけではないため、Unicode 環境でのみ動作するプログラムを書くのは多くの場合で賢明ではないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As previously described, when <bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE_UTF8==1<ept i="0">&lt;/c0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> internally uses the variable-length UTF8 encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114943Z">
        <seg>前に述べたように、<bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE_UTF8==1<ept i="0">&lt;/c0&gt;</ept> の場合に <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> は可変長の UTF-8 エンコーディングを内部的に使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As programs are becoming more and more globalized, and users exchange documents across country boundaries as never before, applications increasingly need to take into account all the different character sets in use around the world.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152606Z">
        <seg>プログラムがよりグローバル化し、かつてないほどユーザが国境を超えてドキュメントをやり取りするようになるにつれ、世界中で使用されているすべての文字コードについて考慮することがますます求められるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As reinforced in the next section, calling Close does not guarantee that the window will be destroyed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T150847Z">
        <seg>次の章で補足しますが、Close の呼び出しはウィンドウが破棄されることを保証しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As such, it implements the virtual functions of the base class which are called when a message is logged.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T022449Z">
        <seg>そのため、メッセージのロギング時に呼ばれる基底クラスの仮想関数を実装ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As the call to this operator may modify the string, its data is unshared (COW is done) and so if the string was really shared there is some performance loss (both in terms of speed and memory consumption).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T075029Z">
        <seg>この演算子を呼び出すことで文字列が変更されるため、データは共有されなくなります。(COW が行われます) そのため、文字列が本当に共有されていた場合、いくらか性能が (速度とメモリ消費の両方の観点で) 劣化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As this quite often causes confusion for users, here is a list of system events which will NOT get sent to the parent's event handler:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055040Z">
        <seg>このことについて混乱する人が多いため、親コントロールのイベントハンドラへ送信 "されない" システムイベントの一覧を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As this solution is obviously preferable to the previous ones (think of incompatible encodings for the same language, locale chaos and so on), many modern operating systems support it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T161546Z">
        <seg>この解決策は明らかにこれまでのものより望ましい (同じ言語の互換性のない文字コード、混沌としたロケールなどを想像してみてください) ため、多くのモダンなオペレーティングシステムでは Unicode をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As usual, the accent is put on cross-platform features which explains, for example, the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextFile<ept i="0">&lt;/a0&gt;</ept> class which may be used to convert between different types of text files (DOS/Unix/Mac).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T055739Z">
        <seg>いつものように、クロスプラットフォーム機能に重点がおかれています。例えば <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextFile<ept i="0">&lt;/a0&gt;</ept> クラスでは異なる形式 (DOS/Unix/Mac) のテキストフアイル同士を変換するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As visual aid to understand the differences between the various concepts described so far, look at the different UTF representations of the same code point:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T032745Z">
        <seg>今までに述べたコンセプトの違いを理解するため、同じコードポイントにおける UTF の表現方法の違いを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As well as the event table in the implementation file, there must also be a DECLARE_EVENT_TABLE macro somewhere in the class declaration.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T032754Z">
        <seg>イベントテーブルをソースファイルに配置するように、クラス宣言のどこかに DECLARE_EVENT_TABLE マクロを配置しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As you can see, UTF16 encoding is straightforward (for characters in the <bpt i="0" x="0">&lt;e0&gt;</bpt>BMP<ept i="0">&lt;/e0&gt;</ept>) and in this example the UTF16-encoded <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> takes 8 bytes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T040750Z">
        <seg>見て分かるように、UTF16 は (<bpt i="0" x="0">&lt;e0&gt;</bpt>BMP<ept i="0">&lt;/e0&gt;</ept> の文字については) そのまま符号化しており、この例の UTF16 <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> では 8 バイトを消費します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Associates a drop target with this window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135428Z">
        <seg>このウィンドウに関連付けられたドロップ先。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At last, C++ has a standard string class (<bpt i="0" x="0">&lt;c0&gt;</bpt>std::string<ept i="0">&lt;/c0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T154352Z">
        <seg>最後に、C++ では標準の文字列クラス (<bpt i="0" x="0">&lt;c0&gt;</bpt>std::string<ept i="0">&lt;/c0&gt;</ept>) が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At last, C++ has a standard string class (std::string).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T045354Z">
        <seg>最後に、C++ では標準の文字列クラス (std::string) が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Automatic Deletion of Child Windows</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T034144Z">
        <seg>子ウィンドウの自動削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Automatic scrolling dialogs</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T154712Z">
        <seg>ダイアログの自動スクロール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075538Z">
        <seg>BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Background: The Need for Conversion</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151411Z">
        <seg>背景: 変換に対する要件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Background: The need for conversion</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152337Z">
        <seg>背景: 変換に対する要件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Background: The wxString Class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151414Z">
        <seg>背景: wxString クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Background: The wxString class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T153828Z">
        <seg>背景: wxString クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Basically you will need to use the latter when doing inter-thread communication; when you use only the main thread you can also safely use the former.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145010Z">
        <seg>基本的に、スレッド間通信を行なう場合は後者を選択する必要があります; メインスレッドのみを使用する場合は前者も安全に使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Basically, there are only a few things to watch out for:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150539Z">
        <seg>基本的には、気をつけなければならないことはごく僅かです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Basically, you can remove them from any code which used them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T123316Z">
        <seg>基本的にはどのコードからも取り除くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because adaptation rearranges your sizer and window hierarchy, it is not fool-proof, and may fail in the following situations:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T145413Z">
        <seg>適応はサイザーとウィンドウの階層構造を変更するため、これは確実に行えるものではなく、以下のような状況では適応に失敗します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because all frames must be destroyed for the application to exit, it is advisable to use parent frames wherever possible when creating new frames, so that deleting the top level frame will automatically delete child frames.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160707Z">
        <seg>アプリケーションを終了するためにはすべてのフレームを破棄しなければならないため、可能な限り、新しいフレームを作成するときは親フレームを使用するようにするべきです。こうすることで、トップレベルフレームの削除時に自動的に子フレームが削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because of the need to support implicit conversions to both <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> implementation is rather involved and many of its operators don't return the types which they could be naively expected to return.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033944Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> と <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> の暗黙的な相互変換をサポートする必要があるため、 <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> の実装はかなり複雑で、演算子の多くは (返却されるものと) 単純に予想される型を実際には返却しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because of this you should only use <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::From8BitData()<ept i="5">&lt;/a5&gt;</ept> for the strings created using <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::To8BitData()<ept i="6">&lt;/a6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T165304Z">
        <seg>このため、<bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::From8BitData()<ept i="5">&lt;/a5&gt;</ept> は <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::To8BitData()<ept i="6">&lt;/a6&gt;</ept> によって作られた文字列に対してのみ、使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because of this, code like the following</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T143005Z">
        <seg>このため、次のようなコードは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because of this, you cannot pass its result to any standard vararg functions such as <bpt i="3" x="3">&lt;c3&gt;</bpt>printf()<ept i="3">&lt;/c3&gt;</ept> any more as described in <bpt i="4" x="4">&lt;a4&gt;</bpt>Unicode-Related Compilation Errors<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T152226Z">
        <seg>このため、<bpt i="4" x="4">&lt;a4&gt;</bpt>Unicode 関連のコンパイルエラー<ept i="4">&lt;/a4&gt;</ept> で説明している通り、この戻り値を <bpt i="3" x="3">&lt;c3&gt;</bpt>printf()<ept i="3">&lt;/c3&gt;</ept> といった標準の可変引数関数に渡すことはもはやできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before anything else happens, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::FilterEvent()<ept i="0">&lt;/a0&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T071254Z">
        <seg>他の処理を行う前に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::FilterEvent()<ept i="0">&lt;/a0&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before showing how this can be useful, let us explain what log components are: they are simply arbitrary strings identifying the component, or module, which generated the message.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T140532Z">
        <seg>これがどれほど役立つか説明する前に、ログコンポーネントについて説明しましょう: ログコンポーネントとは単純に、メッセージを生成するコンポーネントやモジュールを識別する任意の文字列のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before starting an MT application (or starting to add MT features to an existing one) it is worth asking oneself if there is no easier and safer way to implement the same functionality.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T143825Z">
        <seg>マルチスレッドアプリケーションの開発を始める前に (もしくは既存のアプリケーションにマルチスレッド機能を追加する前に)、同じ機能を実装するためのより簡単で安全な方法がないか自問するだけの価値はあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before version 2.0 of wxWidgets, events were handled by the application either by supplying callback functions, or by overriding virtual member functions such as <bpt i="0" x="0">&lt;b0&gt;</bpt>OnSize<ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075156Z">
        <seg>wxWidgets 2.0 より前のバージョンでは、イベント処理はコールバック関数か、<bpt i="0" x="0">&lt;b0&gt;</bpt>OnSize<ept i="0">&lt;/b0&gt;</ept> といった仮想メンバ関数のオーバーライドで実現されていました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Beware that even if <bpt i="0" x="0">&lt;c0&gt;</bpt>NUL<ept i="0">&lt;/c0&gt;</ept> character is allowed, in the current string implementation some methods might not work correctly with them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T130334Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>NUL<ept i="0">&lt;/c0&gt;</ept> 文字も格納できるとは言え、現在の実装ではいくつかの関数が <bpt i="0" x="0">&lt;c0&gt;</bpt>NUL<ept i="0">&lt;/c0&gt;</ept> 文字を含む場合にうまく動作しないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="3">&lt;/a3&gt;</ept>, &amp;HandleExit, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060727Z">
        <seg>Bind( <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="3">&lt;/a3&gt;</ept>, &amp;HandleExit, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="3">&lt;/a3&gt;</ept>, &amp;MyFrameHandler::OnFrameExit,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060235Z">
        <seg>Bind( <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="3">&lt;/a3&gt;</ept>, &amp;MyFrameHandler::OnFrameExit,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="4">&lt;/a4&gt;</ept>, &amp;myFunctor, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060829Z">
        <seg>Bind( <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="4">&lt;/a4&gt;</ept>, &amp;myFunctor, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="4">&lt;/a4&gt;</ept>, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060954Z">
        <seg>Bind( <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="4">&lt;/a4&gt;</ept>, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="6" x="6">&lt;a6&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="6">&lt;/a6&gt;</ept>, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T160151Z">
        <seg>Bind( <bpt i="6" x="6">&lt;a6&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="6">&lt;/a6&gt;</ept>, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="0">&lt;/a0&gt;</ept>, &amp;MyFrame::OnExit, <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept>, wxID_EXIT);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040336Z">
        <seg>Bind(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="0">&lt;/a0&gt;</ept>, &amp;MyFrame::OnExit, <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept>, wxID_EXIT);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind(MY_EVENT, &amp;MyFrame::OnMyEvent, <bpt i="16" x="16">&lt;s16&gt;</bpt>this<ept i="16">&lt;/s16&gt;</ept>, ID_MY_WINDOW);
}

<bpt i="17" x="17">&lt;s17&gt;</bpt>// example of code generating the event<ept i="17">&lt;/s17&gt;</ept>
<bpt i="18" x="18">&lt;s18&gt;</bpt>void<ept i="18">&lt;/s18&gt;</ept> MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T122453Z">
        <seg>Bind(MY_EVENT, &amp;MyFrame::OnMyEvent, <bpt i="16" x="16">&lt;s16&gt;</bpt>this<ept i="16">&lt;/s16&gt;</ept>, ID_MY_WINDOW);
}

<bpt i="17" x="17">&lt;s17&gt;</bpt>// イベントを生成するコードの例<ept i="17">&lt;/s17&gt;</ept>
<bpt i="18" x="18">&lt;s18&gt;</bpt>void<ept i="18">&lt;/s18&gt;</ept> MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind(MY_PLOT_CLICKED, &amp;MyFrame::OnPlot, <bpt i="53" x="53">&lt;s53&gt;</bpt>this<ept i="53">&lt;/s53&gt;</ept>, ID_MY_WINDOW);
}

<bpt i="54" x="54">&lt;s54&gt;</bpt>void<ept i="54">&lt;/s54&gt;</ept> MyFrame::OnPlot(MyPlotEvent&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151235Z">
        <seg>Bind(MY_PLOT_CLICKED, &amp;MyFrame::OnPlot, <bpt i="53" x="53">&lt;s53&gt;</bpt>this<ept i="53">&lt;/s53&gt;</ept>, ID_MY_WINDOW);
}

<bpt i="54" x="54">&lt;s54&gt;</bpt>void<ept i="54">&lt;/s54&gt;</ept> MyFrame::OnPlot(MyPlotEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Binds the given function, functor or method dynamically with the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T235325Z">
        <seg>指定された関数、ファンクタ、メンバ関数をイベントへ動的にバインドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitmap Format Handlers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154824Z">
        <seg>ビットマップ形式ハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitmap format handlers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142400Z">
        <seg>ビットマップ形式ハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitmap handlers are not implemented on all platforms, and new ones rarely need to be implemented since <bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> can be used for loading most formats, as noted earlier.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155802Z">
        <seg>ビットマップハンドラはすべてのプラットフォームで実装されているわけでありませんし、新しいものを実装する必要もほとんどないでしょう。なぜなら、前で述べたように <bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> を使用することで大半の形式を読み込むことができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitmaps and Icons</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T151804Z">
        <seg>ビットマップとアイコン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bitmaps and icons overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T134211Z">
        <seg>ビットマップとアイコンの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Both strategies are described in details below.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155725Z">
        <seg>両方の戦略について、以下で詳細に述べています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Both the client and the server use an instance of this class, one per connection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T145541Z">
        <seg>クライアントとサーバの両方とも、このクラスのインスタンスをコネクションごとにひとつ使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But MyApp object is deleted after wxWidgets structures that wxCHMHelpController depends on were uninitialized!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162718Z">
        <seg>しかし、MyApp オブジェクトは wxCHMHelpController の依存する wxWidgets 構造が未初期化状態になった後に削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But although by default only the command events are propagated like this, other events can be propagated as well because the event handling code uses <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::ShouldPropagate()<ept i="1">&lt;/a1&gt;</ept> to check whether an event should be propagated.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T154932Z">
        <seg>しかし、コマンドイベントがデフォルトで伝播するとはいえ、他のイベントも伝播させることは可能です。なぜなら、イベント処理コードでは<bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::ShouldPropagate()<ept i="1">&lt;/a1&gt;</ept> を用いてイベントを伝播させるかどうかを確認するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But calling a frame method with the child window pointer instead of the pointer to the frame is, of course, disastrous.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045642Z">
        <seg>しかし、当然のことながら、フレームのポインタの代わりに子ウィンドウのポインタに対してフレームのメンバ関数を呼ぶと悲惨なことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But even if it does exist at wxWidgets level, it should never be called directly as the event handlers are not part of wxWidgets API and should never be called directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155240Z">
        <seg>たとえ wxWidgets の階層に存在したとしても、イベントハンドラは wxWidgets API の一部ではないため、直接呼ぶべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But if you do use them, it is better to use <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> pointers rather than <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> ones to avoid the data loss problems due to conversion as discussed in the previous section.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T154905Z">
        <seg>それでもポインタを使用する場合、前のセクションで述べたような変換に伴うデータ喪失の問題を避けるために <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> ポインタよりも <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> ポインタを使うようにした方が良いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But in all cases wxWidgets represents these events in a uniform way and allows you to handle them in the same way wherever they originate from.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T160356Z">
        <seg>しかし、すべての場合において、wxWidgets ではそれらのイベントを同じ形式で表現しており、イベントの派生元によらず、同一の方法で処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But it hasn't happened yet, and the migration towards Unicode has created new challenges, resulting in "compatibility encodings" such as UTF-8.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T153236Z">
        <seg>しかし、これまでには存在しなかった、Unicode への移行という新たな課題が生じました。その結果、UTF-8 などの "互換エンコーディング" が考案されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But keep in mind that then the lifetime of <bpt i="2" x="2">&lt;c2&gt;</bpt>myFrameHandler<ept i="2">&lt;/c2&gt;</ept> must be greater than that of <bpt i="3" x="3">&lt;c3&gt;</bpt>MyFrame<ept i="3">&lt;/c3&gt;</ept> object -- or at least it needs to be unbound before being destroyed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060621Z">
        <seg>ただし、<bpt i="2" x="2">&lt;c2&gt;</bpt>myFrameHandler<ept i="2">&lt;/c2&gt;</ept> の寿命を <bpt i="3" x="3">&lt;c3&gt;</bpt>MyFrame<ept i="3">&lt;/c3&gt;</ept> よりも長くなるようにするか、もしくは少なくとも破棄される前にバインディングを解除する必要があることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But note that no additional libraries are needed during run-time, however, so you have only the message catalogs to distribute and nothing else.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T160403Z">
        <seg>しかし、実行時には追加のライブラリは必要ないため、メッセージカタログの他には何も配布する必要がないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But often, your environment doesn't want Unicode strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T154309Z">
        <seg>しかし、Unicode 文字列を使用できない環境もよくあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But this absolutely doesn't mean that using the event tables is the preferred way: handling events dynamically is better in several aspects and you should strongly consider doing it if you are just starting with wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022242Z">
        <seg>ただし、これはイベントテーブルが適切な方法であることを意味しているわけではまったくありません: ある側面においては動的なイベント処理の方が優れており、wxWidgets を使い始める際には動的にイベント処理を行なうことを強く検討するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But, once again, none of these cryptic types is really needed if you just pass the return value of any of the functions mentioned in this section to another function directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171735Z">
        <seg>しかし、実際には上記の関数の戻り値を別の関数へ直接渡すだけで、この謎めいた型を使用する必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By convention, you should only use characters without diacritics (i.e. 7-bit ASCII strings) for msgids in the source code and write them in English.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132102Z">
        <seg>ソースコード中の msgid には発音区別符号を含まない文字 (つまり、7 ビット ASCII 文字列) だけを使用するべきで、それらは英語で書いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default the chain is empty, i.e. there is no next handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T154429Z">
        <seg>デフォルトでは連鎖は空、つまり、次のイベントハンドラは存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default this adaptation is off.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T145238Z">
        <seg>デフォルトではこの適応は無効になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, <bpt i="3" x="3">&lt;c3&gt;</bpt>wxUSE_UNICODE_WCHAR<ept i="3">&lt;/c3&gt;</ept> is also defined as 1, however in UTF-8 build (described in the previous section), it is set to 0 and <bpt i="4" x="4">&lt;c4&gt;</bpt>wxUSE_UNICODE_UTF8<ept i="4">&lt;/c4&gt;</ept>, which is usually 0, is set to 1 instead.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T120930Z">
        <seg>デフォルトでは <bpt i="3" x="3">&lt;c3&gt;</bpt>wxUSE_UNICODE_WCHAR<ept i="3">&lt;/c3&gt;</ept> も 1 に定義されていますが、(前の章で述べた) UTF-8 ビルドでは 0 に設定されており、通常は 0 に設定されている <bpt i="4" x="4">&lt;c4&gt;</bpt>wxUSE_UNICODE_UTF8<ept i="4">&lt;/c4&gt;</ept> が代わりに 1 に設定されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, GetEventHandler returns a pointer to the window itself unless an application has redirected event handling using SetEventHandler or PushEventHandler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T062844Z">
        <seg>SetEventHandler や PushEventHandler を使用してイベント処理をリダイレクトしていない場合、デフォルトでは GetEventHandler はウィンドウ自身を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, all messages logged by wxWidgets originate from "wx" component or one of its subcomponents such as "wx/net/ftp", while the messages logged by your own code are assigned empty log component.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T140648Z">
        <seg>デフォルトでは wxWidgets によって記録されるすべてのメッセージは "wx" コンポーネントかそのサブコンポーネント ("wx/net/ftp" など) に割り当てられており、あなた自身のコードによって記録されるメッセージは空のログコンポーネントに割り当てられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, all the steps described above will be performed but by setting the level to 1, for example, you can choose to only look for <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStdDialogButtonSizer<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T152910Z">
        <seg>デフォルトでは上で述べた処理がすべて行われますが、レベルを 1 に設定することで <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStdDialogButtonSizer<ept i="1">&lt;/a1&gt;</ept> のみを探すようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, it points to wxConvLibc or wxConvLocal, depending on which works best on the current platform.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130716T160935Z">
        <seg>デフォルトでは wxConvLibc と wxConvLocal のうち、現在のプラットフォームに適している方が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, most log messages are enabled.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T092231Z">
        <seg>デフォルトでは大半のログメッセージが有効化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, the DDE implementation is used under Windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T155142Z">
        <seg>Windows ではデフォルトで DDE 版が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Destroy<ept i="0">&lt;/a0&gt;</ept> if you want to be certain that the window is destroyed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T150935Z">
        <seg>確実にウィンドウを破棄する場合、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Destroy<ept i="0">&lt;/a0&gt;</ept> を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call this from your event handler to veto a system shutdown or to signal to the calling application t...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T034528Z">
        <seg>システムシャットダウンを拒否したり、ウィンドウを終了しないことを呼び出し元へ通知したりするためにイベントハンドラ内でこの関数を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call this function to tell wxScrolled to perform the actual scrolling on a different window (and not ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T124624Z">
        <seg>異なるウィンドウ (同じウィンドウではありません) 上の wxScrolled を実際にスクロールさせるためにはこの関数を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Call this to force layout of the children anew, e.g.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T155808Z">
        <seg>強制的に子コントロールの再配置するときにこの関数を呼んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Called after OnDrop() returns true.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135815Z">
        <seg>OnDrop() のあとに呼び出すと true を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Called by MakeConnection(), by default this simply returns a new wxConnection object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150605Z">
        <seg>MakeConnection() から呼ばれ、デフォルトでは単純に新しい wxConnection オブジェクトを返却するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Called to log a new record.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111512Z">
        <seg>新しいレコードを記録するために呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Called to log the specified string at given level.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111537Z">
        <seg>指定されたレベルで与えられた文字列を記録するために呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Called to log the specified string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111550Z">
        <seg>指定された文字列を記録するために呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient::MakeConnection<ept i="0">&lt;/a0&gt;</ept> implicitly creates an instance of <bpt i="1" x="1">&lt;b1&gt;</bpt>MyConnection<ept i="1">&lt;/b1&gt;</ept> if the request for a connection is accepted, and the client then requests an <bpt i="2" x="2">&lt;i2&gt;</bpt>Advise<ept i="2">&lt;/i2&gt;</ept> loop from the server (an Advise loop is where the server calls the client when data has changed).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134739Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient::MakeConnection<ept i="0">&lt;/a0&gt;</ept> を呼び出すと接続要求が受け付けられた場合に <bpt i="1" x="1">&lt;b1&gt;</bpt>MyConnection<ept i="1">&lt;/b1&gt;</ept> のインスタンスが暗黙的に作成されます。そして、クライアントはサーバからの <bpt i="2" x="2">&lt;i2&gt;</bpt>Advise<ept i="2">&lt;/i2&gt;</ept> ループを要求します。(Advise ループとはデータが変更されたときにサーバがクライアントを呼び出すところのことです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling <bpt i="1" x="1">&lt;a1&gt;</bpt>wxClient::MakeConnection<ept i="1">&lt;/a1&gt;</ept> implicitly creates an instance of <bpt i="2" x="2">&lt;e2&gt;</bpt>MyConnection<ept i="2">&lt;/e2&gt;</ept> if the request for a connection is accepted, and the client then requests an <bpt i="3" x="3">&lt;e3&gt;</bpt>Advise<ept i="3">&lt;/e3&gt;</ept> loop from the server (an Advise loop is where the server calls the client when data has changed).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T153015Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxClient::MakeConnection<ept i="1">&lt;/a1&gt;</ept> を呼び出すと接続要求が受け付けられた場合に <bpt i="2" x="2">&lt;e2&gt;</bpt>MyConnection<ept i="2">&lt;/e2&gt;</ept> のインスタンスが暗黙的に作成されます。そして、クライアントはサーバからの <bpt i="3" x="3">&lt;e3&gt;</bpt>Advise<ept i="3">&lt;/e3&gt;</ept> ループを要求します。(Advise ループとはデータが変更されたときにサーバがクライアントを呼び出すところのことです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling this method immediately repaints the invalidated area of the window and all of its children r...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T234835Z">
        <seg>この関数を呼び出すと直ちにウィンドウとその子コントロールの無効領域を再帰的に再描画します。(通常、これは制御フローがイベントループに戻ってきたときにだけ行われます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling this provides useful information to the calling code.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T145407Z">
        <seg>この関数を呼ぶことで呼び出し元へ有用な情報を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calling wxConfig::Write() with an enum value will fail to compile because wxConfig now tries to convert all unknown types to <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> automatically using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxToString()<ept i="1">&lt;/a1&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152841Z">
        <seg>wxConfig は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxToString()<ept i="1">&lt;/a1&gt;</ept> を使用して不明な型を自動的に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> へ変換するようになったため、wxConfig::Write() に enum 値を渡すとコンパイルに失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calls wxFileTranslationsLoader::AddCatalogLookupPathPrefix().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041226Z">
        <seg>wxFileTranslationsLoader::AddCatalogLookupPathPrefix() を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calls wxTranslations::AddCatalog(const wxString&amp;).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T135514Z">
        <seg>wxTranslations::AddCatalog(const wxString&amp;) を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Categories</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004637Z">
        <seg>カテゴリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Caveats When Not Using C++ RTTI</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024505Z">
        <seg>C++ RTTI を使用しない場合の注意点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Changes Since wxWidgets 2.8</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T145933Z">
        <seg>wxWidgets 2.8 からの変更点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Changes the selection for the given page, returning the previous selection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160136Z">
        <seg>指定されたページを変更し、以前選択していたページを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Character type (<bpt i="0" x="0">&lt;t0&gt;</bpt>char<ept i="0">&lt;/t0&gt;</ept> or <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t<ept i="1">&lt;/t1&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150637Z">
        <seg>文字型 (<bpt i="0" x="0">&lt;t0&gt;</bpt>char<ept i="0">&lt;/t0&gt;</ept> または <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t<ept i="1">&lt;/t1&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Charset=iso8859-2</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T133346Z">
        <seg>Charset=iso8859-2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Child windows are deleted from within the parent destructor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040931Z">
        <seg>子ウィンドウは親ウィンドウのデストラクタで削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Choosing Unicode Representation</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092411Z">
        <seg>Unicode 表現の選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004641Z">
        <seg>クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes for reading text or binary data from a particular stream such as <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextInputStream<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextOutputStream<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDataInputStream<ept i="2">&lt;/a2&gt;</ept> and <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDataOutputStream<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T135957Z">
        <seg>特定のストリームからテキストデータやバイナリデータを読み込むクラス:  <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextInputStream<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextOutputStream<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDataInputStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDataOutputStream<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T152931Z">
        <seg>クラス:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T155917Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmapHandler<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxIcon<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCursor<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T134216Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmapHandler<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxIcon<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCursor<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBufferedDC<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBufferedPaintDC<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDC<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPostScriptDC<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxMetafileDC<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxMemoryDC<ept i="5">&lt;/a5&gt;</ept>, <bpt i="6" x="6">&lt;a6&gt;</bpt>wxPrinterDC<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxScreenDC<ept i="7">&lt;/a7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxClientDC<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxPaintDC<ept i="9">&lt;/a9&gt;</ept>, <bpt i="10" x="10">&lt;a10&gt;</bpt>wxWindowDC<ept i="10">&lt;/a10&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140522Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBufferedDC<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBufferedPaintDC<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDC<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPostScriptDC<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxMetafileDC<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxMemoryDC<ept i="5">&lt;/a5&gt;</ept>, <bpt i="6" x="6">&lt;a6&gt;</bpt>wxPrinterDC<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxScreenDC<ept i="7">&lt;/a7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxClientDC<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxPaintDC<ept i="9">&lt;/a9&gt;</ept>, <bpt i="10" x="10">&lt;a10&gt;</bpt>wxWindowDC<ept i="10">&lt;/a10&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T144244Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfig<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T145550Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfig<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfigBase<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T153832Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfigBase<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataObject<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextDataObject<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDropSource<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDropTarget<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxTextDropTarget<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFileDropTarget<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T155148Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataObject<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextDataObject<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDropSource<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDropTarget<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxTextDropTarget<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFileDropTarget<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T145543Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialogLayoutAdapter<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T154459Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialogLayoutAdapter<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074637Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDir<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTempFile<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextFile<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T054220Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDir<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTempFile<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextFile<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxListCtrl<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxImageList<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004435Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxListCtrl<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxImageList<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogStderr<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogTextCtrl<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogWindow<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxLogGui<ept i="5">&lt;/a5&gt;</ept>, <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogNull<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxLogBuffer<ept i="7">&lt;/a7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogChain<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxLogInterposer<ept i="9">&lt;/a9&gt;</ept>, <bpt i="10" x="10">&lt;a10&gt;</bpt>wxLogInterposerTemp<ept i="10">&lt;/a10&gt;</ept>, <bpt i="11" x="11">&lt;a11&gt;</bpt>wxStreamToTextRedirector<ept i="11">&lt;/a11&gt;</ept>, <bpt i="12" x="12">&lt;a12&gt;</bpt>wxLogFormatter<ept i="12">&lt;/a12&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131003Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogStderr<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogTextCtrl<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogWindow<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxLogGui<ept i="5">&lt;/a5&gt;</ept>, <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogNull<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxLogBuffer<ept i="7">&lt;/a7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogChain<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxLogInterposer<ept i="9">&lt;/a9&gt;</ept>, <bpt i="10" x="10">&lt;a10&gt;</bpt>wxLogInterposerTemp<ept i="10">&lt;/a10&gt;</ept>, <bpt i="11" x="11">&lt;a11&gt;</bpt>wxStreamToTextRedirector<ept i="11">&lt;/a11&gt;</ept>, <bpt i="12" x="12">&lt;a12&gt;</bpt>wxLogFormatter<ept i="12">&lt;/a12&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>,<it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003250Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>,<it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept>, wxMBConvLibc, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMBConvUTF7<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxMBConvUTF8<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCSConv<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxMBConvUTF16<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxMBConvUTF32<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T151947Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept>, wxMBConvLibc, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMBConvUTF7<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxMBConvUTF8<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCSConv<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxMBConvUTF16<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxMBConvUTF32<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxServer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxClient<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151554Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxServer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxClient<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxServer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxClient<ept i="2">&lt;/a2&gt;</ept> wxWidgets has a number of different classes to help with interprocess communication and network programming.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T152830Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxServer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxClient<ept i="2">&lt;/a2&gt;</ept> wxWidgets にはプロセス間通信やネットワークプログラミングを支援する様々なクラスがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBoxSizer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStaticBoxSizer<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxGridSizer<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFlexGridSizer<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxGridBagSizer<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140818Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBoxSizer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStaticBoxSizer<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxGridSizer<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFlexGridSizer<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxGridBagSizer<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGridSizer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFlexGridSizer<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxBoxSizer<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxStaticBoxSizer<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>CreateButtonSizer<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T110559Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGridSizer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFlexGridSizer<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxBoxSizer<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxStaticBoxSizer<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>CreateButtonSizer<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStreamBase<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStreamBuffer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxInputStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxOutputStream<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFilterInputStream<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFilterOutputStream<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T133304Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStreamBase<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStreamBuffer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxInputStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxOutputStream<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFilterInputStream<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFilterOutputStream<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxArrayString<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStringTokenizer<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T043328Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxArrayString<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStringTokenizer<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMutex<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCriticalSection<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCondition<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T141801Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMutex<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCriticalSection<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCondition<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxThreadHelper<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxMutex<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCriticalSection<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxCondition<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxSemaphore<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150916Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxThreadHelper<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxMutex<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCriticalSection<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxCondition<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxSemaphore<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextValidator<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxGenericValidator<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T142251Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextValidator<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxGenericValidator<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextValidator<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxGenericValidator<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxIntegerValidator<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFloatingPointValidator<ept i="4">&lt;/a4&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150334Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextValidator<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxGenericValidator<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxIntegerValidator<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFloatingPointValidator<ept i="4">&lt;/a4&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Close can be vetoed by this process (return <bpt i="0" x="0">&lt;s0&gt;</bpt>false<ept i="0">&lt;/s0&gt;</ept>), whereas Destroy definitely destroys the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040359Z">
        <seg>Close は (<bpt i="0" x="0">&lt;s0&gt;</bpt>false<ept i="0">&lt;/s0&gt;</ept> を返却したときに) 終了処理を拒否できるのに対し、Destroy は確実にウィンドウを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Close can be vetoed by this process (return false), whereas Destroy definitely destroys the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T153319Z">
        <seg>Close は (false を返却したときに) 終了処理を拒否できるのに対し、Destroy は確実にウィンドウを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Close(<bpt i="3" x="3">&lt;s3&gt;</bpt>true<ept i="3">&lt;/s3&gt;</ept>);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034309Z">
        <seg>Close(<bpt i="3" x="3">&lt;s3&gt;</bpt>true<ept i="3">&lt;/s3&gt;</ept>);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Closing Windows</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T033851Z">
        <seg>ウィンドウの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Code points are represented in computer memory as a sequence of one or more <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>code units<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>, where a code unit is a unit of memory: 8, 16, or 32 bits.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T025750Z">
        <seg>コードポイントはメモリ上ではひとつ以上の <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>コード単位<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> の並びとして表現されます。コード単位とは 8、16、32 ビットといったメモリの単位のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Common Features</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140941Z">
        <seg>共通の機能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Common features</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T125314Z">
        <seg>共通の機能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Comparison of wxString to other string classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T045005Z">
        <seg>wxString と他の文字列クラスとの比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Comparison to Other String Classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030048Z">
        <seg>他の文字列クラスとの比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Compatible with wxWidgets 2.8:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124909Z">
        <seg>wxWidgets 2.8 互換:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Compiling the .po file into .mo file to be used by the program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001253Z">
        <seg>.po ファイルをプログラムから使用される .mo ファイルにコンパイルする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Consider using string iterators instead if possible or replace this expression with</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123625Z">
        <seg>可能であれば代わりに文字列のイテレータを使用するようにするか、次のように置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construction of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCSConv<ept i="0">&lt;/a0&gt;</ept> instance on the fly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151910Z">
        <seg>実行時における <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCSConv<ept i="0">&lt;/a0&gt;</ept> インスタンスの構築。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Construction of wxCSConv instance on the fly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T143518Z">
        <seg>実行時における wxCSConv インスタンスの構築。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Constructor for a wxBoxSizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145952Z">
        <seg>wxBoxSizer のコンストラクタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Container for sizer items flags providing readable names for them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145234Z">
        <seg>サイザーのフラグを格納するコンテナで、フラグに読みやすい名前を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Contents</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145426Z">
        <seg>Contents</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converting Buffers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151422Z">
        <seg>バッファの変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converting Data</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134457Z">
        <seg>データの変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converting Strings</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151420Z">
        <seg>文字列の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converting buffers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T144406Z">
        <seg>バッファの変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converting data</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132742Z">
        <seg>データの変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converting strings</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T142722Z">
        <seg>文字列の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts C string encoded in UTF-8 to wxString.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082421Z">
        <seg>UTF-8 で符号化された C 文字列を UTF-8 に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts given buffer of binary data from 8-bit string to wxString.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161946Z">
        <seg>与えられたバイナリデータを 8 ビット文字列から wxString に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts string to a wxColour best represented by the given string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153010Z">
        <seg>指定された文字列で表現される wxColour へ文字列を変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the given wxColour into a string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152707Z">
        <seg>指定された wxColour を文字列に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the string to an 8-bit string in ISO-8859-1 encoding in the form of a wxCharBuffer (Unicode ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T162243Z">
        <seg>文字列を ISO-8859-1 の 8 ビット文字列に変換し、wxCharBuffer として返却します。 (Unicode ビルド時のみ) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the string to an ASCII, 7-bit string in the form of a wxCharBuffer (Unicode builds only) or ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T155223Z">
        <seg>wxCharBuffer (Unicode ビルドのみ) もしくは C 文字列 (ANSI ビルド) の形式で文字列を ASCII 7 ビット文字列に変換する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the strings contents to UTF-8 and returns it either as a temporary wxCharBuffer object or as...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T162641Z">
        <seg>文字列を UTF-8 に変換したものを一時的な wxWCharBuffer オブジェクト、または内部文字列のポインタ (UTF-8 ビルド時) として返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the strings contents to the wide character representation and returns it as a temporary wxWC...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T153001Z">
        <seg>文字列をワイド文字表現に変換したものを一時的な wxWCharBuffer オブジェクト (Unix と OS X の場合)、またはワイド文字列である内部文字列のポインタ (Windows の場合) として返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Copies the current host machine's name into the supplied buffer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T153041Z">
        <seg>現在のホストマシン名を与えられたバッファへコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Copy from a source DC to this DC.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T153857Z">
        <seg>コピー元 DC からこの DC へコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Correspondingly, when using a horizontal sizer, each child can be centered, aligned at the bottom or aligned at the top.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T151613Z">
        <seg>同様に、水平方向のサイザーを使用する場合、各子コントロールを中央寄せ、下寄せ、上寄せにすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create an instance of your client object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T024730Z">
        <seg>クライアントオブジェクトのインスタンスを作成する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Create an instance of your server object and call Create to activate it, giving it a service name.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T024712Z">
        <seg>サーバオブジェクトのインスタンスを作成し、作成したオブジェクトを有効化するためにサービス名を指定して Create を呼び出す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>CreateButtonSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115452Z">
        <seg>CreateButtonSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a sizer with standard buttons.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145917Z">
        <seg>標準ボタンを含むサイザーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a wxLog class for the application to use for logging errors.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120838Z">
        <seg>エラーを記録するためにアプリケーション用の wxLog クラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates the wxAppTraits object when GetTraits() needs it for the first time.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120908Z">
        <seg>最初に GetTraits() が必要とした時に wxAppTraits オブジェクトを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Custom Event Summary</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153309Z">
        <seg>カスタムイベントの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Custom event summary</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T130143Z">
        <seg>カスタムイベントの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Customising scrolling adaptation</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T152318Z">
        <seg>スクロールの適応のカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Cycles through the tabs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155933Z">
        <seg>タブを循環させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DDE works within one computer only.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T155158Z">
        <seg>DDE は同じコンピュータ内でのみ動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DECLARE_EVENT_TABLE()
};</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081806Z">
        <seg>DECLARE_EVENT_TABLE()
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DECLARE_EVENT_TABLE_ENTRY( wxEVT_PLOT_ACTION, id, -1, \</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164318Z">
        <seg>DECLARE_EVENT_TABLE_ENTRY( wxEVT_PLOT_ACTION, id, -1, \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DECLARE_EVENT_TYPE(wxEVT_MY_EVENT, -1)

DEFINE_EVENT_TYPE(wxEVT_MY_EVENT)

// user code intercepting the event

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155743Z">
        <seg>DECLARE_EVENT_TYPE(wxEVT_MY_EVENT, -1)

DEFINE_EVENT_TYPE(wxEVT_MY_EVENT)

// イベントを捕まえるユーザコード

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Data Loss due To Unicode Conversion Errors</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T134125Z">
        <seg>Unicode の変換エラーによるデータ喪失</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Data Transfer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151556Z">
        <seg>データの転送</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Data transfer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032207Z">
        <seg>データの転送</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Declares a custom event type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T154504Z">
        <seg>カスタムイベント型を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Default Window Close Behaviour</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T033936Z">
        <seg>ウィンドウ終了時のデフォルトの振る舞い</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Default alignment is wxALIGN_LEFT | wxALIGN_TOP.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T162139Z">
        <seg>デフォルトのアライメントは wxALIGN_LEFT | wxALIGN_TOP です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Default location of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFileConfig<ept i="0">&lt;/a0&gt;</ept> files has changed under Windows, you will need to update your code if you access these files directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T144445Z">
        <seg>Windows における <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFileConfig<ept i="0">&lt;/a0&gt;</ept> ファイルのデフォルトの場所が変更されたため、これらのファイルに直接アクセスしている場合はコードを更新する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Define a new event type associated with the specified event class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T154453Z">
        <seg>特定のイベントクラスに関連する新しいイベント型を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Defining Your Own Event Class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150218Z">
        <seg>独自のイベントクラスの定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Defining your own event class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162712Z">
        <seg>独自のイベントクラスの定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Deletes all items in the control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160300Z">
        <seg>コントロール内のすべての項目を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Deletes the specified item.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160228Z">
        <seg>指定された項目を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Deletes the specified page, and the associated window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160010Z">
        <seg>指定されたページと、それに関連するウィンドウを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Depending on what flags are used for the respective dialog item, the dialog item can be made to fill out the available space entirely, i.e. it will grow to a size larger than the minimal size, or it will be moved to either the centre of the available space or to either side of the space.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T123615Z">
        <seg>個々のコントロールに使用されたフラグに応じて空きスペースを満たす、つまり、最小サイズ以上に伸長させるか、空きスペースの中央またはいずれかの側に移動させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derive a class from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient<ept i="0">&lt;/a0&gt;</ept>, overriding OnMakeConnection to create and return an instance of the derived connection class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150329Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient<ept i="0">&lt;/a0&gt;</ept> を継承して OnMakeConnection をオーバーライドし、継承したコネクションクラスのインスタンスを作成して返却する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derive a class from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept>, providing handlers for various messages sent to the client side of a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept> (e.g. OnAdvise).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150322Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> を継承し、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept> のクライアント側へ送信されたメッセージ用のハンドラ (OnAdvise など) を用意する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derive a class from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept>, providing handlers for various messages sent to the server side of a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept> (e.g. OnExecute, OnRequest, OnPoke).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150253Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> を継承し、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept> のサーバ側へ送信されたメッセージ用のハンドラ (OnExecute、OnRequest、OnPoke など) を用意する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derive a class from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxServer<ept i="0">&lt;/a0&gt;</ept>, overriding OnAcceptConnection to accept or reject a connection on the basis of the topic argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150303Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxServer<ept i="0">&lt;/a0&gt;</ept> を継承し、トピック引数に基づいて接続を許可または拒否するために OnAcceptConnection をオーバーライドする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derive a class from wxClient, overriding OnMakeConnection to create and return an instance of the derived connection class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T025322Z">
        <seg>wxClient を継承して OnMakeConnection をオーバーライドし、継承したコネクションクラスのインスタンスを作成して返却する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derive a class from wxConnection, providing handlers for various messages sent to the client side of a wxConnection (e.g. OnAdvise).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T024721Z">
        <seg>wxConnection を継承し、wxConnection のクライアント側へ送信されたメッセージ用のハンドラ (OnAdvise など) を用意する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derive a class from wxConnection, providing handlers for various messages sent to the server side of a wxConnection (e.g. OnExecute, OnRequest, OnPoke).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T024654Z">
        <seg>wxConnection を継承し、wxConnection のサーバ側へ送信されたメッセージ用のハンドラ (OnExecute、OnRequest、OnPoke など) を用意する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derive a class from wxServer, overriding OnAcceptConnection to accept or reject a connection on the basis of the topic argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T024704Z">
        <seg>wxServer を継承し、トピック引数に基づいて接続を許可または拒否するために OnAcceptConnection をオーバーライドする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derived classes include wxMBConvLibc, several different wxMBConvUTFxxx classes, and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept>, which implement different kinds of conversions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151724Z">
        <seg>継承クラスには wxMBConvLibc、いくつかの wxMBConvUTFxxx クラス、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept> が含まれており、それぞれ異なる種類の変換を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derived classes include wxMBConvLibc, several different wxMBConvUTFxxx classes, and wxCSConv, which implement different kinds of conversions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130716T160339Z">
        <seg>継承クラスには wxMBConvLibc、いくつかの wxMBConvUTFxxx クラス、wxCSConv が含まれており、それぞれ異なる種類の変換を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derived from</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145836Z">
        <seg>継承元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Destroys the window safely.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040125Z">
        <seg>安全にウィンドウを破棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Device Contexts</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T142857Z">
        <seg>デバイスコンテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Device context overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140518Z">
        <seg>デバイスコンテキストの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Directories</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004713Z">
        <seg>ディレクトリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Do child windows get deleted automatically?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T050202Z">
        <seg>子ウィンドウは自動的に削除されますか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Documentation</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004740Z">
        <seg>ドキュメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Documented for information.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150634Z">
        <seg>参考情報として文書化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Doing it in a naive way doesn't work:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T025608Z">
        <seg>これは単純な方法では実現できません:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Drag and Drop Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T132854Z">
        <seg>ドラッグ・アンド・ドロップの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Drag and drop overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T155140Z">
        <seg>ドラッグ・アンド・ドロップの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DrawMyPicture(dc);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141640Z">
        <seg>DrawMyPicture(dc);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DrawMyPicture(dc);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154321Z">
        <seg>DrawMyPicture(dc);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Due to limitations of the underlying physical storage, it may not implement 100% of the base class functionality.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T151817Z">
        <seg>根底にある物理ストレージの制約のため、基底クラスの機能を 100% 実装しているわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>During program development you will need the gettext package for working with message catalogs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T160435Z">
        <seg>プログラム開発を行なっている間はメッセージカタログを扱うために gettext パッケージが必要となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Dynamic Event Handling</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T035231Z">
        <seg>動的イベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_BUTTON  (BUTTON1,   MyFrame::OnButton1)
END_EVENT_TABLE()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075547Z">
        <seg>EVT_BUTTON  (BUTTON1,   MyFrame::OnButton1)
END_EVENT_TABLE()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_BUTTON(BUTTON1, MyFrame::OnButton1)
<bpt i="3" x="3">&lt;a3&gt;</bpt>wxEND_EVENT_TABLE<ept i="3">&lt;/a3&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022454Z">
        <seg>EVT_BUTTON(BUTTON1, MyFrame::OnButton1)
<bpt i="3" x="3">&lt;a3&gt;</bpt>wxEND_EVENT_TABLE<ept i="3">&lt;/a3&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_CHAR, EVT_KEY_DOWN and EVT_KEY_UP macros handle keyboard input for any window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081321Z">
        <seg>EVT_CHAR、EVT_KEY_DOWN、EVT_KEY_UP マクロは任意のウィンドウのキーボード入力を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_COMMAND  (ID_MY_WINDOW, wxEVT_MY_EVENT, MyFrame::OnMyEvent)
END_EVENT_TABLE()

void MyFrame::OnMyEvent( wxCommandEvent &amp;event )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155756Z">
        <seg>EVT_COMMAND  (ID_MY_WINDOW, wxEVT_MY_EVENT, MyFrame::OnMyEvent)
END_EVENT_TABLE()

void MyFrame::OnMyEvent( wxCommandEvent &amp;event )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_COMMAND (ID_MY_WINDOW, MY_EVENT, MyFrame::OnMyEvent)
<bpt i="9" x="9">&lt;a9&gt;</bpt>wxEND_EVENT_TABLE<ept i="9">&lt;/a9&gt;</ept>()

<bpt i="10" x="10">&lt;s10&gt;</bpt>void<ept i="10">&lt;/s10&gt;</ept> MyFrame::OnMyEvent(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCommandEvent<ept i="11">&lt;/a11&gt;</ept>&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150058Z">
        <seg>EVT_COMMAND (ID_MY_WINDOW, MY_EVENT, MyFrame::OnMyEvent)
<bpt i="9" x="9">&lt;a9&gt;</bpt>wxEND_EVENT_TABLE<ept i="9">&lt;/a9&gt;</ept>()

<bpt i="10" x="10">&lt;s10&gt;</bpt>void<ept i="10">&lt;/s10&gt;</ept> MyFrame::OnMyEvent(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCommandEvent<ept i="11">&lt;/a11&gt;</ept>&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_COMMAND(id, event, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160501Z">
        <seg>EVT_COMMAND(id, event, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_COMMAND_RANGE(id1, id2, event, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160551Z">
        <seg>EVT_COMMAND_RANGE(id1, id2, event, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_CUSTOM(event, id, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160022Z">
        <seg>EVT_CUSTOM(event, id, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_CUSTOM_RANGE(event, id1, id2, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160421Z">
        <seg>EVT_CUSTOM_RANGE(event, id1, id2, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_MENU    (DO_TEST,   MyFrame::DoTest)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075544Z">
        <seg>EVT_MENU    (DO_TEST,   MyFrame::DoTest)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_MENU    (wxID_EXIT, MyFrame::OnExit)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075540Z">
        <seg>EVT_MENU    (wxID_EXIT, MyFrame::OnExit)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_MENU(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxID_EXIT<ept i="2">&lt;/a2&gt;</ept>, MyFrame::OnExit)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024807Z">
        <seg>EVT_MENU(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxID_EXIT<ept i="2">&lt;/a2&gt;</ept>, MyFrame::OnExit)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_MENU(DO_TEST, MyFrame::DoTest)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024809Z">
        <seg>EVT_MENU(DO_TEST, MyFrame::DoTest)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_NOTIFY(event, id, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162544Z">
        <seg>EVT_NOTIFY(event, id, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_NOTIFY_RANGE(event, id1, id2, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162621Z">
        <seg>EVT_NOTIFY_RANGE(event, id1, id2, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_PLOT  (ID_MY_WINDOW,  MyFrame::OnPlot)
END_EVENT_TABLE()

void MyFrame::OnPlot( wxPlotEvent &amp;event )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164433Z">
        <seg>EVT_PLOT  (ID_MY_WINDOW,  MyFrame::OnPlot)
END_EVENT_TABLE()

void MyFrame::OnPlot( wxPlotEvent &amp;event )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_PLOT(ID_MY_WINDOW, MyFrame::OnPlot)
<bpt i="52" x="52">&lt;a52&gt;</bpt>wxEND_EVENT_TABLE<ept i="52">&lt;/a52&gt;</ept>()

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151229Z">
        <seg>EVT_PLOT(ID_MY_WINDOW, MyFrame::OnPlot)
<bpt i="52" x="52">&lt;a52&gt;</bpt>wxEND_EVENT_TABLE<ept i="52">&lt;/a52&gt;</ept>()

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_SIZE    (           MyFrame::OnSize)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075545Z">
        <seg>EVT_SIZE    (           MyFrame::OnSize)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_SIZE(MyFrame::OnSize)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024810Z">
        <seg>EVT_SIZE(MyFrame::OnSize)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each entry contains either a string or a number (or a boolean value; support for other types of data such as dates or timestamps is planned) and is identified by the full path to it: something like /MyApp/UserPreferences/Colors/Foreground.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T152016Z">
        <seg>各エントリは文字列か数値 (もしくは真偽値; 日付やタイムスタンプなど、他の型にも対応する予定です) のいずれかを含み、それらは (/MyApp/UserPreferences/Colors/Foreground のような) フルパスで識別されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each entry contains either a string or a number (or a boolean value; support for other types of data such as dates or timestamps is planned) and is identified by the full path to it: something like <bpt i="0" x="0">&lt;c0&gt;</bpt>/MyApp/UserPreferences/Colors/Foreground<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T153929Z">
        <seg>各エントリは文字列か数値 (もしくは真偽値; 日付やタイムスタンプなど、他の型にも対応する予定です) のいずれかを含み、それらは (<bpt i="0" x="0">&lt;c0&gt;</bpt>/MyApp/UserPreferences/Colors/Foreground<ept i="0">&lt;/c0&gt;</ept> のような) フルパスで識別されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each represents either a certain way to lay out dialog items in a dialog or it fulfills a special task such as wrapping a static box around a dialog item (or another sizer).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124500Z">
        <seg>それぞれ、特定の方法でダイアログ内にコントロールを配置したり、コントロール (や他のサイザー) をスタティックボックスで囲むといった特別な処理を行ったりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Either the number of columns or the number or rows is fixed and the grid sizer will grow in the respectively other orientation if new children are added:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153259Z">
        <seg>列数か行数のどちらかは固定で、新しい子コントロールが追加されるとグリッドサイザーはもう一方の方向に伸びます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Enables or disables the event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T071121Z">
        <seg>イベントハンドラを有効化、無効化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EndModal(wxID_OK);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150139Z">
        <seg>EndModal(wxID_OK);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Ends a modal dialog, passing a value to be returned from the ShowModal() invocation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153344Z">
        <seg>ShowModal() の戻り値を指定してモーダルダイアログを終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Environment Variables</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155609Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Environment variables</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154427Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Even better, use the same XPMs on all platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T150906Z">
        <seg>もっと良い方法はすべてのプラットフォームで同じ XPM を使用することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Even despite caching the index, indexed access should be replaced with sequential access using string iterators.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151404Z">
        <seg>インデックスのキャッシュを持つとはいえ、インデックスアクセスはイテレータを使った逐次アクセスに置き換えるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Even sending Unicode data from one Unicode-aware system to another may need encoding to an 8-bit multibyte encoding (UTF-7 or UTF-8 is typically used for this purpose), to pass unhindered through any traditional transport channels.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T153823Z">
        <seg>Unicode を意識したシステムから別のシステムへ Unicode データを送信するときでさえ、昔ながらの転送チャネル経由で制約を受けずにやり取りするために 8 ビットのマルチバイトエンコーディング (この目的には一般的に UTF-7 か UTF-8 が使用されます) に符号化する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Even though wxWidgets always uses Unicode internally, not all the other libraries and programs do and even those that do use Unicode may use a different encoding of it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T155933Z">
        <seg>wxWidgets が常に内部で Unicode を使うとはいえ、他のすべてのライブラリやプログラムが Unicode を使っているとは限りませんし、Unicode を使っていたとしても、別のエンコーディングを使用しているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event Handlers Chain</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T150657Z">
        <seg>イベントハンドラの連鎖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event Handlers vs Virtual Methods</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151413Z">
        <seg>イベントハンドラ vs 仮想関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event Handling</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153256Z">
        <seg>イベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event Handling with Event Tables</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T010033Z">
        <seg>イベントテーブルによるイベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event handlers can be bound at any moment.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040536Z">
        <seg>イベントハンドラは任意のタイミングでバインドできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event handling overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074632Z">
        <seg>イベント処理の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event macros summary</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080129Z">
        <seg>イベントマクロの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events and Event Handling</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T151141Z">
        <seg>イベントとイベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events generated by the user vs programmatically generated events</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060300Z">
        <seg>ユーザの生成したイベントとプログラム的に生成したイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events of different types can use the same event class, for example both button click and listbox selection events use <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> class (as do all the other simple control events), but the key press event uses <bpt i="3" x="3">&lt;a3&gt;</bpt>wxKeyEvent<ept i="3">&lt;/a3&gt;</ept> as the information associated with it is different.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T034722Z">
        <seg>同じイベントクラスを別のイベント型に使用することができます。例えば、ボタンのクリックイベントとリストボックスの選択イベントは両方とも <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> クラスを使用しています (し、他のすべての単純なコントロールイベントも同じものを使用しています) が、キー押下イベントはイベントに関連する情報が異なるため、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxKeyEvent<ept i="3">&lt;/a3&gt;</ept> を使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events that have a higher level of meaning and/or are generated by the window itself, (button click, menu select, tree expand, etc.) are command events and are sent up to the parent to see if it is interested in the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T052930Z">
        <seg>(ボタンクリック、メニュー選択、ツリーの展開といった) 高水準で、ウィンドウ自身が生成するイベントはコマンドイベントと呼ばれ、そのイベントを処理対象とする場合に親コントロールに対して送られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events that have a higher level of meaning or are generated by the window itself (button click, menu select, tree expand, etc.) are command events and are sent up to the parent to see if it is interested in the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T150333Z">
        <seg>(ボタンクリック、メニュー選択、ツリーの展開といった) 高水準で、ウィンドウ自身が生成するイベントはコマンドイベントと呼ばれ、そのイベントを処理対象とする場合に親コントロールに対して送られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T132613Z">
        <seg>例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example 1: Constructing a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> from input in current encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151850Z">
        <seg>例 1: 現在のエンコーディングの入力から <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> を構築する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example 1: Constructing a wxString from input in current encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T143235Z">
        <seg>例 1: 現在のエンコーディングの入力から wxString を構築する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example 2: Input in UTF-8 encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T143313Z">
        <seg>例 2: UTF-8 の入力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example 3: Input in KOI8-R.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T143415Z">
        <seg>例 3: KOI8-R の入力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example 4: Printing a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> to stdout in UTF-8 encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151920Z">
        <seg>例 4: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> を標準出力へ UTF-8 で出力する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example 4: Printing a wxString to stdout in UTF-8 encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T143941Z">
        <seg>例 4: wxString を標準出力へ UTF-8 で出力する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example 5: Printing a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> to stdout in custom encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151929Z">
        <seg>例 5: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> を標準出力へ任意のエンコーディングで出力する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example 5: Printing a wxString to stdout in custom encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T144125Z">
        <seg>例 5: wxString を標準出力へ任意のエンコーディングで出力する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145825Z">
        <seg>例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Examples</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033548Z">
        <seg>例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Exiting the Application Gracefully</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T034138Z">
        <seg>正しいアプリケーションの終了方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Explicit conversion to C string in the internal representation (either wchar_t* or UTF-8-encoded char...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142502Z">
        <seg>C 文字列を明示的に内部表現 (ビルドに応じて wchar_t* もしくは UTF-8 でエンコードされた char* のいずれか) へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Extra functionality is automatically given to the dialog box, such as tabbing between items (currently Windows only).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T145801Z">
        <seg>コントロール間のタブ遷移など、自動的に追加の機能が付与される。(Windows のみ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Extracting the strings to be translated from the program: this uses the work done in the previous step because <bpt i="0" x="0">&lt;c0&gt;</bpt>xgettext<ept i="0">&lt;/c0&gt;</ept> program used for string extraction recognises the standard <bpt i="1" x="1">&lt;c1&gt;</bpt><bpt i="2" x="2">&lt;a2&gt;</bpt>_()<ept i="2">&lt;/a2&gt;</ept><ept i="1">&lt;/c1&gt;</ept> as well as (using its <bpt i="3" x="3">&lt;c3&gt;</bpt>-k<ept i="3">&lt;/c3&gt;</ept> option) our wxGetTranslation and extracts all strings inside the calls to these functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040541Z">
        <seg>翻訳対象の文字列をプログラム中から抽出する: これには前のステップで行った作業の結果を利用します。なぜなら、文字列の抽出に使用する  <bpt i="0" x="0">&lt;c0&gt;</bpt>xgettext<ept i="0">&lt;/c0&gt;</ept> プログラムが標準的な <bpt i="1" x="1">&lt;c1&gt;</bpt><bpt i="2" x="2">&lt;a2&gt;</bpt>_()<ept i="2">&lt;/a2&gt;</ept><ept i="1">&lt;/c1&gt;</ept> や (<bpt i="3" x="3">&lt;c3&gt;</bpt>-k<ept i="3">&lt;/c3&gt;</ept> オプションを使用することで) wxGetTranslation を識別し、それらの中にある文字列をすべて抽出してくれるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Extracting the strings to be translated from the program: this uses the work done in the previous step because <bpt i="0" x="0">&lt;t0&gt;</bpt>xgettext<ept i="0">&lt;/t0&gt;</ept> program used for string extraction recognises the standard _() as well as (using its <bpt i="1" x="1">&lt;t1&gt;</bpt>-k<ept i="1">&lt;/t1&gt;</ept> option) our wxGetTranslation and extracts all strings inside the calls to these functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T000843Z">
        <seg>翻訳対象の文字列をプログラム中から抽出する: これには前のステップで行った作業の結果を利用します。なぜなら、文字列の抽出に使用する  <bpt i="0" x="0">&lt;t0&gt;</bpt>xgettext<ept i="0">&lt;/t0&gt;</ept> プログラムが標準的な _() や (<bpt i="1" x="1">&lt;t1&gt;</bpt>-k<ept i="1">&lt;/t1&gt;</ept> オプションを使用することで) wxGetTranslation を識別し、それらの中にある文字列をすべて抽出してくれるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>File Classes and Functions</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132432Z">
        <seg>ファイルクラスと関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>File classes and functions overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132400Z">
        <seg>ファイルクラスと関数の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Files</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004707Z">
        <seg>ファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Final word of caution: most of these functions may return either directly the pointer to internal string buffer or a temporary <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCharBuffer<ept i="0">&lt;/a0&gt;</ept> or <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWCharBuffer<ept i="1">&lt;/a1&gt;</ept> object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170249Z">
        <seg>最後の注意点です: これらの関数の大半は内部文字列のポインタを直接返却するか、一時的な <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCharBuffer<ept i="0">&lt;/a0&gt;</ept> または <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWCharBuffer<ept i="1">&lt;/a1&gt;</ept> のオブジェクトを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally note that <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> uses the current locale encoding to convert any C string literal to Unicode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114602Z">
        <seg>最後に、C リテラル文字列を Unicode へ変換するために <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> では現在のロケールを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally notice that writing</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123115Z">
        <seg>最後の注意点として、次のように書くと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::ToUTF8()<ept i="3">&lt;/a3&gt;</ept> and <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::wc_str()<ept i="4">&lt;/a4&gt;</ept> functions never fail and always return a pointer to char string containing the UTF-8 representation of the string or <bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161847Z">
        <seg>最後に、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::ToUTF8()<ept i="3">&lt;/a3&gt;</ept> 関数と <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::wc_str()<ept i="4">&lt;/a4&gt;</ept> 関数は絶対に失敗せず、UTF-8 で表現された char 文字列や <bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> 文字列のポインタを常に返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> is called on the wxApp object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T030557Z">
        <seg>最後に、wxApp オブジェクトの <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, a few structure fields, notable <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxCmdLineEntryDesc::shortName<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept>, <bpt i="2" x="2">&lt;c2&gt;</bpt>longName<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>description<ept i="3">&lt;/c3&gt;</ept> fields have been changed to be of type <bpt i="4" x="4">&lt;c4&gt;</bpt>const<ept i="4">&lt;/c4&gt;</ept> <bpt i="5" x="5">&lt;c5&gt;</bpt>char*<ept i="5">&lt;/c5&gt;</ept> instead of <bpt i="6" x="6">&lt;c6&gt;</bpt>const<ept i="6">&lt;/c6&gt;</ept> <bpt i="7" x="7">&lt;c7&gt;</bpt>wxChar*<ept i="7">&lt;/c7&gt;</ept> so you will need to remove <bpt i="8" x="8">&lt;c8&gt;</bpt><bpt i="9" x="9">&lt;a9&gt;</bpt>wxT()<ept i="9">&lt;/a9&gt;</ept><ept i="8">&lt;/c8&gt;</ept> or <bpt i="10" x="10">&lt;c10&gt;</bpt><bpt i="11" x="11">&lt;a11&gt;</bpt>_T()<ept i="11">&lt;/a11&gt;</ept><ept i="10">&lt;/c10&gt;</ept> if you used it with their initializers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T124014Z">
        <seg>最後に、いくつかの構造体のフィールド、特に <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxCmdLineEntryDesc::shortName<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept>、<bpt i="2" x="2">&lt;c2&gt;</bpt>longName<ept i="2">&lt;/c2&gt;</ept>、 <bpt i="3" x="3">&lt;c3&gt;</bpt>description<ept i="3">&lt;/c3&gt;</ept> フィールドの型が <bpt i="6" x="6">&lt;c6&gt;</bpt>const<ept i="6">&lt;/c6&gt;</ept> <bpt i="7" x="7">&lt;c7&gt;</bpt>wxChar*<ept i="7">&lt;/c7&gt;</ept> から <bpt i="4" x="4">&lt;c4&gt;</bpt>const<ept i="4">&lt;/c4&gt;</ept> <bpt i="5" x="5">&lt;c5&gt;</bpt>char*<ept i="5">&lt;/c5&gt;</ept> に変更されました。そのため、それらのフィールドの初期化に <bpt i="8" x="8">&lt;c8&gt;</bpt><bpt i="9" x="9">&lt;a9&gt;</bpt>wxT()<ept i="9">&lt;/a9&gt;</ept><ept i="8">&lt;/c8&gt;</ept> や <bpt i="10" x="10">&lt;c10&gt;</bpt><bpt i="11" x="11">&lt;a11&gt;</bpt>_T()<ept i="11">&lt;/a11&gt;</ept><ept i="10">&lt;/c10&gt;</ept> を使用している場合、それらを取り除く必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, i.e., if the event is still not processed, the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept> object itself (which derives from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept>) gets a last chance to process it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T033002Z">
        <seg>最後に、つまり、イベントがまだ処理されていないときに、(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> を継承している) <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept> オブジェクト自身でイベントが処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, if even more control over the output format is needed, then DoLogRecord() can be overridden as it allows to construct custom messages depending on the log level or even do completely different things depending on the message severity (for example, throw away all messages except warnings and errors, show warnings on the screen and forward the error messages to the user's (or programmer's) cell phone -- maybe depending on whether the timestamp tells us if it is day or night in the current time zone).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T144950Z">
        <seg>最後に、出力形式をさらに制御する必要がある場合、DoLogRecord() をオーバーライドすることでログレベルに応じてカスタムメッセージを構築したり、メッセージの重要度に応じてまったく別のことを行なうことさえできます。(例えば警告とエラー以外のメッセージを破棄し、警告は画面に表示して、エラーメッセージはユーザ (もしくはプログラマ) の携帯電話へ転送するなどです。ただ、これは現在のタイムゾーンにおいて昼か夜かがタイムスタンプで分かるかどうかによりますが)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, if you don't like using macros for static initialization of the event tables you may also use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::Connect<ept i="0">&lt;/a0&gt;</ept> to connect the events to the handlers dynamically, during run-time.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T083026Z">
        <seg>最後に、マクロを使ってイベントテーブルを静的に初期化したくない場合、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::Connect<ept i="0">&lt;/a0&gt;</ept> を使用して動的に (実行時に) イベントとイベントハンドラを接続することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, it is enough to override <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLog::DoLogText()<ept i="6">&lt;/a6&gt;</ept> if you only want to redirect the log messages and the destination doesn't depend on the message log level.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112346Z">
        <seg>最後に、メッセージのログレベルに関係なく、ログメッセージをリダイレクトしたいだけの場合、<bpt i="6" x="6">&lt;a6&gt;</bpt>wxLog::DoLogText()<ept i="6">&lt;/a6&gt;</ept> をオーバーライドすれば充分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, note that the type used by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> to store Unicode code units (<bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept>) is always <bpt i="3" x="3">&lt;c3&gt;</bpt>typedef-ined<ept i="3">&lt;/c3&gt;</ept> to be <bpt i="4" x="4">&lt;a4&gt;</bpt>wxStringCharType<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T153427Z">
        <seg>最後に、Unicode コード単位を格納するために <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> で使用される型 (<bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> または <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept>) は常に <bpt i="4" x="4">&lt;a4&gt;</bpt>wxStringCharType<ept i="4">&lt;/a4&gt;</ept> として <bpt i="3" x="3">&lt;c3&gt;</bpt>typedef<ept i="3">&lt;/c3&gt;</ept> されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, take a look at the <bpt i="0" x="0">&lt;a0&gt;</bpt>i18n sample<ept i="0">&lt;/a0&gt;</ept> which shows you how all this looks in practice.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043730Z">
        <seg>最後に、国際化を実際にどういう風に行うのかを示す例として <bpt i="0" x="0">&lt;a0&gt;</bpt>i18n サンプル<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, the most widespread encoding used for the external Unicode storage (e.g. files and network protocols) is <bpt i="0" x="0">&lt;b0&gt;</bpt>UTF-8<ept i="0">&lt;/b0&gt;</ept> which is byte-oriented and so avoids the endianness ambiguities of UTF-16 and UTF-32.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T032504Z">
        <seg>最後に、Unicode を外部記憶装置 (ファイルやネットワークプロトコルなど) へ格納する際に一番広く使われているのが <bpt i="0" x="0">&lt;b0&gt;</bpt>UTF-8<ept i="0">&lt;/b0&gt;</ept> です。これはバイト指向のエンコーディングであるため、 UTF-16 や UTF-32 のようにエンディアンの曖昧さがありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is a special <bpt i="0" x="0">&lt;a0&gt;</bpt>wxT()<ept i="0">&lt;/a0&gt;</ept> macro which should enclose all literal strings in the program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T162941Z">
        <seg>最後に、プログラム中のリテラル文字列を囲む、特別な <bpt i="0" x="0">&lt;a0&gt;</bpt>wxT()<ept i="0">&lt;/a0&gt;</ept> マクロがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is also a possibility to redirect the output sent to <bpt i="0" x="0">&lt;e0&gt;</bpt>cout<ept i="0">&lt;/e0&gt;</ept> to a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> by using the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamToTextRedirector<ept i="2">&lt;/a2&gt;</ept> class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091612Z">
        <seg>最後に、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamToTextRedirector<ept i="2">&lt;/a2&gt;</ept> クラスを使用することで <bpt i="0" x="0">&lt;e0&gt;</bpt>cout<ept i="0">&lt;/e0&gt;</ept> へ出力した内容を <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> にリダイレクトすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is also a possibility to redirect the output sent to <bpt i="0" x="0">&lt;i0&gt;</bpt>cout<ept i="0">&lt;/i0&gt;</ept> to a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> by using the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamToTextRedirector<ept i="2">&lt;/a2&gt;</ept> class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015408Z">
        <seg>最後に、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamToTextRedirector<ept i="2">&lt;/a2&gt;</ept> クラスを使用することで <bpt i="0" x="0">&lt;i0&gt;</bpt>cout<ept i="0">&lt;/i0&gt;</ept> へ出力した内容を <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> にリダイレクトすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is another additional complication (which, in fact, simplifies life of wxWidgets programmers significantly): when propagating the command events up to the parent window, the event propagation stops when it reaches the parent dialog, if any.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T155514Z">
        <seg>最後に、他にも複雑な仕組みがあります (実際には、これは wxWidgets プログラマの生活を非常にシンプルにしてくれるものです): コマンドイベントが親ウィンドウへ伝播するとき、親ダイアログまで到達した時点で伝播が終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is another additional complication (which, in fact, simplifies life of wxWidgets programmers significantly): when propagating the command events upwards to the parent window, the event propagation stops when it reaches the parent dialog, if any.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T033645Z">
        <seg>最後に、他にも複雑な仕組みがあります (実際には、これは wxWidgets プログラマの生活を非常にシンプルにしてくれるものです): コマンドイベントが親ウィンドウへ伝播するとき、親ダイアログまで到達した時点で伝播が終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, you can allocate identifiers dynamically using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxNewId()<ept i="1">&lt;/a1&gt;</ept> function too.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012026Z">
        <seg>最後に、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxNewId()<ept i="1">&lt;/a1&gt;</ept> を使用して動的に識別子を割り当てることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, you need to implement the event handlers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T032749Z">
        <seg>最後に、イベントハンドラを実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, you will need to generate and post your custom events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144501Z">
        <seg>最後に、カスタムイベントを生成し、送信する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First define one or more <bpt i="0" x="0">&lt;e0&gt;</bpt>event handlers<ept i="0">&lt;/e0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T013847Z">
        <seg>最初に、ひとつ以上の <bpt i="0" x="0">&lt;e0&gt;</bpt>イベントハンドラ<ept i="0">&lt;/e0&gt;</ept> を定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of all, each character in an Unicode program takes 2 bytes instead of usual one, so another type should be used to store the characters (<bpt i="0" x="0">&lt;t0&gt;</bpt>char<ept i="0">&lt;/t0&gt;</ept> only holds 1 byte usually).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151208Z">
        <seg>最初に、プログラム中の文字について、通常であれば 1 文字あたり 1 バイトですが、Unicode プログラムの場合 2 バイトを消費するため、文字を格納するために別の型を使用する必要があります。 (<bpt i="0" x="0">&lt;t0&gt;</bpt>char<ept i="0">&lt;/t0&gt;</ept> 型は通常 1 バイトしか保持できません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of all, no knowledge of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> classes is needed to use them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131136Z">
        <seg>まず最初に、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> クラス郡を使用するのにその知識は必要とされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of all, no knowledge of <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLog<ept i="0">&lt;/i0&gt;</ept> classes is needed to use them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010433Z">
        <seg>まず最初に、<bpt i="0" x="0">&lt;i0&gt;</bpt>wxLog<ept i="0">&lt;/i0&gt;</ept> クラス郡を使用するのにその知識は必要とされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of all, you see that there are no more <bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef<ept i="0">&lt;/t0&gt;</ept>s at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161813Z">
        <seg>最初に、<bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef<ept i="0">&lt;/t0&gt;</ept> がまったくないことが分かると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of them is in the call to the <bpt i="0" x="0">&lt;i0&gt;</bpt>printf()<ept i="0">&lt;/i0&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T054053Z">
        <seg>最初のバグは <bpt i="0" x="0">&lt;i0&gt;</bpt>printf()<ept i="0">&lt;/i0&gt;</ept> 関数の呼び出し部分に存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Font Mapping</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134456Z">
        <seg>フォントマッピング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Font encodings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143339Z">
        <seg>フォントエンコーディング。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Font mapping</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132549Z">
        <seg>フォントマッピング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept>, the client size also excludes the frame menu, tool and status bars, if any.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T144549Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept> の場合、クライアントサイズにはフレームメニュー、ツールバー、ステータスバーも含まれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For a set of dialog convenience functions, including file selection, see <bpt i="0" x="0">&lt;a0&gt;</bpt>Dialog functions<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T150652Z">
        <seg>ファイルの選択を含む、ダイアログの便利関数は <bpt i="0" x="0">&lt;a0&gt;</bpt>ダイアログ関数<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For a set of dialog convenience functions, including file selection, see <bpt i="0" x="0">&lt;a0&gt;</bpt>Dialogs<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T154535Z">
        <seg>ファイルの選択を含む、ダイアログの便利関数は <bpt i="0" x="0">&lt;a0&gt;</bpt>ダイアログ<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For all normal, informational messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131732Z">
        <seg>すべての通常 (通知) メッセージ用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For an example implementation, see the <bpt i="1" x="1">&lt;c1&gt;</bpt><bpt i="2" x="2">&lt;a2&gt;</bpt>valtext.h<ept i="2">&lt;/a2&gt;</ept><ept i="1">&lt;/c1&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>valtext.cpp<ept i="3">&lt;/c3&gt;</ept> files in the wxWidgets library.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T152603Z">
        <seg>実装の例は wxWidgets ライブラリの <bpt i="1" x="1">&lt;c1&gt;</bpt><bpt i="2" x="2">&lt;a2&gt;</bpt>valtext.h<ept i="2">&lt;/a2&gt;</ept><ept i="1">&lt;/c1&gt;</ept> と <bpt i="3" x="3">&lt;c3&gt;</bpt>valtext.cpp<ept i="3">&lt;/c3&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For an example implementation, see the valtext.h and valtext.cpp files in the wxWidgets library.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145000Z">
        <seg>実装の例は wxWidgets ライブラリの valtext.h と valtext.cpp を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For communication between secondary threads and the main thread, you may use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::AddPendingEvent<ept i="0">&lt;/a0&gt;</ept> or its short version <bpt i="1" x="1">&lt;a1&gt;</bpt>wxPostEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T145108Z">
        <seg>メインスレッドとサブスレッドとの通信には <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::AddPendingEvent<ept i="0">&lt;/a0&gt;</ept> か、もしくはその短縮版である <bpt i="1" x="1">&lt;a1&gt;</bpt>wxPostEvent<ept i="1">&lt;/a1&gt;</ept> を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For communication between secondary threads and the main thread, you may use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::QueueEvent<ept i="0">&lt;/a0&gt;</ept> or its short version <bpt i="1" x="1">&lt;a1&gt;</bpt>wxQueueEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T235702Z">
        <seg>メインスレッドとサブスレッドとの通信には <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::QueueEvent<ept i="0">&lt;/a0&gt;</ept> か、もしくはその短縮版である <bpt i="1" x="1">&lt;a1&gt;</bpt>wxQueueEvent<ept i="1">&lt;/a1&gt;</ept> を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For consistency, continue to use the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Destroy<ept i="0">&lt;/a0&gt;</ept> function instead of the <bpt i="1" x="1">&lt;b1&gt;</bpt>delete<ept i="1">&lt;/b1&gt;</ept> operator when deleting these kinds of windows explicitly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T143925Z">
        <seg>一貫性を保つために、これらの種類のウィンドウを明示的に削除するときは <bpt i="1" x="1">&lt;b1&gt;</bpt>delete<ept i="1">&lt;/b1&gt;</ept> 演算子の代わりに引き続き <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Destroy<ept i="0">&lt;/a0&gt;</ept> 関数を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For consistency, continue to use the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Destroy<ept i="0">&lt;/a0&gt;</ept> function instead of the <bpt i="1" x="1">&lt;c1&gt;</bpt>delete<ept i="1">&lt;/c1&gt;</ept> operator when deleting these kinds of windows explicitly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040940Z">
        <seg>一貫性を保つために、これらの種類のウィンドウを明示的に削除するときは <bpt i="1" x="1">&lt;c1&gt;</bpt>delete<ept i="1">&lt;/c1&gt;</ept> 演算子の代わりに引き続き <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Destroy<ept i="0">&lt;/a0&gt;</ept> 関数を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For definitions of <bpt i="0" x="0">&lt;e0&gt;</bpt>code units<ept i="0">&lt;/e0&gt;</ept> and <bpt i="1" x="1">&lt;e1&gt;</bpt>code points<ept i="1">&lt;/e1&gt;</ept> terms, please see the <bpt i="2" x="2">&lt;a2&gt;</bpt>Unicode Representations and Terminology<ept i="2">&lt;/a2&gt;</ept> paragraph.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T031611Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>コード単位<ept i="0">&lt;/e0&gt;</ept> と <bpt i="1" x="1">&lt;e1&gt;</bpt>コードポイント<ept i="1">&lt;/e1&gt;</ept> の定義については <bpt i="2" x="2">&lt;a2&gt;</bpt>Unicode 表現と用語<ept i="2">&lt;/a2&gt;</ept> の段落を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxListBox<ept i="1">&lt;/a1&gt;</ept>'s best size will be calculated based on how many items it has, up to a certain limit, or a <bpt i="2" x="2">&lt;a2&gt;</bpt>wxButton<ept i="2">&lt;/a2&gt;</ept>'s best size will be calculated based on its label size, but normally won't be smaller than the platform default button size (unless a style flag overrides that).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T142130Z">
        <seg>例えば <bpt i="1" x="1">&lt;a1&gt;</bpt>wxListBox<ept i="1">&lt;/a1&gt;</ept> の最適サイズは特定の上限までの間でアイテム数に応じて計算されます。また、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxButton<ept i="2">&lt;/a2&gt;</ept> の最適サイズはラベルのサイズに応じて計算されますが、(スタイルフラグで上書きしない限り) 通常はプラットフォームのデフォルトのボタンサイズより小さくなることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example a typical loop:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151546Z">
        <seg>例えば典型的なループである、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example a wxListBox's best size will be calculated based on how many items it has, up to a certain limit, or a wxButton's best size will be calculated based on its label size, but normally won't be smaller than the platform default button size (unless a style flag overrides that).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T144853Z">
        <seg>例えば wxListBox の最適サイズは特定の上限までの間でアイテム数に応じて計算されます。また、wxButton の最適サイズはラベルのサイズに応じて計算されますが、(スタイルフラグで上書きしない限り) 通常はプラットフォームのデフォルトのボタンサイズより小さくなることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example it is possible to filter out a number of key events sent by the system to a native text control by overriding wxTextCtrl and defining a handler for key events using EVT_KEY_DOWN.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T085703Z">
        <seg>例えば、ネイティブテキストコントロールに送られるキーイベントをフィルタリングする場合、wxTextCtrl をオーバーライドし、EVT_KEY_DOWN を使用してキーイベントハンドラを定義することで実現できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034203Z">
        <seg>以下に例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a function to get the length of a wide-character string is called <bpt i="3" x="3">&lt;t3&gt;</bpt>wcslen()<ept i="3">&lt;/t3&gt;</ept> (compare with <bpt i="4" x="4">&lt;t4&gt;</bpt>strlen()<ept i="4">&lt;/t4&gt;</ept> - you see that the only difference is that the "str" prefix standing for "string" has been replaced with "wcs" standing for "wide-character string").</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151421Z">
        <seg>例えば、ワイド文字列の長さを取得する関数は <bpt i="3" x="3">&lt;t3&gt;</bpt>wcslen()<ept i="3">&lt;/t3&gt;</ept> と呼ばれます。(<bpt i="4" x="4">&lt;t4&gt;</bpt>strlen()<ept i="4">&lt;/t4&gt;</ept> と比べると、違いは "string" を表す接頭語 "str" が "wide-character string" を表す "wcs" に変わっているだけであることが分かると思います) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, clicking on a button, selecting an item from a list box and pressing a key on the keyboard all generate events with different event types.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T161205Z">
        <seg>例えば、ボタンクリック、リストボックスの選択、キー押下はすべて別々のイベント型のイベントを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, if a widget's min size is set to (150, -1) and the best size is (80, 22) then the best fitting size is (150, 22).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T142917Z">
        <seg>例えば、ウィジェットの最小サイズが (150, -1)、最適サイズが (80, 22) の場合、最適フィットサイズは (150, 22) になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, if the standard font as well as the overall design of Linux/GTK widgets requires more space than on Windows, the initial dialog size will automatically be bigger on Linux/GTK than on Windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124150Z">
        <seg>例えば、標準フォントが Linux/GTK ウィジェット全体のデザインと同じように Windows の場合より多くのスペースを必要とする場合、ダイアログの初期サイズは Windows より Linux/GTK の方が自動的に大きくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, it's possible to do some initialization first and only bind the handlers if and when it succeeds.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040630Z">
        <seg>例えば、先に何かの初期化処理を行い、それが成功したときにのみ、イベントハンドラをバインドすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, only error messages, or only error messages and warnings might be logged, filtering out all informational messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T085651Z">
        <seg>例えば、すべての通知メッセージをフィルタリングして、エラーメッセージのみ、もしくはエラーメッセージと警告メッセージのみを記録しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="3" x="3">&lt;c3&gt;</bpt>operator<ept i="3">&lt;/c3&gt;</ept>[] doesn't return neither a <bpt i="4" x="4">&lt;c4&gt;</bpt>char<ept i="4">&lt;/c4&gt;</ept> nor a <bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> but an object of a helper class <bpt i="6" x="6">&lt;a6&gt;</bpt>wxUniChar<ept i="6">&lt;/a6&gt;</ept> or <bpt i="7" x="7">&lt;a7&gt;</bpt>wxUniCharRef<ept i="7">&lt;/a7&gt;</ept> which is implicitly convertible to either.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122042Z">
        <seg>例えば、[] <bpt i="3" x="3">&lt;c3&gt;</bpt>演算子<ept i="3">&lt;/c3&gt;</ept> が返却する型は <bpt i="4" x="4">&lt;c4&gt;</bpt>char<ept i="4">&lt;/c4&gt;</ept> でも<bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> でもなく、どちらの型にも変換可能なヘルパークラスである <bpt i="6" x="6">&lt;a6&gt;</bpt>wxUniChar<ept i="6">&lt;/a6&gt;</ept> か <bpt i="7" x="7">&lt;a7&gt;</bpt>wxUniCharRef<ept i="7">&lt;/a7&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the notorious (due to the confusion they created) macros <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxT()<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt><bpt i="3" x="3">&lt;a3&gt;</bpt>_T()<ept i="3">&lt;/a3&gt;</ept><ept i="2">&lt;/c2&gt;</ept> are not needed at all any longer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T151144Z">
        <seg>例えば、(何を作成するのか分かりづらいことで) 悪名高い <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxT()<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept> マクロと <bpt i="2" x="2">&lt;c2&gt;</bpt><bpt i="3" x="3">&lt;a3&gt;</bpt>_T()<ept i="3">&lt;/a3&gt;</ept><ept i="2">&lt;/c2&gt;</ept> マクロはもはや完全に不要になりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, this code may crash:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162431Z">
        <seg>例えば、このコードはクラッシュするでしょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, wxZLibInputStream is an inline stream decompressor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141053Z">
        <seg>例えば、wxZLibInputStream はインラインでストリームを展開します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you could define a class inheriting from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> which shows all the log messages in some part of your main application window reserved for the message output without interrupting the user work flow with modal message boxes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120750Z">
        <seg>例えば、モーダルメッセージボックスでユーザの操作を妨げないようにするため、メインウィンドウの一部にすべてのログメッセージを表示するように <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> を継承したクラスを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you may wish to check that all files have been saved.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T155719Z">
        <seg>例えば、すべてのファイルが保存されているか確認したいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you might want to invoke a dialog editor in your application that changes aspects of dialog boxes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041412Z">
        <seg>例えば、ダイアログの外見を変更するためのダイアログエディタをアプリケーション内で起動したいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081820Z">
        <seg>以下に例を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For handling binary data you may also want to look at the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStreamBuffer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxMemoryOutputStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxMemoryInputStream<ept i="3">&lt;/a3&gt;</ept> classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T154338Z">
        <seg>バイナリデータを扱うために <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStreamBuffer<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxMemoryOutputStream<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxMemoryInputStream<ept i="3">&lt;/a3&gt;</ept> についても参照したいと思うことでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For information about the new wxWidgets resource system, which can describe sizer-based dialogs, see the <bpt i="0" x="0">&lt;a0&gt;</bpt>XML-based resource system overview<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115321Z">
        <seg>サイザーに基づいたダイアログを作成可能な wxWidgets の新しいリソースシステムについての情報は <bpt i="0" x="0">&lt;a0&gt;</bpt>XML に基づくリソースシステムの概要<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For information about the wxWidgets resource system, which can describe sizer-based dialogs, see the <bpt i="0" x="0">&lt;a0&gt;</bpt>XML Based Resource System (XRC)<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140937Z">
        <seg>サイザーに基づいたダイアログを作成可能な wxWidgets のリソースシステムについての情報は <bpt i="0" x="0">&lt;a0&gt;</bpt>XML に基づくリソースシステム (XRC)<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For instance, it is not recommended to use the Windows registry for amounts of data more than a couple of kilobytes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T150545Z">
        <seg>例えば、Windows のレジストリに数キロバイト以上のデータを格納することは推奨されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For menu commands and most control commands (such as button presses), <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> is used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081510Z">
        <seg>メニューコマンドと (ボタン押下といった) 大半のコマンドコントロールでは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more detailed information on how to use sizers programmatically, please refer to the section <bpt i="0" x="0">&lt;a0&gt;</bpt>Programming with Sizers<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124732Z">
        <seg>サイザーをプログラムで使用する方法については <bpt i="0" x="0">&lt;a0&gt;</bpt>サイザーを用いたプログラミング<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more detailed information on how to use sizers programmatically, please refer to the section <bpt i="0" x="0">&lt;a0&gt;</bpt>Programming with wxBoxSizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141118Z">
        <seg>サイザーをプログラムで使用する方法については <bpt i="0" x="0">&lt;a0&gt;</bpt>サイザーを用いたプログラミング<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more info about how <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> works, please see the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString Overview<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T091920Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の挙動についての詳細は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString の概要<ept i="1">&lt;/a1&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more information about converters and Unicode see the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv classes overview<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144515Z">
        <seg>Unicode の変換についての詳細は  <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv クラスの概要<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more information, please see <bpt i="0" x="0">&lt;a0&gt;</bpt>Programming with wxBoxSizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124807Z">
        <seg>より詳しい情報は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer を用いたプログラミング<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For posting events to a certain event handler there are two possibilities: using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::AddPendingEvent<ept i="0">&lt;/a0&gt;</ept> or using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler::QueueEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144839Z">
        <seg>特定のイベントハンドラへイベントを送信する方法は 2 種類あります: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::AddPendingEvent<ept i="0">&lt;/a0&gt;</ept> を使用する方法と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler::QueueEvent<ept i="1">&lt;/a1&gt;</ept> を使用する方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For programming information, see <bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153320Z">
        <seg>プログラミングに関する情報は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For simplicity of implementation, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> when <bpt i="1" x="1">&lt;c1&gt;</bpt>wxUSE_UNICODE_WCHAR==1<ept i="1">&lt;/c1&gt;</ept> (e.g. on Windows) uses <bpt i="2" x="2">&lt;e2&gt;</bpt>per code unit indexing<ept i="2">&lt;/e2&gt;</ept> instead of <bpt i="3" x="3">&lt;e3&gt;</bpt>per code point indexing<ept i="3">&lt;/e3&gt;</ept> and doesn't know anything about surrogate pairs; in other words it always considers code points to be composed by 1 code unit, while this is really true only for characters in the <bpt i="4" x="4">&lt;e4&gt;</bpt>BMP<ept i="4">&lt;/e4&gt;</ept> (Basic Multilingual Plane).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T032417Z">
        <seg>実装を単純にするため、<bpt i="1" x="1">&lt;c1&gt;</bpt>wxUSE_UNICODE_WCHAR==1<ept i="1">&lt;/c1&gt;</ept> のとき (例えば Windows) の <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> では <bpt i="3" x="3">&lt;e3&gt;</bpt>コードポイントごとのインデックス<ept i="3">&lt;/e3&gt;</ept> の代わりに <bpt i="2" x="2">&lt;e2&gt;</bpt>コード単位ごとのインデックス<ept i="2">&lt;/e2&gt;</ept> を使用し、サロゲートペアについては考慮しません; つまり、コードポイントは常に 1 コード単位に格納されているものと仮定するということですが、これは <bpt i="4" x="4">&lt;e4&gt;</bpt>BMP<ept i="4">&lt;/e4&gt;</ept> (基本多言語面) の文字にしか当てはまりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For size events, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizeEvent<ept i="0">&lt;/a0&gt;</ept> is used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081247Z">
        <seg>リサイズイベントでは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizeEvent<ept i="0">&lt;/a0&gt;</ept> が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For the full list of event classes, please see the <bpt i="0" x="0">&lt;a0&gt;</bpt>event classes group page<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T013024Z">
        <seg>イベントクラスの完全な一覧は <bpt i="0" x="0">&lt;a0&gt;</bpt>イベントクラスグループ<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For the performance reasons <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> doesn't allocate exactly the amount of memory needed for each string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121124Z">
        <seg>性能上の理由から、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> は各文字列で必要とされる量ちょうどのメモリを割り当てません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For the performance reasons wxString doesn't allocate exactly the amount of memory needed for each string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080206Z">
        <seg>性能上の理由から、wxString は各文字列で必要とされる量ちょうどのメモリを割り当てません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For the window styles specific to each window class, please see the documentation for the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153607Z">
        <seg>各ウィンドウクラス独自のウィンドウスタイルについては、そのウィンドウのドキュメントを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this conversion, the <bpt i="2" x="2">&lt;e2&gt;</bpt>wxConvLibc<ept i="2">&lt;/e2&gt;</ept> class instance is used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114745Z">
        <seg>この変換では <bpt i="2" x="2">&lt;e2&gt;</bpt>wxConvLibc<ept i="2">&lt;/e2&gt;</ept> クラスのインスタンスが使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this purpose, a stretch factor may be assigned to each child, where the default value of 0 indicates that the child will not get more space than its requested minimum size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T145811Z">
        <seg>このため、子コントロールに対してストレッチ係数を割り当てます。ストレッチ係数のデフォルト値は 0 で、これは必要とする最小サイズ以上のスペースを取得しないことを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this reason, it's preferable to override DoGetBestClientSize() and let DoGetBestSize() compute the full best size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T150338Z">
        <seg>このため、DoGetBestClientSize() をオーバーライドする方がより望ましく、それに基づいて DoGetBestSize() が全体の最適サイズを計算するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogChain<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogPassThrough<ept i="1">&lt;/a1&gt;</ept> can be used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030523Z">
        <seg>このために <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogChain<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogPassThrough<ept i="1">&lt;/a1&gt;</ept> を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogChain<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogInterposer<ept i="1">&lt;/a1&gt;</ept>, and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogInterposerTemp<ept i="2">&lt;/a2&gt;</ept> can be used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114628Z">
        <seg>このために <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogChain<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogInterposer<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogInterposerTemp<ept i="2">&lt;/a2&gt;</ept> を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this, a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDataObject<ept i="1">&lt;/a1&gt;</ept> must be associated with the drop target and this data object will be responsible for the format negotiation between the drag source and the drop target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T162334Z">
        <seg>このため、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDataObject<ept i="1">&lt;/a1&gt;</ept> はドロップ先に関連付けられている必要があり、このデータオブジェクトはドラッグ元とドラッグ先で調整したフォーマットに従ったものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this, a <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDataObject<ept i="2">&lt;/a2&gt;</ept> must be associated with the drop target and this data object will be responsible for the format negotiation between the drag source and the drop target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135842Z">
        <seg>このため、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxDataObject<ept i="2">&lt;/a2&gt;</ept> はドロップ先に関連付けられている必要があり、このデータオブジェクトはドラッグ元とドラッグ先で調整したフォーマットに従ったものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this, you should only know about <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogXXX() functions<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131206Z">
        <seg>そのため、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogXXX() 関数<ept i="1">&lt;/a1&gt;</ept> についてのみ、知っておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this, you should only know about <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/i1&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T004647Z">
        <seg>そのため、<bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/i1&gt;</ept> 関数についてのみ、知っておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For validators to work correctly, validator functions must be called at the right times during dialog initialisation and dismissal.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145153Z">
        <seg>バリデータが正しく動作するためにはダイアログの初期化時、および終了時の適切なタイミングでバリデータ関数を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For verbose output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131802Z">
        <seg>詳細な出力用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For warnings - they are also normally shown to the user, but don't interrupt the program work...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131614Z">
        <seg>警告メッセージ (通常はユーザに通知されますが、プログラムの動作を妨げないメッセージ) 用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Freezes the window or, in other words, prevents any updates from taking place on screen, the window is not redrawn at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152001Z">
        <seg>ウィンドウをフリーズ、つまり、画面上のいかなる更新も行われないようにします。これを行なうとウィンドウはまったく再描画されなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>From a practical point of view, using Unicode is almost a requirement when writing applications for international audience.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031610Z">
        <seg>実用的な観点から見ると、世界中の人に向けてアプリケーションを書く時には Unicode の使用がほぼ必須と言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>From another point of view, they provide an interface which hides the differences between the Windows registry and the standard Unix text format configuration files.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T151327Z">
        <seg>別の見方をすれば、これらのクラスは Windows のレジストリと Unix のテキスト形式の設定ファイルの差異を隠蔽するインタフェースを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>From wxWidgets 2.0, <bpt i="0" x="0">&lt;i0&gt;</bpt>event tables<ept i="0">&lt;/i0&gt;</ept> are used instead, with a few exceptions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075240Z">
        <seg>wxWidgets 2.0 からは一部の例外を除き、代わりに <bpt i="0" x="0">&lt;i0&gt;</bpt>イベントテーブル<ept i="0">&lt;/i0&gt;</ept> が使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Function which must be overridden to implement the size available for the scroll target for the given...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T124849Z">
        <seg>指定されたメインウィンドウのサイズに対して、スクロール対象が使用可能なサイズを計算するために必ずオーバーライドする必要がある関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functions related to sizing</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T143841Z">
        <seg>サイズ関連の関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functions: see <bpt i="0" x="0">&lt;a0&gt;</bpt>Files and Directories<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072515Z">
        <seg>関数: <bpt i="0" x="0">&lt;a0&gt;</bpt>ファイルとディレクトリ<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functions: see <bpt i="0" x="0">&lt;a0&gt;</bpt>file functions<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072621Z">
        <seg>関数: <bpt i="0" x="0">&lt;a0&gt;</bpt>ファイル関数<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Further details (including how to read/write these entries) may be found in the documentation for <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConfigBase<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T152236Z">
        <seg>(エントリの読み書きの仕方を含む) より詳しい情報は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConfigBase<ept i="1">&lt;/a1&gt;</ept> のドキュメントにあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>GTK 2.0 only accepts UTF-8 strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T143410Z">
        <seg>GTK 2.0 は UTF-8 文字列のみを受け付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>General approach</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T130221Z">
        <seg>一般的なアプローチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generally speaking you should only use non-default UTF-8 build in specific circumstances e.g. building for resource-constrained systems where the overhead of conversions (and also reduced memory usage of UTF-8 compared to UTF-32 for the European languages) can be important.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033555Z">
        <seg>一般的に言うと、リソースが限られており、変換にかかるオーバーヘッド (と、ヨーロッパ言語において UTF-32 の代わりに UTF-8 を使用することによるメモリ消費量の削減) が重要となる、といった特殊な状況下でのみ、非標準の UTF-8 ビルドを使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generating <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNavigationKeyEvent<ept i="0">&lt;/a0&gt;</ept> events doesn't work any more under wxGTK (and other platforms in the future), use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Navigate()<ept i="1">&lt;/a1&gt;</ept> or NavigateIn() instead.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T124216Z">
        <seg>wxGTK では (将来的には他のプラットフォームでも) <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNavigationKeyEvent<ept i="0">&lt;/a0&gt;</ept> イベントを生成しても動作しません。代わりに <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Navigate()<ept i="1">&lt;/a1&gt;</ept> か NavigateIn() を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generation is as simple as instancing your custom event class and initializing its internal fields.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144702Z">
        <seg>生成はカスタムイベントのインスタンス化と内部変数の初期化と同じくらい単純です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generic Event Table Macros</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012407Z">
        <seg>汎用的なイベントテーブルマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generic event table macros</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160020Z">
        <seg>汎用的なイベントテーブルマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generic usage: an example</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141612Z">
        <seg>一般的な使用方法の例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Get the current font mapper object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143331Z">
        <seg>現在のフォントマッピングオブジェクトを取得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Get the picture?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T142220Z">
        <seg>分かりますか? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>GetEventHandler()-&gt;ProcessEvent( event );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155957Z">
        <seg>GetEventHandler()-&gt;ProcessEvent( event );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Gets all characters before the last occurrence of ch.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T155858Z">
        <seg>ch が最後に登場した位置以前のすべての文字列を取得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Gets all the characters after the first occurrence of ch.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T155836Z">
        <seg>ch が最初に登場した位置以降のすべての文字列を取得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Give the user a chance to save and quit, to not save but quit anyway, or to cancel the exit command altogether.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T155927Z">
        <seg>保存して終了するか、保存せずに終了するか、終了コマンドを完全にキャンセルするかをユーザが選択できるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Global instance of a wxPoint initialized with values (-1,-1).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142254Z">
        <seg>(-1,-1) に初期化された wxPoint のグルーバルインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Global instance of a wxSize object initialized to (-1,-1).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142314Z">
        <seg>(-1,-1) に初期化された wxSize のグルーバルインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Globally enable or disable logging.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T092213Z">
        <seg>ロギングをグローバルに有効化、または無効化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Glossary</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T143828Z">
        <seg>用語集</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Help Files</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134458Z">
        <seg>ヘルプファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Help files</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T133111Z">
        <seg>ヘルプファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hence, all <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> manipulation in your application will then operate on Unicode strings, and almost as easily as working with ordinary char strings (you just need to remember to use the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxT()<ept i="2">&lt;/a2&gt;</ept> macro to encapsulate any string literals).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151627Z">
        <seg>したがって、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> に対するすべての操作は Unicode 文字列に対して行われます。これは普通の char 文字列を使用する場合とほぼ同じくらい簡単です。(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxT()<ept i="2">&lt;/a2&gt;</ept> マクロを使用してリテラル文字列を囲むことを覚えておく必要があるだけです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hence, all wxString manipulation in your application will then operate on Unicode strings, and almost as easily as working with ordinary char strings (you just need to remember to use the wxT() macro to encapsulate any string literals).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T154221Z">
        <seg>したがって、wxString に対するすべての操作は Unicode 文字列に対して行われます。これは普通の char 文字列を使用する場合とほぼ同じくらい簡単です。(wxT() マクロを使用してリテラル文字列を囲むことを覚えておく必要があるだけです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here are all of them:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005029Z">
        <seg>以下にすべての関数を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here are some examples, using a <bpt i="8" x="8">&lt;a8&gt;</bpt>wxString<ept i="8">&lt;/a8&gt;</ept> object <bpt i="9" x="9">&lt;c9&gt;</bpt>s<ept i="9">&lt;/c9&gt;</ept> and some integer <bpt i="10" x="10">&lt;c10&gt;</bpt>n:<ept i="10">&lt;/c10&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122441Z">
        <seg>その例を以下に示します。この例では <bpt i="8" x="8">&lt;a8&gt;</bpt>wxString<ept i="8">&lt;/a8&gt;</ept> オブジェクト <bpt i="9" x="9">&lt;c9&gt;</bpt>s<ept i="9">&lt;/c9&gt;</ept> と、ある整数 <bpt i="10" x="10">&lt;c10&gt;</bpt>n<ept i="10">&lt;/c10&gt;</ept> を使用しています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is a sample:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152804Z">
        <seg>以下に例を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is an example of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextValidator<ept i="0">&lt;/a0&gt;</ept> usage.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150511Z">
        <seg>ここでは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextValidator<ept i="0">&lt;/a0&gt;</ept> の使い方の例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is an example of wxTextValidator usage.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143051Z">
        <seg>ここでは wxTextValidator の使い方の例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is an example, taken mostly from the <bpt i="0" x="0">&lt;i0&gt;</bpt>wxPlot<ept i="0">&lt;/i0&gt;</ept> library, which is in the <bpt i="1" x="1">&lt;i1&gt;</bpt>contrib<ept i="1">&lt;/i1&gt;</ept> section of the wxWidgets sources.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164140Z">
        <seg><bpt i="0" x="0">&lt;i0&gt;</bpt>wxPlot<ept i="0">&lt;/i0&gt;</ept> ライブラリから抜粋した例を以下に示します。このコードは wxWidgets のソースコードの <bpt i="1" x="1">&lt;i1&gt;</bpt>contrib<ept i="1">&lt;/i1&gt;</ept> セクションにあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is an example:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150318Z">
        <seg>例を以下に示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here's an example of an event table.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075537Z">
        <seg>イベントテーブルの例を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here's how you'd do the previous example with <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizerFlags<ept i="0">&lt;/a0&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145423Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizerFlags<ept i="0">&lt;/a0&gt;</ept> を使用して上記の例と同じことをすると以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here's how you'd do the previous example with wxSizerFlags:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145412Z">
        <seg>wxSizerFlags を使用して上記の例と同じことをすると以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, <bpt i="0" x="0">&lt;b0&gt;</bpt>MyConnection<ept i="0">&lt;/b0&gt;</ept> will respond to <bpt i="1" x="1">&lt;a1&gt;</bpt>OnAdvise<ept i="1">&lt;/a1&gt;</ept> messages sent by the server by displaying a message box.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134143Z">
        <seg>ここでは <bpt i="0" x="0">&lt;b0&gt;</bpt>MyConnection<ept i="0">&lt;/b0&gt;</ept> がサーバから送信された <bpt i="1" x="1">&lt;a1&gt;</bpt>OnAdvise<ept i="1">&lt;/a1&gt;</ept> メッセージに反応してメッセージボックスを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, <bpt i="0" x="0">&lt;e0&gt;</bpt>MyConnection<ept i="0">&lt;/e0&gt;</ept> will respond to OnAdvise messages sent by the server by displaying a message box.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152938Z">
        <seg>ここでは <bpt i="0" x="0">&lt;e0&gt;</bpt>MyConnection<ept i="0">&lt;/e0&gt;</ept> がサーバから送信された OnAdvise メッセージに反応してメッセージボックスを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, cMB2WC of the UTF8 object returns a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWCharBuffer<ept i="0">&lt;/a0&gt;</ept> containing a Unicode string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152036Z">
        <seg>ここで、UTF-8 オブジェクトの cMB2WC は Unicode 文字列を含む <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWCharBuffer<ept i="0">&lt;/a0&gt;</ept> を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, cMB2WC of the UTF8 object returns a wxWCharBuffer containing a Unicode string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T145146Z">
        <seg>ここで、UTF-8 オブジェクトの cMB2WC は Unicode 文字列を含む wxWCharBuffer を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, you can examine the events coming from buttons and windows, and if acceptable, pass them through to the original event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T065445Z">
        <seg>ここでは、ボタンやウィンドウから送られてくるイベントを検証し、それが適用可能なものである場合に元のイベントハンドラへ渡す、ということを行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hides or shows the dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T150116Z">
        <seg>ダイアログの表示・非表示を切り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hiding Controls Using Sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140945Z">
        <seg>サイザーによるコントロールの非表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hiding controls using sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T151438Z">
        <seg>サイザーによるコントロールの非表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How Events Propagate Upwards</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T153611Z">
        <seg>上位階層へのイベント伝播方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How Events are Processed</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153305Z">
        <seg>イベント処理の仕組み</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How Validators Interact with Dialogs</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150351Z">
        <seg>バリデータとダイアログ間のやり取り</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How can the application close a window itself?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T045949Z">
        <seg>どのようにしてアプリケーションからウィンドウを削除できますか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How do I exit the application gracefully?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T050140Z">
        <seg>アプリケーションを正しく終了するにはどうすれば良いですか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How events are processed</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T083106Z">
        <seg>イベント処理の仕組み</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How is this done?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T135050Z">
        <seg>これはどのように行われるのでしょうか? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How validators interact with dialogs</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145106Z">
        <seg>バリデータとダイアログ間のやり取り</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However code such as</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170708Z">
        <seg>しかし、以下のようなコードは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However different formats have specific advantages and disadvantages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033450Z">
        <seg>しかし、各フォーマットにはそれぞれ利点と欠点があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However if the program never manipulates 8 bit strings internally, using <bpt i="2" x="2">&lt;c2&gt;</bpt>char*<ept i="2">&lt;/c2&gt;</ept> pointers is safe as well.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T141012Z">
        <seg>しかし、内部で絶対に 8 ビット文字列を操作しないというのであれば、<bpt i="2" x="2">&lt;c2&gt;</bpt>char*<ept i="2">&lt;/c2&gt;</ept> ポインターを使用しても安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However if you define a custom log target, messages may be logged out of order, e.g. messages from the main thread with later timestamp may appear before messages with earlier timestamp logged from other threads.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120049Z">
        <seg>しかし、カスタムログターゲットを定義している場合、メッセージの記録される順がバラバラになる可能性があります。例えば、より後のタイムスタンプを持つメインスレッドのメッセージがより早いタイムスタンプを持つ他のスレッドのメッセージの前に表示されることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However initializing the string using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::FromUTF8()<ept i="0">&lt;/a0&gt;</ept> method and then accessing it as a char string via its <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::c_str()<ept i="1">&lt;/a1&gt;</ept> method is a recipe for disaster as the program may work perfectly well during testing on Unix systems using UTF-8 locale but completely fail under Windows where UTF-8 locales are never used because <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::c_str()<ept i="2">&lt;/a2&gt;</ept> would return an empty string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034628Z">
        <seg>しかし、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::FromUTF8()<ept i="0">&lt;/a0&gt;</ept> 関数で初期化した文字列に対して、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::c_str()<ept i="1">&lt;/a1&gt;</ept> 関数を使って char 文字列のようにアクセスしようとするのは災いのもとです。そのプログラムは UTF-8 ロケールを使用している Unix システムでテストしている間は完璧に動作するでしょうが、UTF-8 ロケールを使用していない Windows では <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::c_str()<ept i="2">&lt;/a2&gt;</ept> が空文字列を返すかもしれないため、全く動作しなくなるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However there is no built in method to send messages to the worker threads and you will need to use the available synchronization classes to implement the solution which suits your needs yourself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T145257Z">
        <seg>しかし、ワーカースレッドへメッセージを送信するためのビルトイン関数は存在しないため、要件にあった解決方法を実装するために既存の同期オブジェクトを使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However writing</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045715Z">
        <seg>しかし、次のように書くと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However you should be aware of the potential problems covered by the following section.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092358Z">
        <seg>しかし、次の章で触れる、潜在的な問題については注意すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizer<ept i="1">&lt;/a1&gt;</ept> also offers a separate method which can tell the sizer not to consider that control in its size calculations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141603Z">
        <seg>しかし、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizer<ept i="1">&lt;/a1&gt;</ept> はそのコントロールのサイズを考慮しないようにする別の関数も提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, as wxWidgets uses <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogError()<ept i="2">&lt;/a2&gt;</ept> in this situation, the exact error code (and the corresponding error message) will be given to the user together with "high level" message about data file writing error.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091846Z">
        <seg>しかし、このような状況で <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogError()<ept i="2">&lt;/a2&gt;</ept> を使用すれば、書き込みに失敗したファイルに関する "高レベル" なメッセージとともに正確なエラーコード (と対応するエラーメッセージ) が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, as wxWidgets uses <bpt i="2" x="2">&lt;i2&gt;</bpt>wxLogError()<ept i="2">&lt;/i2&gt;</ept> in this situation, the exact error code (and the corresponding error message) will be given to the user together with "high level" message about data file writing error.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T021817Z">
        <seg>しかし、このような状況で <bpt i="2" x="2">&lt;i2&gt;</bpt>wxLogError()<ept i="2">&lt;/i2&gt;</ept> を使用すれば、書き込みに失敗したファイルに関する "高レベル" なメッセージとともに正確なエラーコード (と対応するエラーメッセージ) が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, the original sizer hierarchy will still hold until Show or ShowModal is called.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T154259Z">
        <seg>ただし、Show または ShowModal が呼ばれるまではサイザーの元の階層構造が保持されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, there are several problems as well.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T051648Z">
        <seg>しかし、同様にいくつかの問題も存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, unlike the Unicode build mode of the previous versions of wxWidgets, this support is mostly transparent: you can still continue to work with the <bpt i="0" x="0">&lt;b0&gt;</bpt>narrow<ept i="0">&lt;/b0&gt;</ept> (i.e. current locale-encoded <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept>) strings even if <bpt i="2" x="2">&lt;b2&gt;</bpt>wide<ept i="2">&lt;/b2&gt;</ept> (i.e. UTF16-encoded <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t*<ept i="3">&lt;/c3&gt;</ept> or UTF8-encoded <bpt i="4" x="4">&lt;c4&gt;</bpt>char*<ept i="4">&lt;/c4&gt;</ept>) strings are also supported.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041201Z">
        <seg>しかし、wxWidgets の以前のバージョンにおける Unicode ビルドモードとは異なり、この対応はほとんど透過的です： <bpt i="2" x="2">&lt;b2&gt;</bpt>ワイド<ept i="2">&lt;/b2&gt;</ept> 文字列 (UTF16 で符号化された <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t*<ept i="3">&lt;/c3&gt;</ept> か、UTF8 で符号化された <bpt i="4" x="4">&lt;c4&gt;</bpt>char*<ept i="4">&lt;/c4&gt;</ept> のことです) がサポートされていても、引き続き  <bpt i="0" x="0">&lt;b0&gt;</bpt>ナロー<ept i="0">&lt;/b0&gt;</ept> 文字列 (現在のロケールで符号化された <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept> のことです) を使用することができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::Alloc()<ept i="0">&lt;/a0&gt;</ept> is tedious and so <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> tries to do its best.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121459Z">
        <seg>しかし、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::Alloc()<ept i="0">&lt;/a0&gt;</ept> を使用するのは手間がかかるため、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> ではできるだけのことをしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, using Alloc() is tedious and so wxString tries to do its best.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T093933Z">
        <seg>しかし、Alloc() を使用するのは手間がかかるため、wxString ではできるだけのことをしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, wxSizer also offers a separate method which can tell the sizer not to consider that control in its size calculations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T152022Z">
        <seg>しかし、wxSizer はそのコントロールのサイズを考慮しないようにする別の関数も提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>IE=9</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042759Z">
        <seg>IE=9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::GetContentWindow<ept i="0">&lt;/a0&gt;</ept> returns a window derived from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBookCtrlBase<ept i="1">&lt;/a1&gt;</ept>, the pages are made scrollable and no other adaptation is done.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T151049Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::GetContentWindow<ept i="0">&lt;/a0&gt;</ept> が <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBookCtrlBase<ept i="1">&lt;/a1&gt;</ept> を継承したウィンドウを返却する場合、ページがスクロール可能になるだけで、それ以外の適応は行われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If UTF-8 is used for the internal storage in <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;c3&gt;</bpt>wxUSE_UNICODE_UTF8<ept i="3">&lt;/c3&gt;</ept> is also defined, otherwise <bpt i="4" x="4">&lt;c4&gt;</bpt>wxUSE_UNICODE_WCHAR<ept i="4">&lt;/c4&gt;</ept> is.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T133027Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> の内部領域に UTF-8 を使用する場合、あわせて <bpt i="3" x="3">&lt;c3&gt;</bpt>wxUSE_UNICODE_UTF8<ept i="3">&lt;/c3&gt;</ept> が定義されます。そうでない場合は <bpt i="4" x="4">&lt;c4&gt;</bpt>wxUSE_UNICODE_WCHAR<ept i="4">&lt;/c4&gt;</ept> が定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If a conversion had taken place in cWX2MB (i.e. in a Unicode build), the buffer will be deallocated as soon as tmp_buf goes out of scope.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T150156Z">
        <seg>cWX2MB で変換が行われる場合 (つまり、Unicode ビルドの場合)、tmp_buf がスコープから外れると直ちにバッファが解放されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If a widget doesn't have a border then its client size is the same as its size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T150550Z">
        <seg>ウィジェットがボーダーを持たない場合、クライアントサイズはウィジェットのサイズと同じ大きさになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If a window doesn't have any border (and is not a <bpt i="3" x="3">&lt;a3&gt;</bpt>wxFrame<ept i="3">&lt;/a3&gt;</ept> with some bars) then its client size is the same as its size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T144724Z">
        <seg>ウィンドウがボーダーを持たない場合 (そしてステータスバーなどを含む <bpt i="3" x="3">&lt;a3&gt;</bpt>wxFrame<ept i="3">&lt;/a3&gt;</ept> でない場合)、クライアントサイズはウィンドウのサイズと同じ大きさになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If all goes well, then <bpt i="2" x="2">&lt;a2&gt;</bpt>OnData<ept i="2">&lt;/a2&gt;</ept> will get called and the wxDataObject belonging to the drop target can get filled with data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T162526Z">
        <seg>すべてがうまく行くと <bpt i="2" x="2">&lt;a2&gt;</bpt>OnData<ept i="2">&lt;/a2&gt;</ept> が呼び出され、ドロップ先に所属する wxDataObject にデータが引き渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If all goes well, then <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDropTarget::OnData<ept i="3">&lt;/a3&gt;</ept> will get called and the <bpt i="4" x="4">&lt;a4&gt;</bpt>wxDataObject<ept i="4">&lt;/a4&gt;</ept> belonging to the drop target can get filled with data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T140106Z">
        <seg>すべてがうまく行くと <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDropTarget::OnData<ept i="3">&lt;/a3&gt;</ept> が呼び出され、ドロップ先に所属する <bpt i="4" x="4">&lt;a4&gt;</bpt>wxDataObject<ept i="4">&lt;/a4&gt;</ept> にデータが引き渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If allowed, both the server and client objects create <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> objects which persist until the connection is closed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150218Z">
        <seg>接続が許可されるとサーバとクライアントの双方で <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> が作成され、接続が閉じられるまで維持されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If allowed, both the server and client objects create wxConnection objects which persist until the connection is closed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T022046Z">
        <seg>接続が許可されるとサーバとクライアントの双方で wxConnection が作成され、接続が閉じられるまで維持されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If instead you choose to use threads in your application, please read also the following sections of this overview.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T235106Z">
        <seg>代わりにスレッドを使用すると決めた場合、この概要の以降の章も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If it has no children then nothing is done, if it does have children then the size of the window is set to the window's best size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T143247Z">
        <seg>子コントロールを持たない場合は何も行いませんが、子コントロールを持つ場合はそのウィンドウの最適サイズにあわせてウィンドウサイズを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If it returns anything but -1 (default), the event handling stops immediately.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T071056Z">
        <seg>-1 (デフォルト) 以外の値を返却した場合、ただちにイベント処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If no standard buttons were found, the whole dialog content will scroll.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T152036Z">
        <seg>標準ボタンが見つからなかった場合、ダイアログ全体がスクロールされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If several windows have a value above zero, the value is interpreted relative to the sum of all weight factors of the sizer, so when adding two windows with a value of 1, they will both get resized equally much and each half as much as the sizer owning them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T130620Z">
        <seg>いくつかのウィンドウが 0 より大きい値を持つ場合、その値はサイザーのすべての重み係数の和に対する相対値として解釈されます。そのため、値が 1 であるウィンドウをふたつ追加する場合、両方とも同じようにリサイズされ、それぞれサイザーの半分の大きさになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If such a variable address is not supplied by the user, then the validator should store the data internally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T144259Z">
        <seg>そのような変数のアドレスが指定されなかった場合、バリデータは内部にデータを格納するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If supported by the platform this class will provide the platform's native progress dialog...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T113524Z">
        <seg>プラットフォームがこのクラスに対応している場合、プラットフォームのネイティブのプログレスダイアログを提供します。それ以外の場合、単純に wxGenericProgressDialog になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If that search failed too, wxWidgets finds 'loose' standard buttons (in any kind of sizer) and adds them to a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStdDialogButtonSizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T152020Z">
        <seg>これも見つからなかった場合、wxWidgets は (任意の種類のサイザーに含まれる) 'ゆるい' 標準ボタンを探し、 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStdDialogButtonSizer<ept i="0">&lt;/a0&gt;</ept> に追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If that search failed, wxWidgets looks for a horizontal <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> with one or more standard buttons, with identifiers such as <bpt i="1" x="1">&lt;c1&gt;</bpt>wxID_OK<ept i="1">&lt;/c1&gt;</ept> and <bpt i="2" x="2">&lt;c2&gt;</bpt>wxID_CANCEL<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T151803Z">
        <seg>もしも見つからなかった場合、<bpt i="1" x="1">&lt;c1&gt;</bpt>wxID_OK<ept i="1">&lt;/c1&gt;</ept> や <bpt i="2" x="2">&lt;c2&gt;</bpt>wxID_CANCEL<ept i="2">&lt;/c2&gt;</ept> などの識別子を持つ、ひとつ以上の標準ボタンを含む水平方向の <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the application is for some reason forcing the application to close (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent::CanVeto<ept i="0">&lt;/a0&gt;</ept> returns <bpt i="1" x="1">&lt;s1&gt;</bpt>false<ept i="1">&lt;/s1&gt;</ept>), the window should always be destroyed, otherwise there is the option to ignore the request, or maybe wait until the user has answered a question before deciding whether it is safe to close.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T034545Z">
        <seg>なんらかの理由で強制的にアプリケーションを終了させる場合 (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent::CanVeto<ept i="0">&lt;/a0&gt;</ept> が <bpt i="1" x="1">&lt;s1&gt;</bpt>false<ept i="1">&lt;/s1&gt;</ept> を返却する場合)、常にウィンドウを破棄するべきです。それ以外の場合では終了要求を無視するか、安全に終了できるか決定する前にユーザへ確認するという選択肢があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the application is for some reason forcing the application to close (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent::CanVeto<ept i="0">&lt;/a0&gt;</ept> returns false), the window should always be destroyed, otherwise there is the option to ignore the request, or maybe wait until the user has answered a question before deciding whether it is safe to close.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T145241Z">
        <seg>なんらかの理由で強制的にアプリケーションを終了させる場合 (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent::CanVeto<ept i="0">&lt;/a0&gt;</ept> が false を返却する場合)、常にウィンドウを破棄するべきです。それ以外の場合では終了要求を無視するか、安全に終了できるか決定する前にユーザへ確認するという選択肢があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the character is inappropriate, it is vetoed (does not appear) and a warning beep sounds (unless wxValidator::SetBellOnError(false) has been called).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T154640Z">
        <seg>入力された文字が不適切だった場合、入力は拒否され (画面上に現れません)、警告ビープ音が鳴ります。(ただし、 wxValidator::SetBellOnError(false) が呼ばれていない場合に限ります) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the character is inappropriate, it is vetoed (does not appear) and a warning beep sounds.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143616Z">
        <seg>入力された文字が不適切だった場合、入力は拒否され (画面上に現れません)、警告ビープ音が鳴ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the client wants to find the result of the Execute command other than success or failure, it has to explicitly call Request.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130820T152256Z">
        <seg>呼び出しの成否以外に Execute コマンドの結果を得たい場合、明示的に Request を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the dialog box is <bpt i="0" x="0">&lt;e0&gt;</bpt>modal<ept i="0">&lt;/e0&gt;</ept>, the calling program is blocked until the dialog box is dismissed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T154505Z">
        <seg>ダイアログボックスが <bpt i="0" x="0">&lt;e0&gt;</bpt>モーダル<ept i="0">&lt;/e0&gt;</ept> の場合、ダイアログボックスが閉じられるまでプログラムがブロックする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the dialog box is <bpt i="0" x="0">&lt;i0&gt;</bpt>modal<ept i="0">&lt;/i0&gt;</ept>, the calling program is blocked until the dialog box is dismissed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T145938Z">
        <seg>ダイアログボックスが <bpt i="0" x="0">&lt;i0&gt;</bpt>モーダル<ept i="0">&lt;/i0&gt;</ept> の場合、ダイアログボックスが閉じられるまでプログラムがブロックする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the environment in which your program is running is under your control -- as is quite often the case in such scenarios -- consider ensuring that the system always uses UTF-8 locale and use <bpt i="0" x="0">&lt;c0&gt;</bpt>--enable-utf8only<ept i="0">&lt;/c0&gt;</ept> configure option to disable support for the other locales and consider all strings to be in UTF-8.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033637Z">
        <seg>(そのような状況では、よくこの場合に当てはまりますが) もしプログラムの実行される環境を制御できるのであれば、システムが常に UTF-8 ロケールを使用するようにし、<bpt i="0" x="0">&lt;c0&gt;</bpt>--enable-utf8only<ept i="0">&lt;/c0&gt;</ept> オプションを使用して他のロケールのサポートを無効にすることを考慮してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the message catalogs are not installed in this default location you may explicitly use <bpt i="1" x="1">&lt;a1&gt;</bpt>AddCatalogLookupPathPrefix()<ept i="1">&lt;/a1&gt;</ept> to still allow wxWidgets to find them but it is strongly recommended to use the default directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001947Z">
        <seg>このデフォルトの場所にメッセージカタログをインストールしない場合、明示的に <bpt i="1" x="1">&lt;a1&gt;</bpt>AddCatalogLookupPathPrefix()<ept i="1">&lt;/a1&gt;</ept> を使用することで wxWidgets がその場所を探すようになります。ただし、デフォルトのディレクトリを使用することを強く推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the message catalogs are not installed in this default location you may explicitly use <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale::AddCatalogLookupPathPrefix()<ept i="2">&lt;/a2&gt;</ept> to still allow wxWidgets to find them but it is strongly recommended to use the default directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043355Z">
        <seg>このデフォルトの場所にメッセージカタログをインストールしない場合、明示的に <bpt i="2" x="2">&lt;a2&gt;</bpt>AddCatalogLookupPathPrefix()<ept i="2">&lt;/a2&gt;</ept> を使用することで wxWidgets がその場所を探すようになりますが、デフォルトのディレクトリを使用することを強く推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the min size is (50, 20) then the best fitting size is (50, 20).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T151537Z">
        <seg>最小サイズが (50, 20) の場合は (50, 20) が最適フィットサイズになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> and has an associated validator, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxValidator<ept i="1">&lt;/a1&gt;</ept> gets a chance to process the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T032524Z">
        <seg>オブジェクトが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> で、かつ、関連するバリデータを持っている場合、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxValidator<ept i="1">&lt;/a1&gt;</ept> でイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> and the event is set to propagate (by default only wxCommandEvent-derived events are set to propagate), then the processing restarts from the step (1) (and excluding the step (7)) for the parent window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T142127Z">
        <seg>オブジェクトが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> で、かつ、イベントが伝播するように設定されている (デフォルトでは wxCommandEvent を継承したイベントのみ、伝播するよう設定されています) 場合、親ウィンドウに対してステップ (1) から (ステップ (7) を除いて) 再度処理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is a wxWindow and the event is set to set to propagate (in the library only wxCommandEvent based events are set to propagate), <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> is recursively applied to the parent window's event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T142314Z">
        <seg>オブジェクトが wxWindow で、かつ、イベントが伝播するように設定されている (ライブラリの中では wxCommandEvent の派生イベントのみ、伝播するよう設定されています) 場合、親ウィンドウの <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> が再帰的に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is a wxWindow, <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> is recursively called on the window's <bpt i="1" x="1">&lt;a1&gt;</bpt>wxValidator<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T024132Z">
        <seg>オブジェクトが wxWindow の場合、<bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> はウィンドウの <bpt i="1" x="1">&lt;a1&gt;</bpt>wxValidator<ept i="1">&lt;/a1&gt;</ept> から再帰的に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is disabled (via a call to <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetEvtHandlerEnabled<ept i="0">&lt;/a0&gt;</ept>) the function skips to step (6).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T024038Z">
        <seg>(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetEvtHandlerEnabled<ept i="0">&lt;/a0&gt;</ept> を呼ぶことで) オブジェクトが無効化されている場合、(6) までスキップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the server agrees, the server will send an OnAdvise message to the client along with the item and data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033325Z">
        <seg>サーバがこれを承諾した場合、サーバは項目とデータとともに OnAdvise メッセージをクライアントへ送信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the server is unwilling to reply, the return value is <bpt i="1" x="1">&lt;s1&gt;</bpt>NULL<ept i="1">&lt;/s1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150414Z">
        <seg>サーバが応答しない場合、戻り値は <bpt i="1" x="1">&lt;s1&gt;</bpt>NULL<ept i="1">&lt;/s1&gt;</ept> になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the server is unwilling to reply, the return value is NULL.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032802Z">
        <seg>サーバが応答しない場合、戻り値は NULL になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the size passed to the constructor is the default <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDefaultSize<ept i="1">&lt;/a1&gt;</ept>, or if the size is not fully specified (such as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSize<ept i="2">&lt;/a2&gt;</ept>(150,-1)) then most controls will fill in the missing size components using the best size and will set the initial size of the control to the resulting size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T152527Z">
        <seg>コンストラクタで指定された値がデフォルトの <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDefaultSize<ept i="1">&lt;/a1&gt;</ept> の場合、もしくは (<bpt i="2" x="2">&lt;a2&gt;</bpt>wxSize<ept i="2">&lt;/a2&gt;</ept>(150,-1) といったように) 完全に指定されていない場合、ほとんどのコントロールでは足りない部分を最適サイズを使用して補完し、その結果を初期サイズとして設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the size passed to the constructor is the default <bpt i="1" x="1">&lt;t1&gt;</bpt>wxDefaultSize<ept i="1">&lt;/t1&gt;</ept>, or if the size is not fully specified (such as <bpt i="2" x="2">&lt;t2&gt;</bpt>wxSize(150,-1)<ept i="2">&lt;/t2&gt;</ept>) then most controls will fill in the missing size components using the best size and will set the initial size of the control to the resulting size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T142612Z">
        <seg>コンストラクタで指定された値がデフォルトの <bpt i="1" x="1">&lt;t1&gt;</bpt>wxDefaultSize<ept i="1">&lt;/t1&gt;</ept> の場合、もしくは (<bpt i="2" x="2">&lt;t2&gt;</bpt>wxSize(150,-1)<ept i="2">&lt;/t2&gt;</ept> といったように) 完全に指定されていない場合、ほとんどのコントロールでは足りない部分を最適サイズを使用して補完し、その結果を初期サイズとして設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the sizer is the one that is assigned to the window then this should be equivalent to <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Fit()<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T155640Z">
        <seg>ウィンドウに割り当てられているサイザーがひとつだけの場合は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Fit()<ept i="1">&lt;/a1&gt;</ept> と等価になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the window has a sizer then it is used to calculate the best size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T155525Z">
        <seg>ウィンドウでサイザーが使用されていれば、それが最適サイズの計算に使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the window has layout constraints instead of a sizer then the constraints algorithm is run.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T143618Z">
        <seg>ウィンドウがサイザーの代わりにレイアウト制約を使用している場合は制約アルゴリズムが実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this behaviour is not desirable <bpt i="1" x="1">&lt;a1&gt;</bpt>wxApp::SetExitOnFrameDelete<ept i="1">&lt;/a1&gt;</ept> can be called to change it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124028Z">
        <seg>この振る舞いが望ましくない場合、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxApp::SetExitOnFrameDelete<ept i="1">&lt;/a1&gt;</ept> を呼ぶことで振る舞いを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this behaviour is not desirable <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::SetExitOnFrameDelete<ept i="2">&lt;/a2&gt;</ept> can be called to change it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162007Z">
        <seg>この振る舞いが望ましくない場合、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::SetExitOnFrameDelete<ept i="2">&lt;/a2&gt;</ept> を呼ぶことで振る舞いを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this event handler is disabled via a call to <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetEvtHandlerEnabled()<ept i="0">&lt;/a0&gt;</ept> the next three steps are skipped and the event handler resumes at step (5).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T071243Z">
        <seg>イベントハンドラが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetEvtHandlerEnabled()<ept i="0">&lt;/a0&gt;</ept> によって無効化されている場合、次の 3 ステップはスキップし、(5) から処理を継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this fails, the base class table is tried, and so on until no more tables exist or an appropriate function was found, in which case the function exits.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040404Z">
        <seg>ProcessEvent が true を返さなかった場合、基底クラスのイベントテーブルを検索します。これを順次、イベントテーブルが存在しなくなるか、適切な関数が見つかるまで行います。適切な関数が見つからなかった場合、処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this object is not a window but the next handler exists, the event is passed to its parent if it is a window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T143204Z">
        <seg>このオブジェクトがウィンドウでないが次のイベントハンドラが存在する場合、親コントロールがウィンドウであれば親コントロールにイベントを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this problem can be solved globally, you can derive a new adapter class from wxStandardDialogLayoutAdapter and override its CreateScrolledWindow function to return an instance of your own class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T154114Z">
        <seg>アプリケーション全体でグローバルにこの問題を解決できるようであれば wxStandardDialogLayoutAdapter を継承した新しいアダプタクラスを作成し、作成したクラスのインスタンスを返却するように CreateScrolledWindow 関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this returns true, the function exits.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T024357Z">
        <seg>ProcessEvent が true を返した場合、処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this succeeds, the function exits.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T030211Z">
        <seg>検索に成功した場合、処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If using Close(), you can pass a <bpt i="2" x="2">&lt;s2&gt;</bpt>true<ept i="2">&lt;/s2&gt;</ept> argument to this function to tell the event handler that we definitely want to delete the frame and it cannot be vetoed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040336Z">
        <seg>Close() を使用している場合は引数に <bpt i="2" x="2">&lt;s2&gt;</bpt>true<ept i="2">&lt;/s2&gt;</ept> を渡すことで、このフレームを確実に破棄したいと考えており、終了要求を拒否できないことをイベントハンドラへ通知できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If using Close(), you can pass a true argument to this function to tell the event handler that we definitely want to delete the frame and it cannot be vetoed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T144724Z">
        <seg>Close() を使用している場合は引数に true を渡すことで、このフレームを確実に破棄したいと考えており、終了要求を拒否できないことをイベントハンドラへ通知できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you are using a window or panel instead of a dialog, you will need to call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::InitDialog<ept i="0">&lt;/a0&gt;</ept> explicitly before showing the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145709Z">
        <seg>もしダイアログの代わりにウィンドウやパネルを使用している場合、ウィンドウを表示する前に明示的に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::InitDialog<ept i="0">&lt;/a0&gt;</ept> を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you believe that it would be advantageous to use UTF-8 for the strings in your particular application, you may rebuild wxWidgets to use UTF-8 as explained above (notice that this is currently not supported under Microsoft Windows and arguably doesn't make much sense there as Windows itself uses UTF-16 and not UTF-8) but be sure to be aware of the performance implications (see <bpt i="1" x="1">&lt;a1&gt;</bpt>Performance Implications of Using UTF-8<ept i="1">&lt;/a1&gt;</ept>) of using UTF-8 in <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> before doing this!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T095112Z">
        <seg>もしあなたのアプリケーションで UTF-8 が好都合だと思うのなら、上で説明したように UTF-8 を使用するように wxWidgets をビルドし直してください。 (今のところ、Microsoft Windows ではこれに対応しておらず、Windows 自身は UTF-8 ではなく UTF-16 を使用しているため、明らかにあまり意味がないことに注意してください) ただし、これを行う前に <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> で UTF-8 を使用することによる性能への影響 (<bpt i="1" x="1">&lt;a1&gt;</bpt>UTF-8 を使用することによる性能への影響<ept i="1">&lt;/a1&gt;</ept> 参照) を必ず意識するようにしてください!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you compile your program in ANSI mode you can still define <bpt i="1" x="1">&lt;t1&gt;</bpt>wxUSE_WCHAR_T<ept i="1">&lt;/t1&gt;</ept> to get some limited support for <bpt i="2" x="2">&lt;t2&gt;</bpt>wchar_t<ept i="2">&lt;/t2&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144825Z">
        <seg>プログラムを ANSI モードでコンパイルした場合でも、 <bpt i="1" x="1">&lt;t1&gt;</bpt>wxUSE_WCHAR_T<ept i="1">&lt;/t1&gt;</ept> を定義することで <bpt i="2" x="2">&lt;t2&gt;</bpt>wchar_t<ept i="2">&lt;/t2&gt;</ept> の限定的な機能を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you do decide to use threads in your application, it is strongly recommended that no more than one thread calls GUI functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T144421Z">
        <seg>アプリケーションでスレッドを使用すると決めた場合、複数のスレッドで GUI 関数を呼び出さないことを強く推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you do it, you will probably find it helpful to also define <bpt i="1" x="1">&lt;c1&gt;</bpt>WXSTRING_STATISTICS<ept i="1">&lt;/c1&gt;</ept> symbol which tells the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> class to collect performance statistics and to show them on stderr on program termination.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121428Z">
        <seg>これを行なう場合、<bpt i="1" x="1">&lt;c1&gt;</bpt>WXSTRING_STATISTICS<ept i="1">&lt;/c1&gt;</ept> シンボルも定義すると便利なことにおそらく気がつくでしょう。これを定義すると <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> クラスで性能統計を収集し、プログラムの終了時に標準エラー出力へ出力させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you do it, you will probably find it helpful to also define WXSTRING_STATISTICS symbol which tells the wxString class to collect performance statistics and to show them on stderr on program termination.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T083246Z">
        <seg>これを行なう場合、WXSTRING_STATISTICS シンボルも定義すると便利なことにおそらく気がつくでしょう。これを定義すると wxString クラスで性能統計を収集し、プログラムの終了時に標準エラー出力へ出力させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you do read it, please also read the preceding section about <bpt i="1" x="1">&lt;a1&gt;</bpt>reference counting<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080052Z">
        <seg>もしこの章を読む場合、<bpt i="1" x="1">&lt;a1&gt;</bpt>参照カウンタ<ept i="1">&lt;/a1&gt;</ept> の章にも目を通すようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you do want to handle messages of different levels differently, then you should override <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T122739Z">
        <seg>異なるレベルのメッセージを別々に処理したい場合、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="0">&lt;/a0&gt;</ept> をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you ever have to call a window's event handler manually, use the GetEventHandler function to retrieve the window's event handler and use that to call the member function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T062722Z">
        <seg>もし手動でウィンドウのイベントハンドラを呼ぶ必要がある場合、GetEventHandler 関数でウィンドウのイベントハンドラを取得し、そのメンバ関数を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you have compiled wxWidgets in Unicode mode, the wxChar type will become identical to wchar_t rather than char, and a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> stores wxChars.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151548Z">
        <seg>wxWidgets を Unicode モードでコンパイルしている場合、wxChar 型は char ではなく wchar_t と等価になります。そして、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> は wxChar を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you have compiled wxWidgets in Unicode mode, the wxChar type will become identical to wchar_t rather than char, and a wxString stores wxChars.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T153945Z">
        <seg>wxWidgets を Unicode モードでコンパイルしている場合、wxChar 型は char ではなく wchar_t と等価になります。そして、wxString は wxChar を格納します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you have specialized needs, or just don't want to use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept>, you can also use the conversion methods of the conversion objects directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152019Z">
        <seg>特別な要件がある場合、もしくは単に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> を使用したくない場合は変換オブジェクトの変換関数を直接使用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you have specialized needs, or just don't want to use wxString, you can also use the conversion methods of the conversion objects directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T144747Z">
        <seg>特別な要件がある場合、もしくは単に wxString を使用したくない場合は変換オブジェクトの変換関数を直接使用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you just want to use a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> with a new event type, use one of the generic event table macros listed below, without having to define a new event class yourself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145820Z">
        <seg>新しいイベント型で <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を使用したいだけの場合、新しいイベントクラスを自分自身で定義する必要はなく、以下の汎用イベントテーブルマクロのひとつを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you just want to use a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> with a new event type, you can then use one of the generic event table macros listed below, without having to define a new macro yourself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042232Z">
        <seg>新しいイベント型で <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を使用したいだけの場合、自分自身で新しいマクロを定義するのではなく、以下の汎用的なイベントテーブルマクロを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you load your dialog from a resource file, you will need to iterate through the controls setting validators, since validators can't be specified in a dialog resource.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150432Z">
        <seg>ダイアログをリソースファイルから読み込む場合、コントロールに対してバリデータを設定する必要があります。これはダイアログリソース内でバリデータを指定できないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to do more complex processing on the converted data, you may want to store the temporary buffer in a local variable:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T150026Z">
        <seg>変換後のデータに対してより複雑な処理を行なう必要がある場合、一時バッファをローカル変数に格納したいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to specify a different behaviour for some reason, you can use <bpt i="0" x="0">&lt;a0&gt;</bpt>SetExtraStyle(wxWS_EX_BLOCK_EVENTS)<ept i="0">&lt;/a0&gt;</ept> explicitly to prevent the events from being propagated beyond the given window or unset this flag for the dialogs which have it on by default.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T050456Z">
        <seg>なんらかの理由で別の振る舞いをさせる必要がある場合、明示的に <bpt i="0" x="0">&lt;a0&gt;</bpt>SetExtraStyle(wxWS_EX_BLOCK_EVENTS)<ept i="0">&lt;/a0&gt;</ept> を使用することでイベントが指定されたウィンドウ外へ伝播するのを止めたり、ダイアログ (デフォルトでこのフラグが設定されています) のフラグを解除したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to specify a different behaviour for some reason, you can use <bpt i="0" x="0">&lt;c0&gt;</bpt>wxWindow::SetExtraStyle(wxWS_EX_BLOCK_EVENTS)<ept i="0">&lt;/c0&gt;</ept> explicitly to prevent the events from being propagated beyond the given window or unset this flag for the dialogs that have it on by default.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T160130Z">
        <seg>なんらかの理由で別の振る舞いをさせる必要がある場合、明示的に <bpt i="0" x="0">&lt;c0&gt;</bpt>SetExtraStyle(wxWS_EX_BLOCK_EVENTS)<ept i="0">&lt;/c0&gt;</ept> を使用することでイベントが指定されたウィンドウ外へ伝播するのを止めたり、ダイアログ (デフォルトでこのフラグが設定されています) のフラグを解除したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you nonetheless need to have a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> that uses <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> on Unix and Linux, too, you can specify this on the command line with the <bpt i="2" x="2">&lt;c2&gt;</bpt>configure<ept i="2">&lt;/c2&gt;</ept> <bpt i="3" x="3">&lt;c3&gt;</bpt>--disable-utf8<ept i="3">&lt;/c3&gt;</ept> switch or you can consider using <bpt i="4" x="4">&lt;a4&gt;</bpt>wxUString<ept i="4">&lt;/a4&gt;</ept> or <bpt i="5" x="5">&lt;c5&gt;</bpt>std::wstring<ept i="5">&lt;/c5&gt;</ept> instead.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T122257Z">
        <seg>Unix や Linux でも <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> を使用する <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> が必要な場合、コマンドラインで <bpt i="2" x="2">&lt;c2&gt;</bpt>configure<ept i="2">&lt;/c2&gt;</ept> <bpt i="3" x="3">&lt;c3&gt;</bpt>--disable-utf8<ept i="3">&lt;/c3&gt;</ept> スイッチを指定するか、代わりに <bpt i="4" x="4">&lt;a4&gt;</bpt>wxUString<ept i="4">&lt;/a4&gt;</ept> もしくは <bpt i="5" x="5">&lt;c5&gt;</bpt>std::wstring<ept i="5">&lt;/c5&gt;</ept> を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you pass <bpt i="0" x="0">&lt;c0&gt;</bpt>wxID_ANY<ept i="0">&lt;/c0&gt;</ept> to a window constructor, an identifier will be generated for you automatically by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T171229Z">
        <seg>ウィンドウのコンストラクタに <bpt i="0" x="0">&lt;c0&gt;</bpt>wxID_ANY<ept i="0">&lt;/c0&gt;</ept> を渡した場合、wxWidgets が自動的に識別子を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you pass <bpt i="0" x="0">&lt;t0&gt;</bpt>wxID_ANY<ept i="0">&lt;/t0&gt;</ept> to a window constructor, an identifier will be generated for you automatically by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T075041Z">
        <seg>ウィンドウのコンストラクタに <bpt i="0" x="0">&lt;t0&gt;</bpt>wxID_ANY<ept i="0">&lt;/t0&gt;</ept> を渡した場合、wxWidgets が自動的に識別子を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you port software to wxWidgets, you may be confronted with legacy source code containing non-English string literals.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T135108Z">
        <seg>ソフトウェアを wxWidgets に移植する場合、非英語リテラル文字列を含むレガシーなソースコードに直面するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you port software to wxWindows, you may be confronted with legacy source code containing non-English string literals.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132248Z">
        <seg>ソフトウェアを wxWindows に移植する場合、非英語リテラル文字列を含むレガシーなソースコードに直面するかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you translate the accelerator modifier names (Ctrl, Alt and Shift) in your menu labels, you may find the accelerators no longer work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T003227Z">
        <seg>もしメニューラベル内のアクセラレータの修飾子名 ( Ctrl、Alt、Shift) を翻訳した場合、アクセラレータが動作しなくなることに気がつくでしょう。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScrolled&lt;T&gt;::SetTargetWindow()<ept i="0">&lt;/a0&gt;</ept> you must override <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScrolled&lt;T&gt;::GetSizeAvailableForScrollTarget()<ept i="1">&lt;/a1&gt;</ept> method to compute the size available for the scroll target as function of the main window size, please see the documentation of this method for more details.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T154004Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxScrolled&lt;T&gt;::SetTargetWindow()<ept i="0">&lt;/a0&gt;</ept> を使用している場合、スクロール対象が使用できるサイズをメインウィンドウのサイズから計算するために <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScrolled&lt;T&gt;::GetSizeAvailableForScrollTarget()<ept i="1">&lt;/a1&gt;</ept> 関数をオーバーライドする必要があります。詳細はこの関数のドキュメントを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you use <bpt i="2" x="2">&lt;a2&gt;</bpt>wxNewId()<ept i="2">&lt;/a2&gt;</ept> consistently in your application, you can be sure that your identifiers don't conflict accidentally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012416Z">
        <seg>もしアプリケーション内で一貫して <bpt i="2" x="2">&lt;a2&gt;</bpt>wxNewId()<ept i="2">&lt;/a2&gt;</ept> を使用するようにすれば、偶発的な識別子の衝突を避けることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you use the program <bpt i="0" x="0">&lt;c0&gt;</bpt>xgettext<ept i="0">&lt;/c0&gt;</ept> to extract the strings from the source code, specify the option <bpt i="1" x="1">&lt;c1&gt;</bpt>--from-code=&lt;source code charset&gt;<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T135306Z">
        <seg>ソースコードから文字列を抽出するのに <bpt i="0" x="0">&lt;c0&gt;</bpt>xgettext<ept i="0">&lt;/c0&gt;</ept> を使用する場合、<bpt i="1" x="1">&lt;c1&gt;</bpt>--from-code=&lt;ソースコードの文字コード&gt;<ept i="1">&lt;/c1&gt;</ept> オプションを指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you use the program <bpt i="0" x="0">&lt;t0&gt;</bpt>xgettext<ept i="0">&lt;/t0&gt;</ept> to extract the strings from the source code, specify the option <bpt i="1" x="1">&lt;t1&gt;</bpt>--from-code=&lt;source code charset&gt;<ept i="1">&lt;/t1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132504Z">
        <seg>ソースコードから文字列を抽出するのに <bpt i="0" x="0">&lt;t0&gt;</bpt>xgettext<ept i="0">&lt;/t0&gt;</ept> を使用する場合、<bpt i="1" x="1">&lt;t1&gt;</bpt>--from-code=&lt;ソースコードの文字コード&gt;<ept i="1">&lt;/t1&gt;</ept> オプションを指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you used Unicode build of wxWidgets 2.8 or previous version, please read <bpt i="0" x="0">&lt;a0&gt;</bpt>Unicode Support in wxWidgets<ept i="0">&lt;/a0&gt;</ept> for the details about how the API changed in 3.0 as a lot of the information which was correct before doesn't apply any longer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T150417Z">
        <seg>wxWidgets 2.8 やそれ以前のバージョンで Unicode ビルドを使用していた場合、3.0 における API の変更点の詳細について <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWidgets における Unicode 対応<ept i="0">&lt;/a0&gt;</ept> を参照してください。これまで正しかった多くの情報が 3.0 ではもはや当てはまりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you want to use IPC between different workstations you should define <bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_DDE_FOR_IPC<ept i="0">&lt;/c0&gt;</ept> as 0 before including this header -- this will force using TCP/IP implementation even under Windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T125119Z">
        <seg>もし異なるワークステーション間で IPC を使用したい場合、このヘッダファイルをインクルードする前に <bpt i="0" x="0">&lt;c0&gt;</bpt> wxUSE_DDE_FOR_IPC<ept i="0">&lt;/c0&gt;</ept> を 0 に定義してください。これにより、Windows でも強制的に TCP/IP 版が使用されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you want to use IPC between different workstations you should define <bpt i="0" x="0">&lt;t0&gt;</bpt> wxUSE_DDE_FOR_IPC<ept i="0">&lt;/t0&gt;</ept> as 0 before including this header -- this will force using TCP/IP implementation even under Windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T160447Z">
        <seg>もし異なるワークステーション間で IPC を使用したい場合、このヘッダファイルをインクルードする前に <bpt i="0" x="0">&lt;t0&gt;</bpt> wxUSE_DDE_FOR_IPC<ept i="0">&lt;/t0&gt;</ept> を 0 に定義してください。これにより、Windows でも強制的に TCP/IP 版が使用されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you're using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxHtmlHelpController<ept i="0">&lt;/a0&gt;</ept> there is no problem at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T133138Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxHtmlHelpController<ept i="0">&lt;/a0&gt;</ept> を使用しているのであれば何も問題ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Implementation of GetBestSize() that can be overridden.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T144751Z">
        <seg>オーバーライド可能な GetBestSize() の実装。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Implements the calculation of a box sizer's dimensions and then sets the size of its children (calling <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetSize<ept i="0">&lt;/a0&gt;</ept> if the child is a window).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150430Z">
        <seg>ボックスサイザーの大きさを計算し、子コントロールのサイズをセットします。 (子コントロールがウィンドウの場合、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetSize<ept i="0">&lt;/a0&gt;</ept> を呼びます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Implements the calculation of a box sizer's minimal.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150702Z">
        <seg>ボックスサイザーの最小サイズを計算します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Implicit conversions</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113600Z">
        <seg>暗黙の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Important notes for multithreaded applications</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T235205Z">
        <seg>マルチスレッドアプリケーションにおける注意事項</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a GUI application, this function posts event to the specified dest object using wxEvtHandler::AddP...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144104Z">
        <seg>GUI アプリケーションにおいて、この関数は wxEvtHandler::AddPendingEvent() を使用して特定の送信先オブジェクトへイベントを送信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a similar way, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> provides access to its contents as either <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> character buffer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T090940Z">
        <seg>同様に、<bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> と <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> のどちらででも <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の保持する文字列にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition to a constructor from <bpt i="1" x="1">&lt;c1&gt;</bpt>const<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> * which this class must have, it also provides a constructor taking a wide character file name.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142956Z">
        <seg>このクラスが必ず持たねばならない <bpt i="1" x="1">&lt;c1&gt;</bpt>const<ept i="1">&lt;/c1&gt;</ept> <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> * のコンストラクタに加えて、ワイド文字列のファイル名を受け取るコンストラクタもこのクラスは提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition to switching adaptation on and off globally and per dialog, you can choose how aggressively wxWidgets will search for standard buttons by setting <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::SetLayoutAdaptationLevel<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T152753Z">
        <seg>グローバル、またはダイアログごとの適応の切り替えに加えて、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::SetLayoutAdaptationLevel<ept i="0">&lt;/a0&gt;</ept> を設定することでどれだけ積極的に標準ボタンを探しに行くかを選択することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition to using a method of the object generating the event itself, you can use a method from a completely different object as an event handler:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060203Z">
        <seg>イベントを生成したオブジェクトに加えて、完全に別のオブジェクトのメンバ関数をイベントハンドラとして使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition, there will be a thin border around all controls to make the dialog look nice and - to make matter worse - the buttons shall be centred as the width of the dialog changes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T130437Z">
        <seg>加えて、ダイアログの見た目を良くするためにすべてのコントロールの周りに薄いボーダーを設定し、さらに悪いことに、ダイアログの幅の変更にあわせてボダンを中央寄せで配置するものとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In any case, each implementation of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfigBase<ept i="0">&lt;/a0&gt;</ept> does its best to make the data look the same way everywhere.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T153913Z">
        <seg>どのような場合でも、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfigBase<ept i="0">&lt;/a0&gt;</ept> の各実装はどこでも同じ方法でデータを扱えるように最善を尽くします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In any case, each implementation of wxConfigBase does its best to make the data look the same way everywhere.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T151718Z">
        <seg>どのような場合でも、wxConfigBase の各実装はどこでも同じ方法でデータを扱えるように最善を尽くします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In emergencies the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxExit<ept i="0">&lt;/a0&gt;</ept> function can be called to kill the application however normally the application shuts down automatically, <bpt i="1" x="1">&lt;a1&gt;</bpt>see below<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160945Z">
        <seg>緊急の場合は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxExit<ept i="0">&lt;/a0&gt;</ept> 関数を使用してアプリケーションを強制終了させることができます。しかし、通常、アプリケーションは自動的にシャットダウンされます。 <bpt i="1" x="1">&lt;a1&gt;</bpt>以下を参照してください<ept i="1">&lt;/a1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In emergencies the wxExit function can be called to kill the application however normally the application shuts down automatically, see <bpt i="0" x="0">&lt;a0&gt;</bpt>Application Shutdown<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T133418Z">
        <seg>緊急の場合は wxExit 関数を使用してアプリケーションを強制終了させることができます。しかし、通常、アプリケーションは自動的にシャットダウンされます。 <bpt i="0" x="0">&lt;a0&gt;</bpt>アプリケーションの終了<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept> contains a default command event handler for the <bpt i="1" x="1">&lt;c1&gt;</bpt>wxID_OK<ept i="1">&lt;/c1&gt;</ept> button.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153515Z">
        <seg>実際のところ、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;c1&gt;</bpt>wxID_OK<ept i="1">&lt;/c1&gt;</ept> ボタン用のデフォルトコマンドハンドラを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, identifiers do not need to be unique across your entire application as long they are unique within the particular context you're interested in, such as a frame and its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T171150Z">
        <seg>実際には、特定のコンテキスト (フレームやその子コントロール) 内で一意であれば、アプリケーション全体で一意である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, identifiers do not need to be unique across your entire application just so long as they are unique within a particular context you're interested in, such as a frame and its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T074556Z">
        <seg>実際には、特定のコンテキスト (フレームやその子コントロール) 内で一意であれば、アプリケーション全体で一意である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, the event handler probably doesn't even exist in the base class as the default behaviour is often implemented in platform-specific code by the underlying toolkit or OS itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T154809Z">
        <seg>実際には、デフォルトの振る舞いは使用しているツールキットや OS によってプラットフォーム依存のコード内に実装されることが多いため、おそらく基底クラスにはイベントハンドラが存在しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, wxDialog contains a default command event handler for the wxID_OK button.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T145601Z">
        <seg>実際のところ、wxDialog は wxID_OK ボタン用のデフォルトコマンドハンドラを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, you don't have to derive a new class from a window class if you don't want to.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041124Z">
        <seg>実際のところ、ウィンドウクラスを継承して新しいクラスを作成したくない場合は、必ずしもそうする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In general, for strings containing many latin characters UTF8 provides a big advantage with regards to the memory footprint respect UTF16, but requires some more processing for common operations like e.g. length calculation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T130013Z">
        <seg>一般に、主にラテン文字を含む文字列について、UTF8 は必要なメモリ消費量において UTF16 よりも大きな利点がありますが、文字列長の計算などの共通操作を行なうために、より多くの計算を必要とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In many cases (particularly dialogs under Unix and normal frames) the main window will be resizable by the user and this change of size will have to get propagated to its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T154423Z">
        <seg>多くの場合で (特に、Unix のダイアログや通常のフレームの場合)、メインウィンドウはリサイズ可能であり、サイズの変更を子コントロールへ伝播させる必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In many cases this works even for changing the behaviour of native controls.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T085456Z">
        <seg>ネイティブコントロールの振る舞いを変更するような場合にも、これは動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In order to define a new event type, there are principally two choices.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T150930Z">
        <seg>新しいイベント型を定義する方法として、主に 2 種類の選択肢があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other cases you may need some information carried by the <bpt i="0" x="0">&lt;c0&gt;</bpt>event<ept i="0">&lt;/c0&gt;</ept> argument, as in:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034401Z">
        <seg>他の場合では、以下のように <bpt i="0" x="0">&lt;c0&gt;</bpt>event<ept i="0">&lt;/c0&gt;</ept> 引数の持つ情報が必要になるかもしれません:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other words, by default, the dialog <bpt i="1" x="1">&lt;e1&gt;</bpt>is<ept i="1">&lt;/e1&gt;</ept> not destroyed (it might have been created on the stack, so the assumption of dynamic creation cannot be made).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040908Z">
        <seg>言い換えると、デフォルトではダイアログは破棄され<bpt i="1" x="1">&lt;e1&gt;</bpt>ません<ept i="1">&lt;/e1&gt;</ept>。(ダイアログはスタック上に作られるかもしれないので、動的に生成されると仮定することはできません)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other words, by default, the dialog <bpt i="1" x="1">&lt;i1&gt;</bpt>is not destroyed<ept i="1">&lt;/i1&gt;</ept> (it might have been created on the stack, so the assumption of dynamic creation cannot be made).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T154834Z">
        <seg>言い換えると、デフォルトではダイアログは <bpt i="1" x="1">&lt;i1&gt;</bpt>破棄されません<ept i="1">&lt;/i1&gt;</ept>。(ダイアログはスタック上に作られるかもしれないので、動的に生成されると仮定することはできません)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In our case, we want the text area to grow with the dialog, whereas the button shall have a fixed size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T154608Z">
        <seg>この例では、ダイアログに合わせてテキストエリアのサイズを変更する一方で、ボタンのサイズは固定にしたいものとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In our example case, the vertical sizer is supposed to propagate all its height changes to only the text area, not to the button area.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T152653Z">
        <seg>今回の例では、垂直方向のサイザーは高さに対するすべての変化をテキストエリアにのみ伝播させ、ボタンエリアには伝播させないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular they don't need<it pos="end" x="8">&lt;/s8&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015610Z">
        <seg>特に、これらを public に<it pos="end" x="8">&lt;/s8&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, both data transfer mechanisms store data in some kind of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataObject<ept i="0">&lt;/a0&gt;</ept> and identify its format(s) using the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDataFormat<ept i="1">&lt;/a1&gt;</ept> class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T160106Z">
        <seg>特に、両方のデータ転送の仕組みとも、ある種の <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataObject<ept i="0">&lt;/a0&gt;</ept> にデータを格納し、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDataFormat<ept i="1">&lt;/a1&gt;</ept> クラスを使用してフォーマットを識別します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, do <bpt i="0" x="0">&lt;b0&gt;</bpt>not<ept i="0">&lt;/b0&gt;</ept> destroy them from application class' destructor!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124528Z">
        <seg>特に、アプリケーションクラスのデストラクタで削除しては <bpt i="0" x="0">&lt;b0&gt;</bpt>いけません<ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, do <bpt i="2" x="2">&lt;b2&gt;</bpt>not<ept i="2">&lt;/b2&gt;</ept> destroy them from application class' destructor!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162357Z">
        <seg>特に、アプリケーションクラスのデストラクタで削除しては <bpt i="2" x="2">&lt;b2&gt;</bpt>いけません<ept i="2">&lt;/b2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, please note that it is <bpt i="2" x="2">&lt;e2&gt;</bpt>not<ept i="2">&lt;/e2&gt;</ept> enough to derive your class from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxThread<ept i="3">&lt;/a3&gt;</ept> and <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEvtHandler<ept i="4">&lt;/a4&gt;</ept> to send messages to it: in fact, this does <bpt i="5" x="5">&lt;e5&gt;</bpt>not<ept i="5">&lt;/e5&gt;</ept> work at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T145412Z">
        <seg>特に、メッセージを送信するために <bpt i="3" x="3">&lt;a3&gt;</bpt>wxThread<ept i="3">&lt;/a3&gt;</ept> クラスと <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEvtHandler<ept i="4">&lt;/a4&gt;</ept> を継承するだけでは <bpt i="2" x="2">&lt;e2&gt;</bpt>不十分<ept i="2">&lt;/e2&gt;</ept> なことに注意してください: 実際のところ、これはまったく動作 <bpt i="5" x="5">&lt;e5&gt;</bpt>しません<ept i="5">&lt;/e5&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, please note that it is not enough to derive your class from <bpt i="2" x="2">&lt;a2&gt;</bpt>wxThread<ept i="2">&lt;/a2&gt;</ept> and <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEvtHandler<ept i="3">&lt;/a3&gt;</ept> to send messages to it: in fact, this does not work at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T235859Z">
        <seg>特に、メッセージを送信するために <bpt i="2" x="2">&lt;a2&gt;</bpt>wxThread<ept i="2">&lt;/a2&gt;</ept> クラスと <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEvtHandler<ept i="3">&lt;/a3&gt;</ept> を継承するだけでは不十分なことに注意してください: 実際のところ、これはまったく動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, the most common encoding used under modern Unix systems is UTF-8 and as the string above is not a valid UTF-8 byte sequence, nothing would be displayed at all in this case.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082020Z">
        <seg>特に、最近の Unix システムで最もよく使われているエンコーディングは UTF-8 であり、上記の文字列は正しい UTF-8 バイト列ではないため、この場合は何も表示されないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, these classes were designed to be as easy to use as possible.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T151151Z">
        <seg>特に、これらのクラスはできるだけ簡単に使用できるように設計されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, this means that errors logged by wxWidgets code itself (e.g. when it fails to perform some operation, for instance <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile::Open()<ept i="0">&lt;/a0&gt;</ept> logs an error when it fails to open a file) will be processed and shown to the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T092846Z">
        <seg>特に、wxWidgets 自身の記録するエラー (何らかの処理の失敗時、例えば、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile::Open()<ept i="0">&lt;/a0&gt;</ept> はファイルのオープンに失敗した場合にエラーを記録します) がユーザに通知されることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In practice, this would look like this if the derived text control only accepts 'a' to 'z' and 'A' to 'Z':</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022520Z">
        <seg>実際に、テキストコントロールで 'a' から 'z' と 'A' から 'Z' までのみを受け付ける場合、以下のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In short, this is a place where you can conveniently stuff all your data (numbers and strings) organizing it in a tree where you use the filesystem-like paths to specify the location of a piece of data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T154039Z">
        <seg>要するに、ファイルシステムのようなパスを使用してデータの場所を指定する木構造にすべてのデータ (数値や文字列) を詰め込むことができるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In some cases, it might be desired by the programmer to get a certain number of system events in a parent window, for example all key events sent to, but not used by, the native controls in a dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060007Z">
        <seg>例えばダイアログ内のネイティブコントロールへ送信される (そのコントロール自身では使用しない) キーイベントなど、特定のシステムイベントを親ウィンドウで取得したいと思うことがあるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following text, wherever <bpt i="0" x="0">&lt;e0&gt;</bpt>iso8859-2<ept i="0">&lt;/e0&gt;</ept> and <bpt i="1" x="1">&lt;e1&gt;</bpt>windows-1250<ept i="1">&lt;/e1&gt;</ept> are used, any encodings are meant and any encodings may be substituted there.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134537Z">
        <seg>以降の文章で <bpt i="0" x="0">&lt;e0&gt;</bpt>iso8859-2<ept i="0">&lt;/e0&gt;</ept> や <bpt i="1" x="1">&lt;e1&gt;</bpt>windows-1250<ept i="1">&lt;/e1&gt;</ept> が使用されているところは任意のエンコーディングを意味しており、好きなエンコーディングに置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following text, wherever <bpt i="0" x="0">&lt;i0&gt;</bpt>iso8859-2<ept i="0">&lt;/i0&gt;</ept> and <bpt i="1" x="1">&lt;i1&gt;</bpt>windows-1250<ept i="1">&lt;/i1&gt;</ept> are used, any encodings are meant and any encodings may be substituted there.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T134804Z">
        <seg>以降の文章で <bpt i="0" x="0">&lt;i0&gt;</bpt>iso8859-2<ept i="0">&lt;/i0&gt;</ept> や <bpt i="1" x="1">&lt;i1&gt;</bpt>windows-1250<ept i="1">&lt;/i1&gt;</ept> が使用されているところは任意のエンコーディングを意味しており、好きなエンコーディングに置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the following, command line arguments are used to pass the host name (the name of the machine the server is running on) and the server name (identifying the server process).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134445Z">
        <seg>以下ではコマンドライン引数を使用してホスト名 (サーバを実行しているマシン名)、(サーバプロセスを識別する) サーバ名を引き渡しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the latter case, <bpt i="5" x="5">&lt;c5&gt;</bpt>wxUSE_UTF8_LOCALE_ONLY<ept i="5">&lt;/c5&gt;</ept> can also be set to 1 to indicate that all strings are considered to be in UTF-8.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121106Z">
        <seg>UTF-8 ビルドを行う場合、すべての文字列が UTF-8 であることを表すために <bpt i="5" x="5">&lt;c5&gt;</bpt>wxUSE_UTF8_LOCALE_ONLY<ept i="5">&lt;/c5&gt;</ept> も 1 に設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the next one, <bpt i="2" x="2">&lt;c2&gt;</bpt>EVT_SIZE<ept i="2">&lt;/c2&gt;</ept> means that any changes in the size of the frame will result in calling OnSize() method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023523Z">
        <seg>次の行の <bpt i="2" x="2">&lt;c2&gt;</bpt>EVT_SIZE<ept i="2">&lt;/c2&gt;</ept> はフレームのサイズを変更すると OnSize() を呼び出すことを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the next section we provide a short introduction to handling the events using the event tables.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T002949Z">
        <seg>次の章ではイベントテーブルを用いたイベント処理の導入部分を説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the rare cases when this may be important, you might prefer using <bpt i="4" x="4">&lt;a4&gt;</bpt>GetChar()<ept i="4">&lt;/a4&gt;</ept> instead of the array subscript operator for this reasons.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T093644Z">
        <seg>このことが重要になるような稀な場合では、添字演算子の代わりに <bpt i="4" x="4">&lt;a4&gt;</bpt>GetChar()<ept i="4">&lt;/a4&gt;</ept> を使用した方が良いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the simplest possible case an event handler may not use the <bpt i="0" x="0">&lt;c0&gt;</bpt>event<ept i="0">&lt;/c0&gt;</ept> parameter at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024222Z">
        <seg>ありえそうな一番単純な例では、イベントハンドラは <bpt i="0" x="0">&lt;c0&gt;</bpt>event<ept i="0">&lt;/c0&gt;</ept> 引数をまったく使用しないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the situations where there is no corresponding <bpt i="0" x="0">&lt;c0&gt;</bpt>std::string<ept i="0">&lt;/c0&gt;</ept> function, please try to use the new <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> methods and not the old wxWidgets 1.xx variants which are deprecated and may disappear in future versions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T130805Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>std::string<ept i="0">&lt;/c0&gt;</ept> に対応する関数が存在しない場合は新しい <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> 関数を使用するようにし、wxWidgets 1.xx 版を使用しないようにしてください。これらの関数は非推奨であり、将来のバージョンでは削除されるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the situations where there is no corresponding std::string function, please try to use the new wxString methods and not the old wxWidgets 1.xx variants which are deprecated and may disappear in future versions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T130846Z">
        <seg>std::string に対応する関数が存在しない場合は新しい wxString 関数を使用するようにし、wxWidgets 1.xx 版を使用しないようにしてください。これらの関数は非推奨であり、将来のバージョンでは削除されるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In these cases a single "character" may be mapped to more than one code point or viceversa more characters may be mapped to a single code point.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T024311Z">
        <seg>これらの場合、ひとつの "文字" が複数のコードポイントにマッピングされたり、逆に複数の文字がひとつのコードポイントにマッピングされたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case it can't guarantee constant-time access to N-th element of the string any longer as to find the position of this character in the string we have to examine all the preceding ones.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T143506Z">
        <seg>その場合、文字列中のN 番目の要素へ定数時間でアクセスできることはもはや保証されません。なぜなら、その要素の位置を見つけるためにはその前の文字列をすべて調べる必要があるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case the event handler function has to call Skip() so as to indicate that the search for the event handler should continue.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T090341Z">
        <seg>この場合、イベントハンドラの検索を続行させるためにイベントハンドラ関数で Skip() を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, a special event handler will have to be written that will override ProcessEvent() in order to pass all events (or any selection of them) to the parent window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060249Z">
        <seg>この場合、すべてのイベント (もしくはその中の特定のイベント) を親ウィンドウへ渡すようにイベントハンドラの ProcessEvent() をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, due to C++ rules, the "read-only" <bpt i="0" x="0">&lt;i0&gt;</bpt>operator[]<ept i="0">&lt;/i0&gt;</ept> (which is the same as <bpt i="1" x="1">&lt;a1&gt;</bpt>GetChar()<ept i="1">&lt;/a1&gt;</ept>) cannot be chosen and the "read/write" <bpt i="2" x="2">&lt;i2&gt;</bpt>operator[]<ept i="2">&lt;/i2&gt;</ept> (the same as <bpt i="3" x="3">&lt;a3&gt;</bpt>GetWritableChar()<ept i="3">&lt;/a3&gt;</ept>) is used instead.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T074809Z">
        <seg>この場合、C++ の規則により、"読み取り専用" の <bpt i="0" x="0">&lt;i0&gt;</bpt>operator[]<ept i="0">&lt;/i0&gt;</ept> (これは <bpt i="1" x="1">&lt;a1&gt;</bpt>GetChar()<ept i="1">&lt;/a1&gt;</ept> と同じです) は使用できず、代わりに "読み書き可能な" <bpt i="2" x="2">&lt;i2&gt;</bpt>operator[]<ept i="2">&lt;/i2&gt;</ept> (これは <bpt i="3" x="3">&lt;a3&gt;</bpt>GetWritableChar()<ept i="3">&lt;/a3&gt;</ept> と同じです) が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, the button's event table will be searched, then the parent panel's, then the frame's.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T080603Z">
        <seg>この場合、まずボタンのイベントテーブルが検索され、続いて、その親パネル、フレームの順に検索されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, you can use the converter-constructor, as follows:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144158Z">
        <seg>この場合、以下の変換コンストラクタを使用することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this example, the text validator object provides the following functionality:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143137Z">
        <seg>この例ではテキストバリデータは次の機能を提供しています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this particular case UTF8 requires more space than UTF16 (3 bytes instead of 2).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T033430Z">
        <seg>この場合では、UTF8 は UTF16 よりも多くの領域が必要となります。 (2 バイトではなく 3 バイト)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In wxWidgets 1.xx, the <bpt i="0" x="0">&lt;b0&gt;</bpt>OnClose<ept i="0">&lt;/b0&gt;</ept> function did not actually delete 'this', but signaled to the calling function (either <bpt i="1" x="1">&lt;b1&gt;</bpt>Close<ept i="1">&lt;/b1&gt;</ept>, or the wxWidgets framework) to delete or not delete the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160146Z">
        <seg>wxWidgets 1.xx では <bpt i="0" x="0">&lt;b0&gt;</bpt>OnClose<ept i="0">&lt;/b0&gt;</ept> 関数は実際に 'this' を削除せず、呼び出し元 (<bpt i="1" x="1">&lt;b1&gt;</bpt>Close<ept i="1">&lt;/b1&gt;</ept> または wxWidgets フレームワーク) へウィンドウを削除するかどうかを通知していました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In wxWidgets, the code fragment from above should be written instead:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161649Z">
        <seg>wxWidgets では、上記のコードの代わりに以下のように書きます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In your message catalogs, you need to provide individual translations of these modifiers from their lower case names (ctrl, alt, shift) so that the wxWidgets accelerator code can recognise them even when translated.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T003631Z">
        <seg>メッセージカタログでは、修飾子の名前を小文字にしたもの (ctrl、alt、shift) とは別の名前に翻訳する必要があります。これによって、 wxWidgets がそれらの名前を翻訳されたものとして認識できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Include files</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145849Z">
        <seg>インクルードファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Indeed, the member functions should not be virtual as the event handler ignores that the functions are virtual, i.e. overriding a virtual member function in a derived class will not have any effect.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T032638Z">
        <seg>実際に、イベントテーブルはメンバ関数が仮想関数であることを無視する、つまり、仮想メンバ関数を継承クラスでオーバーライドしてもなにも影響を及ぼしません。そのため、メンバ関数を仮想関数にするべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Independent of how the individual sizers lay out their children, all children have certain features in common:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T132513Z">
        <seg>個々のサイザーがどのように子コントロールを配置するかによらず、子コントロールはすべていくつかの共通機能を持ちます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Installing the .mo files with your application in the appropriate location for the target system which is the one returned by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStandardPaths::GetLocalizedResourcesDir(wxStandardPaths::ResourceCat_Messages)<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001529Z">
        <seg>あなたのプログラムと一緒に .mo ファイルを対象システム内の適切な場所 (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxStandardPaths::GetLocalizedResourcesDir(wxStandardPaths::ResourceCat_Messages)<ept i="0">&lt;/a0&gt;</ept> の返却する場所) にインストールする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Installing the .mo files with your application in the appropriate location for the target system which is the one returned by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStandardPaths::GetLocalizedResourcesDir<ept i="0">&lt;/a0&gt;</ept>( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStandardPaths::ResourceCat_Messages<ept i="1">&lt;/a1&gt;</ept> ).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041415Z">
        <seg>あなたのプログラムと一緒に .mo ファイルを対象システム内の適切な場所 (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxStandardPaths::GetLocalizedResourcesDir<ept i="0">&lt;/a0&gt;</ept>( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStandardPaths::ResourceCat_Messages<ept i="1">&lt;/a1&gt;</ept> ) の返却する場所) にインストールする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead it returns a boolean value which indicates whether processing should continue (<bpt i="1" x="1">&lt;s1&gt;</bpt>true<ept i="1">&lt;/s1&gt;</ept>) or not (<bpt i="2" x="2">&lt;s2&gt;</bpt>false<ept i="2">&lt;/s2&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152514Z">
        <seg>代わりに処理を継続する (<bpt i="1" x="1">&lt;s1&gt;</bpt>true<ept i="1">&lt;/s1&gt;</ept>) かしない (<bpt i="2" x="2">&lt;s2&gt;</bpt>false<ept i="2">&lt;/s2&gt;</ept>) かを表す真偽値を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead it returns a boolean value which indicates whether processing should continue (true) or not (false).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160313Z">
        <seg>代わりに処理を継続する (true) かしない (false) かを表す真偽値を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead of run-time crashes you will get compilation errors in this case when using Bind().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030347Z">
        <seg>Bind() を使用すると、実行時にクラッシュするかわりにコンパイルエラーが発生するようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead of translating the strings in the source code to English and putting the original strings into message catalog, you may configure wxWidgets to use non-English msgids and translate to English using message catalogs:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132409Z">
        <seg>それらの文字列を英語に翻訳し、元の文字列をメッセージカタログに記載する代わりに、非英語の msgid を使用するように wxWidgets を設定し、メッセージカタログを用いて英語へ翻訳しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, in any place in your code, but usually in the code of the class defining the handler itself (and definitely not in the global scope as with the event tables), call its Bind&lt;&gt;() method like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040326Z">
        <seg>代わりに、コードの任意の場所で以下のように Bind&lt;&gt;() を呼び出します。 (通常はイベントを処理するクラスの定義内に配置し、イベントテーブルの場合のようにグローバルスコープ内には配置しません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, it adds a small amount of space to each allocated block which allows it to not reallocate memory (a relatively expensive operation) too often as when, for example, a string is constructed by subsequently adding one character at a time to it, as for example in:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080401Z">
        <seg>代わりに、各割り当て済みブロックに少しだけメモリを追加します。割り当て済みブロックを用いることで、例えば以下のように一度に一文字ずつ連結して文字列を構築する場合などに、頻繁にメモリの再割り当てを行わなくても良くなります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, we define some types and macros which behave differently in the Unicode and ANSI builds and allow us to avoid using conditional compilation in the program itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T162043Z">
        <seg>その代わり、Unicode ビルドと ANSI ビルドで異なる振る舞いをする型とマクロが定義されており、これによってプログラム内で条件付きコンパイルを使用しなくても済みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Internal wxString encoding</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030019Z">
        <seg>wxString の内部エンコーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Internationalization</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T150202Z">
        <seg>国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Interprocess Communication</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151146Z">
        <seg>プロセス間通信</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Interprocess communication overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T152103Z">
        <seg>プロセス間通信の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035518Z">
        <seg>イントロダクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Introduction to Events</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153252Z">
        <seg>イントロダクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Invokes the constraint-based layout algorithm or the sizer-based algorithm for this window...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T160048Z">
        <seg>このウィンドウに対して、制約に基づく配置アルゴリズムか、サイザーに基づくアルゴリズムを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It also allows the direct binding of events to:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T000012Z">
        <seg>また、以下のものをイベントへ直接バインドすることができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It also is able to intercept events generated by the control, providing filtering behaviour without the need to derive a new control class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T144513Z">
        <seg>また、コントロールの生成したイベントを捕まえることも可能なため、新しいコントロールクラスを継承することなく、コントロールの振る舞いをフィルタリングすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It also provides performance <bpt i="3" x="3">&lt;a3&gt;</bpt>statistics gathering code<ept i="3">&lt;/a3&gt;</ept> which may be enabled to fine tune the memory allocation strategy for your particular application - and the gain might be quite big.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T050115Z">
        <seg>また、性能の <bpt i="3" x="3">&lt;a3&gt;</bpt>統計収集コード<ept i="3">&lt;/a3&gt;</ept> も提供しており、特定のアプリケーションにあわせてメモリ割り当て戦略をチューニングすることができます。これによる性能向上効果は極めて大きいと思われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It assumes that bitmaps live in resources under Windows or OS2 and XPM files under all other platforms (for XPMs, the corresponding file must be included before this macro is used, of course, and the name of the bitmap should be the same as the resource name under Windows with <bpt i="2" x="2">&lt;c2&gt;</bpt>_xpm<ept i="2">&lt;/c2&gt;</ept> suffix).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154659Z">
        <seg>このマクロは Windows と OS2 ではリソース内に、それ以外のプラットフォームでは XPM ファイルとしてビットマップが存在するものとして処理を行います。(もちろん、XPM を使用するときはこのマクロを使用する前に対応するファイルをインクルードしておく必要があり、ビットマップの名前は Windows のリソース名の末尾に <bpt i="2" x="2">&lt;c2&gt;</bpt>_xpm<ept i="2">&lt;/c2&gt;</ept> を付けたものにしてください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It assumes that bitmaps live in resources under Windows or OS2 and XPM files under all other platforms (for XPMs, the corresponding file must be included before this macro is used, of course, and the name of the bitmap should be the same as the resource name under Windows with <bpt i="2" x="2">&lt;t2&gt;</bpt>_xpm<ept i="2">&lt;/t2&gt;</ept> suffix).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T150353Z">
        <seg>このマクロは Windows と OS2 ではリソース内に、それ以外のプラットフォームでは XPM ファイルとしてビットマップが存在するものとして処理を行います。(もちろん、XPM を使用するときはこのマクロを使用する前に対応するファイルをインクルードしておく必要があり、ビットマップの名前は Windows のリソース名の末尾に <bpt i="2" x="2">&lt;t2&gt;</bpt>_xpm<ept i="2">&lt;/t2&gt;</ept> を付けたものにしてください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can be also used to work with files with "non native" line termination characters and write them as "native" files if needed (in fact, the files may be written in any format).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T065601Z">
        <seg>プラットフォームと異なる行端文字を扱うこともできますし、必要であればプラットフォームの行端文字に変換して書き込むことも可能です。 (実際のところ、任意の形式でファイルを書き込むことが可能です)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can be corrected in one of the following ways:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124718Z">
        <seg>下記のいずれかの方法でこれを修正することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can be explicitly set to 0 in <bpt i="1" x="1">&lt;c1&gt;</bpt>setup.h<ept i="1">&lt;/c1&gt;</ept> under MSW or you can use <bpt i="2" x="2">&lt;c2&gt;</bpt>--disable-unicode<ept i="2">&lt;/c2&gt;</ept> under Unix but doing this is strongly discouraged.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T120718Z">
        <seg>MSW では <bpt i="1" x="1">&lt;c1&gt;</bpt>setup.h<ept i="1">&lt;/c1&gt;</ept> 内で明示的に 0 にセットするか、Unix では <bpt i="2" x="2">&lt;c2&gt;</bpt>--disable-unicode<ept i="2">&lt;/c2&gt;</ept> を使用することができますが、これは推奨しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can sometimes be confusing to keep track of the various size-related attributes of a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept>, how they relate to each other, and how they interact with sizers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T154525Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> のサイズに関連する属性について、お互いの関係やサイザーとの関わりについて時どき混乱することがあるかと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It contains all the usual functions to work with files (opening/closing, reading/writing, seeking, and so on) but compared with using standard C functions, has error checking (in case of an error a message is logged using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> facilities) and closes the file automatically in the destructor which may be quite convenient.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T060646Z">
        <seg>このクラスは (オープン/クローズ、読み書き、ファイルシークといった) 通常のファイル操作で使われる関数が含まれますが、標準 C 関数と違い、エラーチェック機能がある (エラーが発生した場合、 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> 機能を使ってメッセージがログ出力されます) ほか、デストラクタで自動的にファイルがクローズされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It contains all the usual functions to work with files (opening/closing, reading/writing, seeking, and so on) but compared with using standard C functions, has error checking (in case of an error a message is logged using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> facilities) and closes the file automatically in the destructor which may be quite convenient.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T073503Z">
        <seg>このクラスには (オープン/クローズ、読み書き、ファイルシークといった) 通常のファイル操作で使われる関数が含まれますが、標準 C 関数と違い、エラーチェック機能がある (エラーが発生した場合、 <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> 機能を使ってメッセージがログ出力されます) ほか、デストラクタで自動的にファイルがクローズされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It could be a useful technique for on-line tutorials, too, where you take a user through a serious of steps and don't want them to diverge from the lesson.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T065237Z">
        <seg>これはオンラインチュートリアルでも有用なテクニックです。レッスンから外れることなく、ユーザに一連のステップを実行させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It defines, for example, the API of OnSysRead(), OnSysWrite(), OnSysSeek() and OnSysTell().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T140028Z">
        <seg>このクラスは例えば OnSysRead()、OnSysWrite()、OnSysSeek()、OnSysTell() などの API を定義しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It defines, for example, the API of OnSysRead, OnSysWrite, OnSysSeek and OnSysTell.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140102Z">
        <seg>このクラスは例えば OnSysRead、OnSysWrite、OnSysSeek、OnSysTell などの API を定義しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It doesn't matter where it appears but it's customary to put it at the end because the macro changes the access type internally so it's safest if nothing follows it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015252Z">
        <seg>どこに挿入しても構いませんが、慣習的にクラス宣言の最後に配置します。これはこのマクロがアクセス制御を内部的に変更してしまうからで、宣言の後ろに何もなければ一番安全だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It filters input characters so that only alphabetic characters are allowed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143320Z">
        <seg>入力文字をフィルタリングし、アルファベットしか入力できないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It focuses on handling charsets related problems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T011704Z">
        <seg>文字コードに関連した問題について取り組む場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It goes like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T145613Z">
        <seg>これは次のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It goes without saying that a profiler should be used to measure the precise difference the change to <bpt i="0" x="0">&lt;c0&gt;</bpt>EXTRA_ALLOC<ept i="0">&lt;/c0&gt;</ept> makes to your program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121608Z">
        <seg>言うまでもないことですが、<bpt i="0" x="0">&lt;c0&gt;</bpt>EXTRA_ALLOC<ept i="0">&lt;/c0&gt;</ept> を変更したときの正確な違いを計測するためにプロファイラを使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It goes without saying that a profiler should be used to measure the precise difference the change to EXTRA_ALLOC makes to your program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T083854Z">
        <seg>言うまでもないことですが、EXTRA_ALLOC を変更したときの正確な違いを計測するためにプロファイラを使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It implements Read(), SeekI() (I for Input), and all read or IO generic related functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T140307Z">
        <seg>このクラスでは Read()、SeekI() (I は Input を表します) と、読み取りや入出力に関するすべての関数を実装しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It implements Read, SeekI (I for Input), and all read or IO generic related functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143611Z">
        <seg>このクラスでは Read、SeekI (I は Input を表します) と、読み取りや入出力に関するすべての関数を実装しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It involves editing the .po file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001222Z">
        <seg>これは .po ファイルを編集することで行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is 4 bytes under Unix systems, corresponding to the tradition of using UTF-32, but only 2 bytes under Windows which is required by compatibility with the OS which uses UTF-16.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T034200Z">
        <seg>Unix システムでは UTF-32 を使用してきた慣習にあわせて 4 バイトですが、Windows では UTF-16 を使用する OS との互換性のため、2 バイトとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is advised that you use <bpt i="1" x="1">&lt;a1&gt;</bpt>c_str()<ept i="1">&lt;/a1&gt;</ept> instead to clearly indicate when the conversion is done.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T053106Z">
        <seg>変換を行なうタイミングを明確にするために、代わりに <bpt i="1" x="1">&lt;a1&gt;</bpt>c_str()<ept i="1">&lt;/a1&gt;</ept> を使用するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is advised that you use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::c_str()<ept i="1">&lt;/a1&gt;</ept> instead to clearly indicate when the conversion is done.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113703Z">
        <seg>変換を行なうタイミングを明確にするために、代わりに <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::c_str()<ept i="1">&lt;/a1&gt;</ept> を使用するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is also possible to propagate the event only a limited number of times and not until it is processed (or a top level parent window is reached).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T155108Z">
        <seg>イベントの伝播回数を制限することも可能ですし、処理されるまで (もしくはトップレベルの親ウィンドウに到達するまで) 伝播させることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is based upon the idea of individual subwindows reporting their minimal required size and their ability to get stretched if the size of the parent window has changed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T140748Z">
        <seg>このアルゴリズムは、必要最小限のサイズを通知し、親ウィンドウのサイズが変化した場合にそれにあわせてサイズを変更することのできる、個別のサブウィンドウという考えに基づいています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is especially well suited for working with configuration files and program source files.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T064917Z">
        <seg>このクラスは設定ファイルやソースファイルを扱う場合に特に適しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is helpful when a string must be broken into tokens and replaces the standard C library <bpt i="2" x="2">&lt;c2&gt;</bpt>strtok()<ept i="2">&lt;/c2&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121518Z">
        <seg>このクラスは文字列をトークンに分解する必要があるときに便利で、標準 C ライブラリの <bpt i="2" x="2">&lt;c2&gt;</bpt>strtok()<ept i="2">&lt;/c2&gt;</ept> 関数の代わりになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is helpful when a string must be broken into tokens and replaces the standard C library <bpt i="1" x="1">&lt;i1&gt;</bpt> strtok()<ept i="1">&lt;/i1&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120951Z">
        <seg>このクラスは文字列をトークンに分解する必要があるときに便利で、標準 C ライブラリの <bpt i="1" x="1">&lt;i1&gt;</bpt>strtok()<ept i="1">&lt;/i1&gt;</ept> 関数の代わりになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is interpreted as a weight factor, i.e. it can be zero, indicating that the window may not be resized at all, or above zero.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T160524Z">
        <seg>これは重み係数として解釈されます。つまり、値を 0 (この場合、ウィンドウはまったくリサイズされません) か、0 より大きい値にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is no longer enough to just depend on the default byte-sized character set that computers have traditionally used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T152748Z">
        <seg>コンピュータが昔から使用しているデフォルトのバイト単位の文字コードに依存するだけではもう不十分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is nonetheless recommended to use <bpt i="0" x="0">&lt;b0&gt;</bpt>iterators<ept i="0">&lt;/b0&gt;</ept> (instead of index based access) like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120256Z">
        <seg>とはいえ、(インデックスによるアクセスの代わりに) このように <bpt i="0" x="0">&lt;b0&gt;</bpt>イテレータ<ept i="0">&lt;/b0&gt;</ept> を使用することを推奨します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is strongly advised to recompile your code with a compiler warning about passing non-POD objects to vararg functions, such as g++.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T152514Z">
        <seg>g++ など、非 POD オブジェクトを可変引数関数に渡すと警告を出すコンパイラを使用してコードをコンパイルし直すことを強く推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is the duty of the application to define a suitable event handler, and decide whether or not to destroy the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T144315Z">
        <seg>適切なイベントハンドラを定義し、ウィンドウを破棄するか決定するのはアプリケーションの責務です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is the unique feature of a box sizer, that it can grow in both directions (height and width) but can distribute its growth in the main direction (horizontal for a row) <bpt i="0" x="0">&lt;e0&gt;</bpt>unevenly<ept i="0">&lt;/e0&gt;</ept> among its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141834Z">
        <seg>ボックスサイザーに固有の機能として、両方 (高さと幅) の方向に伸長させることができる一方で、主となる方向 (行に対しては水平方向) のサイズ変更を子コントロールに対して <bpt i="0" x="0">&lt;e0&gt;</bpt>不規則に<ept i="0">&lt;/e0&gt;</ept> 分配できる点が挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is the unique feature of a box sizer, that it can grow in both directions (height and width) but can distribute its growth in the main direction (horizontal for a row) <bpt i="0" x="0">&lt;i0&gt;</bpt>unevenly<ept i="0">&lt;/i0&gt;</ept> among its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T130514Z">
        <seg>ボックスサイザーに固有の機能として、両方 (高さと幅) の方向に伸長させることができる一方で、主となる方向 (行に対しては水平方向) のサイズ変更を子コントロールに対して <bpt i="0" x="0">&lt;i0&gt;</bpt>不規則に<ept i="0">&lt;/i0&gt;</ept> 分配できる点が挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is then safe to end the dialog by calling <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDialog::EndModal<ept i="3">&lt;/a3&gt;</ept> (if modal) or <bpt i="4" x="4">&lt;a4&gt;</bpt>wxDialog::Show<ept i="4">&lt;/a4&gt;</ept> (if modeless).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153455Z">
        <seg>そのときは <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDialog::EndModal<ept i="3">&lt;/a3&gt;</ept> (モーダルの場合) や <bpt i="4" x="4">&lt;a4&gt;</bpt>wxDialog::Show<ept i="4">&lt;/a4&gt;</ept> (モードレスの場合) を呼んでダイアログを終了しても安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is then safe to end the dialog by calling EndModal (if modal) or Show (if modeless).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150101Z">
        <seg>そのときは EndModal (モーダルの場合) や Show (モードレスの場合) を呼んでダイアログを終了しても安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used internally only and must not be called by the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150520Z">
        <seg>この関数は内部でのみ使用されるもので、ユーザが呼んではいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It logs the specified message text as well as the last system error code (<bpt i="1" x="1">&lt;e1&gt;</bpt>errno<ept i="1">&lt;/e1&gt;</ept> or Windows' <bpt i="2" x="2">&lt;e2&gt;</bpt>GetLastError()<ept i="2">&lt;/e2&gt;</ept> depending on the platform) and the corresponding error message.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091010Z">
        <seg>この関数は指定したメッセージとあわせて、最後のシステムエラーコード  (プラットフォームに応じて <bpt i="1" x="1">&lt;e1&gt;</bpt>errno<ept i="1">&lt;/e1&gt;</ept> または Windows の <bpt i="2" x="2">&lt;e2&gt;</bpt>::GetLastError()<ept i="2">&lt;/e2&gt;</ept> ) とそれに対応するエラーメッセージを出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It logs the specified message text as well as the last system error code (<bpt i="1" x="1">&lt;i1&gt;</bpt>errno<ept i="1">&lt;/i1&gt;</ept> or <bpt i="2" x="2">&lt;i2&gt;</bpt>::GetLastError()<ept i="2">&lt;/i2&gt;</ept> depending on the platform) and the corresponding error message.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011457Z">
        <seg>この関数は指定したメッセージとあわせて、最後のシステムエラーコード  (プラットフォームに応じて <bpt i="1" x="1">&lt;i1&gt;</bpt>errno<ept i="1">&lt;/i1&gt;</ept> または <bpt i="2" x="2">&lt;i2&gt;</bpt>::GetLastError()<ept i="2">&lt;/i2&gt;</ept> ) とそれに対応するエラーメッセージを出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be noted that data transfer to and from the clipboard is quite similar to data transfer with drag and drop and the code to implement these two types is almost the same.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T155800Z">
        <seg>クリップボードへの/からのデータ転送はドラッグ・アンド・ドロップによるデータ転送と非常に似ており、これらを実装するコードもほとんど同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be noted that wxWidgets' event processing system implements something close to virtual methods in normal C++ in spirit: both of these mechanisms allow you to alter the behaviour of the base class by defining the event handling functions in the derived classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T122712Z">
        <seg>wxWidgets の行うイベント処理の仕組みは通常の C++ の仮想関数にとても近いことに着目してください: 両方とも、継承クラスでイベント処理関数を定義することで基底クラスの振る舞いを置き換えることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be noted that wxWidgets' event processing system implements something very close to virtual methods in normal C++, i.e. it is possible to alter the behaviour of a class by overriding its event handling functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T033204Z">
        <seg>wxWidgets の行うイベント処理の仕組みは通常の C++ の仮想関数にとても近いことに着目してください。つまり、イベント処理関数をオーバーライドすることでクラスの振る舞いを変更できるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be used to enumerate all files, only files satisfying the given template mask or only non-hidden files.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T065828Z">
        <seg>このクラスを使って、すべてのファイル、特定のパターンに一致するファイル、隠しファイル以外のファイルを列挙することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It means that this information should be:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T150158Z">
        <seg>つまり、取り扱う情報は次の条件を満たすべきです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It only does anything at all in the debug mode (when the preprocessor symbol <bpt i="2" x="2">&lt;c2&gt;</bpt>__WXDEBUG__<ept i="2">&lt;/c2&gt;</ept> is defined) and expands to nothing in release mode (otherwise).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091213Z">
        <seg>デバッグモードの場合 (プリプロセッサシンボル <bpt i="2" x="2">&lt;c2&gt;</bpt>__WXDEBUG__<ept i="2">&lt;/c2&gt;</ept> が定義されている場合) のみ処理を行い、リリースモードの場合 (それ以外の場合) では空文字列に展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It only does anything at all in the debug mode (when the preprocessor symbol __WXDEBUG__ is defined) and expands to nothing in release mode (otherwise).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011829Z">
        <seg>デバッグモードの場合 (プリプロセッサシンボル __WXDEBUG__ が定義されている場合) のみ処理を行い、リリースモードの場合 (それ以外の場合) では空文字列に展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It should also show an appropriate message if data was not valid.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T144356Z">
        <seg>また、データが正しくない場合は適切なメッセージを表示する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It specifies the charset used by the catalog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123438Z">
        <seg>これはカタログで使用される文字コードを指定しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It transfers the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept> data back to this variable when the dialog is dismissed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150613Z">
        <seg>ダイアログが閉じられたときに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept> のデータをこの変数へ転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It transfers the value of g_data.m_string (a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> variable) to the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> when the dialog is initialised.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150603Z">
        <seg>ダイアログが初期化されたときに g_data.m_string (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> 変数) の値を <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> へ転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It transfers the value of g_data.m_string (a wxString variable) to the wxTextCtrl when the dialog is initialised.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143227Z">
        <seg>ダイアログが初期化されたときに g_data.m_string (wxString 変数) の値を wxTextCtrl へ転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It transfers the wxTextCtrl data back to this variable when the dialog is dismissed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143254Z">
        <seg>ダイアログが閉じられたときに wxTextCtrl のデータをこの変数へ転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It will also succeed if the current encoding is UTF-8 as all Unicode strings are representable in this encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T135725Z">
        <seg>また、Unicode 文字列はすべて UTF-8 で表現することが可能なため、現在のエンコーディングが UTF-8 である場合も常に成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It will both make your code more familiar to other C++ programmers (who are supposed to have knowledge of <bpt i="1" x="1">&lt;c1&gt;</bpt>std::string<ept i="1">&lt;/c1&gt;</ept> but not of <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept>), let you reuse the same code in both wxWidgets and other programs (by just typedefing <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> as <bpt i="4" x="4">&lt;c4&gt;</bpt>std::string<ept i="4">&lt;/c4&gt;</ept> when used outside wxWidgets) and by staying compatible with future versions of wxWidgets which will probably start using <bpt i="5" x="5">&lt;c5&gt;</bpt>std::string<ept i="5">&lt;/c5&gt;</ept> sooner or later too.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113356Z">
        <seg>そうすることで、(<bpt i="1" x="1">&lt;c1&gt;</bpt>std::string<ept i="1">&lt;/c1&gt;</ept> に関する知識はあっても <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> のことは知らないであろう) 他の C++ プログラマにとってより馴染みのあるコードにできますし、(wxWidgets 外でコードを使用するときは <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> を <bpt i="4" x="4">&lt;c4&gt;</bpt>std::string<ept i="4">&lt;/c4&gt;</ept> として typedef することで) wxWidgets とそれ以外のプログラムで同じコードを再利用することもできます。また、wxWidgets の将来のバージョンとの互換性も保てます。なぜなら、遅かれ早かれ、おそらく wxWidgets で <bpt i="5" x="5">&lt;c5&gt;</bpt>std::string<ept i="5">&lt;/c5&gt;</ept> を使用し始めるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Iterating wxString's characters</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T115417Z">
        <seg>wxString の文字の走査</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Just let us state once again the rules:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T140900Z">
        <seg>もう一度だけルールを述べさせてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Just replace this line with this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114153Z">
        <seg>この行を単純に次のように置き換えてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Last, note that there are also two simple global wrapper functions associated to the two <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler<ept i="2">&lt;/a2&gt;</ept> mentioned functions: <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPostEvent()<ept i="3">&lt;/a3&gt;</ept> and <bpt i="4" x="4">&lt;a4&gt;</bpt>wxQueueEvent()<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145412Z">
        <seg>最後に、前述の <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler<ept i="2">&lt;/a2&gt;</ept> の関数に関連する、ふたつのグローバルラッパー関数があります: それは <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPostEvent()<ept i="3">&lt;/a3&gt;</ept> と <bpt i="4" x="4">&lt;a4&gt;</bpt>wxQueueEvent()<ept i="4">&lt;/a4&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Last, remember that if <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEventLoopBase::YieldFor()<ept i="0">&lt;/a0&gt;</ept> is used directly or indirectly (e.g. through <bpt i="1" x="1">&lt;a1&gt;</bpt>wxProgressDialog<ept i="1">&lt;/a1&gt;</ept>) in your code, then you may have both re-entrancy problems and also problems caused by the processing of events out of order.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T114251Z">
        <seg>最後に、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEventLoopBase::YieldFor()<ept i="0">&lt;/a0&gt;</ept> が直接または (例えば <bpt i="1" x="1">&lt;a1&gt;</bpt>wxProgressDialog<ept i="1">&lt;/a1&gt;</ept> で) 間接的に使用される場合、再入可能性の問題とイベントが順不同に処理されることによる問題の両方が発生することを覚えておいてください。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let us now look at more examples of how to use different event handlers using the two overloads of Bind() function: first one for the object methods and the other one for arbitrary functors (callable objects, including simple functions):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060031Z">
        <seg>Bind() のふたつのオーバーロードを用いて、異なるイベントハンドラを使用する例を見てみましょう: 最初のオーバーロードはメンバ関数用で、もう一方は任意のファンクタ (単純な関数を含む、呼び出し可能なオブジェクト) 用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let us now look at the details of this definition: the first line means that we are defining the event table for MyFrame class and that its base class is <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFrame<ept i="0">&lt;/a0&gt;</ept>, so events not processed by MyFrame will, by default, be handled by <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023409Z">
        <seg>この定義を詳しく見ていきましょう: 最初の行は MyFrame クラスのイベントテーブルを定義しようとしており、基底クラスが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFrame<ept i="0">&lt;/a0&gt;</ept> であることを意味しています。そのため、デフォルトでは MyFrame で処理されなかったイベントは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> で処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let us start by looking at the syntax: the first obvious difference is that you need not use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDECLARE_EVENT_TABLE()<ept i="0">&lt;/a0&gt;</ept> nor <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBEGIN_EVENT_TABLE()<ept i="1">&lt;/a1&gt;</ept> and the associated macros.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T035836Z">
        <seg>構文を見ることから始めましょう: 最初の明らかな違いは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDECLARE_EVENT_TABLE()<ept i="0">&lt;/a0&gt;</ept> や <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBEGIN_EVENT_TABLE()<ept i="1">&lt;/a1&gt;</ept>、およびそれらに関連するマクロを使用する必要がない点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's look at them in order.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150957Z">
        <seg>それではこれらを順番に見ていきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's take a quite simple but common case of a file error: suppose that you're writing your data file on disk and there is not enough space.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T020143Z">
        <seg>非常に単純で、よくあるファイルエラーの場合を考えてみましょう: データをディスク上のファイルに書き込もうとして充分な空き容量がなかったときを想像してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Like this, no memory is lost and 15 iterations from 16 in the example above won't allocate memory but use the already allocated pool.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T082334Z">
        <seg>このように、メモリが無駄になることはありませんし、上記の例では 16 回の繰り返しのうち、15 回はメモリの割り当てが行われず、割り当て済みのプールが使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Like with all the other GUI frameworks, the control of flow in wxWidgets applications is event-based: the program normally performs most of its actions in response to the events generated by the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T154236Z">
        <seg>他のすべての GUI フレームワークのように、wxWidgets アプリケーションはイベントベースで処理の制御を行います: 一般的に、プログラムの処理の大半はユーザの生成するイベントに応じて行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Like wxLogError(), but also terminates the program with the exit code 3.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131253Z">
        <seg>wxLogError() と似ていますが、リターンコード 3 でプログラムを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>List of wxWidgets events</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012733Z">
        <seg>wxWidgets のイベント一覧</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Literal strings (i.e. <bpt i="0" x="0">&lt;t0&gt;</bpt>"Hello, world!"<ept i="0">&lt;/t0&gt;</ept> or <bpt i="1" x="1">&lt;t1&gt;</bpt>'*'<ept i="1">&lt;/t1&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T165612Z">
        <seg>リテラル文字列 (すなわち <bpt i="0" x="0">&lt;t0&gt;</bpt>"Hello, world!"<ept i="0">&lt;/t0&gt;</ept> や <bpt i="1" x="1">&lt;t1&gt;</bpt>'*'<ept i="1">&lt;/t1&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Loads the file history from the given config object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152402Z">
        <seg>指定されたコンフィグオブジェクトからファイルの履歴を読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Locales</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T122256Z">
        <seg>ロケール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Log Messages Selection</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131034Z">
        <seg>ログメッセージの選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Log Targets</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131038Z">
        <seg>ログターゲット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Log a message at wxLOG_Trace log level (see wxLogLevelValues enum).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091400Z">
        <seg>wxLOG_Trace ログレベル (wxLogLevelValues enum 参照) のメッセージを記録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logging Customization</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131059Z">
        <seg>ロギングのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logging in Multi-Threaded Applications</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131052Z">
        <seg>マルチスレッドアプリケーションでのロギング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logo</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004612Z">
        <seg>Logo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Luckily, there is another way - see the next section.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161547Z">
        <seg>幸運なことに、別の方法があります。次の章を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Macro to be used around all literal strings that should be translated.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040334Z">
        <seg>翻訳対象となるすべてのリテラル文字列に対して使用するマクロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Macros listed by event class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080547Z">
        <seg>イベントクラスごとのマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Main Page</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004626Z">
        <seg>メインページ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many applications should therefore be able to adapt to small displays with little or no work, as far as dialogs are concerned.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T145230Z">
        <seg>したがって、ダイアログのことを気にかけている限り、少し、もしくはまったく手を加えることなく、多くのアプリケーションを小さな画面に適応させることができるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Merges the window's best size into the min size and returns the result.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T153931Z">
        <seg>ウィンドウの最適サイズを最小サイズにマージし、その結果を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Message catalog resources category.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041139Z">
        <seg>メッセージカタログを表すリソースカテゴリ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Message sent to the client application when the server notifies it of a change in the data associated...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152819Z">
        <seg>Advice() を使用し、指定した項目に関連するデータの変更をサーバが通知するときにクライアントアプリケーションへ送信されるメッセージ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Messages between applications are usually identified by three variables: connection object, topic name and item name.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T150523Z">
        <seg>通常、アプリケーション間のメッセージは 3 種類の変数で識別されます: コネクションオブジェクト、トピック名、アイテム名です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Messages logged by this function will appear in the statusbar of the frame or of the top level applic...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T085759Z">
        <seg>この関数でロギングされたメッセージはデフォルトでフレームまたはトップレベルウィンドウのステータスバーに表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Messages logged from threads other than the main one will be buffered until <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::Flush()<ept i="0">&lt;/a0&gt;</ept> is called in the main thread (which usually happens during idle time, i.e. after processing all pending events) and will be really output only then.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T115355Z">
        <seg>メインスレッド以外のスレッドで記録されたメッセージはメインスレッドで <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::Flush()<ept i="0">&lt;/a0&gt;</ept> が呼ばれるまで (通常はアイドル時、つまり、未処理のイベントがすべて処理された後に呼ばれます) バッファリングされ、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::Flush()<ept i="0">&lt;/a0&gt;</ept> が呼ばれたときに初めて実際に出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Miscellaneous Notes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153449Z">
        <seg>雑多な覚書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Miscellaneous Other Changes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T150118Z">
        <seg>他の雑多な変更</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More DDE Details</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151558Z">
        <seg>DDE の詳細</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More DDE details</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033835Z">
        <seg>DDE の詳細</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More details about Unicode may be found at <bpt i="0" x="0">&lt;a0&gt;</bpt>http://www.unicode.org/.<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092847Z">
        <seg>Unicode についての詳細は <bpt i="0" x="0">&lt;a0&gt;</bpt>http://www.unicode.org/<ept i="0">&lt;/a0&gt;</ept> にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More details about Unicode may be found at <bpt i="0" x="0">&lt;t0&gt;</bpt>www.unicode.org<ept i="0">&lt;/t0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151147Z">
        <seg>Unicode についての詳細は <bpt i="0" x="0">&lt;t0&gt;</bpt>www.unicode.org<ept i="0">&lt;/t0&gt;</ept> にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More precisely, a code unit is the minimal bit combination that can represent a unit of encoded text for processing or interchange.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T030510Z">
        <seg>より正確に言うと、コード単位とは、テキスト処理または交換のために符号化された文字を表現可能な最小のビットの組み合わせです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More precisely, as said above, all event classes <bpt i="0" x="0">&lt;b0&gt;</bpt>not<ept i="0">&lt;/b0&gt;</ept> deriving from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> (see the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept> inheritance map) do <bpt i="3" x="3">&lt;b3&gt;</bpt>not<ept i="3">&lt;/b3&gt;</ept> propagate upward.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T150647Z">
        <seg>より正確に言うと、前に述べたように <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> を継承して  <bpt i="0" x="0">&lt;b0&gt;</bpt>いない<ept i="0">&lt;/b0&gt;</ept> イベントクラス (<bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept> の継承マップ参照) はどれも伝播 <bpt i="3" x="3">&lt;b3&gt;</bpt>しません<ept i="3">&lt;/b3&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More rarely used, but still useful, is wc_str() function which always returns the Unicode string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T152201Z">
        <seg>めったに使われませんが、便利な関数として wc_str() 関数があり、これは常に Unicode 文字列を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStdInputStream<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStdOutputStream<ept i="1">&lt;/a1&gt;</ept> classes are provided to provide a degree of interoperability between the two and make it possible to use any wxWidgets stream as a standard stream (the converse possibility to use a standard stream as a wxWidgets stream is planned for a future release).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T162834Z">
        <seg>さらに、ある程度の相互運用性を wxWidgets と 標準ストリームクラスとの間に提供するため、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxStdInputStream<ept i="0">&lt;/a0&gt;</ept> クラスと <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStdOutputStream<ept i="1">&lt;/a1&gt;</ept> クラスが提供されています。これらのクラスにより、任意の wxWidgets ストリームを標準ストリームとして使用できます。(逆に標準ストリームを wxWidgets ストリームとして使用する機能は将来的に提供する予定です)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, any application reading files which it didn't produce or receiving data from the network from other services should be ready to deal with Unicode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T012856Z">
        <seg>さらに、アプリケーション外で作成されたファイルを読み込んだり、ネットワーク経由で他のサービスからデータを読み込んだりするアプリケーションは Unicode を取り扱う準備をしておくべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, in the Windows NT/2000 case, even the program which uses only standard ASCII can profit from using Unicode because they will work more efficiently - there will be no need for the system to convert all strings the program uses to/from Unicode each time a system call is made.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T145642Z">
        <seg>さらに Windows NT/2000 の場合、標準的な ASCII モードのみを使用するプログラムであっても Unicode の恩恵を得ることができます。 なぜなら、システムコールを実行するたびにすべての文字列を Unicode に/から 変換する必要がないため、より効率的にプログラムが動作できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, some very useful functions are not standard at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T072507Z">
        <seg>その上、いくつかの非常に便利な関数は標準関数ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, the log level can be set separately for different log components.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T101356Z">
        <seg>さらに、異なるログコンポーネント間で別々にログレベルを設定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, the second version of this function takes a trace mask as the first argument which allows to further restrict the amount of messages generated.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013138Z">
        <seg>くわえて、2 番目の形式では第一引数としてトレースマスクを指定できるため、生成されるメッセージの量をさらに制限することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most DDE transactions operate on this object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T150425Z">
        <seg>ほとんどの DDE トランザクションはこのオブジェクト上で行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most controls will also set the min size to the size given in the control's constructor if a non-default value is passed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T160101Z">
        <seg>また、大半のコントロールはコンストラクタにデフォルト値以外の値が指定された場合にそれを最小サイズとして設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most controls will also set the minimal size to the size given in the control's constructor if a non-default value is passed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T151507Z">
        <seg>また、大半のコントロールはコンストラクタにデフォルト値以外の値が指定された場合にそれを最小サイズとして設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most windows can use the generic styles listed for <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> in addition to their own styles.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153657Z">
        <seg>ほとんどのウィンドウは独自のスタイルに加えて <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> の汎用的なスタイルを使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Mostly used by wxWidgets itself, but might be handy for logging errors after system call (API functio...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T090915Z">
        <seg>主に wxWidgets 自身で使用されますが、システムコール (API 関数) の失敗後のエラーログを記録するのに便利かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Mouse event macros can handle either individual mouse events or all mouse events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081658Z">
        <seg>マウスイベントマクロは個別のマウスやすべてのマウスのイベントを処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Much work has been done to make existing code using ANSI string literals work as before version 3.0.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121712Z">
        <seg>ANSI リテラル文字列を使用する既存のコードを 3.0 以前のバージョンと同じように動作させるために様々なことを行っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multithreading Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150140Z">
        <seg>マルチスレッドの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Multithreading overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T141757Z">
        <seg>マルチスレッドの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyClient *client = new MyClient;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134752Z">
        <seg>MyClient *client = new MyClient;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyClient(<bpt i="21" x="21">&lt;s21&gt;</bpt>void<ept i="21">&lt;/s21&gt;</ept>) { }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152919Z">
        <seg>MyClient(<bpt i="21" x="21">&lt;s21&gt;</bpt>void<ept i="21">&lt;/s21&gt;</ept>) { }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyClient(void) {}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134049Z">
        <seg>MyClient(void) {}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyConnection(<bpt i="4" x="4">&lt;s4&gt;</bpt>void<ept i="4">&lt;/s4&gt;</ept>)::<bpt i="5" x="5">&lt;a5&gt;</bpt>wxConnection<ept i="5">&lt;/a5&gt;</ept>() { }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152911Z">
        <seg>MyConnection(<bpt i="4" x="4">&lt;s4&gt;</bpt>void<ept i="4">&lt;/s4&gt;</ept>)::<bpt i="5" x="5">&lt;a5&gt;</bpt>wxConnection<ept i="5">&lt;/a5&gt;</ept>() { }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyConnection(void)::wxConnection() {}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134043Z">
        <seg>MyConnection(void)::wxConnection() {}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyFrame(...) : <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFrame<ept i="4">&lt;/a4&gt;</ept>(...) { }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015441Z">
        <seg>MyFrame(...) : <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFrame<ept i="4">&lt;/a4&gt;</ept>(...) { }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyFrame::MyFrame(...)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045722Z">
        <seg>MyFrame::MyFrame(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyFrame::MyFrame(...)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040328Z">
        <seg>MyFrame::MyFrame(...)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyPlotEvent event(MY_PLOT_CLICKED, GetId(), <bpt i="59" x="59">&lt;a59&gt;</bpt>wxPoint<ept i="59">&lt;/a59&gt;</ept>(...));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151355Z">
        <seg>MyPlotEvent event(MY_PLOT_CLICKED, GetId(), <bpt i="59" x="59">&lt;a59&gt;</bpt>wxPoint<ept i="59">&lt;/a59&gt;</ept>(...));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyPlotEvent(<bpt i="5" x="5">&lt;a5&gt;</bpt>wxEventType<ept i="5">&lt;/a5&gt;</ept> eventType, <bpt i="6" x="6">&lt;s6&gt;</bpt>int<ept i="6">&lt;/s6&gt;</ept> winid, <bpt i="7" x="7">&lt;s7&gt;</bpt>const<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>wxPoint<ept i="8">&lt;/a8&gt;</ept>&amp; pos)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150430Z">
        <seg>MyPlotEvent(<bpt i="5" x="5">&lt;a5&gt;</bpt>wxEventType<ept i="5">&lt;/a5&gt;</ept> eventType, <bpt i="6" x="6">&lt;s6&gt;</bpt>int<ept i="6">&lt;/s6&gt;</ept> winid, <bpt i="7" x="7">&lt;s7&gt;</bpt>const<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>wxPoint<ept i="8">&lt;/a8&gt;</ept>&amp; pos)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Nevertheless wxWidgets programs can also use standard stream classes and are encouraged to do so if the above considerations don't apply.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T134709Z">
        <seg>とは言え、wxWidgets プログラムで標準ストリームクラスを使用することも可能ですし、上記の事項が当てはまらない場合は使用が推奨されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145433Z">
        <seg>Next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next the event table must be defined and, as with any definition, it must be placed in an implementation file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T021820Z">
        <seg>次に、イベントテーブルを定義する必要があります。これは必ずソースファイル内に配置しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060936Z">
        <seg>イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Non-English Strings or 8-bit Characters in Source</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134455Z">
        <seg>ソース中の非英語文字列や 8 ビット文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Non-English strings or 8-bit characters in the source code</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T131301Z">
        <seg>ソースコード中の非英語文字列や 8 ビット文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Non-alpha characters are filtered out.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150531Z">
        <seg>非アルファベット文字を除外します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>None (stock cursors only).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142336Z">
        <seg>なし (既存のカーソルのみ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Normally, it is suppressed, but might be activated if the user wishes to know more details about the program progress (another, but possibly confusing name for the same function is <bpt i="1" x="1">&lt;b1&gt;</bpt> wxLogInfo<ept i="1">&lt;/b1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010737Z">
        <seg>通常は出力されませんが、ユーザがプログラムの進捗状況についてより詳しく知りたい場合に有効化されるかもしれません。 (名前の紛らわしい同じ機能の関数として <bpt i="1" x="1">&lt;b1&gt;</bpt> wxLogInfo<ept i="1">&lt;/b1&gt;</ept> があります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Normally, it is suppressed, but might be activated if the user wishes to know more details about the program progress (another, but possibly confusing name for the same function is wxLogInfo).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131821Z">
        <seg>通常は出力されませんが、ユーザがプログラムの進捗状況についてより詳しく知りたい場合に有効化されるかもしれません。 (名前の紛らわしい同じ機能の関数として wxLogInfo があります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Normally, the prefix is hard-coded and is the same as the value passed to <bpt i="0" x="0">&lt;c0&gt;</bpt>configure<ept i="0">&lt;/c0&gt;</ept> via the <bpt i="1" x="1">&lt;c1&gt;</bpt>--prefix<ept i="1">&lt;/c1&gt;</ept> switch when compiling the library (typically <bpt i="2" x="2">&lt;c2&gt;</bpt>/usr/local<ept i="2">&lt;/c2&gt;</ept> or <bpt i="3" x="3">&lt;c3&gt;</bpt>/usr<ept i="3">&lt;/c3&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T160031Z">
        <seg>通常、プレフィックスはハードコーディングされており、ライブラリのコンパイル時に <bpt i="1" x="1">&lt;c1&gt;</bpt>--prefix<ept i="1">&lt;/c1&gt;</ept> スイッチによって <bpt i="0" x="0">&lt;c0&gt;</bpt>configure<ept i="0">&lt;/c0&gt;</ept> へ渡される値と同じです。 (普通は <bpt i="2" x="2">&lt;c2&gt;</bpt>/usr/local<ept i="2">&lt;/c2&gt;</ept> か <bpt i="3" x="3">&lt;c3&gt;</bpt>/usr<ept i="3">&lt;/c3&gt;</ept> です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Normally, the prefix is hard-coded and is the same as the value passed to <bpt i="0" x="0">&lt;t0&gt;</bpt>configure<ept i="0">&lt;/t0&gt;</ept> via the <bpt i="1" x="1">&lt;t1&gt;</bpt>--prefix<ept i="1">&lt;/t1&gt;</ept> switch when compiling the library (typically <bpt i="2" x="2">&lt;t2&gt;</bpt>/usr/local<ept i="2">&lt;/t2&gt;</ept> or <bpt i="3" x="3">&lt;t3&gt;</bpt>/usr<ept i="3">&lt;/t3&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T160101Z">
        <seg>通常、プレフィックスはハードコーディングされており、ライブラリのコンパイル時に <bpt i="1" x="1">&lt;t1&gt;</bpt>--prefix<ept i="1">&lt;/t1&gt;</ept> スイッチによって <bpt i="0" x="0">&lt;t0&gt;</bpt>configure<ept i="0">&lt;/t0&gt;</ept> へ渡される値と同じです。 (普通は <bpt i="2" x="2">&lt;t2&gt;</bpt>/usr/local<ept i="2">&lt;/t2&gt;</ept> か <bpt i="3" x="3">&lt;t3&gt;</bpt>/usr<ept i="3">&lt;/t3&gt;</ept> です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Normally, you will call <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetDropTarget<ept i="2">&lt;/a2&gt;</ept> during window creation associating your drop target with it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T161509Z">
        <seg>通常はドロップ先へ関連付けるウィンドウの作成中に <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetDropTarget<ept i="2">&lt;/a2&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Not performance critical, neither from speed nor from a memory consumption point of view.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T150728Z">
        <seg>実行速度やメモリ消費量といった観点の性能が重要視されない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Not so with Bind&lt;&gt;() which can be used to specify these handlers which will handle the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T043258Z">
        <seg>Bind&lt;&gt;() ではこれらのイベントハンドラを指定できるため、そのようなことはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notably, under Unix, the underlying graphical toolkit (e.g. GTK+) usually uses UTF-8 encoded strings and using the same representations for the strings in wxWidgets allows to avoid conversion from UTF-32 to UTF-8 and vice versa each time a string is shown in the UI or retrieved from it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T093954Z">
        <seg>特に、Unix のグラフィカルツールキット ( GTK+ など) は普通、UTF-8 文字列を使用しており、wxWidgets でも同じ符号化方式を使用することで、UI に文字列を表示するときや逆に文字列を取得するときに毎回 UTF-32 から UTF-8 に変換する必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note however that other classes like <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMemoryBuffer<ept i="0">&lt;/a0&gt;</ept> are more suited to this task.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T154203Z">
        <seg>ただし、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxMemoryBuffer<ept i="0">&lt;/a0&gt;</ept> のように、このことを行なうためのより適切なクラスが他に存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> does not derive from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> and thus does not interfere with tab ordering and requires very few resources compared to a real window on screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141726Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> を継承していないため、タブ順に干渉することがなく、実際のウィンドウと比較するとほとんどリソースを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="0" x="0">&lt;c0&gt;</bpt>MyFrameHandler<ept i="0">&lt;/c0&gt;</ept> doesn't need to derive from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060310Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MyFrameHandler<ept i="0">&lt;/c0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> を継承している必要がないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="0" x="0">&lt;c0&gt;</bpt>this<ept i="0">&lt;/c0&gt;</ept> pointer must be specified here.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040409Z">
        <seg>ここでは <bpt i="0" x="0">&lt;c0&gt;</bpt>this<ept i="0">&lt;/c0&gt;</ept> ポインタを指定する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_DRAG_AND_DROP<ept i="0">&lt;/c0&gt;</ept> must be defined in <bpt i="1" x="1">&lt;c1&gt;</bpt>setup.h<ept i="1">&lt;/c1&gt;</ept> in order to use drag and drop in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134009Z">
        <seg>wxWidgets でドラッグ・アンド・ドロップを使用するには、<bpt i="1" x="1">&lt;c1&gt;</bpt>setup.h<ept i="1">&lt;/c1&gt;</ept> で <bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_DRAG_AND_DROP<ept i="0">&lt;/c0&gt;</ept> を定義する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that any <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> may have a validator; using the <bpt i="1" x="1">&lt;c1&gt;</bpt>wxWS_EX_VALIDATE_RECURSIVELY<ept i="1">&lt;/c1&gt;</ept> style (see <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow<ept i="2">&lt;/a2&gt;</ept> extended styles) you can also implement recursive validation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150913Z">
        <seg>どの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> もバリデータを持つことに注意してください; <bpt i="1" x="1">&lt;c1&gt;</bpt>wxWS_EX_VALIDATE_RECURSIVELY<ept i="1">&lt;/c1&gt;</ept> スタイル (<bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow<ept i="2">&lt;/a2&gt;</ept> の拡張スタイルを参照) を使用すると再帰バリデータを実装することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that from the C/C++ programmer perspective the situation is further complicated by the fact that the standard type <bpt i="0" x="0">&lt;c0&gt;</bpt>wchar_t<ept i="0">&lt;/c0&gt;</ept> which is usually used to represent the Unicode ("wide") strings in C/C++ doesn't have the same size on all platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T033845Z">
        <seg>C/C++ プログラマの観点からすれば、状況はもっと複雑です。というのも、C/C++ で Unicode ( "ワイド" ) 文字列を表現するためによく使われる <bpt i="0" x="0">&lt;c0&gt;</bpt>wchar_t<ept i="0">&lt;/c0&gt;</ept> 型は、すべてのプラットフォームで同じサイズとは限らないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that missing or partially-implemented formats are automatically supplemented by the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> to load the data, and then converting it to wxBitmap form.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T151011Z">
        <seg>対応していない、または部分的にしか実装されていない形式は自動的に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> を使用してデータの読み込みと wxBitmap 形式への変換が行われることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that missing or partially-implemented formats are automatically supplemented by using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> to load the data, and then converting it to <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap<ept i="1">&lt;/a1&gt;</ept> form.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154900Z">
        <seg>対応していない、または部分的にしか実装されていない形式は自動的に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> を使用してデータの読み込みと <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap<ept i="1">&lt;/a1&gt;</ept> 形式への変換が行われることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that only some controls can calculate their size (such as a checkbox) whereas others (such as a listbox) don't have any natural width or height and thus require an explicit size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T133515Z">
        <seg>(チェックボックスなどの) いくつかのコントロールのみが自身のサイズを計算できるのに対し、(リストボックスなどの) 他のコントロールはデフォルトの幅や高さを持たないため、明示的にサイズを指定する必要がある点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that starting from wxWidgets 2.3.3 such logic doesn't apply for the windows shown before the program enters the main loop: in other words, you can safely show a dialog from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxApp::OnInit<ept i="3">&lt;/a3&gt;</ept> and not be afraid that your application terminates when this dialog -- which is the last top level window for the moment -- is closed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T132741Z">
        <seg>wxWidgets 2.3.3 から、このロジックはメインループに入る前のまだ表示されていないウィンドウには適用されなくなりました。つまり、 <bpt i="3" x="3">&lt;a3&gt;</bpt>wxApp::OnInit<ept i="3">&lt;/a3&gt;</ept> の中で安全にダイアログを表示でき、ダイアログ (その時点における最後のトップレベルウィンドウ) を閉じるときにアプリケーションが終了することを心配しなくても良いということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that such logic doesn't apply for the windows shown before the program enters the main loop: in other words, you can safely show a dialog from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::OnInit<ept i="0">&lt;/a0&gt;</ept> and not be afraid that your application terminates when this dialog -- which is the last top level window for the moment -- is closed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T132719Z">
        <seg>このロジックはメインループに入る前のまだ表示されていないウィンドウには適用されないことに注意してください。つまり、 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::OnInit<ept i="0">&lt;/a0&gt;</ept> の中で安全にダイアログを表示でき、ダイアログ (その時点における最後のトップレベルウィンドウ) を閉じるときにアプリケーションが終了することを心配しなくても良いということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the new way of specifying flags to <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> is via <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizerFlags<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T153032Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> にフラグを指定する新しい方法として <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizerFlags<ept i="1">&lt;/a1&gt;</ept> を使用する方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the new way of specifying flags to wxSizer is via <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizerFlags<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T153018Z">
        <seg>wxSizer にフラグを指定する新しい方法として <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizerFlags<ept i="0">&lt;/a0&gt;</ept> を使用する方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the program's command line arguments, represented by <bpt i="0" x="0">&lt;e0&gt;</bpt>argc<ept i="0">&lt;/e0&gt;</ept> and <bpt i="1" x="1">&lt;e1&gt;</bpt>argv<ept i="1">&lt;/e1&gt;</ept>, are available from within <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept> member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152536Z">
        <seg>プログラムのコマンドライン引数 (<bpt i="0" x="0">&lt;e0&gt;</bpt>argc<ept i="0">&lt;/e0&gt;</ept> と <bpt i="1" x="1">&lt;e1&gt;</bpt>argv<ept i="1">&lt;/e1&gt;</ept>) は <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept> のメンバ関数から使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the program's command line arguments, represented by <bpt i="0" x="0">&lt;i0&gt;</bpt>argc<ept i="0">&lt;/i0&gt;</ept> and <bpt i="1" x="1">&lt;i1&gt;</bpt>argv<ept i="1">&lt;/i1&gt;</ept>, are available from within wxApp member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160500Z">
        <seg>プログラムのコマンドライン引数 (<bpt i="0" x="0">&lt;i0&gt;</bpt>argc<ept i="0">&lt;/i0&gt;</ept> と <bpt i="1" x="1">&lt;i1&gt;</bpt>argv<ept i="1">&lt;/i1&gt;</ept>) は wxApp のメンバ関数から使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that this macro doesn't need a window identifier, since normally you are only interested in the current window's size events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024247Z">
        <seg>このマクロはウィンドウ識別子を必要としません。なぜなら、通常は現在のウィンドウのリサイズイベントにのみ関心があるはずだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that this macro may occur in any section of the class (public, protected or private) but that it is probably better to insert it at the end, as shown, because this macro implicitly changes the access to protected which may be quite unexpected if there is anything following it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T082803Z">
        <seg>このマクロはクラスの任意の場所 (public、protected、private) に配置することができますが、おそらく例示のように最後に挿入する方が良いでしょう。なぜなら、このマクロは暗黙的にアクセス制御を protected に変更してしまうためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that this static box has to be created separately.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115446Z">
        <seg>このスタティックボックスは別々に作成する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that typically one character is assigned exactly one code point, but there are exceptions; the so-called <bpt i="0" x="0">&lt;e0&gt;</bpt>precomposed characters<ept i="0">&lt;/e0&gt;</ept> (see <bpt i="1" x="1">&lt;a1&gt;</bpt>http://en.wikipedia.org/wiki/Precomposed_character<ept i="1">&lt;/a1&gt;</ept>) or the <bpt i="2" x="2">&lt;e2&gt;</bpt>ligatures<ept i="2">&lt;/e2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T095359Z">
        <seg>通常、ひとつの文字は厳密にひとつのコードポイントに割り当てられますが、なかには例外もあります; いわゆる <bpt i="0" x="0">&lt;e0&gt;</bpt>合成済み文字<ept i="0">&lt;/e0&gt;</ept> (<bpt i="1" x="1">&lt;a1&gt;</bpt>http://en.wikipedia.org/wiki/Precomposed_character<ept i="1">&lt;/a1&gt;</ept> 参照) や <bpt i="2" x="2">&lt;e2&gt;</bpt>合字 (リガチャ)<ept i="2">&lt;/e2&gt;</ept> のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that under Windows, you must either run the program under debugger or use a 3rd party program such as DebugView (<bpt i="3" x="3">&lt;a3&gt;</bpt>http://www.microsoft.com/technet/sysinternals/Miscellaneous/DebugView.mspx<ept i="3">&lt;/a3&gt;</ept>) to actually see the debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091318Z">
        <seg>Windows でデバッグ出力を確認するためにはデバッガーを使用するか、DbgView (<bpt i="3" x="3">&lt;a3&gt;</bpt>http://www.microsoft.com/technet/sysinternals/Miscellaneous/DebugView.mspx<ept i="3">&lt;/a3&gt;</ept>) のようなサードパーティーのプログラムを使用する必要がある点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that using <bpt i="2" x="2">&lt;a2&gt;</bpt>wxImage<ept i="2">&lt;/a2&gt;</ept> is the preferred way to load images in wxWidgets, with the exception of resources (XPM-files or native Windows resources).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154913Z">
        <seg>wxWidgets で画像を読み込む場合、リソース (XPM ファイルや Windows のリソース) から読み込む場合を除くと、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxImage<ept i="2">&lt;/a2&gt;</ept> を利用した方が良いことにも注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that using wxImage is the preferred way to load images in wxWidgets, with the exception of resources (XPM-files or native Windows resources).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T151034Z">
        <seg>wxWidgets で画像を読み込む場合、リソース (XPM ファイルや Windows のリソース) から読み込む場合を除くと、wxImage を利用した方が良いことにも注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that while the behaviour of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> when <bpt i="1" x="1">&lt;c1&gt;</bpt>wxUSE_UNICODE_WCHAR==1<ept i="1">&lt;/c1&gt;</ept> resembles UCS-2 encoding, it's not completely correct to refer to <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> as UCS-2 encoded since you can encode code points outside the <bpt i="3" x="3">&lt;e3&gt;</bpt>BMP<ept i="3">&lt;/e3&gt;</ept> in a <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> as two code units (i.e. as a surrogate pair; as already mentioned however <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept> will "see" them as two different code points)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T125717Z">
        <seg><bpt i="1" x="1">&lt;c1&gt;</bpt>wxUSE_UNICODE_WCHAR==1<ept i="1">&lt;/c1&gt;</ept> のときの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の振る舞いは UCS-2 エンコーディングに似ていますが、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> を完全に UCS-2 エンコーディングとみなすことはできません。なぜなら、<bpt i="3" x="3">&lt;e3&gt;</bpt>BMP<ept i="3">&lt;/e3&gt;</ept> 以外のコードポイントをふたつのコードポイントとして (つまり、サロゲートペアとして; ただし、すでに述べたように <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept> はそれらを異なるふたつのコードポイントとして扱います) <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> に格納することができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that wxSizer does not derive from wxWindow and thus does not interfere with tab ordering and requires very few resources compared to a real window on screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T123143Z">
        <seg>wxSizer は wxWindow を継承していないため、タブ順に干渉することがなく、実際のウィンドウと比較するとほとんどリソースを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that wxUSE_DRAG_AND_DROP must be defined in setup.h in order to use drag and drop in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T130915Z">
        <seg>wxWidgets でドラッグ・アンド・ドロップを使用するには、setup.h で wxUSE_DRAG_AND_DROP を定義する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that you can get the object that generated the event -- and that is not the same as the frame -- via <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::GetEventObject()<ept i="0">&lt;/a0&gt;</ept> method of <bpt i="1" x="1">&lt;c1&gt;</bpt>event<ept i="1">&lt;/c1&gt;</ept> argument passed to the event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030222Z">
        <seg>イベントハンドラへ渡された <bpt i="1" x="1">&lt;c1&gt;</bpt>event<ept i="1">&lt;/c1&gt;</ept> 引数の <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::GetEventObject()<ept i="0">&lt;/a0&gt;</ept> 関数によって、イベントを生成したオブジェクトを取得できます。 (このオブジェクトはフレームではありません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that your application may wish to override ProcessEvent to redirect processing of events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T052859Z">
        <seg>ProcessEvent をオーバーライドすることでイベント処理をリダイレクトしたいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note the use of IMPLEMENT_APP(appClass), which allows wxWidgets to dynamically create an instance of the application object at the appropriate point in wxWidgets initialization.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161134Z">
        <seg>IMPLEMENT_APP(appClass) を使用している点に注意してください。これにより、wxWidgets の初期化時の適切なタイミングでアプリケーションオブジェクトのインスタンスが動的に作成されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note this particular line:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123417Z">
        <seg>この行に注目してください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141627Z">
        <seg>注:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note: Since mb_str() returns a temporary wxCharBuffer to hold the result of the conversion, you need to explicitly cast it to const char* if you use it in a vararg context (like with printf).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T144400Z">
        <seg>注: mb_str() は変換結果を保持する一時 wxCharBuffer を返却するため、(printf のような) 可変数引数の関数を使用する場合は明示的に const char* にキャストする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note: This is supported only by wxBoxSizer and wxFlexGridSizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T150152Z">
        <seg>注: これは wxBoxSizer と wxFlexGridSizer でのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that Unicode support has changed radically in wxWidgets 3.0 and a lot of existing material pertaining to the previous versions of the library is not correct any more.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005230Z">
        <seg>wxWidgets 3.0 では Unicode の対応方法が大きく変わるため、以前のバージョンに関連する多くのことが、もはや正しくなくなることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that by including <bpt i="0" x="0">&lt;c0&gt;</bpt><it pos="begin" x="1">&lt;&lt;a1&gt;</it>wx/ipc.h<ept i="1">&lt;/a1&gt;</ept>&gt;<ept i="0">&lt;/c0&gt;</ept> you may define convenient synonyms for the IPC classes: <bpt i="2" x="2">&lt;a2&gt;</bpt>wxServer<ept i="2">&lt;/a2&gt;</ept> for either <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDDEServer<ept i="3">&lt;/a3&gt;</ept> or <bpt i="4" x="4">&lt;a4&gt;</bpt>wxTCPServer<ept i="4">&lt;/a4&gt;</ept> depending on whether DDE-based or socket-based implementation is used and the same thing for <bpt i="5" x="5">&lt;a5&gt;</bpt>wxClient<ept i="5">&lt;/a5&gt;</ept> and <bpt i="6" x="6">&lt;a6&gt;</bpt>wxConnection<ept i="6">&lt;/a6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T124853Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt><it pos="begin" x="1">&lt;&lt;a1&gt;</it>wx/ipc.h<ept i="1">&lt;/a1&gt;</ept>&gt;<ept i="0">&lt;/c0&gt;</ept> をインクルードすることで IPC クラス用の便利なシノニムを定義できます: DDE ベースの実装とソケットベースの実装のどちらを使用するかによって <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDDEServer<ept i="3">&lt;/a3&gt;</ept> もしくは <bpt i="4" x="4">&lt;a4&gt;</bpt>wxTCPServer<ept i="4">&lt;/a4&gt;</ept> のいずれかが <bpt i="2" x="2">&lt;a2&gt;</bpt>wxServer<ept i="2">&lt;/a2&gt;</ept> として定義されます。同様のことが <bpt i="5" x="5">&lt;a5&gt;</bpt>wxClient<ept i="5">&lt;/a5&gt;</ept> と <bpt i="6" x="6">&lt;a6&gt;</bpt>wxConnection<ept i="6">&lt;/a6&gt;</ept> に対しても行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that by including <bpt i="0" x="0">&lt;t0&gt;</bpt>&lt;wx/ipc.h&gt;<ept i="0">&lt;/t0&gt;</ept> you may define convenient synonyms for the IPC classes: <bpt i="1" x="1">&lt;t1&gt;</bpt>wxServer<ept i="1">&lt;/t1&gt;</ept> for either <bpt i="2" x="2">&lt;t2&gt;</bpt>wxDDEServer<ept i="2">&lt;/t2&gt;</ept> or <bpt i="3" x="3">&lt;t3&gt;</bpt>wxTCPServer<ept i="3">&lt;/t3&gt;</ept> depending on whether DDE-based or socket-based implementation is used and the same thing for <bpt i="4" x="4">&lt;t4&gt;</bpt>wxClient<ept i="4">&lt;/t4&gt;</ept> and <bpt i="5" x="5">&lt;t5&gt;</bpt>wxConnection<ept i="5">&lt;/t5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T155105Z">
        <seg><bpt i="0" x="0">&lt;t0&gt;</bpt>&lt;wx/ipc.h&gt;<ept i="0">&lt;/t0&gt;</ept> をインクルードすることで IPC クラス用の便利なシノニムを定義できます: DDE ベースの実装とソケットベースの実装のどちらを使用するかによって <bpt i="2" x="2">&lt;t2&gt;</bpt>wxDDEServer<ept i="2">&lt;/t2&gt;</ept> もしくは <bpt i="3" x="3">&lt;t3&gt;</bpt>wxTCPServer<ept i="3">&lt;/t3&gt;</ept> のいずれかが <bpt i="1" x="1">&lt;t1&gt;</bpt>wxServer<ept i="1">&lt;/t1&gt;</ept> として定義されます。同様のことが <bpt i="4" x="4">&lt;t4&gt;</bpt>wxClient<ept i="4">&lt;/t4&gt;</ept> と <bpt i="5" x="5">&lt;t5&gt;</bpt>wxConnection<ept i="5">&lt;/t5&gt;</ept> に対しても行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that if you just need to modify (or suppress) the time stamp display, overriding FormatTime() is enough.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T123343Z">
        <seg>ただし、タイムスタンプの形式を変更 (または出力を抑制) したいだけの場合、FormatTime() をオーバーライドするだけで充分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that in the latter case you should be prepared for logging messages early during the program startup and also during program shutdown so you shouldn't rely on existence of the main application window, for example.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T121648Z">
        <seg>後者の場合、例えばプログラムの起動時に早くメッセージのロギングの準備をする必要があり、プログラムの終了時にはメインウィンドウの存在に依存してはいけない点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that the default GUI logger already only output the messages when it is flushed, so by default messages from the other threads will be shown more or less at the same moment as usual.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T115837Z">
        <seg>デフォルトの GUI ロガーはフラッシュされるときに初めてメッセージを出力するようにすでになっているため、他スレッドのメッセージは通常どおり、ほぼ同時に表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that the log level set explicitly for the transactions code overrides the log level of the parent component but that all other database code subcomponents inherit its setting by default and so won't generate any log messages at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111340Z">
        <seg>トランザクションコードで明示的に設定されたログレベルは親コンポーネントのログレベルを上書きしますが、データベースコードの他のサブコンポーネントはすべて親コンポーネントの値を継承するため、ログメッセージはまったく生成されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that the narrow strings used with wxWidgets are <bpt i="0" x="0">&lt;e0&gt;</bpt>always<ept i="0">&lt;/e0&gt;</ept> assumed to be in the current locale encoding, so writing</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T080919Z">
        <seg>wxWidgets で使用されるナロー文字列は <bpt i="0" x="0">&lt;e0&gt;</bpt>常に<ept i="0">&lt;/e0&gt;</ept> 現在のロケールで符号化されていると仮定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that the use of log trace masks is hardly necessary any longer in current wxWidgets version as the same effect can be achieved by using different log components for different log statements of any level.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T130536Z">
        <seg>現在の wxWidgets では、もはやトレースマスクを使用する必要性がほとんどないことに注意してください。なぜなら、異なるログ文に対して異なるログコンポーネントを使用することで同じ事を実現できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that this is done before checking the static event table entries, so if both a dynamic and a static event handler match the same event, the static one is never going to be used unless <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::Skip()<ept i="0">&lt;/a0&gt;</ept> is called in the dynamic one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T140327Z">
        <seg>これは静的イベントハンドラをチェックする前に行われることに注意してください。そのため、動的イベントハンドラと静的イベントハンドラの両方がイベントに合致した場合、動的イベントハンドラで <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::Skip()<ept i="0">&lt;/a0&gt;</ept> を呼ばない限りは静的イベントハンドラが呼ばれることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that this means that any event handler defined in a base class will be executed at this step.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T141039Z">
        <seg>これは基底クラスで定義されたイベントハンドラがこのステップで実行されうることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that to avoid remembering the exact order in which the events are processed in the document-view frame, the simplest, and recommended, solution is to only handle the events at the view classes level, and not in the document or document manager classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T153536Z">
        <seg>ドキュメント/ビューフレームワークでの正確なイベント処理順を覚えなくてもいいようにする、もっとも単純で推奨する解決方法は、ビュークラスでのみイベントを処理し、ドキュメントやドキュメントマネージャでは処理しないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that you may want to run the <bpt i="0" x="0">&lt;a0&gt;</bpt>Event Sample<ept i="0">&lt;/a0&gt;</ept> while reading this section and look at its code and the output when the button which can be used to test the event handlers execution order is clicked to understand it better.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T062902Z">
        <seg>おそらく、この章を読みながら <bpt i="0" x="0">&lt;a0&gt;</bpt>イベントサンプル<ept i="0">&lt;/a0&gt;</ept> を実行し、コードや (イベント処理順序を確認するために) ボタンをクリックした時の出力を見たくなると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that you must mention a method you want to use for the event handling in the event table definition; just defining it in MyFrame class is <bpt i="0" x="0">&lt;e0&gt;</bpt>not<ept i="0">&lt;/e0&gt;</ept> enough.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022936Z">
        <seg>イベント処理に使用したいメンバ関数はイベントテーブル内に記載する必要があることに注意してください; MyFrame クラス内で定義するだけでは  <bpt i="0" x="0">&lt;e0&gt;</bpt>不十分<ept i="0">&lt;/e0&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now let us describe the semantic differences:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024714Z">
        <seg>さて、意味論的な違いについて説明しましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, all the standard string operations are supported as well.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T051046Z">
        <seg>もちろん、標準的な文字列操作にも対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, in some situations threads really make sense (classical example is a server application which launches a new thread for each new client), but in others it might be a very poor choice (example: launching a separate thread when doing a long computation to show a progress dialog).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T145811Z">
        <seg>もちろん、いくつかの状況ではスレッドは本当に意味がありますが (古典的な例ではサーバアプリケーションでクライアントごとに新しいスレッドを実行することが挙げられます)、それ以外の場合ではお粗末な選択になるでしょう。(例: 長い計算をするときにプログレスダイアログを表示するために別のスレッドを実行する) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, in some situations threads really make sense (classical example is a server application which launches a new thread for each new client), but in others it might be an overkill.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T233256Z">
        <seg>もちろん、いくつかの状況ではスレッドは本当に意味がありますが (古典的な例ではサーバアプリケーションでクライアントごとに新しいスレッドを実行することが挙げられます)、それ以外の場合ではやり過ぎでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, it would be nearly impossibly to write such programs if it had to be done this way (try to imagine the number of <bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef UNICODE<ept i="0">&lt;/t0&gt;</ept> an average program would have had!).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151456Z">
        <seg>もちろん、この方法でプログラムを書くのは不可能に近いでしょう。 (平均的なプログラムに含まれることになるであろう <bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef UNICODE<ept i="0">&lt;/t0&gt;</ept> の数を想像してみてください!) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, it's also possible to emulate this behaviour with the classic static (i.e., bound via event tables) handlers by using an internal flag indicating whether the handler is currently enabled and returning from it if it isn't, but using dynamically bind handlers requires less code and is also usually more clear.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T041540Z">
        <seg>もちろん、イベントハンドラの有効無効を表す内部フラグを用いることで、古典的な静的イベントハンドラ (つまり、イベントテーブル) でもこの振る舞いを模倣することは可能です。しかし、動的にバインドされるイベントハンドラを使用する方がコードも少なく、処理内容も明確になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, the latter only works if the string contains data representable in the current locale encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T091448Z">
        <seg>もちろん、文字列が現在のロケールのエンコーディングで表現可能である場合のみ、後者の型で正しくアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, the usual standard C functions don't work with <bpt i="0" x="0">&lt;t0&gt;</bpt>wchar_t<ept i="0">&lt;/t0&gt;</ept> strings, so another set of functions exists which do the same thing but accept <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t *<ept i="1">&lt;/t1&gt;</ept> instead of <bpt i="2" x="2">&lt;t2&gt;</bpt>char *<ept i="2">&lt;/t2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T154223Z">
        <seg>もちろん、普通の標準 C 関数は <bpt i="0" x="0">&lt;t0&gt;</bpt>wchar_t<ept i="0">&lt;/t0&gt;</ept> 文字列をうまく取り扱うことができません。そのため、<bpt i="2" x="2">&lt;t2&gt;</bpt>char *<ept i="2">&lt;/t2&gt;</ept> の代わりに <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t *<ept i="1">&lt;/t1&gt;</ept> を受け取る別の関数群が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, this will change the format of the wxConfig output which may be undesirable.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T153206Z">
        <seg>もちろん、これは望ましくない wxConfig の出力形式を変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, you may also use <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::Printf<ept i="4">&lt;/a4&gt;</ept> which is also safe.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120856Z">
        <seg>もちろん、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::Printf<ept i="4">&lt;/a4&gt;</ept> も安全なので使用しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, you may also use <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::Printf<ept i="5">&lt;/a5&gt;</ept> which is also safe.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T073717Z">
        <seg>もちろん、<bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::Printf<ept i="5">&lt;/a5&gt;</ept> も安全なので使用しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, event tables are more succinct and centralize all event handler bindings in one place.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T021901Z">
        <seg>一方で、イベントテーブルの方が簡潔であり、すべてのイベントハンドラを一箇所に集約することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, event tables are still perfectly fine in simple situations where this extra flexibility is not needed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T031457Z">
        <seg>一方で、追加の柔軟性が必要とされないような単純な状況では、イベントテーブルもまだ充分に役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, the features provided make them very useful for storing all kinds of small to medium volumes of hierarchically-organized, heterogeneous data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T150843Z">
        <seg>一方で、階層構造を持ち、小規模から中規模であるすべての種類のデータを格納するのにこれらの提供機能が非常に役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, the recent evolution of the computer hardware shows an important trend towards multi-core systems, which are better exploited using multiple threads (e.g. you may want to split a long task among as many threads as many CPU (cores) the system reports; see <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread::GetCPUCount<ept i="0">&lt;/a0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T234144Z">
        <seg>一方で、近年のハードウェアの進歩はマルチコアシステムに関する重要な動向を見せており、マルチコアシステムではマルチスレッドをより有効活用できます。(例えば、長時間の計算を CPU 数と同じ数のスレッドに分割したいと思うかもしれません; <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread::GetCPUCount<ept i="0">&lt;/a0&gt;</ept> を参照してください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, there is no particular harm in leaving them neither as the code will still compile and work correctly -- you only need to remove them if you think that your code looks tidier without them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T151431Z">
        <seg>一方で、これらのマクロを残しておいても以前としてコンパイルできますし、正しく動作するため、特に害はありません。これらのマクロを削除してコードを綺麗にしたい場合だけ、マクロを削除する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, you still need to know about the event tables if only because you are going to see them in many samples and examples.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023007Z">
        <seg>一方で、単に多くのサンプルでイベントテーブルを見かけるからという理由だけであっても、イベントテーブルについて学ぶ必要性は依然として残っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Once you have chosen which object you want to use to convert your text, here is how you would use them with <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151839Z">
        <seg>変換に使用したいオブジェクトを選択したら、それらを <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> と一緒に使用する方法を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Once you have chosen which object you want to use to convert your text, here is how you would use them with wxString.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T142812Z">
        <seg>変換に使用したいオブジェクトを選択したら、それらを wxString と一緒に使用する方法を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One area where wxWidgets can help is in adapting dialogs for the lower resolution screens that inevitably accompany a smaller form factor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T152627Z">
        <seg>wxWidgets が支援できることのひとつにダイアログを (より小さいフォームファクタに付きものな) より低解像度の画面に適応させることが挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One is to define a entirely new event class (typically deriving from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent<ept i="0">&lt;/a0&gt;</ept> or <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042051Z">
        <seg>ひとつは完全に新しいイベントクラスを定義することです。 (通常は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent<ept i="0">&lt;/a0&gt;</ept> か <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> を継承します) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One of the unfortunate consequences of the possibility to pass <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>wxPrintf()<ept i="1">&lt;/c1&gt;</ept> without using <bpt i="2" x="2">&lt;c2&gt;</bpt>c_str()<ept i="2">&lt;/c2&gt;</ept> is that it is now impossible to pass the elements of unnamed enumerations to <bpt i="3" x="3">&lt;c3&gt;</bpt>wxPrintf()<ept i="3">&lt;/c3&gt;</ept> and other similar vararg functions, i.e.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130830Z">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>c_str()<ept i="2">&lt;/c2&gt;</ept> を使用せずに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> を <bpt i="1" x="1">&lt;c1&gt;</bpt>wxPrintf()<ept i="1">&lt;/c1&gt;</ept> へ渡せるようにした不幸な結果のひとつとして、無名 enum の要素を <bpt i="3" x="3">&lt;c3&gt;</bpt>wxPrintf()<ept i="3">&lt;/c3&gt;</ept> や類似の可変長関数へ渡せなくなりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One of them uses <bpt i="0" x="0">&lt;e0&gt;</bpt>event table<ept i="0">&lt;/e0&gt;</ept> macros and allows you to define the binding between events and their handlers only statically, i.e., during program compilation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T235640Z">
        <seg>ひとつは <bpt i="0" x="0">&lt;e0&gt;</bpt>イベントテーブル<ept i="0">&lt;/e0&gt;</ept> マクロを使用する方法で、静的 (コンパイル時) にのみ、イベントとそのハンドラをバインドすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One stream can have multiple stream buffers but one stream has always one autoinitialized stream buffer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T140240Z">
        <seg>ひとつのストリームは複数のストリームバッファを持つことができますが、ストリームは常にひとつの自動初期化済みのストリームバッファを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One stream can have multiple stream buffers but one stream have always one autoinitialized stream buffer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140350Z">
        <seg>ひとつのストリームは複数のストリームバッファを持つことができますが、ストリームは常にひとつの自動初期化済みのストリームバッファを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One use of PushEventHandler is to temporarily or permanently change the behaviour of the GUI.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T063100Z">
        <seg>PushEventHandler の使用法のひとつは、一時的または永続的に GUI の振る舞いを変更することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Only one log target is <bpt i="2" x="2">&lt;e2&gt;</bpt>active<ept i="2">&lt;/e2&gt;</ept> at any moment, this is the one used by <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogXXX() functions<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111418Z">
        <seg>いつでも <bpt i="2" x="2">&lt;e2&gt;</bpt>有効な<ept i="2">&lt;/e2&gt;</ept> ログターゲットはひとつだけで、これが <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogXXX()<ept i="3">&lt;/a3&gt;</ept> 関数によって使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Only one log target is <bpt i="2" x="2">&lt;i2&gt;</bpt>active<ept i="2">&lt;/i2&gt;</ept> at any moment, this is the one used by <bpt i="3" x="3">&lt;i3&gt;</bpt>wxLogXXX()<ept i="3">&lt;/i3&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T022742Z">
        <seg>いつでも <bpt i="2" x="2">&lt;i2&gt;</bpt>有効な<ept i="2">&lt;/i2&gt;</ept> ログターゲットはひとつだけで、これが <bpt i="3" x="3">&lt;i3&gt;</bpt>wxLogXXX()<ept i="3">&lt;/i3&gt;</ept> 関数によって使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Only the binary files are needed during program execution.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T235357Z">
        <seg>プログラム実行時にはバイナリファイルだけが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Only the handlers actually required by the application need to be overridden.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T023743Z">
        <seg>このとき、実際にアプリケーションで必要となるハンドラだけをオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>OpenLogFile(s);             <bpt i="7" x="7">&lt;s7&gt;</bpt>// ERROR: ambiguity<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142529Z">
        <seg>OpenLogFile(s);             <bpt i="7" x="7">&lt;s7&gt;</bpt>// エラー: 曖昧<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>OpenLogFile(s.<bpt i="10" x="10">&lt;a10&gt;</bpt>wx_str<ept i="10">&lt;/a10&gt;</ept>());    <bpt i="11" x="11">&lt;s11&gt;</bpt>// OK: function called depends on the build<ept i="11">&lt;/s11&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142623Z">
        <seg>OpenLogFile(s.<bpt i="10" x="10">&lt;a10&gt;</bpt>wx_str<ept i="10">&lt;/a10&gt;</ept>());    <bpt i="11" x="11">&lt;s11&gt;</bpt>// OK: ビルドに応じて関数が呼ばれる<ept i="11">&lt;/s11&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>OpenLogFile(s.<bpt i="12" x="12">&lt;a12&gt;</bpt>mb_str<ept i="12">&lt;/a12&gt;</ept>());    <bpt i="13" x="13">&lt;s13&gt;</bpt>// OK: always calls narrow string overload<ept i="13">&lt;/s13&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142650Z">
        <seg>OpenLogFile(s.<bpt i="12" x="12">&lt;a12&gt;</bpt>mb_str<ept i="12">&lt;/a12&gt;</ept>());    <bpt i="13" x="13">&lt;s13&gt;</bpt>// OK: 常にナロー文字列用のオーバーロードが呼ばれる<ept i="13">&lt;/s13&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>OpenLogFile(s.<bpt i="14" x="14">&lt;a14&gt;</bpt>wc_str<ept i="14">&lt;/a14&gt;</ept>());    <bpt i="15" x="15">&lt;s15&gt;</bpt>// OK: always calls wide string overload<ept i="15">&lt;/s15&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142710Z">
        <seg>OpenLogFile(s.<bpt i="14" x="14">&lt;a14&gt;</bpt>wc_str<ept i="14">&lt;/a14&gt;</ept>());    <bpt i="15" x="15">&lt;s15&gt;</bpt>// OK: 常にワイド文字列用のオーバーロードが呼ばれる<ept i="15">&lt;/s15&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>OpenLogFile(s.<bpt i="8" x="8">&lt;a8&gt;</bpt>c_str<ept i="8">&lt;/a8&gt;</ept>());     <bpt i="9" x="9">&lt;s9&gt;</bpt>// ERROR: ambiguity<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142544Z">
        <seg>OpenLogFile(s.<bpt i="8" x="8">&lt;a8&gt;</bpt>c_str<ept i="8">&lt;/a8&gt;</ept>());     <bpt i="9" x="9">&lt;s9&gt;</bpt>// エラー: 曖昧<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Opens the file, returning true if successful.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T092037Z">
        <seg>ファイルをオープンします。オープンに成功したら true を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Or, you can use identifiers below wxID_LOWEST.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080108Z">
        <seg>もしくは wxID_LOWEST 以下の識別子を使用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other (future) implementations of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfigBase<ept i="0">&lt;/a0&gt;</ept> might also understand GTK resource files or their analogues on the KDE side.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T153903Z">
        <seg>他の (将来の) <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConfigBase<ept i="0">&lt;/a0&gt;</ept> の実装では GTK リソースファイルや、KDE におけるその類似品も扱えるようになるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other (future) implementations of wxConfigBase might also understand GTK resource files or their analogues on the KDE side.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T151604Z">
        <seg>他の (将来の) wxConfigBase の実装では GTK リソースファイルや、KDE におけるその類似品も扱えるようになるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other Kinds of Windows</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T034156Z">
        <seg>他の種類のウィンドウ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other Types of Sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141008Z">
        <seg>その他のサイザー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other implementation choices are available: for the progress dialog example it is far better to do the calculations in the <bpt i="0" x="0">&lt;a0&gt;</bpt>idle handler<ept i="0">&lt;/a0&gt;</ept> or even simply do everything at once but call <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Update()<ept i="1">&lt;/a1&gt;</ept> periodically to update the screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T144331Z">
        <seg>他の実装方法を選択することは可能です: プログレスダイアログの例で言うと、<bpt i="0" x="0">&lt;a0&gt;</bpt>アイドルハンドラ<ept i="0">&lt;/a0&gt;</ept> で計算を行なうか、もしくは単純に一度に計算を行い、画面を更新するために定期的に <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Update()<ept i="1">&lt;/a1&gt;</ept> を呼び出す方がずっと良い方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other string related functions and classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T071425Z">
        <seg>文字列に関する他の関数やクラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other unexpected compilation errors may arise but they should happen even more rarely than the above-mentioned ones and the solution should usually be quite simple: just use the explicit methods of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxUniChar<ept i="0">&lt;/a0&gt;</ept> and wxCStrData classes instead of relying on their implicit conversions if the compiler can't choose among them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034514Z">
        <seg>他にも予期しないコンパイルエラーが発生することがありますが、発生頻度が上で挙げたものより少なく、解決方法も非常に単純です: コンパイラが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxUniChar<ept i="0">&lt;/a0&gt;</ept> と wxCStrDatajust のどちらを使用すれば良いか判断できない場合には、暗黙的な変換に頼るのではなく、明示的にそれらの関数を使用するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise if the window has children then the best size is set to be large enough to show all the children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T155712Z">
        <seg>そうでない場合、ウィンドウが子コントロールを持っていれば、すべての子コントロールを表示するのに充分な最適サイズが設定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise if the window has layout constraints then that is used to calculate the best size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T155605Z">
        <seg>そうでない場合、ウィンドウでレイアウト制約が使用されていれば、それが最適サイズの計算に使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise if there are no children then the window's min size will be used for the best size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T155848Z">
        <seg>そうでない場合、子コントロールが存在しないのであれば、ウィンドウの最小サイズが最適サイズに使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise if there is no min size set, then the current size is used for the best size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T155834Z">
        <seg>そうでない場合、最小サイズが設定されていないのであれば、現在のサイズが最適サイズに使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise you can only use the global <bpt i="0" x="0">&lt;c0&gt;</bpt>wxTheApp<ept i="0">&lt;/c0&gt;</ept> pointer which is of type <bpt i="1" x="1">&lt;c1&gt;</bpt>wxApp*<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152720Z">
        <seg>そうしない場合、<bpt i="1" x="1">&lt;c1&gt;</bpt>wxApp *<ept i="1">&lt;/c1&gt;</ept> 型のグローバル変数である <bpt i="0" x="0">&lt;c0&gt;</bpt>wxTheApp<ept i="0">&lt;/c0&gt;</ept> ポインタを使用するしかありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise you can only use the global <bpt i="0" x="0">&lt;t0&gt;</bpt>wxTheApp<ept i="0">&lt;/t0&gt;</ept> pointer which is of type <bpt i="1" x="1">&lt;t1&gt;</bpt>wxApp *<ept i="1">&lt;/t1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161635Z">
        <seg>そうしない場合、<bpt i="1" x="1">&lt;t1&gt;</bpt>wxApp *<ept i="1">&lt;/t1&gt;</ept> 型のグローバル変数である <bpt i="0" x="0">&lt;t0&gt;</bpt>wxTheApp<ept i="0">&lt;/t0&gt;</ept> ポインタを使用するしかありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise, the return value is a string (actually a pointer to the connection buffer, so it should not be deallocated by the application).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032918Z">
        <seg>それ以外の場合、戻り値は文字列になります。(実際には接続バッファへのポインタであるため、アプリケーション側で解放しないでください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Overridden wxEventFilter method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T065638Z">
        <seg>wxEventFilter をオーバーライドした関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Override the functions CanDoLayoutAdaptation and DoLayoutAdaptation to test for adaptation applicability and perform the adaptation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T144851Z">
        <seg>適応の可否の確認や適応を行なうには CanDoLayoutAdaptation と DoLayoutAdaptation をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Override this member function for any processing which needs to be done as the application is about t...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124236Z">
        <seg>アプリケーションの終了時に処理を行なう必要がある場合にこのメンバ関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Override this to perform layout adaptation, such as making parts of the dialog scroll and resizing th...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T150015Z">
        <seg>ダイアログの一部をスクロールしたり、画面に合わせてダイアログをリサイズするなど、レイアウトの適応を行なう場合にこの関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Override this to react to a left click.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T154200Z">
        <seg>左クリックに反応するにはこの関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Override this to react to cell activation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T154235Z">
        <seg>セルのアクティブ化に反応するにはこの関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Override this to return a window containing the main content of the dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T150658Z">
        <seg>ダイアログのメインコンテンツを含むウィンドウを返却するためにこの関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Override this to start a drag operation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T154209Z">
        <seg>ドラッグ操作を開始するにはこの関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performance Implications of Using UTF-8</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T141437Z">
        <seg>UTF-8 を使用することによる性能への影響</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs a keyboard navigation action starting from this window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T145021Z">
        <seg>このウィンドウから始まるキーボードナビゲーション処理を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performs layout adaptation, usually if the dialog is too large to fit on the display.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T145004Z">
        <seg>レイアウトの適応を行います。これは通常、画面サイズに対してダイアログが大きすぎる場合に行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Planes are numbered from 0 to 16, where the first one is the <bpt i="2" x="2">&lt;e2&gt;</bpt>BMP<ept i="2">&lt;/e2&gt;</ept>, or Basic Multilingual Plane.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T024832Z">
        <seg>面は 0 から 16 までの番号が振られており、最初の面が <bpt i="2" x="2">&lt;e2&gt;</bpt>BMP<ept i="2">&lt;/e2&gt;</ept> (基本多言語面) です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Platform-specific methods for creating a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap<ept i="1">&lt;/a1&gt;</ept> object from an existing file are catered for, and this is an occasion where conditional compilation will sometimes be required.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T153829Z">
        <seg>既存のファイルから <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap<ept i="1">&lt;/a1&gt;</ept> オブジェクトを作成するのにプラットフォーム独自の関数が提供されていますが、ときにこれは条件付きコンパイルを必要とすることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Platform-specific methods for creating a wxBitmap object from an existing file are catered for, and this is an occasion where conditional compilation will sometimes be required.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T150030Z">
        <seg>既存のファイルから wxBitmap オブジェクトを作成するのにプラットフォーム独自の関数が提供されていますが、ときにこれは条件付きコンパイルを必要とすることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please consult wxWidgets home page for the most up-to-date translations - and if you translate it into one of the languages not done yet, your translations would be gratefully accepted for inclusion into future versions of the library!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043125Z">
        <seg>最新の翻訳版は wxWidgets のホームページを参照してください。そして、あなたが wxWidgets をまだ翻訳されていない言語に翻訳した場合、私達はそれを将来のバージョンに含めることを喜んで承認するでしょう! </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please note that <bpt i="5" x="5">&lt;a5&gt;</bpt>at()<ept i="5">&lt;/a5&gt;</ept> method has the same problem as the subscript operator in this situation and so using it is not really better.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T093720Z">
        <seg>このような状況では <bpt i="5" x="5">&lt;a5&gt;</bpt>at()<ept i="5">&lt;/a5&gt;</ept> 関数にも添字演算子と同じ問題があるため、この関数を使用するのは本当に良いとは言えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please note that this class is specially optimized (using its knowledge of the internal structure of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept>) for storing strings and so it is vastly better from a performance point of view than a wxObjectArray of wxStrings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121031Z">
        <seg>このクラスは (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> の内部構造に関する知識を用いて) 文字列の格納に特化して最適化されています。そのため、wxObjectArray に wxString を格納するより性能面で優れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please note that this class is specially optimized (using its knowledge of the internal structure of wxString) for storing strings and so it is vastly better from a performance point of view than a wxObjectArray of wxStrings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121039Z">
        <seg>このクラスは (wxString の内部構造に関する知識を用いて) 文字列の格納に特化して最適化されています。そのため、wxObjectArray に wxString を格納するより性能面で優れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please read <bpt i="0" x="0">&lt;a0&gt;</bpt>Internationalization<ept i="0">&lt;/a0&gt;</ept> which describes the locales concept.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T133721Z">
        <seg>ロケールの概念については <bpt i="0" x="0">&lt;a0&gt;</bpt>国際化<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please read the <bpt i="0" x="0">&lt;a0&gt;</bpt>Internationalization<ept i="0">&lt;/a0&gt;</ept> which describes the locales concept.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134522Z">
        <seg>ロケールの概念については <bpt i="0" x="0">&lt;a0&gt;</bpt>国際化<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please refer to these sections for details.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080604Z">
        <seg>詳細は各章を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please see <bpt i="0" x="0">&lt;a0&gt;</bpt>Dynamic Event Handling<ept i="0">&lt;/a0&gt;</ept> for the discussion of Bind&lt;&gt;().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T003033Z">
        <seg>Bind&lt;&gt;() についての議論は <bpt i="0" x="0">&lt;a0&gt;</bpt>動的イベント処理<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please see <bpt i="0" x="0">&lt;a0&gt;</bpt>Log Messages Selection<ept i="0">&lt;/a0&gt;</ept> for more information about the log components.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T130609Z">
        <seg>ログコンポーネントについての詳細は <bpt i="0" x="0">&lt;a0&gt;</bpt>ログメッセージの選択<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please see <bpt i="0" x="0">&lt;a0&gt;</bpt>Unicode-related Changes<ept i="0">&lt;/a0&gt;</ept> for the details of these changes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005256Z">
        <seg>変更の詳細は <bpt i="0" x="0">&lt;a0&gt;</bpt>Unicode に関連する変更<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please see its documentation for more details.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145900Z">
        <seg>詳細はドキュメントを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please skip it unless you feel familiar with profilers and relative tools.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T075950Z">
        <seg>プロファイラやその関連ツールについて詳しくないのであればこの章を読み飛ばしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pluggable Event Handlers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T170712Z">
        <seg>動的イベントハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pluggable event handlers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061155Z">
        <seg>動的イベントハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Post an event to be processed later.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T143811Z">
        <seg>あとで処理されるイベントを送信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Potential Unicode Pitfalls</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005632Z">
        <seg>Unicode の潜在的な落とし穴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Preallocate enough space for wxString to store nLen characters.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121252Z">
        <seg>nLen 文字を格納するために必要なメモリを wxString に事前に割り当てる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Preferred:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124733Z">
        <seg>推奨:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Previous</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145431Z">
        <seg>Previous</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Previous versions of wxWidgets used to rely on the creation of a global application object, but this is no longer recommended, because required global initialization may not have been performed at application object construction time.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T132359Z">
        <seg>以前の wxWidgets ではグルーバルなアプリケーションオブジェクトを作成していましたが、もはやこれは非推奨です。なぜなら、期待したグローバルオブジェクトの初期化がアプリケーションオブジェクトの構築時に行われない可能性があるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Probably the main trap with using this class is the implicit conversion operator to <bpt i="0" x="0">&lt;c0&gt;</bpt>const char*<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113643Z">
        <seg>おそらく、このクラスを使用する際の一番の罠は <bpt i="0" x="0">&lt;c0&gt;</bpt>const char *<ept i="0">&lt;/c0&gt;</ept> への暗黙の型変換演算子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Probably the main trap with using this class is the implicit conversion operator to <bpt i="0" x="0">&lt;i0&gt;</bpt>const char *<ept i="0">&lt;/i0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T053226Z">
        <seg>おそらく、このクラスを使用する際の一番の罠は <bpt i="0" x="0">&lt;i0&gt;</bpt>const char *<ept i="0">&lt;/i0&gt;</ept> への暗黙の型変換演算子です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Probably the unique case when you might want to think about reference counting is when a string character is taken from a string which is not a constant (or a constant reference).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T093610Z">
        <seg>ただ、非 const (もしくは非 const 参照) の文字列から文字を取り出すときだけは参照カウンタを意識する必要があると考えることでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>ProcessWindowEvent(event);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150209Z">
        <seg>ProcessWindowEvent(event);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Processes an event, searching event tables and calling zero or more suitable event handler function(s...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T063844Z">
        <seg>イベントテーブルを検索し、0 個以上の適切なイベントハンドラ関数を呼び出してイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Programming with wxBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T154127Z">
        <seg>wxBoxSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Programming with wxFlexGridSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114257Z">
        <seg>wxFlexGridSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Programming with wxGridSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114018Z">
        <seg>wxGridSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Programming with wxStaticBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115129Z">
        <seg>wxStaticBoxSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Purpose of wxStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T133330Z">
        <seg>wxStream の目的</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pushes this event handler onto the event stack for the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151849Z">
        <seg>このイベントハンドラをウィンドウのイベントスタック上に追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Put any application-wide cleanup code in <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::OnExit<ept i="2">&lt;/a2&gt;</ept> (this is a virtual function, not an event handler).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T142459Z">
        <seg>アプリケーション全体の後処理は <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::OnExit<ept i="2">&lt;/a2&gt;</ept> (これは仮想関数であって、イベントハンドラではありません) に配置してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Putting the same line in a child event table will crash during run-time because the MyFrame method will be called on a wrong object -- it's easy to convince oneself that the only object that can be used here is the pointer to the child, as wxWidgets has nothing else.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030015Z">
        <seg>同じ内容を子イベントテーブルへ配置した場合、実行時にクラッシュするでしょう。なぜなら、異なる型のオブジェクトに対して MyFrame メンバ関数を呼びだそうとするためです。ここでは子コントロールのポインタしか使用できないからだということは簡単に分かってもらえると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Queue an event for processing on the given object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144350Z">
        <seg>特定のオブジェクトで処理するためにイベントをキューへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Queue event for a later processing.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T143854Z">
        <seg>あとで処理するためにイベントをキューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Rather than just setting an "initial size" attribute it actually sets the minimal size to the value passed in, blends that value with the best size, and then sets the size of the widget to be the result.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T154612Z">
        <seg>単に "初期サイズ" を設定するのではなく、引き渡された値を最小サイズに設定し、その値を最適サイズと混ぜあわせた上で、その結果をウィジェットのサイズとして設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Rather than just setting an "initial size" attribute it actually sets the minsize to the value passed in, blends that value with the best size, and then sets the size of the widget to be the result.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T151845Z">
        <seg>単に "初期サイズ" を設定するのではなく、引き渡された値を最小サイズに設定し、その値を最適サイズと混ぜあわせた上で、その結果をウィジェットのサイズとして設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Read it if you want to know more about how to write programs able to work with characters from languages other than English.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155422Z">
        <seg>英語以外の言語で使用される文字を扱うプログラムを書く方法について、より詳しく知りたい場合はこの章を読んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Really last point is the consequence of the previous one: because of increased flexibility of Bind(), it is also safer as it is impossible to accidentally use a method of another class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030253Z">
        <seg>最後のポイントは前述のポイントの帰結です: Bind() の柔軟性が向上したため、うっかり他クラスのメンバ関数を使用してしまうことが不可能になり、安全性も向上しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Reference counting and why you shouldn't care about it</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T074154Z">
        <seg>参照カウンタと、それを意識しなくて良い理由</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Related classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153247Z">
        <seg>関連クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Related Pages</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004632Z">
        <seg>関連ページ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Remarks:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T032908Z">
        <seg>注意:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces the text starting at the first position up to (but not including) the character at the last ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160617Z">
        <seg>最初の位置から最後の位置まで (ただし、含みません) のテキストを置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Represents a protocol for use with wxURL.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151903Z">
        <seg>wxURL で使用するプロトコルを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Result returned from a wxDropSource::DoDragDrop() call.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134845Z">
        <seg>wxDropSource::DoDragDrop() から返却された結果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Return the localized resources directory containing the resource files of the specified category for ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041010Z">
        <seg>所定の言語について、指定されたカテゴリのリソースファイルが含まれるディレクトリを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a copy of the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150413Z">
        <seg>イベントのコピーを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a lightweight intermediate class which is in turn implicitly convertible to both const char* ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123831Z">
        <seg>暗黙的に const char* や const wchar_t* へ変換可能な軽量の中間クラスを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an object with string data that is implicitly convertible to char* pointer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T125351Z">
        <seg>暗黙的に char* ポインタへ変換可能な文字列データを持つオブジェクトを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the length of the string (same as Len).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T112616Z">
        <seg>文字列の長さを返却します (Len と同じです)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the length of the string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T112551Z">
        <seg>文字列の長さを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the multibyte (C string) representation of the string using conv's wxMBConv::cWC2MB method an...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T160801Z">
        <seg>wxMBConv::cWC2MB 関数を使用して文字列をマルチバイト (C 形式) 表現方法に変換し、wxCharBuffer として返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the number of system CPUs or -1 if the value is unknown.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T233125Z">
        <seg>CPU の数か、数が不明な場合は -1 を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the object (usually a window) associated with the event, if any.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045804Z">
        <seg>イベントに関連付けられているオブジェクト (通常はウィンドウです) がある場合、それを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the orientation of the box sizer, either wxVERTICAL or wxHORIZONTAL.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150753Z">
        <seg>ボックスサイザーの方向を返します。 wxVERTICAL か wxHORIZONTAL のいずれかの値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the size of the entire window in pixels, including title bar, border, scrollbars, etc.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T143930Z">
        <seg>タイトルバー、ボーダー、スクロールバーなどを含む、ウィンドウ全体のサイズをピクセル単位で返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns this string converted to upper case.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113723Z">
        <seg>大文字へ変換した文字列を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns true if the dialog box is modal, false otherwise.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153543Z">
        <seg>ダイアログボックスがモーダルの場合に true を、それ以外の場合は false を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns true if the window is enabled, i.e.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T144515Z">
        <seg>ウィンドウが有効化されている場合に true を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns true if this dialog can and should perform layout adaptation using DoLayoutAdaptation(), usually if the dialog is too large to fit on the display.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T144940Z">
        <seg>このダイアログが DoLayoutAdaptation() を用いてレイアウトの適応を行なうことができ、また、行なう必要がある場合に true を返却します。これは通常、画面サイズに対してダイアログが大きすぎる場合に行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns true if you can veto a system shutdown or a window close event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T034228Z">
        <seg>システムシャットダウンやウィンドウの終了イベントを拒否できる場合に true を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns wxEVT_CATEGORY_THREAD.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T113636Z">
        <seg>wxEVT_CATEGORY_THREAD を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Run the server, then the client.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033656Z">
        <seg>サーバを実行し、それからクライアントを実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Same as utf8_str().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T083030Z">
        <seg>utf8_str() と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SaveMyData();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160340Z">
        <seg>SaveMyData();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Scrolled window derived from wxPanel.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T152057Z">
        <seg>wxPanel を継承したスクロール可能なウィンドウ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Search</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004717Z">
        <seg>検索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Secondly, the application should call <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::TransferDataFromWindow<ept i="1">&lt;/a1&gt;</ept> and return if this failed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150016Z">
        <seg>次に <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::TransferDataFromWindow<ept i="1">&lt;/a1&gt;</ept> が呼ばれます。この関数が失敗した場合は呼び出し元へ戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Secondly, the application should call <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::TransferDataFromWindow<ept i="2">&lt;/a2&gt;</ept> and return if this failed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153412Z">
        <seg>次に <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::TransferDataFromWindow<ept i="2">&lt;/a2&gt;</ept> が呼ばれます。この関数が失敗した場合は呼び出し元へ戻ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See <bpt i="0" x="0">&lt;a0&gt;</bpt>Standard event identifiers<ept i="0">&lt;/a0&gt;</ept> for the list of standard identifiers available.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T124650Z">
        <seg>使用可能な標準識別子のリストは <bpt i="0" x="0">&lt;a0&gt;</bpt>標準イベント識別子<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMemoryDC<ept i="0">&lt;/a0&gt;</ept> for an example of drawing onto a bitmap.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T135238Z">
        <seg>ビットマップへの描画の例は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMemoryDC<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScrolled<ept i="1">&lt;/a1&gt;</ept> for more info.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T153904Z">
        <seg>より詳しい情報は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScrolled<ept i="1">&lt;/a1&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCSConv<ept i="3">&lt;/a3&gt;</ept> and <bpt i="4" x="4">&lt;a4&gt;</bpt>wxMBConv<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114755Z">
        <seg><bpt i="3" x="3">&lt;a3&gt;</bpt>wxCSConv<ept i="3">&lt;/a3&gt;</ept> と <bpt i="4" x="4">&lt;a4&gt;</bpt>wxMBConv<ept i="4">&lt;/a4&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString Overview<ept i="5">&lt;/a5&gt;</ept> for more info.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035303Z">
        <seg>詳しくは <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString の概要<ept i="5">&lt;/a5&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145905Z">
        <seg>参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also <bpt i="0" x="0">&lt;a0&gt;</bpt>Writing non-English applications<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T011634Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>非英語アプリケーションの作成<ept i="0">&lt;/a0&gt;</ept> も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also <bpt i="0" x="0">&lt;a0&gt;</bpt>http://unicode.org/glossary/<ept i="0">&lt;/a0&gt;</ept> for the official definitions of the terms reported above.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035405Z">
        <seg>上で述べた用語の正式な定義は <bpt i="0" x="0">&lt;a0&gt;</bpt>http://unicode.org/glossary/<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also <bpt i="0" x="0">&lt;a0&gt;</bpt>wxPanel<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> for inherited member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T152511Z">
        <seg>また、wxDialog が継承している関数については <bpt i="0" x="0">&lt;a0&gt;</bpt>wxPanel<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTopLevelWindow<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> for inherited member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T152501Z">
        <seg>また、wxDialog が継承している関数については <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTopLevelWindow<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also <bpt i="5" x="5">&lt;a5&gt;</bpt>Most important wxUSE symbols<ept i="5">&lt;/a5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T122822Z">
        <seg><bpt i="5" x="5">&lt;a5&gt;</bpt>もっとも重要な wxUSE シンボル<ept i="5">&lt;/a5&gt;</ept> も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also the <bpt i="0" x="0">&lt;a0&gt;</bpt>Thread Sample<ept i="0">&lt;/a0&gt;</ept> for a sample showing some simple interactions between the main and secondary threads.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T114633Z">
        <seg>メインスレッドとサブスレッド間の単純なやり取りの例として <bpt i="0" x="0">&lt;a0&gt;</bpt>スレッドサンプル<ept i="0">&lt;/a0&gt;</ept> も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also the <bpt i="0" x="0">&lt;a0&gt;</bpt>event sample<ept i="0">&lt;/a0&gt;</ept> for an example of code defining and working with the custom event types.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T154526Z">
        <seg>コードの書き方とカスタムイベント型の動作例として <bpt i="0" x="0">&lt;a0&gt;</bpt>イベントサンプル<ept i="0">&lt;/a0&gt;</ept> も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also the <bpt i="2" x="2">&lt;a2&gt;</bpt>Event Sample<ept i="2">&lt;/a2&gt;</ept> for a complete example of code defining and working with the custom event types.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155743Z">
        <seg>コードの書き方とカスタムイベント型の動作例として <bpt i="2" x="2">&lt;a2&gt;</bpt>イベントサンプル<ept i="2">&lt;/a2&gt;</ept> も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also the GNU gettext documentation linked from <bpt i="0" x="0">&lt;t0&gt;</bpt>docs/html/index.htm<ept i="0">&lt;/t0&gt;</ept> in your wxWidgets distribution.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T002332Z">
        <seg>GNU gettext のドキュメントも参照してください。これは wxWidgets の配布物の中にある <bpt i="0" x="0">&lt;t0&gt;</bpt>docs/html/index.htm<ept i="0">&lt;/t0&gt;</ept> からリンクしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041459Z">
        <seg>参照:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataObject Overview<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>Drag &amp; Drop Sample<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134044Z">
        <seg>参照: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataObject の概要<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>ドラッグ・アンド・ドロップのサンプル<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataObject overview<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>DnD sample<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134123Z">
        <seg>参照: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataObject の概要<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>ドラッグ・アンド・ドロップのサンプル<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See below for how you can do it.) In this case, the button's event table will be searched, then the parent panel's, then the frame's.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023925Z">
        <seg>マウスイベントで同じことを実現する方法は以下を参照してください) この場合、まずボタンのイベントテーブルが検索され、続いて、その親パネル、フレームの順に検索されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See the <bpt i="1" x="1">&lt;a1&gt;</bpt>event sample<ept i="1">&lt;/a1&gt;</ept> for an example of doing it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T032908Z">
        <seg>これを行なっているサンプルとして <bpt i="1" x="1">&lt;a1&gt;</bpt>イベントサンプル<ept i="1">&lt;/a1&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See the sample programs <bpt i="0" x="0">&lt;e0&gt;</bpt>server<ept i="0">&lt;/e0&gt;</ept> and <bpt i="1" x="1">&lt;e1&gt;</bpt>client<ept i="1">&lt;/e1&gt;</ept> in the IPC samples directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150425Z">
        <seg>IPC サンプルディレクトリにある <bpt i="0" x="0">&lt;e0&gt;</bpt>server<ept i="0">&lt;/e0&gt;</ept> と <bpt i="1" x="1">&lt;e1&gt;</bpt>client<ept i="1">&lt;/e1&gt;</ept> のサンプルプログラムを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See the sample programs <bpt i="0" x="0">&lt;i0&gt;</bpt>server<ept i="0">&lt;/i0&gt;</ept> and <bpt i="1" x="1">&lt;i1&gt;</bpt>client<ept i="1">&lt;/i1&gt;</ept> in the IPC samples directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033640Z">
        <seg>IPC サンプルディレクトリにある <bpt i="0" x="0">&lt;i0&gt;</bpt>server<ept i="0">&lt;/i0&gt;</ept> と <bpt i="1" x="1">&lt;i1&gt;</bpt>client<ept i="1">&lt;/i1&gt;</ept> のサンプルプログラムを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SeekI returns the last position</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T142002Z">
        <seg>SeekI はストリームの先頭から数えた</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SeekI returns the last position<it pos="end" x="12">&lt;/s12&gt;</it>
<bpt i="13" x="13">&lt;s13&gt;</bpt>// in the stream counted from the beginning.<ept i="13">&lt;/s13&gt;</ept>
off_t old_position = in_stream.SeekI(0, wxFromBeginning);

<bpt i="14" x="14">&lt;s14&gt;</bpt>// What is my current position ?<ept i="14">&lt;/s14&gt;</ept>
off_t position = in_stream.TellI();

<bpt i="15" x="15">&lt;s15&gt;</bpt>// wxFileInputStream will close the file descriptor on destruction.<ept i="15">&lt;/s15&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141548Z">
        <seg>SeekI はストリームの先頭から数えた <it pos="end" x="12">&lt;/s12&gt;</it>
<bpt i="13" x="13">&lt;s13&gt;</bpt>// 最後の位置を返却する。<ept i="13">&lt;/s13&gt;</ept>
off_t old_position = in_stream.SeekI(0, wxFromBeginning);

<bpt i="14" x="14">&lt;s14&gt;</bpt>// 現在位置はどこ?<ept i="14">&lt;/s14&gt;</ept>
off_t position = in_stream.TellI();

<bpt i="15" x="15">&lt;s15&gt;</bpt>// wxFileInputStream はデストラクタでファイルディスクリプタを閉じる。<ept i="15">&lt;/s15&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sends an wxEVT_INIT_DIALOG event, whose handler usually transfers data to the dialog via validators...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T152739Z">
        <seg>wxEVT_INIT_DIALOG イベントを送信します。通常、このイベントのハンドラはバリデータを通してダイアログへデータを転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sequence of Events During Window Deletion</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T033847Z">
        <seg>ウィンドウ削除時における一連のイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SetReturnCode(wxID_OK);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150141Z">
        <seg>SetReturnCode(wxID_OK);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SetSizer( topsizer );      // use the sizer for layout</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112903Z">
        <seg>SetSizer( topsizer );      // レイアウトにサイザーを使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SetSizerAndFit(topsizer); <bpt i="53" x="53">&lt;s53&gt;</bpt>// use the sizer for layout and set size and hints<ept i="53">&lt;/s53&gt;</ept>
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145645Z">
        <seg>SetSizerAndFit(topsizer); <bpt i="53" x="53">&lt;s53&gt;</bpt>// レイアウトにサイザーを使用し、サイズとヒントを設定する<ept i="53">&lt;/s53&gt;</ept>
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SetSizerAndFit(topsizer); <bpt i="59" x="59">&lt;s59&gt;</bpt>// use the sizer for layout and size window<ept i="59">&lt;/s59&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144924Z">
        <seg>SetSizerAndFit(topsizer); <bpt i="59" x="59">&lt;s59&gt;</bpt>// レイアウトにサイザーを使用して<ept i="59">&lt;/s59&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SetTopWindow(the_frame);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161010Z">
        <seg>SetTopWindow(the_frame);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the adaptation mode, overriding the global adaptation flag.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T144410Z">
        <seg>適応モードを設定し、グルーバルな適応フラグを上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the aggressiveness of search for buttons and sizers to be in the non-scrolling part of a layout-...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T152624Z">
        <seg>レイアウトの適応を行なうダイアログで非スクロール領域内に配置するボタンやサイザーを探す際の積極性を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the event handler for this window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T170833Z">
        <seg>このウィンドウのイベントハンドラを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the log level for the given component.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T105021Z">
        <seg>指定されたコンポーネントのログレベルを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maxim...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T151620Z">
        <seg>ウィンドウの最大サイズを設定し、これが取りうる最大のサイズであることをサイザーへ示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minim...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T150413Z">
        <seg>ウィンドウの最小サイズを設定し、これが最小の要求サイズであることをサイザーへ示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the new text control value.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160428Z">
        <seg>テキストコントロールの新しい値を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the pointer to the next handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T150800Z">
        <seg>次のイベントハンドラへのポインタを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the return code for this window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153558Z">
        <seg>このウィンドウの戻り値を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the selection for the given page, returning the previous selection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160105Z">
        <seg>指定されたページを選択し、以前選択していたページを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the size of the window in pixels.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155326Z">
        <seg>ピクセル単位でウィンドウサイズを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the specified log target as the active one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091549Z">
        <seg>指定されたログターゲットを有効なログターゲットとして設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Setting the appropriate locale in your program to use the strings for the given language: see <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T002055Z">
        <seg>与えられた言語の文字列を使用するように、プログラム内で適切なロケールを設定する: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Several of the wxWidgets-provided <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> classes have predefined instances (wxConvLibc, wxConvFileName, wxConvUTF7, wxConvUTF8, wxConvLocal).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151738Z">
        <seg>wxWidgets の提供する <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> クラスのうち、いくつかのクラスは事前に定義されたインスタンスを持っています。(wxConvLibc、wxConvFileName、wxConvUTF7、wxConvUTF8、wxConvLocal) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Several of the wxWidgets-provided wxMBConv classes have predefined instances (wxConvLibc, wxConvFileName, wxConvUTF7, wxConvUTF8, wxConvLocal).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T151431Z">
        <seg>wxWidgets の提供する wxMBConv クラスのうち、いくつかのクラスは事前に定義されたインスタンスを持っています。(wxConvLibc、wxConvFileName、wxConvUTF7、wxConvUTF8、wxConvLocal) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Show a general purpose message dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082545Z">
        <seg>汎用的なメッセージダイアログを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Shows an application-modal dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T150143Z">
        <seg>モーダルダイアログを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Shows or hides the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141550Z">
        <seg>ウィンドウの表示非表示を切り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Signature of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataViewCustomRenderer::StartDrag()<ept i="0">&lt;/a0&gt;</ept> virtual method changed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T154053Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataViewCustomRenderer::StartDrag()<ept i="0">&lt;/a0&gt;</ept> 仮想関数のシグネチャが変更されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similar to the standard function sprintf().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030242Z">
        <seg>標準の sprintf() 関数と似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123350Z">
        <seg>同様に、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly, wxWX2WCbuf can be used for the return type of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::wc_str()<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171409Z">
        <seg>同様に、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::wc_str()<ept i="0">&lt;/a0&gt;</ept> の戻り値の型として wxWX2WCbuf を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Simple events such as menu commands are usually processed at the level of a top-level window containing the menu, so let's suppose that you need to handle some events in <bpt i="3" x="3">&lt;c3&gt;</bpt>MyFrame<ept i="3">&lt;/c3&gt;</ept> class deriving from <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFrame<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022747Z">
        <seg>メニューコマンドといった単純なイベントは普通、メニューを保持するトップレベルウィンドウで処理されます。そのため、いくつかのイベントは <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFrame<ept i="4">&lt;/a4&gt;</ept> を継承した <bpt i="3" x="3">&lt;c3&gt;</bpt>MyFrame<ept i="3">&lt;/c3&gt;</ept> で処理する必要があるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since iterating over a string by index is a common programming technique and was also possible and encouraged by <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> using the access operator[]() <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> implements caching of the last used index so that iterating over a string is a linear operation even in UTF-8 mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120152Z">
        <seg>インデックスによる文字列の走査はよく使われるプログラミングテクニックであり、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> では operator[]() を使用することを推奨していたため、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> は最後に使用したインデックスをキャッシュするように実装されています。これにより、UTF-8 モードであっても文字列全体の走査を線形時間で行なうことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since mb_str() returns a temporary <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCharBuffer<ept i="0">&lt;/a0&gt;</ept> to hold the result of the conversion, you need to explicitly cast it to const char* if you use it in a vararg context (like with printf).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152001Z">
        <seg>mb_str() は変換結果を保持する一時 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCharBuffer<ept i="0">&lt;/a0&gt;</ept> を返却するため、(printf のような) 可変数引数の関数を使用する場合は明示的に const char* にキャストする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since the API and virtually all of the behaviour is the same apart from the names of the classes, you should find it easy to switch between the two implementations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T145405Z">
        <seg>クラス名を除いて API と仮想的な振る舞いがすべて同じであるため、ふたつの実装を簡単に切り替えられることに気がつくと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since the handler for this cancel event might itself call <bpt i="0" x="0">&lt;b0&gt;</bpt>Close<ept i="0">&lt;/b0&gt;</ept>, there is a check for infinite looping.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T154515Z">
        <seg>このキャンセルイベントのハンドラ自身が <bpt i="0" x="0">&lt;b0&gt;</bpt>Close<ept i="0">&lt;/b0&gt;</ept> を呼ぶため、無限ループのチェックが行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since the handler for this cancel event might itself call Close, there is a check for infinite looping.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040835Z">
        <seg>このキャンセルイベントのハンドラ自身が Close を呼ぶため、無限ループのチェックが行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since version 2.2.x of wxWidgets, each event type is identified by ID which is given to the event type <bpt i="0" x="0">&lt;i0&gt;</bpt>at runtime<ept i="0">&lt;/i0&gt;</ept> which makes it possible to add new event types to the library or application without risking ID clashes (two different event types mistakingly getting the same event ID).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T150704Z">
        <seg>wxWidgets 2.2.x から <bpt i="0" x="0">&lt;i0&gt;</bpt>実行時に<ept i="0">&lt;/i0&gt;</ept> 決定される ID を使用してイベントの型を識別します。これにより、ID の衝突を起こす (異なるふたつのイベント型が同じイベント ID を取得してしまう) ことなく、新しいイベント型をライブラリやアプリケーションに追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since wxWidgets 3.0 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> internally uses <bpt i="1" x="1">&lt;b1&gt;</bpt>UTF-16<ept i="1">&lt;/b1&gt;</ept> (with Unicode code units stored in <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept>) under Windows and <bpt i="3" x="3">&lt;b3&gt;</bpt>UTF-8<ept i="3">&lt;/b3&gt;</ept> (with Unicode code units stored in <bpt i="4" x="4">&lt;c4&gt;</bpt>char<ept i="4">&lt;/c4&gt;</ept>) under Unix, Linux and Mac OS X to store its content.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T125216Z">
        <seg>wxWidgets 3.0 から <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の内部エンコーディングとして Windows では  (Unicode コード単位を <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept> に格納する) <bpt i="1" x="1">&lt;b1&gt;</bpt>UTF-16<ept i="1">&lt;/b1&gt;</ept> を、Unix、Linux、Mac OS X では (Unicode コード単位を <bpt i="4" x="4">&lt;c4&gt;</bpt>char<ept i="4">&lt;/c4&gt;</ept> に格納する) <bpt i="3" x="3">&lt;b3&gt;</bpt>UTF-8<ept i="3">&lt;/b3&gt;</ept> を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since wxWidgets 3.0 Unicode support is always enabled and while building the library without it is still possible, it is not recommended any longer and will cease to be supported in the near future.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035942Z">
        <seg>wxWidgets 3.0 からは Unicode が常に有効になります。Unicode を使用せずにライブラリをビルドすることはまだ可能ですが、もはや非推奨であり、近い将来、サポートされなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Situations where automatic scrolling adaptation may fail</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T145140Z">
        <seg>自動スクロールの適応に失敗する状況</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizer overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T110550Z">
        <seg>サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizers Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135006Z">
        <seg>サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizers distribute only the extra space between the stretchable items according to their proportions and not all available space.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T124239Z">
        <seg>サイザーは利用可能なすべてのスペースではなく、余剰スペースのみを伸長可能なコントロール間でプロポーションにしたがって分配します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizers, as represented by the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> class and its descendants in the wxWidgets class hierarchy, have become the method of choice to define the layout of controls in dialogs in wxWidgets because of their ability to create visually appealing dialogs independent of the platform, taking into account the differences in size and style of the individual controls.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140902Z">
        <seg>wxWidgets のクラス階層における <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> クラスと、その子孫クラスによって代表されるサイザーは、wxWidgets においてダイアログ内のコントロールのレイアウトを決定するための選択法になりました。なぜなら、サイザーによって、各コントロールのサイズやスタイルの違いを考慮しつつ、プラットフォームに依存しない、視覚的に魅力的なダイアログを作ることができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizers, as represented by the wxSizer class and its descendants in the wxWidgets class hierarchy, have become the method of choice to define the layout of controls in dialogs in wxWidgets because of their ability to create visually appealing dialogs independent of the platform, taking into account the differences in size and style of the individual controls.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T112812Z">
        <seg>wxWidgets のクラス階層における wxSizer クラスと、その子孫クラスによって代表されるサイザーは、wxWidgets においてダイアログ内のコントロールのレイアウトを決定するための選択法になりました。なぜなら、サイザーによって、各コントロールのサイズやスタイルの違いを考慮しつつ、プラットフォームに依存しない、視覚的に魅力的なダイアログを作ることができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizes the window so that it fits around its subwindows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T154723Z">
        <seg>サブウィンドウにフィットするようにウィンドウのサイズを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Small.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T150454Z">
        <seg>小さい。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So before you make the choice between static event tables and dynamically connecting the event handlers, let us discuss these two ways in more detail.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022437Z">
        <seg>そのため、イベントテーブルと動的イベントハンドラのいずれかを選択する前に、それぞれの方法についてより詳しく議論しておきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So even if the application has derived new classes to customize behaviour, your utility can indulge in a spot of body-snatching.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041724Z">
        <seg>そのため、アプリケーションの振る舞いをカスタマイズするために新しいクラスを継承していたとしても、あなたのユーティリティから自由に振る舞いを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So far we've been talking about 'managed' windows, i.e. frames and dialogs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T143008Z">
        <seg>これまでは 'マネージド' ウィンドウ、つまりフレームやダイアログについて話してきました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So if using validators and a normal OK button, you may not even need to write any code for handling dialog dismissal.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150226Z">
        <seg>そのため、バリデータと通常の OK ボタンを使用している場合、ダイアログの終了処理を行なうためのコードを書く必要すらないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So the existing code needs to be reviewed when upgrading to wxWidgets 3.0 and the new code should be used with this in mind and ideally avoiding implicit conversions to <bpt i="3" x="3">&lt;c3&gt;</bpt>char*<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T141338Z">
        <seg>そのため、wxWidgets 3.0 にアップグレードするときは既存のコードを見直す必要があるとともに、新しいコードではこのことを意識しつつ、理想的には <bpt i="3" x="3">&lt;c3&gt;</bpt>char*<ept i="3">&lt;/c3&gt;</ept> への暗黙的な変換を避けるようにするべきです。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So the question is: which one is better to use?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T092910Z">
        <seg>そのため、質問は次のようになります: どの関数を使用すれば良いのか? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So this call may do any number of things (including displaying the correct string on screen), although the most likely result is a program crash.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114057Z">
        <seg>そのため、この関数呼び出しの結果は (文字列が正しく表示されることも含めて) 不定になりますが、一番起こりうるのはプログラムのクラッシュでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So this call may do anything at all (including displaying the correct string on screen), although the most likely result is a program crash.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T055002Z">
        <seg>そのため、この関数呼び出しの結果は (文字列が正しく表示されることも含めて) 不定になりますが、一番起こりうるのはプログラムのクラッシュでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So which is better to use?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T130539Z">
        <seg>そのため、どれを使うのが良いのでしょう? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So why the need for <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept>?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T154436Z">
        <seg>それなのになぜ <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> が必要なのでしょうか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So why the need for wxString?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T045413Z">
        <seg>それなのになぜ wxString が必要なのでしょうか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So you can consider this method to be a "Smart SetSize".</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T151912Z">
        <seg>そのため、この関数を "賢い SetSize" と考えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So you need to be able to convert the data to various representations and the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> methods <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::ToAscii()<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::ToUTF8()<ept i="2">&lt;/a2&gt;</ept> (or its synonym <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::utf8_str()<ept i="3">&lt;/a3&gt;</ept>), <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::mb_str()<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::c_str()<ept i="5">&lt;/a5&gt;</ept> and <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::wc_str()<ept i="6">&lt;/a6&gt;</ept> can be used for this.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T160441Z">
        <seg>そのため、データを様々な表現方法へ変換できる必要がありますが、そのための <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の関数として <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::ToAscii()<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::ToUTF8()<ept i="2">&lt;/a2&gt;</ept> (またはそのシノニムの <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::utf8_str()<ept i="3">&lt;/a3&gt;</ept>)、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::mb_str()<ept i="4">&lt;/a4&gt;</ept>、<bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::c_str()<ept i="5">&lt;/a5&gt;</ept>、<bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::wc_str()<ept i="6">&lt;/a6&gt;</ept> を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some Borland compilers refuse to work at all with them and using iostreams on Linux makes writing programs that are binary compatible across different Linux distributions, impossible.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T143448Z">
        <seg>Borland のいくつかのコンパイラではまったく動作しませんし、Linux で iostream を使用すると異なる Linux ディストリビューション間でバイナリ互換性を保つことは不可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some advice about using wxString</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T052942Z">
        <seg>wxStringを使用するにあたってのアドバイス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some compilers (notably g++) warn about this but even if they don't, this</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124635Z">
        <seg>いくつかのコンパイラ (特に g++) では警告が出ますし、仮に警告が出ないとしても</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some controls can calculate their height, but not their width (e.g. a single line text control):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T133610Z">
        <seg>(単一行テキストコントロールなど) いくつかのコントロールでは自身の高さを計算できても、幅を計算することができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some device contexts are created temporarily in order to draw on a window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140825Z">
        <seg>いくつかのデバイスコンテキストはウィンドウへの描画のために一時的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some handlers are provided as standard, but if you have special requirements, you may wish to initialise the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> class with some extra handlers which you write yourself or receive from a third party.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155145Z">
        <seg>いくつかのハンドラは標準で提供されていますが、特別な要件がある場合に自分で書いたハンドラやサードパーティーのハンドラを使用して <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> クラスを初期化したいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some handlers are provided as standard, but if you have special requirements, you may wish to initialise the wxBitmap class with some extra handlers which you write yourself or receive from a third party.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142958Z">
        <seg>いくつかのハンドラは標準で提供されていますが、特別な要件がある場合に自分で書いたハンドラやサードパーティーのハンドラを使用して wxBitmap クラスを初期化したいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some of advantages in using wxWidgets log functions are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013939Z">
        <seg>wxWidgets のログ関数を使用するいくつかの利点は以下の通りです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some of wxLog implementations, most notably the standard wxLogGui class, buffer the messages (for exa...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114946Z">
        <seg>いくつかの wxLog の実装、特に標準の wxLogGui クラスではメッセージを (例えば無数のメッセージダイアログが次々と表示されるのを防止するために) バッファリングします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes it is also necessary to go from ANSI strings to wxStrings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144136Z">
        <seg>時々、ANSI 文字列を wxString に変換する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes you wish to use a .ico resource on Windows, and XPMs on other platforms (for example to take advantage of Windows' support for multiple icon resolutions).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T150248Z">
        <seg>Windows では .ico リソースを、それ以外のプラットフォームでは xpm を使用したいと思うことがあるかもしれません。(例えば、Windows の対応している多重解像度のアイコンを有効活用するためにです) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sorry, this topic has yet to be written.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004446Z">
        <seg>このトピックはまだ書かれていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Special preprocessor tokens (<bpt i="0" x="0">&lt;t0&gt;</bpt>__FILE__<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>__DATE__<ept i="1">&lt;/t1&gt;</ept> and <bpt i="2" x="2">&lt;t2&gt;</bpt>__TIME__<ept i="2">&lt;/t2&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150858Z">
        <seg>特別なプリプロセッサトークン (<bpt i="0" x="0">&lt;t0&gt;</bpt>__FILE__<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>__DATE__<ept i="1">&lt;/t1&gt;</ept>, <bpt i="2" x="2">&lt;t2&gt;</bpt>__TIME__<ept i="2">&lt;/t2&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Specifically, the danger of this implicit conversion may be seen in the following code fragment:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T093042Z">
        <seg>暗黙の型変換の具体的な危険性は以下のコードで分かると思います:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Specifies that log messages with level greater (numerically) than logLevel should be ignored and not ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T100124Z">
        <seg>(数値的に) logLevel より大きいログレベルを持つメッセージを無視し、有効なログターゲットに送信されないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Specify the source code language and charset as arguments to <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale::AddCatalog<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132534Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale::AddCatalog<ept i="0">&lt;/a0&gt;</ept> の引数にソースコードの言語と文字コードを指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Standard C++ streams can cause problems on several platforms: they work quite well in most cases, but in the multi-threaded case, for example, they have many problems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T134741Z">
        <seg>標準の C++ ストリームはいくつかのプラットフォームで問題を引き起こすことがあります: 大半はうまく動作しますが、例えばマルチスレッドの場合では多くの問題を抱えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Standard button and menu IDs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142809Z">
        <seg>標準ボタンとメニュー ID。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Starting with wxWidgets 2.9.1, logging functions can be safely called from any thread.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T115025Z">
        <seg>wxWidgets 2.9.1 から、どのスレッドからでも安全にロギング関数を呼べるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Starts editing the label of the given item.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160324Z">
        <seg>指定された項目のラベル編集を開始します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Starts the drag-and-drop operation which will terminate when the user releases the mouse...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134736Z">
        <seg>ドラッグ・アンド・ドロップ操作を開始します。ドラッグ・アンド・ドロップはユーザがマウスを放したときに終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Stream Classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T135641Z">
        <seg>ストリームクラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Stream classes overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130311Z">
        <seg>ストリームクラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Stream filtering means a stream which does no syscall but filters data which are passed to it and then pass them to another stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140904Z">
        <seg>ストリームのフィルタリングとは、システムコールは行いませんが、渡されたデータをフィルタリングし、他のストリームへ引き渡すストリームを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>String Related Functions and Classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030058Z">
        <seg>文字列に関する他の関数やクラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>String functions (<bpt i="0" x="0">&lt;t0&gt;</bpt>strlen()<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>strcpy()<ept i="1">&lt;/t1&gt;</ept>, ...)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150738Z">
        <seg>文字列関数 (<bpt i="0" x="0">&lt;t0&gt;</bpt>strlen()<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>strcpy()<ept i="1">&lt;/t1&gt;</ept>, ...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Such items are sometimes referred to as the children of the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T143436Z">
        <seg>時々、そのようなアイテムをサイザーの子と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Such objects are implicitly convertible to <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t<ept i="3">&lt;/c3&gt;</ept> pointers, respectively, and so the result of, for example, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::ToUTF8()<ept i="4">&lt;/a4&gt;</ept> can always be passed directly to a function taking <bpt i="5" x="5">&lt;c5&gt;</bpt>const char*<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035325Z">
        <seg>返却されたオブジェクトは暗黙的に <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> ポインタや <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t<ept i="3">&lt;/c3&gt;</ept> ポインタへそれぞれ変換されます。そのため、例えば <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::ToUTF8()<ept i="4">&lt;/a4&gt;</ept> の戻り値を <bpt i="5" x="5">&lt;c5&gt;</bpt>const char*<ept i="5">&lt;/c5&gt;</ept> を受け取る関数へ常に渡すことができます。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Supported Bitmap File Formats</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154820Z">
        <seg>対応しているビットマップファイル形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Supported bitmap file formats</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T141111Z">
        <seg>対応しているビットマップファイル形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>TODO: Probably deprecated, Bind() provides a better way to do this</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T170821Z">
        <seg>TODO: おそらく非推奨であり、Bind() がより良い方法を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Table of contents:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131027Z">
        <seg>目次:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tell the sizer to resize the window so that its client area matches the sizer's minimal size (Compute...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T155335Z">
        <seg>ウィンドウをリサイズするようにサイザーへ通知し、クライアント領域がサイザーの最小サイズに合致するようにします。(サイズを決定するために ComputeFittingClientSize() が呼ばれます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Test if this event should be propagated or not, i.e.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T154413Z">
        <seg>イベントを伝播させる必要があるかどうかを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thanks to this mechanism you can, for example, distribute only iso8859-13 data and it will be handled transparently under all systems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T133702Z">
        <seg>この仕組みのおかげで、例えば iso8859-13 のデータを配布するだけで、すべてのシステムでこのデータが透過的に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The "IO" classes implements the specific parts of the stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141237Z">
        <seg>"IO" クラスはストリームの特定の部分を実装しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The "IO" classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSocketInputStream<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSocketOutputStream<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFileInputStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxFileOutputStream<ept i="3">&lt;/a3&gt;</ept>, ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T135823Z">
        <seg>"IO" クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSocketInputStream<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSocketOutputStream<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFileInputStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxFileOutputStream<ept i="3">&lt;/a3&gt;</ept>, ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T153817Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> クラスはモノクロとカラーの両方について、プラットフォームに依存するビットマップの概念をカプセル化するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCSConv<ept i="0">&lt;/a0&gt;</ept> class is special because when it is instantiated, you can tell it which character set it should use, which makes it meaningful to keep many instances of them around, each with a different character set (or you can create a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept> instance on the fly).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151800Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxCSConv<ept i="0">&lt;/a0&gt;</ept> クラスは特別なクラスです。なぜなら、インスタンス化するときに使用する文字コードを指定することができるためです。このことは異なる文字コードのインスタンスを多数保持する場合に意味があります。(もしくは実行時に <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept> のインスタンスを作成することができます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent<ept i="0">&lt;/a0&gt;</ept> handler should only call <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Destroy<ept i="1">&lt;/a1&gt;</ept> to delete the window, and not use the <bpt i="2" x="2">&lt;c2&gt;</bpt>delete<ept i="2">&lt;/c2&gt;</ept> operator.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040317Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent<ept i="0">&lt;/a0&gt;</ept> ハンドラではウィンドウを破棄するときに <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Destroy<ept i="1">&lt;/a1&gt;</ept> のみを使用するようにし、<bpt i="2" x="2">&lt;c2&gt;</bpt>delete<ept i="2">&lt;/c2&gt;</ept> 演算子を使用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> classes in wxWidgets enable an Unicode-aware application to easily convert between Unicode and the variety of 8-bit encoding systems still in use.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151405Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> クラスは Unicode を意識したアプリケーションにおいて、依然として使用されている様々な 8 ビットエンコーディングと Unicode との間の変換を簡単に行えるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> class has been completely rewritten for wxWidgets 3.0 but much work has been done to make existing code using ANSI string literals work as it did in previous versions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030953Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> クラスは wxWidgets 3.0 では完全に書き直されますが、ANSI リテラル文字列を使用する既存のコードを以前のバージョンと同じように動作させるために様々なことを行っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::TransferFromWindow<ept i="0">&lt;/a0&gt;</ept> member function should transfer the data from the control to the validator or associated C++ variable.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T144536Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::TransferFromWindow<ept i="0">&lt;/a0&gt;</ept> 関数はコントロールからバリデータや関連する C++ 変数へデータを転送する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::TransferToWindow<ept i="0">&lt;/a0&gt;</ept> member function should transfer the data from the validator or associated C++ variable to the control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T144508Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::TransferToWindow<ept i="0">&lt;/a0&gt;</ept> 関数はバリデータや関連する C++ 変数からコントロールへデータを転送する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::Validate<ept i="0">&lt;/a0&gt;</ept> member function should return <bpt i="1" x="1">&lt;s1&gt;</bpt>true<ept i="1">&lt;/s1&gt;</ept> if the data in the control (not the C++ variable) is valid.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T151304Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::Validate<ept i="0">&lt;/a0&gt;</ept> 関数はコントロール (C++ 変数ではありません) のデータが正しい場合に <bpt i="1" x="1">&lt;s1&gt;</bpt>true<ept i="1">&lt;/s1&gt;</ept> を返却する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::Validate<ept i="0">&lt;/a0&gt;</ept> member function should return true if the data in the control (not the C++ variable) is valid.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T144337Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::Validate<ept i="0">&lt;/a0&gt;</ept> 関数はコントロール (C++ 変数ではありません) のデータが正しい場合に true を返却する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> constructor then converts it back to an 8-bit character set using the passed conversion object, *wxConvCurrent.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152046Z">
        <seg>そして、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> のコンストラクタは引数に指定された変換オブジェクト、つまり *wxConvCurrent を使用して 8 ビット文字コードへ文字列を変換し直します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>UTF<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> or Unicode Transformation Formats are algorithms mapping the Unicode code points to code unit sequences.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T030604Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>UTF<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> (Unicode Transformation Format) は Unicode コードポイントをコード単位の並びにマッピングするためのアルゴリズムです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt><it pos="begin" x="1">&lt;&lt;a1&gt;</it>wx/string.h<ept i="1">&lt;/a1&gt;</ept>&gt;<ept i="0">&lt;/c0&gt;</ept> header also defines ::wxSnprintf and ::wxVsnprintf functions which should be used instead of the inherently dangerous standard <bpt i="2" x="2">&lt;c2&gt;</bpt>sprintf()<ept i="2">&lt;/c2&gt;</ept> and which use <bpt i="3" x="3">&lt;c3&gt;</bpt>snprintf()<ept i="3">&lt;/c3&gt;</ept> instead which does buffer size checks whenever possible.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120843Z">
        <seg>また、<bpt i="0" x="0">&lt;c0&gt;</bpt><it pos="begin" x="1">&lt;&lt;a1&gt;</it>wx/string.h<ept i="1">&lt;/a1&gt;</ept>&gt;<ept i="0">&lt;/c0&gt;</ept> ヘッダでは ::wxSnprintf 関数と ::wxVsnprintf 関数も定義しています。潜在的に危険な標準の <bpt i="2" x="2">&lt;c2&gt;</bpt>sprintf()<ept i="2">&lt;/c2&gt;</ept> の代わりにこれらの関数を使用するべきであり、これらの関数ではバッファサイズのチェックを行なう <bpt i="3" x="3">&lt;c3&gt;</bpt> snprintf()<ept i="3">&lt;/c3&gt;</ept> をできるだけ使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>EVT_BUTTON<ept i="0">&lt;/c0&gt;</ept> macro demonstrates that the originating event does not have to come from the window class implementing the event table -- if the event source is a button within a panel within a frame, this will still work, because event tables are searched up through the hierarchy of windows for the command events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023717Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EVT_BUTTON<ept i="0">&lt;/c0&gt;</ept> マクロはイベントの発生元がウィンドウクラスである必要がないことを表しています。イベントテーブルの検索はウィンドウ階層をたどりながら行われるため、イベントの発生元がフレーム内のパネルにあるボタンである場合でも動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;c2&gt;</bpt>Layout()<ept i="2">&lt;/c2&gt;</ept> method is what is called by the default <bpt i="3" x="3">&lt;c3&gt;</bpt>EVT_SIZE<ept i="3">&lt;/c3&gt;</ept> handler for container windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T160156Z">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>Layout()<ept i="2">&lt;/c2&gt;</ept> 関数はコンテナウィンドウのデフォルトの <bpt i="3" x="3">&lt;c3&gt;</bpt>EVT_SIZE<ept i="3">&lt;/c3&gt;</ept> ハンドラから呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;e0&gt;</bpt>dialog<ept i="0">&lt;/e0&gt;</ept> sample illustrates this approach by defining a custom log target customizing the dialog used by <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogGui<ept i="1">&lt;/a1&gt;</ept> for the single messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T130128Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>ダイアログ<ept i="0">&lt;/e0&gt;</ept> サンプルでは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogGui<ept i="1">&lt;/a1&gt;</ept> でダイアログを使用するようにカスタマイズしたカスタムログターゲットを定義する例を解説しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;t0&gt;</bpt>&lt;wx/string.h&gt;<ept i="0">&lt;/t0&gt;</ept> header also defines <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSnprintf<ept i="1">&lt;/a1&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxVsnprintf<ept i="2">&lt;/a2&gt;</ept> functions which should be used instead of the inherently dangerous standard <bpt i="3" x="3">&lt;t3&gt;</bpt>sprintf()<ept i="3">&lt;/t3&gt;</ept> and which use <bpt i="4" x="4">&lt;t4&gt;</bpt> snprintf()<ept i="4">&lt;/t4&gt;</ept> instead which does buffer size checks whenever possible.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T073659Z">
        <seg>また、<bpt i="0" x="0">&lt;t0&gt;</bpt>&lt;wx/string.h&gt;<ept i="0">&lt;/t0&gt;</ept> ヘッダでは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSnprintf<ept i="1">&lt;/a1&gt;</ept> 関数と <bpt i="2" x="2">&lt;a2&gt;</bpt>wxVsnprintf<ept i="2">&lt;/a2&gt;</ept> 関数も定義しています。潜在的に危険な標準の <bpt i="3" x="3">&lt;t3&gt;</bpt>sprintf()<ept i="3">&lt;/t3&gt;</ept> の代わりにこれらの関数を使用するべきであり、これらの関数ではバッファサイズのチェックを行なう <bpt i="4" x="4">&lt;t4&gt;</bpt> snprintf()<ept i="4">&lt;/t4&gt;</ept> をできるだけ使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="2" x="2">&lt;t2&gt;</bpt>Layout()<ept i="2">&lt;/t2&gt;</ept> method is what is called by the default <bpt i="3" x="3">&lt;t3&gt;</bpt>EVT_SIZE<ept i="3">&lt;/t3&gt;</ept> handler for container windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T153042Z">
        <seg><bpt i="2" x="2">&lt;t2&gt;</bpt>Layout()<ept i="2">&lt;/t2&gt;</ept> 関数はコンテナウィンドウのデフォルトの <bpt i="3" x="3">&lt;t3&gt;</bpt>EVT_SIZE<ept i="3">&lt;/t3&gt;</ept> ハンドラから呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The ASCII NUL character is allowed, but be aware that in the current string implementation some methods might not work correctly in this case.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T092408Z">
        <seg>ASCII NUL 文字を含めることも可能ですが、その場合、現在の実装ではいくつかの関数は正しく動作しないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The BMP contains characters for all modern languages, and a large number of special characters.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T024943Z">
        <seg>BMP にはすべての現代語の文字と、多くの特殊文字が含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_ACTIVATE and EVT_ACTIVATE_APP macros intercept activation and deactivation events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080731Z">
        <seg>EVT_ACTIVATE、EVT_ACTIVATE_APP マクロはアクティブ化、非アクティブ化イベントを捉えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_BUTTON macro demonstrates that the originating event does not have to come from the window class implementing the event table -- if the event source is a button within a panel within a frame, this will still work, because event tables are searched up through the hierarchy of windows for the command events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T092743Z">
        <seg>EVT_BUTTON マクロはイベントの発生元がウィンドウクラスである必要がないことを表しています。ウィンドウ階層をたどりながらイベントテーブルを検索するため、イベントの発生元がフレーム内のパネルにあるボタンである場合でも動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_CLOSE macro handles window closure called via <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081023Z">
        <seg>EVT_CLOSE マクロは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept> によるウィンドウの終了を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_DROP_FILES macros handles file drop events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081141Z">
        <seg>EVT_DROP_FILES マクロはファイルドロップイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_ERASE_BACKGROUND macro is used to handle window erase requests.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081221Z">
        <seg>EVT_ERASE_BACKGROUND マクロはウィンドウの消去要求を処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_IDLE macro handle application idle events (to process background tasks, for example).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081435Z">
        <seg>EVT_IDLE マクロはアプリケーションのアイドルイベントを処理します。 (例えば、バックグラウンド処理などに使用します)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_INIT_DIALOG macro is used to handle dialog initialisation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081504Z">
        <seg>EVT_INIT_DIALOG マクロはダイアログの初期化イベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_MOVE macro is used to handle a window move.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081717Z">
        <seg>EVT_MOVE マクロはウィンドウの移動を処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_PAINT macro is used to handle window paint requests.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081734Z">
        <seg>EVT_PAINT マクロはウィンドウの描画要求を処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SET_CURSOR macro is used for special cursor processing.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081841Z">
        <seg>EVT_SET_CURSOR マクロは特殊なカーソル処理のために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SET_FOCUS and EVT_KILL_FOCUS macros are used to handle keyboard focus events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081249Z">
        <seg>EVT_SET_FOCUS、EVT_KILL_FOCUS マクロはキーボードフォーカスイベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SIZE macro doesn't need a window identifier, since normally you are only interested in the current window's size events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075824Z">
        <seg>EVT_SIZE マクロはウィンドウ識別子を必要としません。なぜなら、通常は現在のウィンドウのリサイズイベントにのみ関心があるはずだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SIZE macro is used to handle a window resize.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081858Z">
        <seg>EVT_SIZE マクロはウィンドウのりサイズを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SPLITTER_SASH_POS_CHANGED, EVT_SPLITTER_UNSPLIT and EVT_SPLITTER_DCLICK macros are used to handle the various splitter window events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082103Z">
        <seg>EVT_SPLITTER_SASH_POS_CHANGED、EVT_SPLITTER_UNSPLIT、EVT_SPLITTER_DCLICK マクロはさまざまなウィンドウ分割イベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SYS_COLOUR_CHANGED macro is used to handle events informing the application that the user has changed the system colours (Windows only).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082225Z">
        <seg>EVT_SYS_COLOUR_CHANGED マクロはユーザによるシステムカラーの変更イベントを処理するために使用されます。 (Windows のみ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_UPDATE_UI macro is used to handle user interface update pseudo-events, which are generated to give the application the chance to update the visual state of menus, toolbars and controls.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082610Z">
        <seg>EVT_UPDATE_UI マクロはアプリケーションがメニュー、ツールバー、コントロールの見た目の状態を変更するための擬似イベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Idea Behind Sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140939Z">
        <seg>サイザーの背後にある考え方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode standard divides the space of all possible code points in <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>planes<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>; a plane is a range of 65,536 (1000016) contiguous Unicode code points.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T024646Z">
        <seg>Unicode 標準規格では取りうるすべてのコードポイントを <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>面<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> に分割しています; 面とは、連続する 65,536 (1000016) 個の Unicode コードポイントのことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The actual error might have been detected inside wxWidgets code (say, in <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFile::Write<ept i="1">&lt;/a1&gt;</ept>), so the calling function doesn't really know the exact reason of the failure, it only knows that the data file couldn't be written to the disk.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091833Z">
        <seg>実際のエラーは wxWidgets コード (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxFile::Write<ept i="1">&lt;/a1&gt;</ept>) 内で検知されるため、呼び出し元の関数では失敗の正確な原因を実際に知ることはできず、ディスクへの書き込みに失敗したことしか分かりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The actual error might have been detected inside wxWidgets code (say, in <bpt i="1" x="1">&lt;i1&gt;</bpt>wxFile::Write<ept i="1">&lt;/i1&gt;</ept>), so the calling function doesn't really know the exact reason of the failure, it only knows that the data file couldn't be written to the disk.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T021516Z">
        <seg>実際のエラーは wxWidgets コード (<bpt i="1" x="1">&lt;i1&gt;</bpt>wxFile::Write<ept i="1">&lt;/i1&gt;</ept>) 内で検知されるため、呼び出し元の関数では失敗の正確な原因を実際に知ることはできず、ディスクへの書き込みに失敗したことしか分かりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The advantage of using Close instead of Destroy is that it will call any clean-up code defined by the EVT_CLOSE handler; for example it may close a document contained in a window after first asking the user whether the work should be saved.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T144912Z">
        <seg>Destroy の代わりに Close を使用する利点は EVT_CLOSE イベントハンドラで任意の後処理を行える点です。例えば、ユーザに作業中のドキュメントを保存するように確認した後でドキュメントを閉じるといったことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The advantages of using a special string class instead of working directly with C strings are so obvious that there is a huge number of such classes available.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T054417Z">
        <seg>C 文字列を直接使用する代わりに特別な文字列クラスを使用する利点は、多くの文字列クラスが存在することから明らかと言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The aim of the validator concept is to make dialogs very much easier to write.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T142423Z">
        <seg>バリデータという概念の目的はダイアログをより簡単にコーディングできるようにすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The alternative is to explicitly delete child frames in the top-level frame's <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent<ept i="0">&lt;/a0&gt;</ept> handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160758Z">
        <seg>アプリケーションを終了する別の方法はトップレベルフレームの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent<ept i="0">&lt;/a0&gt;</ept> イベントハンドラで明示的に子フレームを削除することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The amount of memory allocated is configured by the setting of <bpt i="0" x="0">&lt;c0&gt;</bpt>EXTRA_ALLOC<ept i="0">&lt;/c0&gt;</ept> in the file string.cpp during compilation (be sure to understand why its default value is what it is before modifying it!).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121407Z">
        <seg>割り当てられるメモリの量は string.cpp ファイルの <bpt i="0" x="0">&lt;c0&gt;</bpt> EXTRA_ALLOC<ept i="0">&lt;/c0&gt;</ept> を変更することでコンパイル時に設定することができます。(値を変更する前に、なぜデフォルト値がその値になっているのかをよく理解するようにしてください!) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The amount of memory allocated is configured by the setting of <bpt i="0" x="0">&lt;i0&gt;</bpt> EXTRA_ALLOC<ept i="0">&lt;/i0&gt;</ept> in the file string.cpp during compilation (be sure to understand why its default value is what it is before modifying it!).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T094155Z">
        <seg>割り当てられるメモリの量は string.cpp ファイルの <bpt i="0" x="0">&lt;i0&gt;</bpt> EXTRA_ALLOC<ept i="0">&lt;/i0&gt;</ept> を変更することでコンパイル時に設定することができます。(値を変更する前に、なぜデフォルト値がその値になっているのかをよく理解するようにしてください!) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The application normally shuts down when the last of its top level windows is closed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161802Z">
        <seg>通常、アプリケーションは最後のトップレベルウィンドウが閉じられたときに終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The automatically generated identifiers are always negative and so will never conflict with the user-specified identifiers which must be always positive.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T075520Z">
        <seg>自動生成される識別子は常に負の値のため、必ず正の値でなければならないユーザ定義の識別子と衝突することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The base class for all these conversions is the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> class (which itself implements standard libc locale conversion).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151645Z">
        <seg>これらすべての変換の基底クラスが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv<ept i="0">&lt;/a0&gt;</ept> クラスです。(このクラス自身では標準 libc ロケールの変換を実装しています) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The base class for all these conversions is the wxMBConv class (which itself implements standard libc locale conversion).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T151341Z">
        <seg>これらすべての変換の基底クラスが wxMBConv クラスです。(このクラス自身では標準 libc ロケールの変換を実装しています) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The basic idea behind a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> is that windows will most often be laid out in rather simple basic geometry, typically in a row or a column or several hierarchies of either.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T162347Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> の基本的な考え方は、ほとんどの場合ウィンドウは とても単純で基本的な配置、よくあるのは行や列、またはその階層内にレイアウトされるという考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The basic idea behind a box sizer is that windows will most often be laid out in rather simple basic ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135121Z">
        <seg>ボックスサイザーの基本的な考え方は、ほとんどの場合ウィンドウは とても単純で基本的な配置、よくあるのは行や列、またはその階層内にレイアウトされるという考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The basic idea behind a box sizer is that windows will most often be laid out in rather simple basic geometry, typically in a row or a column or several hierarchies of either.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145740Z">
        <seg>ボックスサイザーの基本的な考え方は、ほとんどの場合ウィンドウは とても単純で基本的な配置、よくあるのは行や列、またはその階層内にレイアウトされるという考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The best way to ensure correctly displayed texts in a GUI across platforms is to use locales.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T122344Z">
        <seg>プラットフォームをまたがって GUI に正しくテキストを表示する最善の方法はロケールを使用することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The button handler should return immediately if validation failed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145920Z">
        <seg>ボタンハンドラは検証に失敗した場合に直ちに呼び出し元へ戻る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The calendar control allows the user to pick a date.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152131Z">
        <seg>カレンダコントロールはユーザが日付を選択できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The catalog is then converted to the charset used (see <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale::GetSystemEncoding<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLocale::GetSystemEncodingName<ept i="1">&lt;/a1&gt;</ept>) by the user's operating system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T130914Z">
        <seg>そして、ユーザのオペレーティングシステムで使用されている文字コード (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale::GetSystemEncoding<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLocale::GetSystemEncodingName<ept i="1">&lt;/a1&gt;</ept> 参照) へカタログが変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The catalog is then converted to the charset used (see <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLocale::GetSystemEncoding<ept i="1">&lt;/a1&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale::GetSystemEncodingName<ept i="2">&lt;/a2&gt;</ept>) by the user's operating system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T135049Z">
        <seg>そして、ユーザのオペレーティングシステムで使用されている文字コード (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLocale::GetSystemEncoding<ept i="1">&lt;/a1&gt;</ept> と <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale::GetSystemEncodingName<ept i="2">&lt;/a2&gt;</ept> 参照) へカタログが変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The change of the type of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::c_str()<ept i="0">&lt;/a0&gt;</ept> can also result in compilation errors when passing its result to a function overloaded to take both narrow and wide strings and in this case you must select the version which you really want to use, e.g.:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T142232Z">
        <seg>また、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::c_str()<ept i="0">&lt;/a0&gt;</ept> の戻り値の型を変更したことで、ナロー文字列とワイド文字列の両方を受け取るオーバーロード関数にこの戻り値を引き渡すとコンパイルエラーが発生するようになります。この場合はどちらの型を使用したいか選択する必要があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The child frame classes send the event directly to the associated view which still forwards it to its document object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T153151Z">
        <seg>子フレームクラスはイベントを関連するビューへ直接送信し、このビューがさらに関連するドキュメントへイベントを転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The client object will call <bpt i="1" x="1">&lt;a1&gt;</bpt>OnMakeConnection<ept i="1">&lt;/a1&gt;</ept> to create a connection object of the derived class if the connection is successful.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T025439Z">
        <seg>接続に成功するとクライアントオブジェクトは継承したコネクションクラスのオブジェクトを作成するために <bpt i="1" x="1">&lt;a1&gt;</bpt>OnMakeConnection<ept i="1">&lt;/a1&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The client object will call OnMakeConnection to create a connection object of the derived class if the connection is successful.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150340Z">
        <seg>接続に成功するとクライアントオブジェクトは継承したコネクションクラスのオブジェクトを作成するために OnMakeConnection を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The config classes provide a way to store some application configuration information.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T153634Z">
        <seg>コンフィグクラスではアプリケーションの設定情報を格納するための方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The connection object is then used for sending and receiving subsequent messages between client and server - overriding virtual functions in your class derived from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept> allows you to handle the DDE messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150232Z">
        <seg>作成されたコネクションオブジェクトはクライアント・サーバ間でのメッセージの送受信に使用されます。このとき、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxConnection<ept i="1">&lt;/a1&gt;</ept> を継承したクラスで仮想関数をオーバーライドすると DDE メッセージを処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The connection object is then used for sending and receiving subsequent messages between client and server - overriding virtual functions in your class derived from wxConnection allows you to handle the DDE messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T025234Z">
        <seg>作成されたコネクションオブジェクトはクライアント・サーバ間でのメッセージの送受信に使用されます。このとき、wxConnection を継承したクラスで仮想関数をオーバーライドすると DDE メッセージを処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The core: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStreamBase<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStreamBuffer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxInputStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxOutputStream<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFilterInputStream<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFilterOutputStream<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T135715Z">
        <seg>コアクラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStreamBase<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStreamBuffer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxInputStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxOutputStream<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFilterInputStream<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFilterOutputStream<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The custom <bpt i="2" x="2">&lt;a2&gt;</bpt>wxConnection<ept i="2">&lt;/a2&gt;</ept> class will receive communications in a 'conversation' with a server.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150641Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxConnection<ept i="2">&lt;/a2&gt;</ept> の継承クラスはサーバとの '会話' (conversation) におけるやり取りを受信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The custom wxConnection class will receive communications in a 'conversation' with a server.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T133656Z">
        <seg>wxConnection の継承クラスはサーバとの '会話' (conversation) におけるやり取りを受信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The data was successfully copied.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135243Z">
        <seg>データのコピーに成功した。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The data was successfully moved (MSW only).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135259Z">
        <seg>データの移動に成功した。(MSW のみ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default <bpt i="4" x="4">&lt;t4&gt;</bpt>DoGetBestSize()<ept i="4">&lt;/t4&gt;</ept> is designed for use in container windows, such as <bpt i="5" x="5">&lt;a5&gt;</bpt>wxPanel<ept i="5">&lt;/a5&gt;</ept>, and works something like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T155507Z">
        <seg>デフォルトの <bpt i="4" x="4">&lt;t4&gt;</bpt>DoGetBestSize()<ept i="4">&lt;/t4&gt;</ept> は <bpt i="5" x="5">&lt;a5&gt;</bpt>wxPanel<ept i="5">&lt;/a5&gt;</ept> といったコンテナウィンドウに使用するために設計されており、それはこのように動作します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default algorithm assumes that memory allocation is done in granularity of at least 16 bytes (which is the case on almost all of wide-spread platforms) and so nothing is lost if the amount of memory to allocate is rounded up to the next multiple of 16.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T082045Z">
        <seg>デフォルトのアルゴリズムでは少なくとも 16 バイト単位でメモリの割り当てが行われると仮定している (これは広く使われているほぼすべてのプラットフォームで当てはまります) ため、メモリの割り当て量が 16 の倍数に切り上げられたとしても何も無駄になりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default approach is quite conservative.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T082411Z">
        <seg>このデフォルトのやり方は非常に保守的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default close event handler for <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept> simulates a Cancel command, generating a wxID_CANCEL event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040824Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog<ept i="0">&lt;/a0&gt;</ept> のデフォルトの終了イベントハンドラは wxID_CANCEL イベントを生成する Cancel コマンドを模倣します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default close event handler for <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFrame<ept i="0">&lt;/a0&gt;</ept> destroys the frame using Destroy().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040917Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFrame<ept i="0">&lt;/a0&gt;</ept> のデフォルトの終了ハンドラは Destroy() を使用してフレームを破棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default close event handler for wxDialog simulates a Cancel command, generating a wxID_CANCEL event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T040458Z">
        <seg>wxDialog のデフォルトの終了イベントハンドラは wxID_CANCEL イベントを生成する Cancel コマンドを模倣します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default close event handler for wxFrame destroys the frame using Destroy().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T155144Z">
        <seg>wxFrame のデフォルトの終了ハンドラは Destroy() を使用してフレームを破棄します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default data type is wxCF_TEXT (ASCII text), and the default data size is the length of the null-terminated string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033412Z">
        <seg>デフォルトのデータ型は wxCF_TEXT (ASCII テキスト) で、デフォルトのデータサイズはヌル終端文字列の文字列長です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default handler for the <bpt i="3" x="3">&lt;c3&gt;</bpt>wxEVT_INIT_DIALOG<ept i="3">&lt;/c3&gt;</ept> event is defined in the <bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindow<ept i="4">&lt;/a4&gt;</ept> class to simply call the function <bpt i="5" x="5">&lt;a5&gt;</bpt>wxWindow::TransferDataToWindow<ept i="5">&lt;/a5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T154534Z">
        <seg><bpt i="3" x="3">&lt;c3&gt;</bpt>wxEVT_INIT_DIALOG<ept i="3">&lt;/c3&gt;</ept> イベントのデフォルトのイベントハンドラが <bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindow<ept i="4">&lt;/a4&gt;</ept> クラスの中で定義されており、これは単純に <bpt i="5" x="5">&lt;a5&gt;</bpt>wxWindow::TransferDataToWindow<ept i="5">&lt;/a5&gt;</ept> 関数を呼ぶだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default handler for the wxEVT_INIT_DIALOG event is defined in the wxWindow class to simply call the function <bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindow::TransferDataToWindow<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145444Z">
        <seg>wxEVT_INIT_DIALOG イベントのデフォルトのイベントハンドラが wxWindow クラスの中で定義されており、これは単純に <bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindow::TransferDataToWindow<ept i="3">&lt;/a3&gt;</ept> 関数を呼ぶだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default handler for wxID_CANCEL hides the dialog (if modeless) or calls EndModal(wxID_CANCEL) (if modal).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T154652Z">
        <seg>wxID_CANCEL のデフォルトハンドラは (モードレスの場合に) ダイアログを非表示にするか、(モーダルの場合に) EndModal(wxID_CANCEL) を呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is <bpt i="3" x="3">&lt;t3&gt;</bpt>640x480-16<ept i="3">&lt;/t3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155505Z">
        <seg>デフォルトは <bpt i="3" x="3">&lt;t3&gt;</bpt>640x480-16<ept i="3">&lt;/t3&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default processing is to pop up a message box to inform the user about it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005459Z">
        <seg>デフォルトの処理ではメッセージボックスをポップアップして通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The design which uses one GUI thread and several worker threads which communicate with the main one using <bpt i="1" x="1">&lt;b1&gt;</bpt>events<ept i="1">&lt;/b1&gt;</ept> is much more robust and will undoubtedly save you countless problems (example: under Win32 a thread can only access GDI objects such as pens, brushes, device contexts created by itself and not by the other threads).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T235536Z">
        <seg>ひとつの GUI スレッドと複数のワーカースレッドを使用し、<bpt i="1" x="1">&lt;b1&gt;</bpt>イベント<ept i="1">&lt;/b1&gt;</ept> を使用してメインスレッドと通信するデザインはよりロバストで、無数の問題が起こるのを間違いなく防いでくれます。(例: Win32 では自スレッドで作成した GDI オブジェクト (ペンやブラシなど) にだけアクセスでき、他スレッドで作成したオブジェクトにはアクセスできません)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The design which uses one GUI thread and several worker threads which communicate with the main one using events is much more robust and will undoubtedly save you countless problems (example: under Win32 a thread can only access GDI objects such as pens, brushes, &amp;c created by itself and not by the other threads).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T145006Z">
        <seg>ひとつの GUI スレッドと複数のワーカースレッドを使用し、イベントを使用してメインスレッドと通信するデザインはよりロバストで、無数の問題が起こるのを間違いなく防いでくれます。(例: Win32 では自スレッドで作成した GDI オブジェクト (ペンやブラシなど) にだけアクセスでき、他スレッドで作成したオブジェクトにはアクセスできません)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The details of event propagation up the window hierarchy are described in the next section.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T145337Z">
        <seg>ウィンドウ階層内におけるイベント伝播についての詳細は次の章で述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The device context is intended to represent a number of output devices in a generic way, with the same API being used throughout.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140810Z">
        <seg>デバイスコンテキストは汎用的な方法で、つまり同じ API を通して操作できる多くの出力デバイスを表現することを目的としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The dialog does custom painting and/or event handling not handled by the scrolled window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T145954Z">
        <seg>ダイアログでカスタムドローを行なっている。スクロール可能なウィンドウではイベント処理が行われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The dialog doesn't use sizers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T145420Z">
        <seg>ダイアログでサイザーを使用していない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The dialog has unusual layout, for example a vertical sizer containing a mixture of standard buttons and other controls.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T150244Z">
        <seg>標準ボタンと他のコントロールが混在する垂直方向のサイザーなど、通常とは異なるレイアウトを持っている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The dialog implementation makes assumptions about the window hierarchy, for example getting the parent of a control and casting to the dialog class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T150331Z">
        <seg>コントロールの親をダイアログにキャストするなど、ダイアログの実装でウィンドウの階層構造について仮定を立てている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The dialog makes assumptions about the sizer hierarchy, for example to show or hide children of the top-level sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T150324Z">
        <seg>トップレベルサイザーの子コントロールの表示・非表示を切り替えるなど、サイザーの階層構造について仮定を立てている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The documentation for specific event macros is organised by event class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080526Z">
        <seg>このドキュメントではイベントマクロをイベントクラスごとに分類しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The easiest workaround is to give a name to the enum.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130921Z">
        <seg>もっとも簡単な回避方法としては enum に名前をつけることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The event base class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055055Z">
        <seg>イベントの基底クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The event handler function might look like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160303Z">
        <seg>イベントハンドラ関数は以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The event is passed to the next event handler, if any, in the event handler chain, i.e., the steps (1) to (4) are done for it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T141426Z">
        <seg>イベントハンドラの連鎖内において、次のイベントハンドラが存在する場合、次のイベントハンドラへイベントを引き渡します。つまり、そのイベントハンドラに対してステップ (1) から (4) を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The event table containing all the handlers defined using the event table macros in this class and its base classes is examined.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T032622Z">
        <seg>このクラスと基底クラスで (イベントテーブルマクロによって) 定義されたすべてのイベントハンドラを含むイベントテーブルを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The event table tells wxWidgets how to map events to member functions and in our example it could look like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T021949Z">
        <seg>イベントテーブルはイベントとメンバ関数のマッピングを wxWidgets へ知らせるものであり、以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The events do propagate beyond the frames, however.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T033331Z">
        <seg>しかし、通常のイベントはフレームを超えて伝播します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first function, as almost all the other functions in lowercase, is <bpt i="3" x="3">&lt;c3&gt;</bpt>std::string<ept i="3">&lt;/c3&gt;</ept> compatible.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T112733Z">
        <seg>他の小文字の関数のほとんどがそうであるように、最初の関数は <bpt i="3" x="3">&lt;c3&gt;</bpt>std::string<ept i="3">&lt;/c3&gt;</ept> と互換性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first function, as almost all the other functions in lowercase, is std::string compatible.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T052040Z">
        <seg>他の小文字の関数のほとんどがそうであるように、最初の関数は std::string と互換性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first is in the call to the <bpt i="0" x="0">&lt;c0&gt;</bpt>printf()<ept i="0">&lt;/c0&gt;</ept> function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113941Z">
        <seg>最初のバグは <bpt i="0" x="0">&lt;c0&gt;</bpt>printf()<ept i="0">&lt;/c0&gt;</ept> 関数の呼び出し部分に存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first of them should be only used for the string containing 7-bit ASCII characters only, anything else will be replaced by some substitution character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161038Z">
        <seg>最初の関数は文字列に 7 ビット ASCII 文字のみが含まれる場合にだけ使用してください。ASCII 文字以外の文字はなんらかの置換文字に置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first one is the most flexible and allows you to change the formatting of the messages, dynamically filter and redirect them and so on -- all log messages, except for those generated by <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogFatalError()<ept i="4">&lt;/a4&gt;</ept>, pass by this function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112123Z">
        <seg>最初の関数はもっとも柔軟で、メッセージ形式の変更、メッセージの動的なフィルタリングやリダイレクトなどを行なうことができます。<bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogFatalError()<ept i="4">&lt;/a4&gt;</ept> で生成されたメッセージを除いて、すべてのメッセージがこの関数に引き渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first one may be overridden to do whatever you want but you have to distinguish between the different message types yourself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023745Z">
        <seg>最初の関数をオーバーライドすると何でもできますが、異なるメッセージ型を自分で区別する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first two entries map menu commands to two different member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075626Z">
        <seg>最初の 2 つのエントリはメニューコマンドを異なる 2 つのメンバ関数にマッピングしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following describes the differences between these device contexts and when you should use them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140928Z">
        <seg>各デバイスコンテキストの違いと、それを使用するタイミングについて以下で説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following description refers to wx... but remember that the equivalent wxTCP... and wxDDE... classes can be used in much the same way.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T145538Z">
        <seg>以降の説明では wx... という名称を使用しますが、同じ wxTCP... クラスと wxDDE... クラスは同様の方法で使用できることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following description refers to wxWidgets, but remember that the equivalent wxTCP* and wxDDE* classes can be used in much the same way.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T145415Z">
        <seg>以降の説明では wxWidgets について言及しますが、同じ wxTCP* クラスと wxDDE* クラスは同様の方法で使用できることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following flags can be passed to this function:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115722Z">
        <seg>この関数には以下のフラグを指定できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following lists the formats handled on different platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T141211Z">
        <seg>各プラットフォームで対応している形式の一覧を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sample shows a dialog with three buttons, the first one has a stretch factor of 1 and thus gets stretched, whereas the other two buttons have a stretch factor of zero and keep their initial width:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T151132Z">
        <seg>以下に 3 個のボタンを持つダイアログの例を示します。最初のボタンはストレッチ係数に 1 を指定しているため、サイズが伸長していますが、他のふたつのボタンはストレッチ係数が 0 のため、初期サイズを維持しています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sample shows a listbox and three buttons in a horizontal box sizer; one button is centred, one is aligned at the top, one is aligned at the bottom:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T144852Z">
        <seg>以下に水平方向のボックスサイザー内にリストボックスと 3 個のボタンを配置した場合の例を示します; それぞれのボタンは中央寄せ、上寄せ、下寄せです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sample shows the same dialog as in the last sample, only the box sizer is a vertical box sizer now:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152037Z">
        <seg>以下の例は最後の例と同じダイアログですが、ボックスサイザーが垂直方向のボックスサイザーとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sample shows the same dialog as the one above, but using a flex grid sizer:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T154117Z">
        <seg>以下の例は上の例と同じダイアログですが、可変グリッドサイザーを使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following samples show dialogs with only one dialog item (a button) and a border of 0, 5, and 10 pixels around the button:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142728Z">
        <seg>以下の例では単一のコントロール (ボタン) を持つダイアログについて、ボタンのまわりのボーダーを 0、5、10 ピクセルに設定しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sections briefly describe how to program with individual sizer classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T114908Z">
        <seg>続く章では個々のサイザークラスを用いてプログラムを書く方法について簡潔に説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following standard identifiers are supplied.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041923Z">
        <seg>標準識別子には以下のものが用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The full class declaration might look like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015359Z">
        <seg>完全なクラス宣言は以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The functions below allow some limited customization of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> behaviour without writing a new log target class (which, aside from being a matter of several minutes, allows you to do anything you want).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132007Z">
        <seg>以下の関数は新しいログターゲットを作成することなく、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> の振る舞いを限定的に変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The functions to use for error messages, i.e.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131401Z">
        <seg>エラーメッセージ用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The gettext Manual: <bpt i="0" x="0">&lt;a0&gt;</bpt>http://www.gnu.org/software/gettext/manual/gettext.html<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041513Z">
        <seg>gettext マニュアル: <bpt i="0" x="0">&lt;a0&gt;</bpt>http://www.gnu.org/software/gettext/manual/gettext.html<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The handler for EVT_CLOSE should signal to the calling code if it does not destroy the window, by calling <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCloseEvent::Veto<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T144429Z">
        <seg>ウィンドウを破棄しない場合、EVT_CLOSE ハンドラで <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCloseEvent::Veto<ept i="1">&lt;/a1&gt;</ept> を呼び出し、呼び出し元へそのことを通知するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The handler for EVT_CLOSE should signal to the calling code if it does not destroy the window, by calling <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCloseEvent::Veto<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T034552Z">
        <seg>ウィンドウを破棄しない場合、EVT_CLOSE ハンドラで <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCloseEvent::Veto<ept i="2">&lt;/a2&gt;</ept> を呼び出し、呼び出し元へそのことを通知するようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The idea behind sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T123524Z">
        <seg>サイザーの背後にある考え方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The implicit cast is used again, so the code compiles, but as it returns a pointer to a buffer belonging to a local variable which is deleted as soon as the function exits, its contents are completely arbitrary.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T131723Z">
        <seg>暗黙的な変換が再度行われるため、コードはコンパイルできますが、返却されるポインタはローカル変数のバッファを指すことになります。そして、このローカル変数は関数を抜けるとすぐに破棄されるため、その内容は完全に不定になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The implicit cast is used again, so the code compiles, but as it returns a pointer to a buffer belonging to a local variable which is deleted as soon as the function exits, its contents is totally arbitrary.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T131651Z">
        <seg>暗黙的な変換が再度行われるため、コードはコンパイルできますが、返却されるポインタはローカル変数のバッファを指すことになります。そして、このローカル変数は関数を抜けるとすぐに破棄されるため、その内容は完全に不定になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The important conclusion is that if you use <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> instead of <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept>, avoid using C style strings and use <bpt i="2" x="2">&lt;t2&gt;</bpt>wxString<ept i="2">&lt;/t2&gt;</ept> instead and don't forget to enclose all string literals inside <bpt i="3" x="3">&lt;a3&gt;</bpt>wxT()<ept i="3">&lt;/a3&gt;</ept> macro, your program automatically becomes (almost) Unicode compliant!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T140756Z">
        <seg>重要な結論としては、<bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> の代わりに <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> を使い、 C 形式の文字列ではなく <bpt i="2" x="2">&lt;t2&gt;</bpt>wxString<ept i="2">&lt;/t2&gt;</ept> を使い、すべてのリテラル文字列を <bpt i="3" x="3">&lt;a3&gt;</bpt>wxT()<ept i="3">&lt;/a3&gt;</ept> マクロで囲むのを忘れなければ、あなたのプログラムは自動的に (ほぼ) Unicode 準拠になるということです!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The incompatible changes can be grouped into the following categories:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T150101Z">
        <seg>互換性のない変更は次のカテゴリに分類できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The interface provided by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> is the same independently of the format used internally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T093231Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の提供するインタフェースはその内部フォーマットによらず、同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The last method is the simplest one: you should override it if you simply want to redirect the log output elsewhere, without taking into account the level of the message.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T122658Z">
        <seg>最後の関数が一番単純です: メッセージのログレベルを考慮せず、単純にログ出力を他の場所へリダイレクトしたい場合はこの関数をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The last two modes override the global adaptation setting.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T150254Z">
        <seg>最後のふたつのモードは適応に関するグローバルな設定を上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The layout algorithm used by sizers in wxWidgets is closely related to layout systems in other GUI toolkits, such as Java's AWT, the GTK toolkit or the Qt toolkit.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T122918Z">
        <seg>wxWidgets のサイザーで用いられているレイアウトアルゴリズムは Java の AWT や GTK ツールキット、 Qt ツールキットといった他の GUI ツールキットで用いられているものと密接に関わりがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The list of dynamically bound event handlers, i.e., those for which Bind&lt;&gt;() was called, is consulted.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T135819Z">
        <seg>動的イベントハンドラ (つまり、Bind&lt;&gt;() でバインドしたイベントハンドラ) の一覧を調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The log targets can also be combined: for example you may wish to redirect the messages somewhere else (for example, to a log file) but also process them as normally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030443Z">
        <seg>ログターゲットは組み合わせて使用することもできます: 例えば、メッセージを他の場所 (例えばログファイルなど) にリダイレクトしつつ、通常通りの方法でも処理したいとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The log window frame has a menu allowing user to clear the log, close it completely or save all messages to file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025529Z">
        <seg>ログウィンドウフレームはメニューを持ち、ログの消去、終了、メッセージの保存を選択することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The logging facilities included in wxWidgets provide the base <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> class which defines the standard interface for a <bpt i="1" x="1">&lt;e1&gt;</bpt>log<ept i="1">&lt;/e1&gt;</ept> target as well as several standard implementations of it and a family of functions to use with them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131505Z">
        <seg>wxWidgets のロギング機能では <bpt i="1" x="1">&lt;e1&gt;</bpt>ログ<ept i="1">&lt;/e1&gt;</ept> ターゲットに対する標準的なインタフェースを定義する基底 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> クラスや、いくつかのログクラスの標準的な実装とそれを使用する関数群を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The logging facilities included in wxWidgets provide the base <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLog<ept i="0">&lt;/i0&gt;</ept> class which defines the standard interface for a <bpt i="1" x="1">&lt;i1&gt;</bpt>log target<ept i="1">&lt;/i1&gt;</ept> as well as several standard implementations of it and a family of functions to use with them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T074728Z">
        <seg>wxWidgets のロギング機能では <bpt i="1" x="1">&lt;i1&gt;</bpt>ログターゲット<ept i="1">&lt;/i1&gt;</ept> に対する標準的なインタフェースを定義する基底 <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLog<ept i="0">&lt;/i0&gt;</ept> クラスや、いくつかのログクラスの標準的な実装とそれを使用する関数群を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The macro wxWX2MBbuf reflects the correct return value of cWX2MB (either char* or <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCharBuffer<ept i="0">&lt;/a0&gt;</ept>), except for the const.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152114Z">
        <seg>(wxWX2MBbuf マクロは const でないことを除いて、cWX2MB の戻り値 (char* または <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCharBuffer<ept i="0">&lt;/a0&gt;</ept>) と同じ型になります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most important advantage is the need to always remember to allocate/free memory for C strings; working with fixed size buffers almost inevitably leads to buffer overflows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T092625Z">
        <seg>もっとも重要な利点は、C 文字列の場合、メモリの割り当てと解放を忘れずに行なう必要がある点です; また、固定サイズのバッファを使用すると大抵バッファオーバーランを引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most important one is probably that there are often several functions to do exactly the same thing: for example, to get the length of the string either one of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::length()<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::Len()<ept i="1">&lt;/a1&gt;</ept> or <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::Length()<ept i="2">&lt;/a2&gt;</ept> may be used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T112716Z">
        <seg>もっとも重要な問題はおそらく、まったく同じことを行なう関数が複数存在することです: 例えば、文字列の長さを取得するために <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::length()<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::Len()<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::Length()<ept i="2">&lt;/a2&gt;</ept> のどれでも使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most important one is probably that there are often several functions to do exactly the same thing: for example, to get the length of the string either one of length(), <bpt i="0" x="0">&lt;a0&gt;</bpt>Len()<ept i="0">&lt;/a0&gt;</ept> or <bpt i="1" x="1">&lt;a1&gt;</bpt>Length()<ept i="1">&lt;/a1&gt;</ept> may be used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T051948Z">
        <seg>もっとも重要な問題はおそらく、まったく同じことを行なう関数が複数存在することです: 例えば、文字列の長さを取得するために length()、<bpt i="0" x="0">&lt;a0&gt;</bpt>Len()<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>Length()<ept i="1">&lt;/a1&gt;</ept> のどれでも使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The most serious backwards-incompatible change is related to the change of return type of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::c_str()<ept i="0">&lt;/a0&gt;</ept> method: it returns a special proxy object instead of a simple <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t*<ept i="2">&lt;/c2&gt;</ept> now.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T123617Z">
        <seg>もっとも深刻な後方互換性のない変更は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::c_str()<ept i="0">&lt;/a0&gt;</ept> 関数の戻り値の型に関する変更です: 現在は単純な <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept> や <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t*<ept i="2">&lt;/c2&gt;</ept> の代わりに特別なプロキシオブジェクトを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The native implementation is used by default, but you can still use wxGenericCalendarCtrl instead of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCalendarCtrl<ept i="1">&lt;/a1&gt;</ept> in your code if you need the extra features.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152339Z">
        <seg>デフォルトでネイティブ実装が使用されますが、追加の機能が必要な場合は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCalendarCtrl<ept i="1">&lt;/a1&gt;</ept> の代わりに wxGenericCalendarCtrl を引き続き使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next four lines define bindings of individual events to their handlers: the first two of them map menu commands from the items with the identifiers specified as the first macro parameter to two different member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T023856Z">
        <seg>次の 4 行は個々のイベントにおけるイベントハンドラへのバインディングを定義しています: 最初のふたつはマクロの第 1 引数で指定された識別子を持つ項目のメニューコマンドを、ふたつの異なるメンバ関数にマッピングしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next section describes and shows what can be done with sizers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T114634Z">
        <seg>次の章ではサイザーを用いて何ができるのかを説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next thing to do is to decide whether you need to define a custom event class for events of this type or if you can reuse an existing class, typically either <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent<ept i="0">&lt;/a0&gt;</ept> (which doesn't provide any extra information) or <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> (which contains several extra fields and also propagates upwards by default).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155658Z">
        <seg>次に行なうことは、このイベント型用のカスタムイベントクラスを定義する必要があるかどうか、もしくは既存のクラス、通常は (追加の情報を持たない) <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent<ept i="0">&lt;/a0&gt;</ept> か （いくつかの追加フィールドを持ち、デフォルトで伝播する) <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> のどちらかを再利用できるかどうかを決定することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The normal order of event table searching by ProcessEvent is as follows:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T023905Z">
        <seg>ProcessEvent によるイベントテーブルの検索は通常、以下の順番で行われます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The normal order of event table searching by ProcessEvent() is as follows, with the event processing stopping as soon as a handler is found (unless the handler calls <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::Skip()<ept i="1">&lt;/a1&gt;</ept> in which case it doesn't count as having handled the event and the search continues):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T065623Z">
        <seg>通常、ProcessEvent() によるイベントテーブルの検索順は以下のように行われ、イベントハンドラが見つかると処理を終了します。 (ただし、イベントハンドラで <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::Skip()<ept i="1">&lt;/a1&gt;</ept> を呼ぶとイベントが処理されていないものとして扱われ、引き続き検索が行われます):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The normal usage of a log object (i.e. object of a class derived from <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLog<ept i="4">&lt;/a4&gt;</ept>) is to install it as the active target with a call to <bpt i="5" x="5">&lt;e5&gt;</bpt>SetActiveTarget()<ept i="5">&lt;/e5&gt;</ept> and it will be used automatically by all subsequent calls to <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogXXX() functions<ept i="6">&lt;/a6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112509Z">
        <seg>ログオブジェクト (つまり、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxLog<ept i="4">&lt;/a4&gt;</ept> を継承したクラスのオブジェクト) の通常の使用方法は <bpt i="5" x="5">&lt;e5&gt;</bpt>SetActiveTarget()<ept i="5">&lt;/e5&gt;</ept> を使用して有効なターゲットとして設定することで、それ以降に呼び出された <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogXXX() 関数<ept i="6">&lt;/a6&gt;</ept>で自動的に使用されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The normal usage of a log object (i.e. object of a class derived from wxLog) is to install it as the active target with a call to <bpt i="4" x="4">&lt;i4&gt;</bpt> SetActiveTarget()<ept i="4">&lt;/i4&gt;</ept> and it will be used automatically by all subsequent calls to <bpt i="5" x="5">&lt;i5&gt;</bpt>wxLogXXX()<ept i="5">&lt;/i5&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023118Z">
        <seg>ログオブジェクト (つまり、wxLog を継承したクラスのオブジェクト) の通常の使用方法は <bpt i="4" x="4">&lt;i4&gt;</bpt> SetActiveTarget()<ept i="4">&lt;/i4&gt;</ept> を使用して有効なターゲットとして設定することで、それ以降に呼び出された <bpt i="5" x="5">&lt;i5&gt;</bpt>wxLogXXX()<ept i="5">&lt;/i5&gt;</ept> 関数で自動的に使用されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The objects of this class may be instantiated to (temporarily) suppress output of <bpt i="1" x="1">&lt;e1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/e1&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113141Z">
        <seg>このクラスのオブジェクトは <bpt i="1" x="1">&lt;e1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/e1&gt;</ept> 関数の出力を (一時的に) 抑制する場合にインスタンス化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The objects of this class may be instantiated to (temporarily) suppress output of <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/i1&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030249Z">
        <seg>このクラスのオブジェクトは <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/i1&gt;</ept> 関数の出力を (一時的に) 抑制する場合にインスタンス化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The only <bpt i="2" x="2">&lt;b2&gt;</bpt>exceptions<ept i="2">&lt;/b2&gt;</ept> to this rule are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155605Z">
        <seg>このルールの <bpt i="2" x="2">&lt;b2&gt;</bpt>例外<ept i="2">&lt;/b2&gt;</ept> は以下のとおりです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The only <bpt i="4" x="4">&lt;b4&gt;</bpt>exceptions<ept i="4">&lt;/b4&gt;</ept> to this rule are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060858Z">
        <seg>このルールの <bpt i="4" x="4">&lt;b4&gt;</bpt>例外<ept i="4">&lt;/b4&gt;</ept> は以下のとおりです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The only requirement imposed by wxWidgets is that this class must derive from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> and so, considering that <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow<ept i="2">&lt;/a2&gt;</ept> derives from it, any classes representing windows can handle events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022636Z">
        <seg>wxWidgets が唯一要求することとして、イベントを処理するクラスは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> を継承していなければなりません。したがって、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow<ept i="2">&lt;/a2&gt;</ept> はこのクラスを継承していることを考慮すると、ウィンドウを表すクラスはどれもイベントを処理することができるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The other class of incompatible changes is due to modifying some virtual methods to use <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept> parameters instead of <bpt i="2" x="2">&lt;c2&gt;</bpt>const<ept i="2">&lt;/c2&gt;</ept> <bpt i="3" x="3">&lt;c3&gt;</bpt>wxChar*<ept i="3">&lt;/c3&gt;</ept> ones to make them accept both narrow and wide strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T143659Z">
        <seg>他の互換性のない変更は、いくつかの仮想関数を <bpt i="2" x="2">&lt;c2&gt;</bpt>const<ept i="2">&lt;/c2&gt;</ept> <bpt i="3" x="3">&lt;c3&gt;</bpt>wxChar*<ept i="3">&lt;/c3&gt;</ept> の代わりに <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept> を引数に取るように修正したことによるものです。この変更はナロー文字列とワイド文字列の両方を受け取るために行いました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The other is to use the existing event classes and give them an new event type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T151405Z">
        <seg>もう一方の方法は、既存のイベントクラスを使用し、それらに新しいイベント型を与える方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The other one uses <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler::Bind&lt;&gt;()<ept i="1">&lt;/a1&gt;</ept> call and can be used to bind and unbind, the handlers dynamically, i.e. during run-time depending on some conditions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T235917Z">
        <seg>もう一方は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler::Bind&lt;&gt;()<ept i="1">&lt;/a1&gt;</ept> を使用する方法で、動的に (実行時に条件に基づいて) ハンドラをバインドしたり解除したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The other planes in fact contain mainly historic scripts, special-purpose characters or are unused.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031840Z">
        <seg>実際のところ、他の面は主に歴史上の文字や特殊用途の文字用か、もしくは使用されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The overhead of such conversions is usually negligible for small strings but may be important for some programs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T094040Z">
        <seg>この変換にかかるオーバーヘッドは小さな文字列であれば無視できるものですが、いくつかのプログラムでは重要になるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The parent frame classes modify step (2) above to send the events received by them to <bpt i="4" x="4">&lt;a4&gt;</bpt>wxDocManager<ept i="4">&lt;/a4&gt;</ept> object first.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T152148Z">
        <seg>親フレームクラスでは上記のステップ (2) において、受信したイベントをまず  <bpt i="4" x="4">&lt;a4&gt;</bpt>wxDocManager<ept i="4">&lt;/a4&gt;</ept> オブジェクトに送信するように変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The path components are <bpt i="0" x="0">&lt;b0&gt;</bpt>always<ept i="0">&lt;/b0&gt;</ept> separated with a slash, even though some implementations use the backslash internally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T152156Z">
        <seg>パスの要素は <bpt i="0" x="0">&lt;b0&gt;</bpt>常に<ept i="0">&lt;/b0&gt;</ept> スラッシュで区切られます。一部の実装で内部的にバックスラッシュを使用していてもこれは変わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The path components are <bpt i="0" x="0">&lt;e0&gt;</bpt>always<ept i="0">&lt;/e0&gt;</ept> separated with a slash, even though some implementations use the backslash internally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T153938Z">
        <seg>パスの要素は <bpt i="0" x="0">&lt;e0&gt;</bpt>常に<ept i="0">&lt;/e0&gt;</ept> スラッシュで区切られます。一部の実装で内部的にバックスラッシュを使用していてもこれは変わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The possibilities of handling events in this way are rather different.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024547Z">
        <seg>この方法ではイベント処理のやり方が大きく異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The predefined <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCSConv<ept i="0">&lt;/a0&gt;</ept> instance, wxConvLocal, is preset to use the default user character set, but you should rarely need to use it directly, it is better to go through wxConvCurrent.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151811Z">
        <seg>事前に定義された <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCSConv<ept i="0">&lt;/a0&gt;</ept> インスタンスである wxConvLocal はデフォルトのユーザ文字コードを使用するように設定されていますが、これを直接使用する必要はほとんどなく、それよりも wxConvCurrent を使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The predefined wxCSConv instance, wxConvLocal, is preset to use the default user character set, but you should rarely need to use it directly, it is better to go through wxConvCurrent.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T142717Z">
        <seg>事前に定義された wxCSConv インスタンスである wxConvLocal はデフォルトのユーザ文字コードを使用するように設定されていますが、これを直接使用する必要はほとんどなく、それよりも wxConvCurrent を使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The previous elements in the path are the group names, and each name may contain an arbitrary number of entries and subgroups.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T152106Z">
        <seg>パスの前の要素はグループ名です。各グループには任意の数のエントリやサブグループが含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The previous sections explain how to define event handlers but don't address the question of how exactly wxWidgets finds the handler to call for the given event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T062058Z">
        <seg>前の章ではイベントハンドラの定義方法について説明しましたが、wxWidgets がどのようにイベントハンドラを探すのかについてはまだ述べていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The probably first example is Windows NT which uses only Unicode internally since its very first version.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T161803Z">
        <seg>おそらく、最初の例は Windows NT でしょう。 Windows NT ではかなり初期のバージョンから内部的に Unicode を使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The problems can be separated into three broad classes:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121217Z">
        <seg>発生しうる問題は大まかに 3 種類に分類することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The program i18n involves several steps:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T235453Z">
        <seg>プログラムの国際化にはいくつかのステップが含まれます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The rationale for this choice is that there are only a few frames in a typical application and their parent-child relation are well understood by the programmer while it may be difficult, if not impossible, to track down all the dialogs that may be popped up in a complex program (remember that some are created automatically by wxWidgets).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T155553Z">
        <seg>このようにした理由は、普通のアプリケーションでは数個のフレームしか存在せず、プログラマはそれらの親子関係のことをよく理解している一方で、複雑なプログラムで表示されるすべてのダイアログを追跡することは、不可能でないにしても非常に難しいためです。 (いくつかのダイアログは wxWidgets によって自動的に生成されることを思い出してください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The rationale for this choice is that there are only a few frames in a typical application and their parent-child relation are well understood by the programmer while it may be very difficult, if not impossible, to track down all the dialogs which may be popped up in a complex program (remember that some are created automatically by wxWidgets).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040727Z">
        <seg>このようにした理由は、普通のアプリケーションでは数個のフレームしか存在せず、プログラマはそれらの親子関係のことをよく理解している一方で、複雑なプログラムで表示されるすべてのダイアログを追跡することは、不可能でないにしても非常に難しいためです。 (いくつかのダイアログは wxWidgets によって自動的に生成されることを思い出してください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The reason for making it a separate function from it is that usually there are a lot of trace messages, so it might make sense to separate them from other debug messages which would be flooded in them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T085236Z">
        <seg>これを別の関数とした理由は、通常、トレースメッセージを大量に出力するため、同じように大量に出力する他のデバッグ出力と区別することに意味があるはずだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The reason for that is that <bpt i="0" x="0">&lt;c0&gt;</bpt>m_helpCtrl<ept i="0">&lt;/c0&gt;</ept> is a member object and is thus destroyed from MyApp destructor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124542Z">
        <seg>なぜなら、<bpt i="0" x="0">&lt;c0&gt;</bpt>m_helpCtrl<ept i="0">&lt;/c0&gt;</ept> はメンバオブジェクトであり、MyApp のデストラクタで破棄されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The reason for that is that <bpt i="0" x="0">&lt;t0&gt;</bpt>m_helpCtrl<ept i="0">&lt;/t0&gt;</ept> is a member object and is thus destroyed from MyApp destructor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162536Z">
        <seg>なぜなら、<bpt i="0" x="0">&lt;t0&gt;</bpt>m_helpCtrl<ept i="0">&lt;/t0&gt;</ept> はメンバオブジェクトであり、MyApp のデストラクタで破棄されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> cannot be cast to <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept> but only to <bpt i="2" x="2">&lt;c2&gt;</bpt>const<ept i="2">&lt;/c2&gt;</ept> <bpt i="3" x="3">&lt;c3&gt;</bpt><bpt i="4" x="4">&lt;c4&gt;</bpt>char*<ept i="4">&lt;/c4&gt;</ept>.<ept i="3">&lt;/c3&gt;</ept> Of course, modifying the string via the pointer returned by this method has never been possible but unfortunately it was occasionally useful to use a <bpt i="5" x="5">&lt;c5&gt;</bpt>const_cast<ept i="5">&lt;/c5&gt;</ept> here to pass the value to const-incorrect functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034344Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> の戻り値は <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept> にはキャストできず、<bpt i="2" x="2">&lt;c2&gt;</bpt>const<ept i="2">&lt;/c2&gt;</ept> <bpt i="3" x="3">&lt;c3&gt;</bpt><bpt i="4" x="4">&lt;c4&gt;</bpt>char*<ept i="4">&lt;/c4&gt;</ept><ept i="3">&lt;/c3&gt;</ept> にのみキャスト可能です。もちろん、この関数の戻り値のポインタを通して文字列を変更することはできませんが、残念なことに、正しく const を受け取らない関数へ値を渡すために <bpt i="5" x="5">&lt;c5&gt;</bpt>const_cast<ept i="5">&lt;/c5&gt;</ept> を使用するときに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The right functions for debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091143Z">
        <seg>デバッグ出力に適切な関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same applies to <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::c_str()<ept i="2">&lt;/a2&gt;</ept> if its result is used as a narrow string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161603Z">
        <seg>戻り値をナロー文字列として扱う場合には、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::c_str()<ept i="2">&lt;/a2&gt;</ept> についても同じことが言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012430Z">
        <seg>EVT_CUSTOM と同じですが、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotifyEvent<ept i="0">&lt;/a0&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012645Z">
        <seg>EVT_CUSTOM と同じですが、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotifyEvent<ept i="0">&lt;/a0&gt;</ept> を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a wxCommandEvent argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160549Z">
        <seg>EVT_CUSTOM と同じですが、wxCommandEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a wxNotifyEvent argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162619Z">
        <seg>EVT_CUSTOM と同じですが、wxNotifyEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but responds to a range of window identifiers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160459Z">
        <seg>EVT_CUSTOM と同じですが、ウィンドウ識別子を範囲で指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012442Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotifyEvent<ept i="0">&lt;/a0&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012721Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotifyEvent<ept i="0">&lt;/a0&gt;</ept> を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a wxCommandEvent argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160612Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、wxCommandEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a wxNotifyEvent argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162652Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、wxNotifyEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same is done for converting to and from <bpt i="1" x="1">&lt;c1&gt;</bpt>std::string<ept i="1">&lt;/c1&gt;</ept> and for the return value of c_str().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114717Z">
        <seg>同じことが <bpt i="1" x="1">&lt;c1&gt;</bpt>std::string<ept i="1">&lt;/c1&gt;</ept> との変換と、c_str() の戻り値に対しても行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The search is applied down the entire chain of event handlers (usually the chain has a length of one).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T030156Z">
        <seg>次に、イベントハンドラの連鎖を辿って検索します。(通常、この連鎖の長さは 1 です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second bug is that returning <bpt i="0" x="0">&lt;c0&gt;</bpt>output<ept i="0">&lt;/c0&gt;</ept> doesn't work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114206Z">
        <seg>ふたつ目のバグは <bpt i="0" x="0">&lt;c0&gt;</bpt>output<ept i="0">&lt;/c0&gt;</ept> を正しく返却できないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second bug is that returning <bpt i="0" x="0">&lt;i0&gt;</bpt>output<ept i="0">&lt;/i0&gt;</ept> doesn't work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T070426Z">
        <seg>ふたつ目のバグは <bpt i="0" x="0">&lt;i0&gt;</bpt>output<ept i="0">&lt;/i0&gt;</ept> を正しく返却できないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second form of this function takes the error code explicitly as the first argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013147Z">
        <seg>この関数の 2 番目の形式では第一引数として明示的にエラーコードを指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second one is "native" wxString version and the last one is wxWidgets 1.xx way.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T092854Z">
        <seg>二番目の関数は wxString "ネイティブ" の関数で、最後の関数は wxWidgets 1.xx の形式です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second one is enough if you're happy with the standard wxLog message formatting (prepending "Error:" or "Warning:", timestamping &amp;c) but just want to send the messages somewhere else.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023616Z">
        <seg>標準的な wxLog メッセージの形式 (先頭に "Error:" か "Warning:" とタイムスタンプが付きます) で充分だが、メッセージを他の場所へ送りたい場合は 2 番目の関数を実装するだけで充分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second one is the "native" <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> version and the last one is the wxWidgets 1.xx way.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T112747Z">
        <seg>二番目の関数は <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> "ネイティブ" の関数で、最後の関数は wxWidgets 1.xx の形式です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second type of validation is performed when the dialog is about to be dismissed, so if the default string contained invalid characters already, a dialog box is shown giving the error, and the dialog is not dismissed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T154654Z">
        <seg>ふたつ目の検証はダイアログが閉じられるときに行われます。そのため、デフォルト文字列がすでに不正な文字を含んでいる場合、エラーメッセージが表示され、ダイアログボックスが閉じられることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The server then responds and either vetoes the connection or allows it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T021845Z">
        <seg>そして、サーバが応答し、接続を拒否または許可します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The short answer is that they're all very good generic mechanisms, but are not really adapted for wxWidgets, while the log classes are.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013853Z">
        <seg>簡単に答えれば、それらの関数やストリームは確かに優れた汎用的な仕組みを持っていますが、本当に wxWidgets に適しているとは言えないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The simplest of them is <bpt i="2" x="2">&lt;b2&gt;</bpt>UTF-32<ept i="2">&lt;/b2&gt;</ept> where each code unit is composed by 32 bits (4 bytes) and each code point is always represented by a single code unit (fixed length encoding).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031955Z">
        <seg>もっとも単純なものは <bpt i="2" x="2">&lt;b2&gt;</bpt>UTF-32<ept i="2">&lt;/b2&gt;</ept> です。これは各コード単位が 32 ビット (4 バイト) から成り、各コードポイントは常にひとつのコード単位で表現される固定長エンコーディングです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The simplest solution is to cast the enum value to int, e.g.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152920Z">
        <seg>もっとも簡単な解決策は enum 値を int へキャストすることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The simplest way to ensure that this doesn't happen is to avoid conversions to <bpt i="0" x="0">&lt;c0&gt;</bpt>char*<ept i="0">&lt;/c0&gt;</ept> completely by using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> throughout your program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T140833Z">
        <seg>これが起きないようにする一番単純な方法は、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> を使った <bpt i="0" x="0">&lt;c0&gt;</bpt>char*<ept i="0">&lt;/c0&gt;</ept> への変換を避けることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sizer of the border also must be made known, and it is the third parameter in the Add() method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T111045Z">
        <seg>ボーダーの太さも伝える必要があり、Add() 関数の第三引数に指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The solution is to destroy HelpCtrl in <bpt i="1" x="1">&lt;e1&gt;</bpt>OnExit:<ept i="1">&lt;/e1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124552Z">
        <seg>この解決策は <bpt i="1" x="1">&lt;e1&gt;</bpt>OnExit<ept i="1">&lt;/e1&gt;</ept> で HelpCtrl を削除することです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The solution is to destroy HelpCtrl in <bpt i="1" x="1">&lt;i1&gt;</bpt>OnExit<ept i="1">&lt;/i1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162750Z">
        <seg>この解決策は <bpt i="1" x="1">&lt;i1&gt;</bpt>OnExit<ept i="1">&lt;/i1&gt;</ept> で HelpCtrl を削除することです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The solution is to use <bpt i="4" x="4">&lt;a4&gt;</bpt>c_str()<ept i="4">&lt;/a4&gt;</ept>: just replace this line with</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T055044Z">
        <seg>解決方法は <bpt i="4" x="4">&lt;a4&gt;</bpt>c_str()<ept i="4">&lt;/a4&gt;</ept> を使用することです: この行を単純に次のように置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The solution is to use <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::c_str()<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114132Z">
        <seg>この解決方法は <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::c_str()<ept i="4">&lt;/a4&gt;</ept> を使用することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The solution to this problem is also easy, just make the function return <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> instead of a C string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114301Z">
        <seg>この問題の解決方法も簡単で、C 文字列の代わりに <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> を返却するようにするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The solution to this problem is also easy: just make the function return wxString instead of a C string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T071014Z">
        <seg>この問題の解決方法も簡単です: C 文字列の代わりに wxString を返却するようにするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The standard trace masks are given in <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace()<ept i="0">&lt;/a0&gt;</ept> documentation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T133125Z">
        <seg>標準のトレースマスクは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace()<ept i="0">&lt;/a0&gt;</ept> のドキュメントに記載しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The static event tables can only handle events in the object where they are defined so using Bind&lt;&gt;() is more flexible than using the event tables.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T021819Z">
        <seg>静的なイベントテーブルではそれが定義されたオブジェクトのイベントしか処理できないため、柔軟性は Bind&lt;&gt;() の方がイベントテーブルよりも上です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The step 4 of the event propagation algorithm checks for the next handler in the event handler chain.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151027Z">
        <seg>イベント伝播アルゴリズムのステップ 4 では、イベントハンドラの連鎖内における次のイベントハンドラを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The stretch factor described in the last paragraph is used for the main orientation, i.e. when using a horizontal box sizer, the stretch factor determines how much the child can be stretched horizontally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T151910Z">
        <seg>最後の段落で述べたストレッチ係数は主となる方向に対して適用されます。つまり、水平方向のボックスサイザーを使用している場合、ストレッチ係数は子コントロールを水平方向にどれだけ伸長させるかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The symbols are defined in such a way that they can be combined in a 'bit-list' using the C++ <bpt i="0" x="0">&lt;e0&gt;</bpt>bitwise-or<ept i="0">&lt;/e0&gt;</ept> operator.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153936Z">
        <seg>シンボルは C++ の <bpt i="0" x="0">&lt;e0&gt;</bpt>ビット和<ept i="0">&lt;/e0&gt;</ept> 演算子で 'ビットリスト' として連結できるような形で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The symbols are defined in such a way that they can be combined in a 'bit-list' using the C++ <bpt i="0" x="0">&lt;i0&gt;</bpt>bitwise-or<ept i="0">&lt;/i0&gt;</ept> operator.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153520Z">
        <seg>シンボルは C++ の <bpt i="0" x="0">&lt;i0&gt;</bpt>ビット和<ept i="0">&lt;/i0&gt;</ept> 演算子で 'ビットリスト' として連結できるような形で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The thickness of this border must be set explicitly, typically 5 points.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142431Z">
        <seg>ボーダーの太さは必ず明示的に指定する必要があり、デフォルトでは 5 ポイントです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The thread API in wxWidgets resembles to POSIX1.c threads API (a.k.a. pthreads), although several functions have different names and some features inspired by Win32 thread API are there as well.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T143247Z">
        <seg>いくつかの関数の名前が異なりますし、Win32 スレッド API にインスピレーションを受けた機能もありますが、wxWidgets のスレッド API は (pthread としても知られる) POSIX1.c のスレッド API によく似ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The thread sample shows that it <bpt i="0" x="0">&lt;i0&gt;</bpt>is<ept i="0">&lt;/i0&gt;</ept> possible for many different threads to call GUI functions at once (all the threads created in the sample access GUI), but it is a very poor design choice for anything except an example.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T144707Z">
        <seg>スレッドのサンプルは GUI 関数を同時に異なるスレッドから呼び出すことが <bpt i="0" x="0">&lt;i0&gt;</bpt>可能<ept i="0">&lt;/i0&gt;</ept> なことを示していますが (サンプル中のすべてのスレッドから GUI にアクセスしています)、サンプル以外のデザインの選択肢はほとんどありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The type of unique identifiers (ID) used for wxWindow-derived classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142003Z">
        <seg>wxWindow を継承したクラスで使用される一意の識別子 (ID) の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The usage of the <bpt i="0" x="0">&lt;c0&gt;</bpt>std::string<ept i="0">&lt;/c0&gt;</ept> compatible functions is strongly advised!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T130655Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>std::string<ept i="0">&lt;/c0&gt;</ept> 互換の関数を使用することを強く推奨します! </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The usage of these functions should be fairly straightforward, however it may be asked why not use the other logging facilities, such as C standard stdio functions or C++ streams.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013341Z">
        <seg>これらの関数の用途はかなり明確ですが、なぜ C の標準入出力関数や C++ のストリームといった他のロギング機能を使用しないのか疑問に思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The usual, short, name of the switch or the option.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T144018Z">
        <seg>スイッチやオプションのよくある、短い名前。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The validation and filtering of input is accomplished in two ways.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T144749Z">
        <seg>入力の検証とフィルタリングは 2 通りの方法で行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value must be in form <bpt i="0" x="0">&lt;i0&gt;</bpt>width<ept i="0">&lt;/i0&gt;</ept>x<bpt i="1" x="1">&lt;i1&gt;</bpt>height<ept i="1">&lt;/i1&gt;</ept>-<bpt i="2" x="2">&lt;i2&gt;</bpt>depth<ept i="2">&lt;/i2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155512Z">
        <seg>この値は <bpt i="0" x="0">&lt;i0&gt;</bpt>幅<ept i="0">&lt;/i0&gt;</ept>x<bpt i="1" x="1">&lt;i1&gt;</bpt>高さ<ept i="1">&lt;/i1&gt;</ept>-<bpt i="2" x="2">&lt;i2&gt;</bpt>色深度<ept i="2">&lt;/i2&gt;</ept> の形式で指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The verbose messages are the trace messages which are not disabled in the release mode and are generated by <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogVerbose()<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132141Z">
        <seg>詳細メッセージとはリリースモードでも無効化されないトレースメッセージのことで、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogVerbose()<ept i="1">&lt;/a1&gt;</ept> によって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The very best solution in precisely this case would be to use <bpt i="0" x="0">&lt;a0&gt;</bpt>Alloc()<ept i="0">&lt;/a0&gt;</ept> function to preallocate, for example, len bytes from the beginning - this will lead to exactly one memory allocation being performed (because the result is at most as long as the original string).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T081401Z">
        <seg>この例での最適な解決方法は <bpt i="0" x="0">&lt;a0&gt;</bpt>Alloc()<ept i="0">&lt;/a0&gt;</ept> 関数を用いて、最初に例えば len バイトほど割り当てておくことです。これにより、メモリの割り当てが確実に 1 回だけ行われます。(なぜなら、変換結果の文字列の長さは最大でも元の文字列と同じだからです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The very best solution in precisely this case would be to use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::Alloc()<ept i="0">&lt;/a0&gt;</ept> function to preallocate, for example, len bytes from the beginning - this will lead to exactly one memory allocation being performed (because the result is at most as long as the original string).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121318Z">
        <seg>この例での最適な解決方法は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::Alloc()<ept i="0">&lt;/a0&gt;</ept> 関数を用いて、最初に例えば len バイトほど割り当てておくことです。これにより、メモリの割り当てが確実に 1 回だけ行われます。(なぜなら、変換結果の文字列の長さは最大でも元の文字列と同じだからです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The virtual size of a widget may be larger than its actual size and in this case scrollbars will appear to the let the user 'explore' the full contents of the widget.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T153845Z">
        <seg>ウィジェットの仮想サイズは実際のサイズよりおそらく大きく、その場合にはユーザがウィジェットの内容全体を '探索' できるようにスクロールバーが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The width of each column and the height of each row are calculated individually according to the minimal requirements from the respectively biggest child.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153619Z">
        <seg>それぞれの最大の子コントロールの必要とする最小サイズに応じて、各列の幅と各行の高さが個別に計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The word logging here has a broad sense, including all of the program output, not only non-interactive messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003652Z">
        <seg>ここでのロギングという言葉は広い意味を持っており、非対話形式のメッセージに限らず、プログラムの出力すべてを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxApp class represents the application itself when wxUSE_GUI=1.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T144504Z">
        <seg>wxUSE_GUI=1 のとき、wxApp はアプリケーション自身を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxBitmap class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T152908Z">
        <seg>wxBitmap クラスはモノクロとカラーの両方について、プラットフォームに依存するビットマップの概念をカプセル化するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxCSConv class is special because when it is instantiated, you can tell it which character set it should use, which makes it meaningful to keep many instances of them around, each with a different character set (or you can create a wxCSConv instance on the fly).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T142559Z">
        <seg>wxCSConv クラスは特別なクラスです。なぜなら、インスタンス化するときに使用する文字コードを指定することができるためです。このことは異なる文字コードのインスタンスを多数保持する場合に意味があります。(もしくは実行時に wxCSConv のインスタンスを作成することができます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxCloseEvent handler should only call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Destroy<ept i="0">&lt;/a0&gt;</ept> to delete the window, and not use the <bpt i="1" x="1">&lt;b1&gt;</bpt>delete<ept i="1">&lt;/b1&gt;</ept> operator.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T145524Z">
        <seg>wxCloseEvent ハンドラではウィンドウを破棄するときに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Destroy<ept i="0">&lt;/a0&gt;</ept> のみを使用するようにし、<bpt i="1" x="1">&lt;b1&gt;</bpt>delete<ept i="1">&lt;/b1&gt;</ept> 演算子を使用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocChildFrame class provides a default frame for displaying documents on separate windows...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T150631Z">
        <seg>wxDocChildFrame クラスは分割ウィンドウ上に表示されるドキュメントにデフォルトフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocMDIChildFrame class provides a default frame for displaying documents on separate windows...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T150906Z">
        <seg>wxDocMDIChildFrame クラスは分割ウィンドウ上に表示されるドキュメントにデフォルトフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocMDIParentFrame class provides a default top-level frame for applications using the document/...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T150842Z">
        <seg>wxDocMDIParentFrame クラスはドキュメント/ビューフレームワークを使用するアプリケーションにデフォルトのトップレベルフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocManager class is part of the document/view framework supported by wxWidgets, and cooperates with the wxView, wxDocument and wxDocTemplate classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T151046Z">
        <seg>wxDocManager クラスは wxWidgets のサポートしているドキュメント/ビューフレームワークの一部で、wxView、wxDocument、wxDocTemplate と一緒に使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocParentFrame class provides a default top-level frame for applications using the document/vie...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T150658Z">
        <seg>wxDocParentFrame クラスはドキュメント/ビューフレームワークを使用するアプリケーションにデフォルトのトップレベルフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxMBConv classes in wxWidgets enable an Unicode-aware application to easily convert between Unicode and the variety of 8-bit encoding systems still in use.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151023Z">
        <seg>wxMBConv クラスは Unicode を意識したアプリケーションにおいて、依然として使用されている様々な 8 ビットエンコーディングと Unicode との間の変換を簡単に行えるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxScrolled class manages scrolling for its client area, transforming the coordinates according to...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T152926Z">
        <seg>wxScrolled クラスはクライアントエリアのスクロール、スクロールバーの位置に合わせた座標の変換、表示領域にあわせたスクロール位置やつまみのサイズの設定といったことの管理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T034742Z">
        <seg>wxString クラスは wxWidgets 3.0 では完全に書き直されます。そして、この変更が新しいバージョンを wxWidgets 3.0 と呼ぶ主な理由です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxString constructor then converts it back to an 8-bit character set using the passed conversion object, *wxConvCurrent.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T145441Z">
        <seg>そして、wxString のコンストラクタは引数に指定された変換オブジェクト、つまり *wxConvCurrent を使用して 8 ビット文字コードへ文字列を変換し直します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxTextFile is a simple class which allows to work with text files on line by line basis...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072021Z">
        <seg>wxTextFile はテキストファイルを行単位で扱うためのシンプルなクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxThreadHelper class is a mix-in class that manages a single background thread, either detached or joinable (see wxThread for the differences).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150516Z">
        <seg>wxThreadHelper クラスは分離済み、もしくは合流可能なひとつのバックグラウンドスレッドの管理を行なうミックスインクラスです。(wxThread を参照して違いを確認してください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxWidgets approach to i18n closely follows the GNU gettext package.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043157Z">
        <seg>wxWidgets の採用している国際化の方法は GNU gettext パッケージの方式に従っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxWidgets library provides a mechanism that helps you avoid distributing many identical, only differently encoded, packages with your application (e.g. help files and menu items in iso8859-13 and windows-1257).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T133619Z">
        <seg>wxWidgets ライブラリは (エンコーディングだけが異なる) 多くの同一なパッケージを配布しなくてもすむ仕組みを提供しています。(例えば iso8859-13 と windows-1257 を使用したヘルプファイルやメニュー項目などです) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxWidgets stream classes also provide some functionality not available in the standard library such as support for several compression formats and possibility to work with sockets or text controls (for output only in the latter case).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T134239Z">
        <seg>また、wxWidgets のストリームクラスは標準ライブラリでは利用できない機能をいくつか提供しており、これにはいくつかの圧縮形式への対応や、ソケットやテキストコントロールの利用 (後者は出力のみです) が含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Then what do we do when a column sizer changes its width?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T131441Z">
        <seg>では、垂直方向のサイザーの幅が変更された場合はどうすれば良いでしょうか? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Then you could use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::SetComponentLevel()<ept i="1">&lt;/a1&gt;</ept> in the following ways:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T141916Z">
        <seg>そして、以下のように <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::SetComponentLevel()<ept i="1">&lt;/a1&gt;</ept> を使用します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are also events which don't directly correspond to the user actions, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTimerEvent<ept i="2">&lt;/a2&gt;</ept> or <bpt i="3" x="3">&lt;a3&gt;</bpt>wxSocketEvent<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T155557Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxTimerEvent<ept i="2">&lt;/a2&gt;</ept> や <bpt i="3" x="3">&lt;a3&gt;</bpt>wxSocketEvent<ept i="3">&lt;/a3&gt;</ept> など、ユーザの操作に直接対応しないイベントも存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are currently five different kinds of sizers available in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124220Z">
        <seg>今のところ、wxWidgets では 5 種類のサイザーが利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are groups of entries and the entries themselves.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T154146Z">
        <seg>コンフィグにはエントリとエントリのグループが存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are several advantages:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T045422Z">
        <seg>これにはいくつかの利点があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are several methods which may be overridden in the derived class to customize log messages handling: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::DoLogRecord()<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="1">&lt;/a1&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::DoLogText()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T122530Z">
        <seg>ログメッセージの処理方法をカスタマイズするためには継承クラスでいくつかの関数をオーバーライドします: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::DoLogRecord()<ept i="0">&lt;/a0&gt;</ept>、 <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::DoLogText()<ept i="2">&lt;/a2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are some predefined classes deriving from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> and which might be helpful to see how you can create a new log target class and, of course, may also be used without any change.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112404Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> を継承したクラスがいくつか事前に定義されており、新しいログターゲットクラスを作成する際の参考になると思います。もちろん、そのまま使用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are some predefined classes deriving from wxLog and which might be helpful to see how you can create a new log target class and, of course, may also be used without any change.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023947Z">
        <seg>wxLog を継承したクラスがいくつか事前に定義されており、新しいログターゲットクラスを作成する際の参考になると思います。もちろん、そのまま使用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are two implementations of this DDE-like protocol: one using real DDE running on Windows only, and another using TCP/IP (sockets) that runs on most platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T145417Z">
        <seg>このDDE 風プロトコルには 2 種類の実装があります: ひとつは実際の DDE を使用する方法で、WIndows のみで実行できます。もうひとつは TCP/IP (ソケット) を使用する方法で、ほとんどのプラットフォームで実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are two kinds of message catalogs: source catalogs which are text files with extension .po and binary catalogs which are created from the source ones with <bpt i="0" x="0">&lt;e0&gt;</bpt>msgfmt<ept i="0">&lt;/e0&gt;</ept> program (part of gettext package) and have the extension .mo.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040033Z">
        <seg>メッセージカタログには次の 2 種類があります: 拡張子が .po でテキスト形式のソースカタログと、ソースカタログから  <bpt i="0" x="0">&lt;e0&gt;</bpt>msgfmt<ept i="0">&lt;/e0&gt;</ept> プログラム (gettext パッケージの一部です) を使って生成する、拡張子が .mo のバイナリカタログです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are two kinds of message catalogs: source catalogs which are text files with extension .po and binary catalogs which are created from the source ones with <bpt i="0" x="0">&lt;i0&gt;</bpt>msgfmt<ept i="0">&lt;/i0&gt;</ept> program (part of gettext package) and have the extension .mo.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T235340Z">
        <seg>メッセージカタログには次の 2 種類があります: 拡張子が .po でテキスト形式のソースカタログと、ソースカタログから  <bpt i="0" x="0">&lt;i0&gt;</bpt>msgfmt<ept i="0">&lt;/i0&gt;</ept> プログラム (gettext パッケージの一部です) を使って生成する、拡張子が .mo のバイナリカタログです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are two nasty bugs in these three lines.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T054033Z">
        <seg>この 3 行の中にふたつの分かりにくいバグが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are two principal ways to handle events in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T235318Z">
        <seg>wxWIdgets でイベントを処理する方法として、主に 2 種類の方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023959Z">
        <seg>以下にその一覧を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is a special virtual method in the C++ window classes called <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::DoGetBestSize()<ept i="1">&lt;/a1&gt;</ept> that a class can override if it wants to calculate its own best size based on its content, however notice that usually it is more convenient to override DoGetBestClientSize(), see below.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T145258Z">
        <seg>C++ のウィンドウクラスには <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::DoGetBestSize()<ept i="1">&lt;/a1&gt;</ept> と呼ばれる特別な仮想関数があり、内容物に応じて独自の最適サイズを計算したい場合にはこの関数をオーバーライドすることができます。ただし、通常は DoGetBestClientSize() をオーバーライドした方が便利です。下記を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is a special virtual method in the C++ window classes called <bpt i="3" x="3">&lt;t3&gt;</bpt>DoGetBestSize()<ept i="3">&lt;/t3&gt;</ept> that a class needs to override if it wants to calculate its own best size based on its content.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T155408Z">
        <seg>C++ のウィンドウクラスには <bpt i="3" x="3">&lt;t3&gt;</bpt>DoGetBestSize()<ept i="3">&lt;/t3&gt;</ept> と呼ばれる特別な仮想関数があり、内容物に基づいて独自の最適サイズを計算したい場合にはこの関数をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is a static list of handlers which <bpt i="2" x="2">&lt;a2&gt;</bpt>wxBitmap<ept i="2">&lt;/a2&gt;</ept> examines when a file load/save operation is requested.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155132Z">
        <seg>これらのハンドラの静的な一覧が存在し、ファイルの読み書きが要求された時に <bpt i="2" x="2">&lt;a2&gt;</bpt>wxBitmap<ept i="2">&lt;/a2&gt;</ept> がこの一覧を調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is a static list of handlers which wxBitmap examines when a file load/save operation is requested.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142757Z">
        <seg>これらのハンドラの静的な一覧が存在し、ファイルの読み書きが要求された時に wxBitmap がこの一覧を調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is also a corresponding <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBITMAP()<ept i="0">&lt;/a0&gt;</ept> macro which allows to create the bitmaps in much the same way as <bpt i="1" x="1">&lt;a1&gt;</bpt>wxICON()<ept i="1">&lt;/a1&gt;</ept> creates icons.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154626Z">
        <seg>これと対応するマクロに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBITMAP()<ept i="0">&lt;/a0&gt;</ept> マクロがあり、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxICON()<ept i="1">&lt;/a1&gt;</ept> がアイコンを作成するのと同じ方法でビットマップを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is also a corresponding <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBITMAP<ept i="0">&lt;/a0&gt;</ept> macro which allows to create the bitmaps in much the same way as <bpt i="1" x="1">&lt;a1&gt;</bpt>wxICON<ept i="1">&lt;/a1&gt;</ept> creates icons.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T140448Z">
        <seg>これと対応するマクロに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBITMAP<ept i="0">&lt;/a0&gt;</ept> マクロがあり、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxICON<ept i="1">&lt;/a1&gt;</ept> がアイコンを作成するのと同じ方法でビットマップを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is another class which might be useful when working with <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept>: <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStringTokenizer<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120914Z">
        <seg>他にも <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> と一緒に使用すると便利なクラスがあります: それが <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStringTokenizer<ept i="1">&lt;/a1&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is another class which might be useful when working with wxString: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStringTokenizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T073805Z">
        <seg>他にも wxString と一緒に使用すると便利なクラスがあります: それが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStringTokenizer<ept i="0">&lt;/a0&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is currently no way for the drop target to change this return code.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T162757Z">
        <seg>今のところ、ドロップ先でこの戻り値を変更することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is however an important difference between the two mechanisms when you want to invoke the default behaviour, as implemented by the base class, from a derived class handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T122755Z">
        <seg>しかし、継承クラスから基底クラスで実装されたデフォルトの振る舞いを呼び出すときに、このふたつの仕組みの間には重要な違いがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is no need for a separate type for strings though, because the standard <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> supports Unicode, i.e. it stores either ANSI or Unicode strings depending on the compile mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151816Z">
        <seg>だからといって、文字列に別々の型を使用する必要はありません。なぜなら、標準の <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> が Unicode に対応している (コンパイルモードに応じて ANSI 文字列か Unicode 文字列を格納する) ためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There should be a copy constructor, and a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::Clone<ept i="0">&lt;/a0&gt;</ept> function which returns a copy of the validator object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T144637Z">
        <seg>コピーコンストラクタと、バリデータオブジェクトのコピーを返却する <bpt i="0" x="0">&lt;a0&gt;</bpt>wxValidator::Clone<ept i="0">&lt;/a0&gt;</ept> 関数を用意する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Therefore, wxStreams have been added to wxWidgets so that applications can reliably compile and run on all supported platforms without dependence on a particular release of libg++.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T135111Z">
        <seg>そのため、wxStreams が wxWidgets に追加されました。これにより、libg++ の特定のバージョンに依存することなく、対応するすべてのプラットフォームで確実にアプリケーションをコンパイルし、実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These are methods of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150405Z">
        <seg>これらは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These are methods of wxConnection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032425Z">
        <seg>これらは wxConnection の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These are the ways that data can be transferred from one application to another.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032347Z">
        <seg>他のアプリケーションへデータを転送するにはいくつかの方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These charsets usually differ in so many characters that it is impossible to use the same texts under all platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T121522Z">
        <seg>通常、これらの文字コードは多くの文字で異なっているため、すべてのプラットフォームで同じテキストを使用することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These classes hopefully make writing MT programs easier and they also provide some extra error checking (compared to the native - be it Win32 or Posix - thread API), however it is still a non-trivial undertaking especially for large projects.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T233149Z">
        <seg>これらのクラスによって、おそらくマルチスレッドプログラムの作成がより簡単になる上に、(ネイティブ (Win32 または Posix) スレッド API と比較して) いくつかの追加エラーチェックを行なってくれます。ただし、依然としてこれは簡単な仕事ではありませんし、巨大プロジェクトでは特にそうだと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These classes will hopefully make writing MT programs easier and they also provide some extra error checking (compared to the native (be it Win32 or Posix) thread API), however it is still a non-trivial undertaking especially for large projects.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T145725Z">
        <seg>これらのクラスによって、おそらくマルチスレッドプログラムの作成がより簡単になる上に、(ネイティブ (Win32 または Posix) スレッド API と比較して) いくつかの追加エラーチェックを行なってくれます。ただし、依然としてこれは簡単な仕事ではありませんし、巨大プロジェクトでは特にそうだと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These events can be triggered by using the input devices (such as keyboard, mouse, joystick) directly or, more commonly, by a standard control which synthesizes such input events into higher level events: for example, a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxButton<ept i="0">&lt;/a0&gt;</ept> can generate a click event when the user presses the left mouse button on it and then releases it without pressing <bpt i="1" x="1">&lt;c1&gt;</bpt>Esc<ept i="1">&lt;/c1&gt;</ept> in the meanwhile.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T155458Z">
        <seg>これらのイベントは (キーボード、マウス、ジョイスティックなどの) 入力装置を利用して直接発生させるか、より一般的には、それらの入力イベントをより高レベルのイベントへ合成する標準コントロールを利用して発生させることができます: 例えば、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxButton<ept i="0">&lt;/a0&gt;</ept> はコントロール上でユーザが左マウスボタンを押下し、 (<bpt i="1" x="1">&lt;c1&gt;</bpt>Esc<ept i="1">&lt;/c1&gt;</ept> を押下することなく) 離したときにクリックイベントを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These examples all assume that you are using a Unicode build of wxWidgets, although they will still compile in a non-Unicode build (they just won't convert anything).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T142945Z">
        <seg>これらのサンプルはどれも wxWidgets の Unicode ビルドを使用していると仮定していますが、非 Unicode ビルドでもコンパイルすることは可能です。(その場合、何も変換されないだけです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These flags can be used in combination with the alignment flags above as the second parameter of the Add() method using the binary or operator |.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T110536Z">
        <seg>これらのフラグは論理和演算子 | を使用して上記のアライメントフラグと組み合わせることができ、Add() 関数の第二引数に指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These functions are really implemented by the "IO" classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140134Z">
        <seg>これらのクラスは実際には "IO" クラスで実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These functions have a thread-safe implementation so that they can be used as they are for sending events from one thread to another.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T145136Z">
        <seg>これらの関数はスレッドセーフに実装されているため、あるスレッドから他のスレッドへイベントを送信するのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These handlers will capture events before the control itself does (see <bpt i="0" x="0">&lt;a0&gt;</bpt>How Events are Processed<ept i="0">&lt;/a0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T155039Z">
        <seg>これらのハンドラはコントロールでイベント処理が行われる前にイベントを捕まえます。(<bpt i="0" x="0">&lt;a0&gt;</bpt>イベント処理の仕組み<ept i="0">&lt;/a0&gt;</ept> を参照) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These handlers will capture events before the control itself does.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T144925Z">
        <seg>これらのハンドラはコントロールでイベント処理が行われる前にイベントを捕まえます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These macros are used to handle scroll events from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScrollBar<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSlider<ept i="1">&lt;/a1&gt;</ept>,and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSpinButton<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081822Z">
        <seg>これらのマクロは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScrollBar<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSlider<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxSpinButton<ept i="2">&lt;/a2&gt;</ept> から送信されるスクロールイベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These macros handle <bpt i="0" x="0">&lt;a0&gt;</bpt>wxListCtrl<ept i="0">&lt;/a0&gt;</ept> events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081532Z">
        <seg>これらのマクロは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxListCtrl<ept i="0">&lt;/a0&gt;</ept> のイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These macros handle <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl<ept i="0">&lt;/a0&gt;</ept> events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082316Z">
        <seg>これらのマクロは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl<ept i="0">&lt;/a0&gt;</ept> のイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These macros handle special menu events (not menu commands).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081611Z">
        <seg>これらのマクロは特殊なメニューイベント (メニューコマンドではありません) を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These member functions are not virtual functions, but they are all similar in form: they take a single wxEvent-derived argument, and have a void return type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075523Z">
        <seg>これらのメンバ関数は非仮想関数ですが、すべて同じ形式をとります: wxEvent を継承した引数をひとつ取り、戻り値の型は void です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These member functions take an event argument, and the class of event differs according to the type of event and the class of the originating window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081218Z">
        <seg>これらのメンバ関数はイベント引数を取りますが、その引数のクラスはイベントの型と発生元ウィンドウのクラスに応じて異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These pairs are called <bpt i="1" x="1">&lt;e1&gt;</bpt>surrogate<ept i="1">&lt;/e1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T031701Z">
        <seg>これらのコード単位の組のことを <bpt i="1" x="1">&lt;e1&gt;</bpt>サロゲート<ept i="1">&lt;/e1&gt;</ept> と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These sizers will be discussed one by one in the text below.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124535Z">
        <seg>これらのサイザーについて、ひとつずつ説明していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They also appear in a message box by default (but it can be changed, see below).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010006Z">
        <seg>この関数もデフォルトでメッセージボックスを表示します。 (ただし、この振る舞いは変更可能です。以下を参照してください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are also normally shown to the user, but don't interrupt the program work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T134918Z">
        <seg>警告メッセージは普通、ユーザに通知されますが、プログラムの動作を妨げません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are hierarchical in the sense that "foo/bar/baz" component is supposed to be a child of "foo".</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T104515Z">
        <seg>ログコンポーネントは "foo/bar/baz" コンポーネントが "foo" コンポーネントの子として扱われるという意味では階層的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are just simple methods of the class that take as a parameter a reference to an object of a wxEvent-derived class and have no return value (any return information is passed via the argument, which is why it is non-const).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T014246Z">
        <seg>これらのイベントハンドラは単純なメンバ関数であり、wxEvent を継承したクラスのオブジェクトへの参照を引数に取り、戻り値はありません。(情報を返却する場合は引数のオブジェクトを経由して行います。これが引数を const にしていない理由です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are not normally shown to the user because they present little interest, but may be activated, for example, in order to help the user find some program problem.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132503Z">
        <seg>ユーザがこれらのメッセージに関心を示すことがないため、通常はユーザに通知されません。しかし、ユーザがプログラムの問題を見つける際の手助けとして有効化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They can be used to create a <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> from arbitrary binary data without supposing that it is in current locale encoding, and then get it back, again, without any conversion or, rather, undoing the conversion used by <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::From8BitData()<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035228Z">
        <seg>これらの関数は任意のバイナリデータをもとに <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> を作成しますが、その際にバイナリデータが現在のロケールのエンコーディングで符号化されていると仮定しません。そして、なんらかの変換や <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::From8BitData()<ept i="4">&lt;/a4&gt;</ept> で行われた変換の逆変換を行うことなく、元のバイナリデータを取得することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They were especially designed for this usage and, although may probably be used for many other things as well, should be limited to it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T150140Z">
        <seg>これらのクラスはこの用途に特化して設計されており、他のことにも使用されるかもしれませんが、この用途に限定して使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They will go into the status bar of the active or specified (as the first argument) <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> if it has one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T085900Z">
        <seg>これらのメッセージはアクティブまたは第一引数で指定された <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> がステータスバーを持つ場合に、ステータスバーへ出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This abstract class is the base for classes that help wxWidgets perform run-time layout adaptation of...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T153539Z">
        <seg>この抽象クラスは wxWidgets が実行時にダイアログのレイアウト適応を行なうのを支援するクラスの基底です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This additional entry tells the HTML help controller what encoding is used in contents and index tables.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T133426Z">
        <seg>この追加のエントリはコンテンツとインデックステーブルで使用されているエンコーディングを HTML ヘルプコントローラに通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This allows enough code points (see below for the definition) sufficient to encode all of the world languages at once.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T095338Z">
        <seg>これにより、 世界中の言語を一度に表現するのに十分な量のコードポイント (定義は以下を参照) が得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This allows to have at least 65536 characters (what is called the BMP, or basic multilingual plane) and possible 2^32 of them instead of the usual 256 and is sufficient to encode all of the world languages at once.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151004Z">
        <seg>これにより、 通常の 256 文字の代わりに少なくとも 65536 文字 (これはBMP、もしくは基本多言語面と呼ばれます) 、あるいは 2^32 文字を表現することが可能であり、これは世界中の言語を一度に表現するのに十分な量です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This also has the advantage that you won't have to define a new <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::Clone()<ept i="1">&lt;/a1&gt;</ept> method for posting events between threads etc.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155223Z">
        <seg>この方法には、スレッド間でイベントを送信するための新しい <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::Clone()<ept i="1">&lt;/a1&gt;</ept> 関数を定義する必要がないといった利点もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This article describes how to write applications that communicate with the user in a language other than English.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T134359Z">
        <seg>この概要では英語以外の言語を用いてユーザとやり取りするアプリケーションの作成方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This behaviour is controlled by <bpt i="2" x="2">&lt;e2&gt;</bpt>flags<ept i="2">&lt;/e2&gt;</ept> (the second parameter of the Add() function): Zero or no flag indicates that the window will preserve it is original size, wxGROW flag (same as wxEXPAND) forces the window to grow with the sizer, and wxSHAPED flag tells the window to change it is size proportionally, preserving original aspect ratio.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141854Z">
        <seg>この振る舞いは <bpt i="2" x="2">&lt;e2&gt;</bpt>フラグ<ept i="2">&lt;/e2&gt;</ept> (Add() 関数の第二引数です) によって制御されます: 0 またはフラグを何も指定しない場合、ウィンドウは元の大きさを維持します。wxGROW フラグ (wxEXPAND と同じです) はサイザーにあわせてウィンドウを強制的にリサイズします。wxSHAPED フラグは元の縦横比を維持しつつ、ウィンドウのサイズを変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This behaviour is controlled by <bpt i="2" x="2">&lt;i2&gt;</bpt>flags<ept i="2">&lt;/i2&gt;</ept> (the second parameter of the Add() function): Zero or no flag indicates that the window will preserve it is original size, wxGROW flag (same as wxEXPAND) forces the window to grow with the sizer, and wxSHAPED flag tells the window to change it is size proportionally, preserving original aspect ratio.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T161543Z">
        <seg>この振る舞いは <bpt i="2" x="2">&lt;i2&gt;</bpt>フラグ<ept i="2">&lt;/i2&gt;</ept> (Add() 関数の第二引数です) によって制御されます: 0 またはフラグを何も指定しない場合、ウィンドウは元の大きさを維持します。wxGROW フラグ (wxEXPAND と同じです) はサイザーにあわせてウィンドウを強制的にリサイズします。wxSHAPED フラグは元の縦横比を維持しつつ、ウィンドウのサイズを変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This border can either be all around, or at any combination of sides such as only above and below the control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142325Z">
        <seg>ボーダーは全周、またはコントロールの上と下のみといった任意の組み合わせで指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can avoid the need to test that the object was properly initialized in the event handlers themselves.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040718Z">
        <seg>こうすることで、イベントハンドラ内でオブジェクトが正常に初期化されているか確認する必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can be achieved quite simply by using the means provided by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150406Z">
        <seg>これは wxWidgets の提供する方法を使うことで極めて単純に実現することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can be done either using new <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::char_str()<ept i="6">&lt;/a6&gt;</ept> (and matching wchar_str()) method or by writing a double cast:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034428Z">
        <seg>これは新しい <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::char_str()<ept i="6">&lt;/a6&gt;</ept> (や、これに対応する wchar_str()) 関数か、2 重キャストを用いることで実現できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can be seen as a top-hierarchy column with the text at the top and buttons at the bottom and a low-hierarchy row with an OK button to the left and a Cancel button to the right.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T163027Z">
        <seg>これは上部にテキストフィールドと下部にボタンを持つ上位階層の列と、左に OK ボタンと右にキャンセルボタンを持つ下位階層の行からなるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can be very convenient and is absolutely necessary for backwards compatibility with the existing code using wxWidgets however it is a rather dangerous operation as it can easily give unexpected results if the string contents isn't convertible to the current locale.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T135014Z">
        <seg>この変換機能は非常に便利であり、wxWidgets を使った既存コードとの後方互換性のためには絶対に欠かすことができません。しかし、これは非常に危険な操作で、文字列の内容が現在のロケールに変換できない場合は予期しない結果を簡単に引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can even be useful if you need to do conversion in a non-Unicode build of wxWidgets; converting a string from UTF-8 to the current encoding should be possible by doing this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T145005Z">
        <seg>これは非 Unicode ビルド版の wxWidgets で変換を行なう必要がある場合に役立ちます; UTF-8 から現在のエンコーディングへの変換はおそらくこのように行われます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This chain can be formed using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetNextHandler()<ept i="0">&lt;/a0&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151305Z">
        <seg>この連鎖は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetNextHandler()<ept i="0">&lt;/a0&gt;</ept> を使用して形づくられます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class adds some simple functionality to wxEvent to facilitate inter-thread communication.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T113629Z">
        <seg>このクラスはスレッド間通信を容易にするための単純な機能を wxEvent へ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class allows to use all methods taking a wxInputStream reference to read in-memory data...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141013Z">
        <seg>このクラスを使用することで、メモリ内のデータを読み込むために wxInputStream のすべての関数を使用できます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class allows to use all methods taking a wxOutputStream reference to write to in-memory data...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141045Z">
        <seg>このクラスを使用することで、メモリ内へデータを書き込むために wxOutputStream のすべての関数を使用できます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class allows you to temporarily suspend logging.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T125533Z">
        <seg>このクラスを用いて一時的にロギングを中断することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class can be used to (temporarily) redirect all output sent to a C++ ostream object to a wxTextC...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130927Z">
        <seg>このクラスは (一時的に) C++ ostream オブジェクトへ送信されたすべての出力を代わりに wxTextCtrl へリダイレクトするのに使用できます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class can be used to redirect the log messages to a C file stream (not to be confused with C++ s...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T124706Z">
        <seg>このクラスはログメッセージを C のファイルストリーム (C++ のストリームと混同しないでください) へリダイレクトするのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class can be used to redirect the log messages to a C++ stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T124726Z">
        <seg>このクラスはログメッセージを C++ のストリームへリダイレクトするのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class converts between any character set supported by the system and Unicode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143500Z">
        <seg>このクラスはシステムでサポートされている任意の文字コードと Unicode とを相互変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class converts between the UTF-7 encoding and Unicode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152205Z">
        <seg>このクラスは UTF-7 エンコーディングと Unicode とを変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class converts between the UTF-8 encoding and Unicode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152221Z">
        <seg>このクラスは UTF-8 エンコーディングと Unicode とを変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class creates button layouts which conform to the standard button spacing and ordering defined b...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T151629Z">
        <seg>このクラスはプラットフォームやツールキットのユーザガイドラインで定義されている標準ボタンの余白と順番に従ったレイアウトを作成します。(ただし、そのようなガイドラインが存在する場合に限ります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class encapsulates a platform-independent image.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154843Z">
        <seg>このクラスはプラットフォーム非依存の画像をカプセル化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour or co...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T152952Z">
        <seg>このクラスはモノクロとカラーの両方について、プラットフォームに依存するビットマップの概念をカプセル化するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class greatly eases the burden of passing flags to a <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSizer<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145330Z">
        <seg>このクラスは <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSizer<ept i="2">&lt;/a2&gt;</ept> へフラグを渡す際の負担を大きく軽減してくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class greatly eases the burden of passing flags to a wxSizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113418Z">
        <seg>このクラスは wxSizer へフラグを渡す際の負担を大きく軽減してくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class has all the standard operations you can expect to find in a string class: dynamic memory management (string extends to accommodate new characters), construction from other strings, C strings and characters, assignment operators, access to individual characters, string concatenation and comparison, substring extraction, case conversion, trimming and padding (with spaces), searching and replacing and both C-like <bpt i="0" x="0">&lt;a0&gt;</bpt>Printf()<ept i="0">&lt;/a0&gt;</ept> and stream-like insertion functions as well as much more - see <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> for a list of all functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T092454Z">
        <seg>このクラスは文字列クラスに含まれていると考えるであろうすべての標準的な文字列操作機能を持っています: 動的なメモリ管理 (新しい文字にあわせて文字列を拡張します)、他の文字列や C 文字列からの構築、代入演算子、各文字へのアクセス、文字列の結合と比較、部分文字列の抽出、大文字小文字の変換、トリムと (スペースによる) パディング、検索と置換、C 言語風の <bpt i="0" x="0">&lt;a0&gt;</bpt>Printf()<ept i="0">&lt;/a0&gt;</ept> やストリーム風の挿入関数などです。すべての関数の一覧は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class has all the standard operations you can expect to find in a string class: dynamic memory management (string extends to accommodate new characters), construction from other strings, compatibility with C strings and wide character C strings, assignment operators, access to individual characters, string concatenation and comparison, substring extraction, case conversion, trimming and padding (with spaces), searching and replacing and both C-like <bpt i="0" x="0">&lt;c0&gt;</bpt>printf<ept i="0">&lt;/c0&gt;</ept> (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::Printf<ept i="1">&lt;/a1&gt;</ept>) and stream-like insertion functions as well as much more - see <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> for a list of all functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030402Z">
        <seg>このクラスは文字列クラスに含まれていると考えるであろうすべての標準的な文字列操作機能を持っています: 動的なメモリ管理 (新しい文字にあわせて文字列を拡張します)、他の文字列や C 文字列からの構築、代入演算子、各文字へのアクセス、文字列の結合と比較、部分文字列の抽出、大文字小文字の変換、トリムと (スペースによる) パディング、検索と置換、C 言語風の <bpt i="0" x="0">&lt;c0&gt;</bpt>printf<ept i="0">&lt;/c0&gt;</ept> (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::Printf<ept i="1">&lt;/a1&gt;</ept> ) やストリーム風の挿入関数などです。すべての関数の一覧は <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class implements an input stream which reads data from a connected socket.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T135758Z">
        <seg>このクラスは入力ストリームを実装しており、接続されたソケットからデータを読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class implements an output stream which writes data from a connected socket.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T135815Z">
        <seg>このクラスは出力ストリームを実装しており、接続されたソケットへデータを書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class is not used by the event handlers by itself, but is a base class for other event classes (...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012636Z">
        <seg>このクラスはイベントハンドラ自身では使用されませんが、(wxBookCtrlEvent などの) 他のイベントクラスの基底クラスです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class is the base class of a hierarchy of classes capable of converting text strings between mul...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T150855Z">
        <seg>このクラスはマルチバイト (SBCS や DBCS) エンコーディングと Unicode との変換を行なうクラスの基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class is the base class of most stream related classes in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130621Z">
        <seg>このクラスは wxWidgets における大半のストリームクラスの基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class is used for idle events, which are generated when the system becomes idle.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T234317Z">
        <seg>このクラスはアイドルイベントに使用されます。アイドルイベントはシステムがアイドルになったときに生成されます。le.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class is used to convert between multibyte encodings and UTF-16 Unicode encoding (also known as ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152227Z">
        <seg>このクラスはマルチバイトエンコーディングと UTF-16 (UCS-2 としても知られています) とを変換するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class is used to convert between multibyte encodings and UTF-32 Unicode encoding (also known as ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152232Z">
        <seg>このクラスはマルチバイトエンコーディングと UTF-32 (UCS-4 としても知られています) とを変換するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class provides a simple way to avoid flicker: when drawing on it, everything is in fact first dr...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T143806Z">
        <seg>このクラスはちらつきを防止するための単純な方法を提供します: 描画時には最初にメモリ上のバッファ (wxBitmap) へすべて描画し、それから関連する wxDC を使用してスクリーン上へ一度だけ、このオブジェクトの破棄時にコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class provides functions that read binary data types in a portable way.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T132544Z">
        <seg>このクラスは移植性のある方法でバイナリデータを読み込む機能を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class provides functions that reads text data using an input stream, allowing you to read text...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T131310Z">
        <seg>このクラスは入力ストリームを利用したテキストデータの読み込み機能を提供しており、テキスト、浮動小数点、整数を読み込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class provides functions that write binary data types in a portable way.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T132553Z">
        <seg>このクラスは移植性のある方法でバイナリデータを書き込む機能を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class provides functions that write text data using an output stream, allowing you to write text...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T132512Z">
        <seg>このクラスは出力ストリームを利用したテキストデータの書き込み機能を提供しており、テキスト、浮動小数点、整数を書き込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class represents a background log window: to be precise, it collects all log messages in the log...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T125427Z">
        <seg>このクラスはバックグラウンドで動作するログウィンドウを表します。正確に言うと、このログウィンドウではログフレーム内のすべてのメッセージを収集するとともに、このクラスオブジェクトの生成時に有効だったログターゲットへ収集したメッセージを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class represents a property sheet dialog: a tabbed dialog for showing settings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T151425Z">
        <seg>このクラスはプロパティシートダイアログ (設定を表示するためのタブ付きダイアログ) を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class represents a single Unicode character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121311Z">
        <seg>このクラスはひとつの Unicode 文字を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class represents a source for a drag and drop operation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T133656Z">
        <seg>このクラスはドラッグ・アンド・ドロップ操作におけるドラッグ元を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class represents a target for a drag and drop operation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T133817Z">
        <seg>このクラスはドラッグ・アンド・ドロップ操作におけるドロップ先を表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class represents data read in from a file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T131013Z">
        <seg>このクラスはファイルからのデータ読み込みを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class represents data written to a file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T131138Z">
        <seg>このクラスはファイルへのデータ書き込みを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This code also compiles fine under a non-Unicode build of wxWidgets, but in that case the converter is ignored.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144314Z">
        <seg>このコードは非 Unicode ビルドでも正常にコンパイルすることができますが、変換自体は行われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This could also be a simple link to the a true syscall (for example read(...), write(...)).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141547Z">
        <seg>また、この実装は単純に本当のシステムコール (read(...)、write(...) など) に関連付けられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This could also be a simple link to the true syscall (for example read(...), write(...)).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141223Z">
        <seg>また、この実装は単純に本当のシステムコール (read(...)、write(...) など) に関連付けられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This could also be done by first making a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> of the original data:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152056Z">
        <seg>これは元データの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> を最初に作成するときにも行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This could also be done by first making a wxString of the original data:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T145708Z">
        <seg>これは元データの wxString を最初に作成するときにも行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This could be nothing in the case of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMemoryInputStream<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMemoryOutputStream<ept i="1">&lt;/a1&gt;</ept> which base themselves on <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamBuffer<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141202Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamBuffer<ept i="2">&lt;/a2&gt;</ept> に基づく <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMemoryInputStream<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxMemoryOutputStream<ept i="1">&lt;/a1&gt;</ept> の場合は何も行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This could be nothing in the case of wxMemoryIn/OutputStream which bases itself on wxStreamBuffer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141417Z">
        <seg>wxStreamBuffer に基づく wxMemoryIn/OutputStream の場合は何も行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This could look like this in your code:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155547Z">
        <seg>以下にコード例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This currently works for wxMSW, wxGTK, wxMac and wxX11.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145031Z">
        <seg>これは今のところ、wxMSW、wxGTK、wxMac、wxX11 で動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This defines the wxWidgets Encapsulated PostScript device context, which can write PostScript files o...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T145433Z">
        <seg>これは wxWidets がカプセル化した PostScript デバイスコンテキストを定義しており、どのプラットフォームにおいても PostScript ファイルを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This demonstrates using the Execute, Request, and Poke commands from the client, together with an Advise loop: selecting an item in the server list box causes that item to be highlighted in the client list box.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033830Z">
        <seg>このサンプルでは Advise ループとともに Execute、Request、Poke コマンドを使用しています: サーバ側のリストボックスを選択すると、選択された項目がクライアント側のリストボックスでハイライトされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This document will attempt to clear the fog a little, and give some simple explanations of things.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T154717Z">
        <seg>このドキュメントはそれらをほんの少しでも明確にするためのものであり、それらの関係性について簡単な説明を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This doesn't work for everything (for example not all device contexts support bitmap drawing) but will work most of the time.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141904Z">
        <seg>これはすべての場合に当てはまるわけではありません (例えば、すべてのデバイスコンテキストがビットマップの描画に対応しているわけではありません) が、大半の場合はうまく行きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This enables the bitmap to be copied to a window or memory device context using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDC::Blit()<ept i="1">&lt;/a1&gt;</ept>, or to be used as a drawing surface.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T153940Z">
        <seg>これにより、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDC::Blit()<ept i="1">&lt;/a1&gt;</ept> を使用してビットマップをウィンドウやメモリデバイスコンテキストにコピーしたり、描画先として使用したりすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This enables the bitmap to be copied to a window or memory device context using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDC::Blit<ept i="1">&lt;/a1&gt;</ept>, or to be used as a drawing surface.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T135222Z">
        <seg>これにより、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDC::Blit<ept i="1">&lt;/a1&gt;</ept> を使用してビットマップをウィンドウやメモリデバイスコンテキストにコピーしたり、描画先として使用したりすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This ensures that in a common case of (possibly several) non-window event handlers pushed on top of a window, the event eventually reaches the window parent.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T032748Z">
        <seg>これにより、ウィンドウ上に (おそらく複数の) 非ウィンドウイベントハンドラが配置されているような一般的な場合において、イベントが最終的に親ウィンドウまで確実に到達するようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about command events, which originate from a variety of simple ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130508T161126Z">
        <seg>このイベントクラスは様々な単純コントロールから送信されるコマンドイベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about key press and release events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130508T161121Z">
        <seg>このイベントクラスはキーの押下イベントや解放イベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about navigation events, generated by navigation keys such as t...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T144908Z">
        <seg>このイベントクラスはナビゲーションイベントに関する情報を含んでおり、タブやページダウンなどのナビゲーションキーから生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about socket events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153816Z">
        <seg>このイベントクラスはソケットイベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about the events generated by the mouse: they include mouse but...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024537Z">
        <seg>このイベントクラスはマウスによって生成されるイベントに関する情報を含んでいます: これにはマウスボタンの押下、解放イベント、およびマウスの移動イベントが含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about window and session close events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152613Z">
        <seg>このイベントクラスはウィンドウとセッションの終了イベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event type ID is stored in a struct of type <bpt i="1" x="1">&lt;b1&gt;</bpt>const wxEventType<ept i="1">&lt;/b1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T150744Z">
        <seg>このイベント ID は <bpt i="1" x="1">&lt;b1&gt;</bpt>const wxEventType<ept i="1">&lt;/b1&gt;</ept> 型の構造体に格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function finds all the validators in the window's children and calls the <bpt i="6" x="6">&lt;a6&gt;</bpt>wxValidator::TransferToWindow<ept i="6">&lt;/a6&gt;</ept> function for each.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T152859Z">
        <seg>この関数は子コントロールのすべてのバリデータを探し、それぞれの <bpt i="6" x="6">&lt;a6&gt;</bpt>TransferToWindow<ept i="6">&lt;/a6&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function finds all the validators in the window's children and calls the TransferToWindow function for each.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145524Z">
        <seg>この関数は子コントロールのすべてのバリデータを探し、それぞれの TransferToWindow を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function simply generates a wxCloseEvent whose handler usually tries to close the window...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T153025Z">
        <seg>この関数は単純に wxCloseEvent を作成します。通常はこのイベントを受け取ったハンドラはウィンドウを閉じようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This further reduces the code size and removes the need for conversions in more cases.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T102257Z">
        <seg>これはコードサイズをさらに削減させるとともに、より多くの場合で変換が不要になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This help controller provides an easy way of displaying HTML help in your application (see HTML Sampl...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T144543Z">
        <seg>このヘルプコントローラはアプリケーションで HTML ヘルプを表示する簡単な方法を提供します。(HTML サンプルの test の例を参照してください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This in turn generates an EVT_CLOSE event: see <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCloseEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T144235Z">
        <seg>そして、これは EVT_CLOSE イベントを生成します: <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCloseEvent<ept i="1">&lt;/a1&gt;</ept> 参照。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This in turn sends an initialisation event to the dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145354Z">
        <seg>そして、これは初期化イベントをダイアログへ送信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This includes any children that are themselves frames or dialogs, so you may wish to close these child frame or dialog windows explicitly from within the parent close handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T142741Z">
        <seg>これは子ウィンドウであればフレームやダイアログも含みます。そのため、親ウィンドウの終了ハンドラで明示的に子フレームや子ダイアログを終了させたいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is <bpt i="0" x="0">&lt;s0&gt;</bpt>true<ept i="0">&lt;/s0&gt;</ept> of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScreenDC<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxClientDC<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPaintDC<ept i="3">&lt;/a3&gt;</ept>, and <bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindowDC<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150723Z">
        <seg>これには <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScreenDC<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxClientDC<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxPaintDC<ept i="3">&lt;/a3&gt;</ept>、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindowDC<ept i="4">&lt;/a4&gt;</ept> が該当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a drop target which accepts files (dragged from File Manager or Explorer).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T133941Z">
        <seg>これは (ファイルマネージャやエクスプローラからドラッグされた) ファイルを受け付けるドロップ先です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a general overview of logging classes provided by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003415Z">
        <seg>これは wxWidgets の提供するロギングクラス全般の概要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a kind of paragraph layout box, used to represent the whole buffer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T014057Z">
        <seg>This is a kind of paragraph layout box, used to represent the whole buffer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a specialization of wxCharTypeBuffer&lt;T&gt; for char type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170025Z">
        <seg>これは char 型による wxCharTypeBuffer&lt;T&gt; の特殊化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a specialization of wxCharTypeBuffer&lt;T&gt; for wchar_t type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170040Z">
        <seg>これは wchar_t 型による wxCharTypeBuffer&lt;T&gt; の特殊化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a subclass of wxBufferedDC which can be used inside of an EVT_PAINT() event handler to achiev...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T144304Z">
        <seg>これは wxBufferedDC のサブクラスで、ダブルバッファリングを行なうために EVT_PAINT() イベントハンドラの内部で使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a type of device context that allows a metafile object to be created (Windows only)...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T145636Z">
        <seg>これはメタファイルオブジェクトを作成するためのデバイスコンテキスト型で (Windows のみ)、通常の wxDC の特徴の大半を備えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is achieved by using the standard C (and C++) way: just put the letter <bpt i="2" x="2">&lt;t2&gt;</bpt>'L'<ept i="2">&lt;/t2&gt;</ept> after any string constant and it becomes a <bpt i="3" x="3">&lt;i3&gt;</bpt>long<ept i="3">&lt;/i3&gt;</ept> constant, i.e. a wide character one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T152240Z">
        <seg>これは標準的な C (および C++) の方法で実現されます: 文字列定数の後ろに <bpt i="2" x="2">&lt;t2&gt;</bpt>'L'<ept i="2">&lt;/t2&gt;</ept> という文字を配置するだけで、 <bpt i="3" x="3">&lt;i3&gt;</bpt>long<ept i="3">&lt;/i3&gt;</ept> 定数、すなわちワイド文字になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is also the approach used by <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035245Z">
        <seg>これは <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> で採用されている方法でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is because Windows 3 expects the contents of a modal dialog to be loaded from a resource file or created on receipt of a dialog initialization message.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130630T011316Z">
        <seg>これは、Windows 3 ではモーダルダイアログの内容はリソースファイルから読み込むか、ダイアログの初期化メッセージを受信したときに作成する必要があるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is because for some window classes, wxWidgets delays actual deletion of the window until all events have been processed, since otherwise there is the danger that events will be sent to a non-existent window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T044436Z">
        <seg>これは、いくつかのウィンドウクラスではすべてのイベントが処理されるまでウィンドウを実際に削除しないためです。このようにしない場合、イベントが存在しないウィンドウに送信される危険性があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is determined by the <bpt i="1" x="1">&lt;e1&gt;</bpt>proportion<ept i="1">&lt;/e1&gt;</ept> parameter when adding a window (or another sizer) to a sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141844Z">
        <seg>これはウィンドウ (または他のサイザー) をサイザーへ追加するときの <bpt i="1" x="1">&lt;e1&gt;</bpt>プロポーション<ept i="1">&lt;/e1&gt;</ept> パラメータによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is determined by the <bpt i="1" x="1">&lt;i1&gt;</bpt>proportion<ept i="1">&lt;/i1&gt;</ept> parameter when adding a window (or another sizer) to a sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T160129Z">
        <seg>これはウィンドウ (または他のサイザー) をサイザーへ追加するときの <bpt i="1" x="1">&lt;i1&gt;</bpt>プロポーション<ept i="1">&lt;/i1&gt;</ept> パラメータによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is done as follows, in <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialogLayoutAdapter::DoLayoutAdaptation<ept i="0">&lt;/a0&gt;</ept> called from within <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::Show<ept i="1">&lt;/a1&gt;</ept> or <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDialog::ShowModal<ept i="2">&lt;/a2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T150637Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::Show<ept i="1">&lt;/a1&gt;</ept> や <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDialog::ShowModal<ept i="2">&lt;/a2&gt;</ept>から呼ばれた <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialogLayoutAdapter::DoLayoutAdaptation<ept i="0">&lt;/a0&gt;</ept> の中では次のように処理が行われます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is done in the document/view framework, for example, to allow event handlers to be defined in the document or view.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T053510Z">
        <seg>これは例えば、ドキュメント/ビューフレームワークがドキュメントやビューでイベントハンドラを定義するために行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is done using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDEFINE_EVENT()<ept i="0">&lt;/a0&gt;</ept> macro.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155015Z">
        <seg>これは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDEFINE_EVENT()<ept i="0">&lt;/a0&gt;</ept> マクロによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is important because validators are passed by reference to window constructors, and must therefore be cloned internally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T144757Z">
        <seg>バリデータはウィンドウのコンストラクタへ参照渡しされるため、内部的に複製しなければならないという点でこれは重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is impossible to do with the event tables because it is not possible to specify these handlers to dispatch the event to, so it necessarily needs to be sent to the same object which generated the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T042511Z">
        <seg>これはイベントテーブルでは実現不可能です。なぜなら、イベントのディスパッチ先としてこれらのハンドラを指定することができないためです。そのため、イベントはそれを生成したオブジェクトに対して送信される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is normally the expected behaviour and means that it is enough to call <bpt i="0" x="0">&lt;a0&gt;</bpt>Close()<ept i="0">&lt;/a0&gt;</ept> in response to the <bpt i="1" x="1">&lt;t1&gt;</bpt>"Exit"<ept i="1">&lt;/t1&gt;</ept> menu command if your program has a single top level window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T123948Z">
        <seg>これは通常期待する振る舞いであり、アプリケーションが単一のトップレベルウィンドウを持つ場合は <bpt i="1" x="1">&lt;t1&gt;</bpt>"Exit"<ept i="1">&lt;/t1&gt;</ept> メニューが選択されたときに <bpt i="0" x="0">&lt;a0&gt;</bpt>Close()<ept i="0">&lt;/a0&gt;</ept> を呼ぶだけで充分なことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is normally the expected behaviour and means that it is enough to call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close()<ept i="0">&lt;/a0&gt;</ept> in response to the "Exit" menu command if your program has a single top level window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124017Z">
        <seg>これは通常期待する振る舞いであり、アプリケーションが単一のトップレベルウィンドウを持つ場合は "Exit" メニューが選択されたときに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close()<ept i="0">&lt;/a0&gt;</ept> を呼ぶだけで充分なことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is not a problem if you simply call these functions but you need to change the signature of the derived class versions if you override them as otherwise they wouldn't be called any more.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T143834Z">
        <seg>関数を単純に呼び出しているのであれば問題になりませんが、これらの関数をオーバーライドしている場合、そのシグネチャの関数はもはや呼び出されなくなるため、継承クラスのシグネチャを変更する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is quite a common situation and not allocating extra memory at all would lead to very bad performance in this case because there would be as many memory (re)allocations as there are consonants in the original string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080656Z">
        <seg>これは非常によくある状況であり、余分なメモリを割り当てない場合、著しい性能劣化を引き起こします。これは元の文字列に含まれる文字数分、メモリの (再) 割り当てが行われるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is supported only by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFlexGridSizer<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141651Z">
        <seg>これは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFlexGridSizer<ept i="1">&lt;/a1&gt;</ept> でのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the base class for implementing bitmap file loading/saving, and bitmap creation from data...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T153116Z">
        <seg>これはビットマップファイルの読み書き、およびデータからのビットマップの作成を実装するための基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the default behaviour of the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale<ept i="2">&lt;/a2&gt;</ept> class; you can disable it by <bpt i="3" x="3">&lt;b3&gt;</bpt>not<ept i="3">&lt;/b3&gt;</ept> passing <bpt i="4" x="4">&lt;t4&gt;</bpt>wxLOCALE_CONV_ENCODING<ept i="4">&lt;/t4&gt;</ept> to <bpt i="5" x="5">&lt;a5&gt;</bpt>wxLocale::Init<ept i="5">&lt;/a5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T131228Z">
        <seg>これが <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale<ept i="2">&lt;/a2&gt;</ept> クラスのデフォルトの振る舞いです; <bpt i="5" x="5">&lt;a5&gt;</bpt>wxLocale::Init<ept i="5">&lt;/a5&gt;</ept> に <bpt i="4" x="4">&lt;t4&gt;</bpt>wxLOCALE_CONV_ENCODING<ept i="4">&lt;/t4&gt;</ept> を渡さ <bpt i="3" x="3">&lt;b3&gt;</bpt>ない<ept i="3">&lt;/b3&gt;</ept> ことでこれを無効化できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the default log target for the GUI wxWidgets applications.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T125452Z">
        <seg>これは GUI wxWidgets アプリケーションのデフォルトのログターゲットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is too restrictive for wxWidgets, where any window may be created and displayed before its contents are created.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T150536Z">
        <seg>wxWidgets ではウィンドウの内容が作成される前にウィンドウを作成して表示するため、これは wxWIdgets にとって制約になってしまいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is true of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScreenDC<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxClientDC<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintDC<ept i="2">&lt;/a2&gt;</ept>, and <bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindowDC<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140857Z">
        <seg>これには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScreenDC<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxClientDC<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintDC<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindowDC<ept i="3">&lt;/a3&gt;</ept> が該当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when hiding parts of the interface, since you can avoid removing the controls from the sizer and having to add them back later.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T150111Z">
        <seg>コントロールをサイザーから削除し、後で追加し直す必要がないため、これはインタフェースの一部を隠すときに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when you don't care about the exact identifier either because you're not going to process the events from the control being created at all or because you process the events from all controls in one place (in which case you should specify <bpt i="1" x="1">&lt;t1&gt;</bpt>wxID_ANY<ept i="1">&lt;/t1&gt;</ept> in the event table or <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler::Connect<ept i="2">&lt;/a2&gt;</ept> call as well.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T075403Z">
        <seg>コントロールの生成するイベントを処理しない場合や、イベントを一箇所で処理する場合 (このときはイベントテーブルに <bpt i="1" x="1">&lt;t1&gt;</bpt>wxID_ANY<ept i="1">&lt;/t1&gt;</ept> を指定するか、それと同様に <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler::Connect<ept i="2">&lt;/a2&gt;</ept> を呼ぶ必要があります) など、コントロールの正確な識別子が必要でないときにこれは役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when you don't care about the exact identifier either because you're not going to process the events from the control being created or because you process the events from all controls in one place (in which case you should specify <bpt i="1" x="1">&lt;c1&gt;</bpt>wxID_ANY<ept i="1">&lt;/c1&gt;</ept> in the event table or <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler::Bind<ept i="2">&lt;/a2&gt;</ept> call as well).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T124554Z">
        <seg>コントロールの生成するイベントを処理しない場合や、イベントを一箇所で処理する場合 (このときはイベントテーブルに <bpt i="1" x="1">&lt;c1&gt;</bpt>wxID_ANY<ept i="1">&lt;/c1&gt;</ept> を指定するか、同じように <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler::Bind<ept i="2">&lt;/a2&gt;</ept> を呼ぶ必要があります) など、コントロールの正確な識別子が必要でないときにこれは役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is why in addition to all <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> functions, there are also a few global string functions which try to correct these problems: <bpt i="4" x="4">&lt;a4&gt;</bpt>wxIsEmpty()<ept i="4">&lt;/a4&gt;</ept> verifies whether the string is empty (returning <bpt i="5" x="5">&lt;s5&gt;</bpt>true<ept i="5">&lt;/s5&gt;</ept> for <bpt i="6" x="6">&lt;s6&gt;</bpt>NULL<ept i="6">&lt;/s6&gt;</ept> pointers), <bpt i="7" x="7">&lt;a7&gt;</bpt>wxStrlen()<ept i="7">&lt;/a7&gt;</ept> also handles <bpt i="8" x="8">&lt;s8&gt;</bpt>NULL<ept i="8">&lt;/s8&gt;</ept> correctly and returns 0 for them and wxStricmp() is just a platform-independent version of case-insensitive string comparison function known either as <bpt i="9" x="9">&lt;c9&gt;</bpt>stricmp()<ept i="9">&lt;/c9&gt;</ept> or <bpt i="10" x="10">&lt;c10&gt;</bpt>strcasecmp()<ept i="10">&lt;/c10&gt;</ept> on different platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120708Z">
        <seg>これが <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> の関数に加えて若干のグローバル文字列関数が存在する理由です: <bpt i="4" x="4">&lt;a4&gt;</bpt>wxIsEmpty()<ept i="4">&lt;/a4&gt;</ept> は文字列が空かどうかを確かめます。(<bpt i="6" x="6">&lt;s6&gt;</bpt>NULL<ept i="6">&lt;/s6&gt;</ept> ポインタに対しては <bpt i="5" x="5">&lt;s5&gt;</bpt>true<ept i="5">&lt;/s5&gt;</ept> を返却します) <bpt i="7" x="7">&lt;a7&gt;</bpt>wxStrlen()<ept i="7">&lt;/a7&gt;</ept> も <bpt i="8" x="8">&lt;s8&gt;</bpt>NULL<ept i="8">&lt;/s8&gt;</ept> を正しく取り扱うことができ、<bpt i="8" x="8">&lt;s8&gt;</bpt>NULL<ept i="8">&lt;/s8&gt;</ept> の場合は 0 を返却します。 wxStricmp() は単なるプラットフォーム非依存の大文字小文字を区別しない文字列比較関数で、プラットフォームによっては <bpt i="9" x="9">&lt;c9&gt;</bpt>stricmp()<ept i="9">&lt;/c9&gt;</ept> や <bpt i="10" x="10">&lt;c10&gt;</bpt>strcasecmp()<ept i="10">&lt;/c10&gt;</ept> として知られています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is why in addition to all wxString functions, there are also a few global string functions which try to correct these problems: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxIsEmpty()<ept i="0">&lt;/a0&gt;</ept> verifies whether the string is empty (returning <bpt i="1" x="1">&lt;t1&gt;</bpt>true<ept i="1">&lt;/t1&gt;</ept> for <bpt i="2" x="2">&lt;t2&gt;</bpt>NULL<ept i="2">&lt;/t2&gt;</ept> pointers), <bpt i="3" x="3">&lt;a3&gt;</bpt>wxStrlen()<ept i="3">&lt;/a3&gt;</ept> also handles NULLs correctly and returns 0 for them and <bpt i="4" x="4">&lt;a4&gt;</bpt>wxStricmp()<ept i="4">&lt;/a4&gt;</ept> is just a platform-independent version of case-insensitive string comparison function known either as stricmp() or strcasecmp() on different platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T093432Z">
        <seg>これが wxString の関数に加えて若干のグローバル文字列関数が存在する理由です: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxIsEmpty()<ept i="0">&lt;/a0&gt;</ept> は文字列が空かどうかを確かめます。(<bpt i="2" x="2">&lt;t2&gt;</bpt>NULL<ept i="2">&lt;/t2&gt;</ept> ポインタに対しては <bpt i="1" x="1">&lt;t1&gt;</bpt>true<ept i="1">&lt;/t1&gt;</ept> を返却します) <bpt i="3" x="3">&lt;a3&gt;</bpt>wxStrlen()<ept i="3">&lt;/a3&gt;</ept> も NULL を正しく取り扱うことができ、NULL の場合は 0 を返却します。 <bpt i="4" x="4">&lt;a4&gt;</bpt>wxStricmp()<ept i="4">&lt;/a4&gt;</ept> は単なるプラットフォーム非依存の大文字小文字を区別しない文字列比較関数で、プラットフォームによっては stricmp() や strcasecmp() として知られています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This leads us to the following general advice: all functions taking string arguments should take <bpt i="0" x="0">&lt;c0&gt;</bpt>const <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept>&amp;<ept i="0">&lt;/c0&gt;</ept> (this makes assignment to the strings inside the function faster) and all functions returning strings should return <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> - this makes it safe to return local variables.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T131924Z">
        <seg>このことから、次のような一般的なアドバイスが可能です: 文字列を引数として受け取るすべての関数は <bpt i="0" x="0">&lt;c0&gt;</bpt>const <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept>&amp;<ept i="0">&lt;/c0&gt;</ept> を受け取るべきで (こうすることで内部文字列への代入が早くなります)、文字列を返却するすべての関数は <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> を返却するべきです (これにより、安全にローカル変数を返却することができます)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This leads us to the following general advice: all functions taking string arguments should take <bpt i="0" x="0">&lt;i0&gt;</bpt>const wxString&amp;<ept i="0">&lt;/i0&gt;</ept> (this makes assignment to the strings inside the function faster because of <bpt i="1" x="1">&lt;a1&gt;</bpt>reference counting<ept i="1">&lt;/a1&gt;</ept>) and all functions returning strings should return <bpt i="2" x="2">&lt;i2&gt;</bpt>wxString<ept i="2">&lt;/i2&gt;</ept> - this makes it safe to return local variables.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T071419Z">
        <seg>このことから、次のような一般的なアドバイスが可能です: 文字列を引数として受け取るすべての関数は <bpt i="0" x="0">&lt;i0&gt;</bpt>const wxString&amp;<ept i="0">&lt;/i0&gt;</ept> を受け取るべきで (<bpt i="1" x="1">&lt;a1&gt;</bpt>参照カウンタ<ept i="1">&lt;/a1&gt;</ept> を使用するため、内部文字列への代入が早くなります)、文字列を返却するすべての関数は <bpt i="2" x="2">&lt;i2&gt;</bpt>wxString<ept i="2">&lt;/i2&gt;</ept> を返却するべきです。(これにより、安全にローカル変数を返却することができます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This macro can be used with character and string literals (in other words, 'x' or "foo") to automatic...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T150545Z">
        <seg>このマクロは文字やリテラル文字列 (つまり、'x' や "foo") を Unicode ビルド時に自動的にワイド文字列へ変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This macro is exactly the same as wxT() and is defined in wxWidgets simply because it may be more int...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T150936Z">
        <seg>このマクロは wxT() と完全に同じです。これが wxWidgets で定義されている理由は、単純に標準の Win32 ヘッダでも定義されており、Windows プログラマにとって直感的だからです。(同様に、同じマクロが他の名前 (_TEXT()) でも定義されています)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This macro loads a bitmap from either application resources (on the platforms for which they exist...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154553Z">
        <seg>このマクロはアプリケーションリソース (アプリケーションリソースが存在するプラットフォーム、つまり Windows と OS2 の場合) または XPM ファイルからビットマップを読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This macro loads an icon from either application resources (on the platforms for which they exist...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154445Z">
        <seg>このマクロはアプリケーションリソース (アプリケーションリソースが存在するプラットフォーム、つまり Windows と OS2 の場合) または XPM ファイルからアイコンを読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This may not be available on non-Windows platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141529Z">
        <seg>これは非 Windows 環境では使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that internally only Unicode strings are used and that, under Microsoft Windows, Unicode system API is used which means that wxWidgets programs require the Microsoft Layer for Unicode to run on Windows 95/98/ME.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T040317Z">
        <seg>これはつまり、内部的には Unicode 文字列のみが使用され、Microsoft Windows では Unicode 版のシステム API が使用されることを意味します。そしてこれは Windows 95/98/ME で wxWidgets プログラムを実行する際に Microsoft Layer for Unicode が必要となることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that you don't risk getting unexpected events from the dialog controls (which might be left unprocessed by the dialog itself because it doesn't care about them) when a modal dialog is popped up.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T155530Z">
        <seg>これはつまり、モーダルダイアログを表示しているときにダイアログコントロールから意図しないイベントを受け取ることがないことを意味します。 (それらのイベントは処理されないままになるでしょう) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that you don't risk to get unexpected events from the dialog controls (which might be left unprocessed by the dialog itself because it doesn't care about them) when a modal dialog is popped up.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T033913Z">
        <seg>これはつまり、モーダルダイアログを表示しているときにダイアログコントロールから意図しないイベントを受け取ることがないことを意味します。 (それらのイベントは処理されないままになるでしょう) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means, that the entire behaviour of a sizer and its children can be controlled by the three parameters of the Add() method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T111423Z">
        <seg>これはつまり、サイザーと子コントロールのすべての振る舞いが Add() 関数の 3 個の引数によって制御されることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This member must create and return an instance of the derived connection class if the connection is accepted.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T025325Z">
        <seg>接続を許可する場合、継承したコネクションクラスのインスタンスをこのメンバ関数で作成し、返却する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method can be used inside an event handler to control whether further event handlers bound to th...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T064047Z">
        <seg>この関数はイベントハンドラの中で使用し、現在のイベントハンドラの処理が終わった後にさらにイベントハンドラを呼び出すかどうかを制御します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method is what is called by the constructor of most controls to set the minimal size and the initial size of the control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T154636Z">
        <seg>この関数はコントロールの最小サイズと初期サイズを設定するためにほとんどのコントロールのコンストラクタで呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method is what is called by the constructor of most controls to set the minsize and initial size of the control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T152102Z">
        <seg>この関数はコントロールの最小サイズと初期サイズを設定するためにほとんどのコントロールのコンストラクタで呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method is what is called by the sizers when determining what the requirements of each item in the sizer is, and is used for calculating the overall minimum needs of the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T151626Z">
        <seg>この関数はサイザー内の各要素の要求サイズを決定するときにサイザーから呼ばれ、サイザーの必要とする最小サイズを計算するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This must be provided by the application, and will usually create the application's main window...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152428Z">
        <seg>アプリケーションはこの関数を必ず提供する必要があり、通常はアプリケーションのメインウィンドウを (任意に SetTopWindow() を呼んで) 作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This object, in turn, sends the event to the current view and the view itself lets its associated document process the event first.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T152258Z">
        <seg>そして、このオブジェクトが現在のビューに対してイベントを送信し、ビュー自身が関連するドキュメントにまずイベントを処理させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This overridable function is called when the value associated with the validator must be transferred ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T151352Z">
        <seg>この仮想関数はバリデータに関連する値をウィンドウへ転送しなければならないときに呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This overridable function is called when the value in the associated window must be validated...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T151248Z">
        <seg>この仮想関数はウィンドウに関連する値を検証しなければならないときに呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This overridable function is called when the value in the window must be transferred to the validator...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T151439Z">
        <seg>この仮想関数はウィンドウの値をバリデータへ転送しなければならないときに呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This overview briefly describes what the config classes are and what they are for.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T145624Z">
        <seg>この概要ではコンフィグクラスとは何で、何のために使用するのかについて簡潔に説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This represents the client application, and is used only within a client program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T150050Z">
        <seg>これはクライアントアプリケーションを表しており、クライアントプログラムの中でだけ使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This represents the connection from the client to the server - both the client and the server use an instance of this class, one per connection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T150230Z">
        <seg>これはクライアントからサーバへのコネクションを表しています。クライアントとサーバの両方とも、このクラスのインスタンスをコネクションごとにひとつ使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This represents the server application, and is used only within a server program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T145551Z">
        <seg>これはサーバアプリケーションを表しており、サーバプログラムの中でだけ使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section briefly describes the state of the Unicode support in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T154902Z">
        <seg>この章では wxWidgets における Unicode の対応状況について簡潔に述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section describes all environment variables that affect execution of wxWidgets programs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154507Z">
        <seg>この章では wxWidgets プログラムの実行に影響するすべての環境変数について述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section describes how does wxWidgets support Unicode and how can it affect your programs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004913Z">
        <seg>この章では wxWidgets による Unicode 対応方法とプログラムへの影響について述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section describes the algorithm used in detail.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T062131Z">
        <seg>この章ではそのアルゴリズムについて詳しく説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section is strictly about performance issues and is absolutely not necessary to read for using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121112Z">
        <seg>この章では性能に関する問題のみを取り扱っており、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> クラスを使用するだけであれば読む必要はまったくありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section only discusses one family of classes -- the DDE-like protocol -- but here's a list of other useful classes:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T153140Z">
        <seg>この章では DDE 風のプロトコルを使用するひとつのクラス群についてのみ説明しますが、その代わりに他の有用なクラスの一覧を以下に示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This simple class allows you to chain log sinks, that is to install a new sink but keep passing log m...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130452Z">
        <seg>この単純なクラスを用いることでログ出力先を連鎖させることが可能になります。つまり、wxLog::SetActiveTarget のようにログ出力先を置き換える代わりに、新しい出力先を設定しつつ、 古い出力先にもログメッセージを渡すことが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This size value is the size that the widget is currently using on screen and is the way to change the size of something that is not being managed by a sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T150418Z">
        <seg>このサイズの値は画面内でウィジェットが使用しているサイズであり、サイザーで管理されていないウィジェットのサイズを変更する方法でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This sizer in turn will query its children (which can be normal windows, empty space or other sizers) so that a hierarchy of sizers can be constructed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142121Z">
        <seg>このサイザーは順に子コントロール (通常のウィンドウや空白スペース、他のサイザーかもしれません) に対して問い合わせを行うため、サイザーの階層が構築されることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This succeeds or fails, depending on the server's willingness to answer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032543Z">
        <seg>これはサーバが応答するかどうかに応じて成功または失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This succeeds or fails.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033118Z">
        <seg>これは成功または失敗します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This task is performed by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogFormatter<ept i="0">&lt;/a0&gt;</ept> class so you need to derive a custom class from it and override its Format() method to build the log messages in desired way.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T123227Z">
        <seg>これは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogFormatter<ept i="0">&lt;/a0&gt;</ept> クラスによって行われるため、このクラスを継承し、望む方法でログメッセージを構築するように Fortmat() 関数をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This topic describes backwards-incompatible changes in wxWidgets 3.0 compared to the last stable release.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T150044Z">
        <seg>この概要では wxWidgets 3.0 と最後の安定リリースとの間の後方互換性のない変更について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type is called <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t<ept i="1">&lt;/t1&gt;</ept> which stands for <bpt i="2" x="2">&lt;i2&gt;</bpt>wide-character type<ept i="2">&lt;/i2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151303Z">
        <seg>この型のことを <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t<ept i="1">&lt;/t1&gt;</ept> と呼び、<bpt i="2" x="2">&lt;i2&gt;</bpt>wide-character type<ept i="2">&lt;/i2&gt;</ept> の略です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This way, you can avoid a lot of class derivation, and use instances of the same event handler class (but different objects as the same event handler object shouldn't be used more than once) to handle events from instances of different widget classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T062136Z">
        <seg>この方法を使うことで、たくさんの継承クラスを作成しなくてすむとともに、同じイベントハンドラクラスのインスタンスを異なるウィジェットクラスのインスタンスから利用することができます。 (ただし、異なるオブジェクトを同じイベントハンドラオブジェクトとして複数回使用するべきではありません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will allow your program to perform conversions between Unicode strings and ANSI ones (using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv classes<ept i="0">&lt;/a0&gt;</ept>) and construct wxString objects from Unicode strings (presumably read from some external file or elsewhere).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145310Z">
        <seg>これにより、あなたのプログラムの中で (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv クラス<ept i="0">&lt;/a0&gt;</ept>を利用した) Unicode 文字列と ANSI 文字列の変換や、(おそらく外部ファイルや他の場所から読み込んだ) Unicode 文字列から wxString オブジェクトを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will always be the case if the string had been initially constructed from a narrow string or if it contains only 7-bit ASCII data but otherwise this conversion is not guaranteed to succeed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T091441Z">
        <seg>文字列がナロー文字列か 7 ビット ASCII データで初期化されているのであれば、常にこの場合に当てはまりますが、それ以外の場合ではこの変換が常に成功することは保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will create a text message catalog - a .po file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001119Z">
        <seg>これにより、テキスト形式のメッセージカタログ (.po ファイル) が生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will invoke your own close event handler which may destroy the frame.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T155500Z">
        <seg>これにより、フレームを破棄する独自の終了イベントハンドラが実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will most often mean that the programmer does not set the start-up size of a dialog, the dialog will rather be assigned a sizer and this sizer will be queried about the recommended size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T121141Z">
        <seg>これはほどんどの場合で、プログラマがダイアログの初期サイズを設定するのではなく、代わりにダイアログをサイザーに割り当て、サイザーが推奨サイズを問い合わせることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will show you the average length of strings your program manipulates, their average initial length and also the percent of times when memory wasn't reallocated when string concatenation was done but the already preallocated memory was used (this value should be about 98% for the default allocation policy, if it is less than 90% you should really consider fine tuning <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> for your application).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121551Z">
        <seg>これにより、プログラムで使用する文字列の平均長、平均初期サイズ、および文字列を連結する際にメモリを割り当てず、割り当て済みのメモリを使用した回数の割合 (デフォルトの設定では約 98% のはずですが、これが 90% を下回る場合には <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> のチューニングを本当に検討するべきです) が分かります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will show you the average length of strings your program manipulates, their average initial length and also the percent of times when memory wasn't reallocated when string concatenation was done but the already preallocated memory was used (this value should be about 98% for the default allocation policy, if it is less than 90% you should really consider fine tuning wxString for your application).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T083735Z">
        <seg>これにより、プログラムで使用する文字列の平均長、平均初期サイズ、および文字列を連結する際にメモリを割り当てず、割り当て済みのメモリを使用した回数の割合 (デフォルトの設定では約 98% のはずですが、これが 90% を下回る場合には wxString のチューニングを本当に検討するべきです) が分かります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This would indeed prevent any key events from being sent to the native control - which might not be what is desired.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T085932Z">
        <seg>実際には、これはネイティブコントロールに送られるキーイベントをすべて横取りしますが、これはおそらく期待する動作ではないと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Three classes are central to the DDE-like API:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T150025Z">
        <seg>DDE 風 API では中心となるクラスが 3 種類あります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus UTF16 uses a variable number of code units to encode each code point.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T031739Z">
        <seg>したがって、UTF16 は各コードポイントを符号化するために可変数のコード単位を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus it is important to <bpt i="0" x="0">&lt;b0&gt;</bpt>never use 8-bit (instead of 7-bit) characters directly in the program source<ept i="0">&lt;/b0&gt;</ept> but use wide strings or, alternatively, write:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082337Z">
        <seg>したがって、<bpt i="0" x="0">&lt;b0&gt;</bpt>プログラムソース内で (7 ビット文字の代わりに) 8 ビット文字列を直接しない<ept i="0">&lt;/b0&gt;</ept> ことが重要であり、ワイド文字列を使用するか、代わりに以下のように書いてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus when iterating over a UTF-16 string stored in a <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept> under Windows, the user code has to take care of <bpt i="6" x="6">&lt;e6&gt;</bpt>surrogate pairs<ept i="6">&lt;/e6&gt;</ept> himself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T032623Z">
        <seg>したがって、Windows で <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept> に格納された UTF-16 文字列を走査するときには、自分で <bpt i="6" x="6">&lt;e6&gt;</bpt>サロゲートペア<ept i="6">&lt;/e6&gt;</ept> を考慮する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, data is transferred from C++ variables to the dialog just as the dialog is being shown.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145628Z">
        <seg>そのため、ダイアログが表示されるそのときに C++ 変数からダイアログへデータが転送されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, under Microsoft Windows, UCS-2 (simplified version of UTF-16 without support for surrogate characters) is used as <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept> is 2 bytes on this platform.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092708Z">
        <seg>したがって、Microsoft Windows では <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept>  が 2 バイトであるため、UCS-2 (サロゲート文字をサポートしない、UTF-16 の簡略化版です) が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, you might view <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogMessage()<ept i="2">&lt;/a2&gt;</ept> as a simple substitute for <bpt i="3" x="3">&lt;e3&gt;</bpt>printf()<ept i="3">&lt;/e3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091445Z">
        <seg>したがって、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogMessage()<ept i="2">&lt;/a2&gt;</ept> を <bpt i="3" x="3">&lt;e3&gt;</bpt> printf()<ept i="3">&lt;/e3&gt;</ept> の単純な代替として考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, you might view <bpt i="2" x="2">&lt;i2&gt;</bpt>wxLogMessage()<ept i="2">&lt;/i2&gt;</ept> as a simple substitute for <bpt i="3" x="3">&lt;i3&gt;</bpt> printf()<ept i="3">&lt;/i3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015102Z">
        <seg>したがって、<bpt i="2" x="2">&lt;i2&gt;</bpt>wxLogMessage()<ept i="2">&lt;/i2&gt;</ept> を <bpt i="3" x="3">&lt;i3&gt;</bpt> printf()<ept i="3">&lt;/i3&gt;</ept> の単純な代替として考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add a handler object to <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept>, your application needs to include the header which implements it, and then call the static function <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap::AddHandler()<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155245Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> のハンドラを追加する場合、ハンドラクラスを実装しているヘッダファイルをインクルードし、静的関数 <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap::AddHandler()<ept i="1">&lt;/a1&gt;</ept> を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To add a handler object to wxBitmap, your application needs to include the header which implements it, and then call the static function <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap::AddHandler<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T143127Z">
        <seg>wxBitmap のハンドラを追加する場合、ハンドラクラスを実装しているヘッダファイルをインクルードし、静的関数 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap::AddHandler<ept i="0">&lt;/a0&gt;</ept> を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To be a <bpt i="0" x="0">&lt;e0&gt;</bpt>drag<ept i="0">&lt;/e0&gt;</ept> source, i.e. to provide the data which may be dragged by the user elsewhere, you should implement the following steps:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134616Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>ドラッグ元<ept i="0">&lt;/e0&gt;</ept> になる、つまり、ユーザが他の場所へドラッグするデータを提供するには次の手順を実装します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To be a <bpt i="0" x="0">&lt;e0&gt;</bpt>drop<ept i="0">&lt;/e0&gt;</ept> target, i.e. to receive the data dropped by the user you should follow the instructions below:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135412Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>ドロップ先<ept i="0">&lt;/e0&gt;</ept> になる、つまり、ユーザのドロップしたデータを受け付けるためには次の手順を実施します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To be a <bpt i="0" x="0">&lt;i0&gt;</bpt>drag source<ept i="0">&lt;/i0&gt;</ept>, i.e. to provide the data which may be dragged by the user elsewhere, you should implement the following steps:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T160211Z">
        <seg><bpt i="0" x="0">&lt;i0&gt;</bpt>ドラッグ元<ept i="0">&lt;/i0&gt;</ept> になる、つまり、ユーザが他の場所へドラッグするデータを提供するには次の手順を実装します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To be a <bpt i="0" x="0">&lt;i0&gt;</bpt>drop target<ept i="0">&lt;/i0&gt;</ept>, i.e. to receive the data dropped by the user you should follow the instructions below:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T131755Z">
        <seg><bpt i="0" x="0">&lt;i0&gt;</bpt>ドロップ先<ept i="0">&lt;/i0&gt;</ept> になる、つまり、ユーザのドロップしたデータを受け付けるためには次の手順を実施します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To be more precise, each event is described by:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T160744Z">
        <seg>より正確には、イベントは以下の内容で表現されます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To be precise, the conversion will always succeed if the string was created from a narrow string initially.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T135558Z">
        <seg>正確に言うと、最初にナロー文字列から文字列が作られたのであれば、変換は常に成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To better explain what stated above, consider the second string of the example above; it's composed by 3 characters and the final <bpt i="0" x="0">&lt;c0&gt;</bpt>NULL:<ept i="0">&lt;/c0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T040414Z">
        <seg>上で述べたことをきちんと説明するために、上記の例のふたつ目の文字列に注目してください; この文字列は 3 個の文字と終端の <bpt i="0" x="0">&lt;c0&gt;</bpt>NULL<ept i="0">&lt;/c0&gt;</ept> で構成されています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To change this, you need to define <bpt i="0" x="0">&lt;c0&gt;</bpt>wxLOG_COMPONENT<ept i="0">&lt;/c0&gt;</ept> to a string uniquely identifying each component, e.g. you could give it the value "MyProgram" by default and re-define it as "MyProgram/DB" in the module working with the database and "MyProgram/DB/Trans" in its part managing the transactions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T141850Z">
        <seg>これを変更するためには、 <bpt i="0" x="0">&lt;c0&gt;</bpt>wxLOG_COMPONENT<ept i="0">&lt;/c0&gt;</ept> として各コンポーネントを一意に識別する文字列を定義する必要があります。この文字列は例えばデフォルトで "MyProgram" を指定し、データベースを利用するモジュールでは "MyProgram/DB" に、さらにトランザクションを扱う部分では "MyProgram/DB/Trans" に再定義する、というようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To completely change the logging behaviour you may define a custom log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120523Z">
        <seg>ロギングの振る舞いを完全に変更するためにはカスタムログターゲットを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To correct this you should use</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171237Z">
        <seg>これを正しく動作させるためには、以下のようにする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a client which can communicate with a suitable server, you need to derive a class from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> and another from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxClient<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150628Z">
        <seg>適切なサーバと通信するクライアントを作成するには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxClient<ept i="1">&lt;/a1&gt;</ept> をそれぞれ継承する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a client which can communicate with a suitable server, you need to derive a class from wxConnection and another from wxClient.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T133358Z">
        <seg>適切なサーバと通信するクライアントを作成するには wxConnection と wxClient をそれぞれ継承する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a connection (a conversation in Windows parlance), the client application uses <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient::MakeConnection<ept i="0">&lt;/a0&gt;</ept> to send a message to the server object, with a string service name to identify the server and a topic name to identify the topic for the duration of the connection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150158Z">
        <seg>コネクション (Windows で言うところの会話 (conversation)) を作成するにはクライアントアプリケーションでサービス名 (サーバを識別します) とトピック名 (接続している間のトピックを識別します) を指定して <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient::MakeConnection<ept i="0">&lt;/a0&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a connection (a conversation in Windows parlance), the client application uses wxClient::MakeConnection to send a message to the server object, with a string service name to identify the server and a topic name to identify the topic for the duration of the connection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T021045Z">
        <seg>コネクション (Windows で言うところの会話 (conversation)) を作成するにはクライアントアプリケーションでサービス名 (サーバを識別します) とトピック名 (接続している間のトピックを識別します) を指定して wxClient::MakeConnection を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a new log target class you only need to derive it from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> and override one or several of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::DoLogRecord()<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="2">&lt;/a2&gt;</ept> and <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLog::DoLogText()<ept i="3">&lt;/a3&gt;</ept> in it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112527Z">
        <seg>新しいログターゲットクラスを作成する場合、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> を継承し、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::DoLogRecord()<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxLog::DoLogText()<ept i="3">&lt;/a3&gt;</ept> のいずれか (または複数) をオーバーライドするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a new log target class you only need to derive it from wxLog and implement one (or both) of <bpt i="0" x="0">&lt;i0&gt;</bpt>DoLog()<ept i="0">&lt;/i0&gt;</ept> and <bpt i="1" x="1">&lt;i1&gt;</bpt>DoLogString()<ept i="1">&lt;/i1&gt;</ept> in it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111852Z">
        <seg>新しいログターゲットクラスを作成する場合、wxLog を継承し、<bpt i="0" x="0">&lt;i0&gt;</bpt>DoLog()<ept i="0">&lt;/i0&gt;</ept> と <bpt i="1" x="1">&lt;i1&gt;</bpt>DoLogString()<ept i="1">&lt;/i1&gt;</ept> のどちらか (または両方) を実装するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a working client, the programmer must:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T024257Z">
        <seg>動作するクライアントを作成するには次のようにする必要があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a working server, the programmer must:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T022357Z">
        <seg>動作するサーバを作成するには次のようにする必要があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To disable the logging entirely you can use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::EnableLogging()<ept i="1">&lt;/a1&gt;</ept> method or, more usually, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogNull<ept i="2">&lt;/a2&gt;</ept> class which temporarily disables logging and restores it back to the original setting when it is destroyed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T140214Z">
        <seg>完全にロギングを無効化するためには <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::EnableLogging()<ept i="1">&lt;/a1&gt;</ept> か、普通は一時的にロギングを無効化し、オブジェクトが破棄される時に元の設定を復元する <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogNull<ept i="2">&lt;/a2&gt;</ept> クラスを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To get an ANSI string from a wxString, you may use the mb_str() function which always returns an ANSI string (independently of the mode - while the usual <bpt i="0" x="0">&lt;a0&gt;</bpt>c_str()<ept i="0">&lt;/a0&gt;</ept> returns a pointer to the internal representation which is either ASCII or Unicode).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T152048Z">
        <seg>wxString から ANSI 文字列を取得するには、常に ANSI 文字列を返却する mb_str() 関数を使用することができます。 (これはビルドモードに依存しません。一方で、普通の <bpt i="0" x="0">&lt;a0&gt;</bpt>c_str()<ept i="0">&lt;/a0&gt;</ept> は内部の表現型のポインタを返却しますが、これは ASCII か Unicode のどちらかです) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To give a quick example, a common question is how to receive the mouse movement events happening when the mouse is in one of the frame children in the frame itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030046Z">
        <seg>一例として、よく質問される子フレーム内にマウスがあるときのマウス移動イベントの受信方法を挙げましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To hide a window using the sizer, call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer::Show<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T152111Z">
        <seg>サイザーを使用してウィンドウを非表示にするためには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer::Show<ept i="0">&lt;/a0&gt;</ept> を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To hide a window using the sizer, call <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSizer::Show<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141617Z">
        <seg>サイザーを使用してウィンドウを非表示にするためには <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSizer::Show<ept i="2">&lt;/a2&gt;</ept> を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To implement non-blocking operations <bpt i="0" x="0">&lt;e0&gt;</bpt>without<ept i="0">&lt;/e0&gt;</ept> using multiple threads you have two possible implementation choices:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T234239Z">
        <seg>マルチスレッドを使用 <bpt i="0" x="0">&lt;e0&gt;</bpt>せずに<ept i="0">&lt;/e0&gt;</ept> ノンブロッキング処理を行なうにはふたつの選択肢があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To limit logging to important messages only, you may use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::SetLogLevel()<ept i="0">&lt;/a0&gt;</ept> with e.g. wxLOG_Warning value -- this will completely disable all logging messages with the severity less than warnings, so <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogMessage()<ept i="1">&lt;/a1&gt;</ept> output won't be shown to the user any more.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T140449Z">
        <seg>重要なメッセージのみを記録するためには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::SetLogLevel()<ept i="0">&lt;/a0&gt;</ept> に wxLOG_Warning などを指定します。こうすることで、重要度が警告未満であるすべてのメッセージのロギングが無効になり、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogMessage()<ept i="1">&lt;/a1&gt;</ept> の出力はもはやユーザに通知されなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To make things a bit more readable, you are also allowed to prefix the constant with <bpt i="4" x="4">&lt;t4&gt;</bpt>'L'<ept i="4">&lt;/t4&gt;</ept> instead of putting it after it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T154039Z">
        <seg>もう少しだけ可読性を上げるために、 <bpt i="4" x="4">&lt;t4&gt;</bpt>'L'<ept i="4">&lt;/t4&gt;</ept> を定数の後ろではなく、前に付けることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To print a wxChar buffer to a non-Unicode stdout:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T145943Z">
        <seg>wxChar バッファを非 Unicode 標準出力へ出力するには次のようにします:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To provide extensibility, the functionality for loading and saving bitmap formats is not implemented in the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> class, but in a number of handler classes, derived from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmapHandler<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155122Z">
        <seg>拡張性のため、ビットマップ形式の読み書きは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> クラスで実装されておらず、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmapHandler<ept i="1">&lt;/a1&gt;</ept> を継承した多数のハンドラクラスで実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To provide extensibility, the functionality for loading and saving bitmap formats is not implemented in the wxBitmap class, but in a number of handler classes, derived from wxBitmapHandler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142547Z">
        <seg>拡張性のため、ビットマップ形式の読み書きは wxBitmap クラスで実装されておらず、wxBitmapHandler を継承した多数のハンドラクラスで実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To put it a different way, events set to propagate (<bpt i="1" x="1">&lt;a1&gt;</bpt>See: wxEvent::ShouldPropagate<ept i="1">&lt;/a1&gt;</ept>) (most likely derived either directly or indirectly from wxCommandEvent) will travel up the containment hierarchy from child to parent until the maximal propagation level is reached or an event handler is found that doesn't call <bpt i="2" x="2">&lt;a2&gt;</bpt>event.Skip()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T032037Z">
        <seg>別の言い方をすると、伝播するように設定されたイベント (<bpt i="1" x="1">&lt;a1&gt;</bpt>参照: wxEvent::ShouldPropagate<ept i="1">&lt;/a1&gt;</ept>) (よくあるのは wxCommandEvent を直接、または間接的に継承したイベントです) は最大回数、伝播するか <bpt i="2" x="2">&lt;a2&gt;</bpt>event.Skip()<ept i="2">&lt;/a2&gt;</ept> を呼んでいないイベントハンドラが見つかるまで、子から親へコントロール階層をさかのぼっていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To resolve the last problem <bpt i="2" x="2">&lt;a2&gt;</bpt>wxThreadEvent<ept i="2">&lt;/a2&gt;</ept> can be used: thanks to its implementation of the <bpt i="3" x="3">&lt;a3&gt;</bpt>wxThreadEvent::GetEventCategory<ept i="3">&lt;/a3&gt;</ept> function <bpt i="4" x="4">&lt;a4&gt;</bpt>wxThreadEvent<ept i="4">&lt;/a4&gt;</ept> classes in fact do not get processed by <bpt i="5" x="5">&lt;a5&gt;</bpt>wxEventLoopBase::YieldFor()<ept i="5">&lt;/a5&gt;</ept> unless you specify the <bpt i="6" x="6">&lt;c6&gt;</bpt>wxEVT_CATEGORY_THREAD<ept i="6">&lt;/c6&gt;</ept> flag.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T114551Z">
        <seg>最後の問題を解決するために <bpt i="2" x="2">&lt;a2&gt;</bpt>wxThreadEvent<ept i="2">&lt;/a2&gt;</ept> を使用することができます: <bpt i="3" x="3">&lt;a3&gt;</bpt>wxThreadEvent::GetEventCategory<ept i="3">&lt;/a3&gt;</ept> 関数の実装のおかげで <bpt i="6" x="6">&lt;c6&gt;</bpt>wxEVT_CATEGORY_THREAD<ept i="6">&lt;/c6&gt;</ept> フラグを指定しない限り、実際には <bpt i="5" x="5">&lt;a5&gt;</bpt>wxEventLoopBase::YieldFor()<ept i="5">&lt;/a5&gt;</ept> で <bpt i="4" x="4">&lt;a4&gt;</bpt>wxThreadEvent<ept i="4">&lt;/a4&gt;</ept> クラスが処理されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To summarize, Unicode support in wxWidgets is mostly <bpt i="0" x="0">&lt;b0&gt;</bpt>transparent<ept i="0">&lt;/b0&gt;</ept> for the application and if you use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> objects for storing all the character data in your program there is really nothing special to do.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092249Z">
        <seg>まとめると、wxWidgets による Unicode 対応はアプリケーションにとってほとんど <bpt i="0" x="0">&lt;b0&gt;</bpt>透過的<ept i="0">&lt;/b0&gt;</ept> であり、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> オブジェクトを使ってすべての文字データを格納するのであれば、特別なことをなにもする必要がありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To summarize, here is a brief example of how a program which can be compiled in both ANSI and Unicode modes could look like:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160618Z">
        <seg>要点をまとめるため、 ANSI モードと Unicode モードの両方でコンパイルできるプログラムの簡潔な例を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To summarize, instead of explicitly calling the base class version as you would have done with C++ virtual functions (i.e. <bpt i="0" x="0">&lt;i0&gt;</bpt>wxTextCtrl::OnChar()<ept i="0">&lt;/i0&gt;</ept>), you should instead call <bpt i="1" x="1">&lt;a1&gt;</bpt>Skip<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022245Z">
        <seg>要約すると、C++ の仮想関数で行うように基底クラスの関数を直接呼ぶ  (つまり、<bpt i="0" x="0">&lt;i0&gt;</bpt>wxTextCtrl::OnChar()<ept i="0">&lt;/i0&gt;</ept> を呼ぶ) 代わりに、 <bpt i="1" x="1">&lt;a1&gt;</bpt>Skip<ept i="1">&lt;/a1&gt;</ept> を呼ぶようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To summarize, using Bind&lt;&gt;() requires slightly more typing but is much more flexible than using static event tables so don't hesitate to use it when you need this extra power.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061453Z">
        <seg>まとめると、Bind&lt;&gt;() を使用すると若干コードが増えますが、静的イベントテーブルよりも柔軟性があります。そのため、この追加の効果が必要なときはためらわずに使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To switch scrolling adaptation on globally in your application, call the static function <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::EnableLayoutAdaptation<ept i="0">&lt;/a0&gt;</ept> passing <bpt i="1" x="1">&lt;s1&gt;</bpt>true<ept i="1">&lt;/s1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T145718Z">
        <seg>スクロールに関する適応をアプリケーション内でグローバルに切り替える場合、静的関数 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::EnableLayoutAdaptation<ept i="0">&lt;/a0&gt;</ept> に <bpt i="1" x="1">&lt;s1&gt;</bpt>true<ept i="1">&lt;/s1&gt;</ept> を渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To test for command events (which will probably be the only events you wish to redirect), you may use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::IsCommandEvent<ept i="0">&lt;/a0&gt;</ept> for efficiency, instead of using the slower run-time type system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T054449Z">
        <seg>コマンドイベントかどうか (おそらくリダイレクト対象のイベントかどうかだと思いますが) を調べるため、遅い実行時型情報の代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::IsCommandEvent<ept i="0">&lt;/a0&gt;</ept> を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To update your code, you should provide an event table entry in your frame or dialog, using the EVT_CLOSE macro.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160251Z">
        <seg>コードをアップグレードするには EVT_CLOSE マクロを使用してフレームやダイアログ内でイベントテーブルのエントリを定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use a client, paint or window device context, create an object on the stack with the window as argument, for example:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141637Z">
        <seg>wxClientDC、wxPaintDC、wxWindowDC を使用する場合、以下のようにウィンドウを引数に指定してスタック上にオブジェクトを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use an <bpt i="0" x="0">&lt;e0&gt;</bpt>event table<ept i="0">&lt;/e0&gt;</ept> you must first decide in which class you wish to handle the events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T010545Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>イベントテーブル<ept i="0">&lt;/e0&gt;</ept> を使うためには、まずイベントを処理するクラスを決定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use an ordinary function or a static method as an event handler you would write something like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060656Z">
        <seg>イベントハンドラとして普通の関数や静的メンバ関数を使用する場合、以下のように書いてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use your custom log target you may either call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::SetActiveTarget()<ept i="0">&lt;/a0&gt;</ept> with your custom log object or create a wxAppTraits-derived class and override <bpt i="1" x="1">&lt;a1&gt;</bpt>wxAppTraits::CreateLogTarget()<ept i="1">&lt;/a1&gt;</ept> virtual method in it and also override <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::CreateTraits()<ept i="2">&lt;/a2&gt;</ept> to return an instance of your custom traits object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T144504Z">
        <seg>作成したカスタムログターゲットを使用するためには、カスタムログターゲットのオブジェクトを指定して <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::SetActiveTarget()<ept i="0">&lt;/a0&gt;</ept> を呼ぶか、wxAppTraits を継承したクラスを作成して <bpt i="1" x="1">&lt;a1&gt;</bpt>wxAppTraits::CreateLogTarget()<ept i="1">&lt;/a1&gt;</ept> 仮想関数をオーバーライドし、自作の特性オブジェクトのインスタンスを返却するように <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::CreateTraits()<ept i="2">&lt;/a2&gt;</ept> をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Todo:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151425Z">
        <seg>Todo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Top-level windows such as <bpt i="3" x="3">&lt;a3&gt;</bpt>wxFrame<ept i="3">&lt;/a3&gt;</ept> will not allow the user to resize the frame above the maximum size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T152042Z">
        <seg><bpt i="3" x="3">&lt;a3&gt;</bpt>wxFrame<ept i="3">&lt;/a3&gt;</ept> といったトップレベルウィンドウはユーザが最大サイズを超えてリサイズすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Top-level windows such as <bpt i="3" x="3">&lt;a3&gt;</bpt>wxFrame<ept i="3">&lt;/a3&gt;</ept> will not allow the user to resize the frame below the min size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130719T150208Z">
        <seg><bpt i="3" x="3">&lt;a3&gt;</bpt>wxFrame<ept i="3">&lt;/a3&gt;</ept> といったトップレベルウィンドウはユーザが最小サイズ以下にリサイズすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Top-level windows such as <bpt i="3" x="3">&lt;a3&gt;</bpt>wxFrame<ept i="3">&lt;/a3&gt;</ept> will not allow the user to resize the frame below the minimal size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T151523Z">
        <seg><bpt i="3" x="3">&lt;a3&gt;</bpt>wxFrame<ept i="3">&lt;/a3&gt;</ept> といったトップレベルウィンドウはユーザが最小サイズ以下にリサイズすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Topic Overviews</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004800Z">
        <seg>トピックスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Topic overviews</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T131901Z">
        <seg>トピックスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Transfers values from child controls to data areas specified by their validators.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T152953Z">
        <seg>子コントロールからバリデータで指定されたデータ領域へ値を転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Transfers values to child controls from data areas specified by their validators.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T152820Z">
        <seg>バリデータで指定されたデータ領域から子コントロールへ値を転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating Menu Accelerators</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035524Z">
        <seg>メニューアクセラレータの翻訳</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating menu accelerators</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T002909Z">
        <seg>メニューアクセラレータの翻訳</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating the strings extracted in the previous step to other language(s).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001144Z">
        <seg>前のステップで抽出した文字列を別の言語に翻訳する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating the strings in the program text using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxGetTranslation<ept i="0">&lt;/a0&gt;</ept> or equivalently the <bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept> macro.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T235702Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGetTranslation<ept i="0">&lt;/a0&gt;</ept> か、それと同じように <bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept> マクロを利用してプログラム中のテキストを 翻訳する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating the strings in the program text using wxGetTranslation or equivalently the <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept> macro.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043253Z">
        <seg>wxGetTranslation か、それと同じように <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept> マクロを利用してプログラム中のテキストを 翻訳する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating your application involves several steps:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040059Z">
        <seg>アプリケーションの翻訳にはいくつかのステップが含まれます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tries to detect the name of the user's default font encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134949Z">
        <seg>ユーザのデフォルトのフォントエンコーディング名を検知しようと試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tries to detect the user's default font encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134936Z">
        <seg>ユーザのデフォルトのフォントエンコーディングを検知しようと試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tries to make a connection with a server by host (machine name under UNIX - use 'localhost' for same ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150136Z">
        <seg>ホスト (Unix ではマシン名です。同じマシンを指す場合は 'localhost' を使用してください; Windows ネイティブの DDE を使用するときは無視されます)、サービス名、トピック文字列を使用してサーバへの接続を試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Try to write code so it is parameterised by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDC<ept i="0">&lt;/a0&gt;</ept> - if you do this, the same piece of code may write to a number of different devices, by passing a different device context.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154335Z">
        <seg>なるべく <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDC<ept i="0">&lt;/a0&gt;</ept> 型を使用してパラメータ化するようにしてください。このようにした場合、異なるデバイスコンテキストを渡すことで多くのデバイスに対して同じコードを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Try to write code so it is parameterised by wxDC - if you do this, the same piece of code may write to a number of different devices, by passing a different device context.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141738Z">
        <seg>なるべく wxDC 型を使用してパラメータ化するようにしてください。このようにした場合、異なるデバイスコンテキストを渡すことで多くのデバイスに対して同じコードを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tuning wxString for Your Application</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030101Z">
        <seg>wxString のチューニング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Tuning wxString for your application</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T075806Z">
        <seg>wxString のチューニング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Typed, i.e. strings or numbers for the moment.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T150434Z">
        <seg>型を持つ。今のところ、文字列か数値であるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Typically events that deal with a window as a window (size, motion, paint, mouse, keyboard, etc.) are sent only to the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T052010Z">
        <seg>(リサイズ、移動、描画、マウスイベント、キーボードイベントといった) ウィンドウに関係する一般的なイベントはウィンドウに対してのみ送られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Typically when UTF8 is used, code units are stored into <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> types, since <bpt i="1" x="1">&lt;c1&gt;</bpt>char<ept i="1">&lt;/c1&gt;</ept> are 8bit wide on almost all systems; when using UTF16 typically code units are stored into <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept> types since <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t<ept i="3">&lt;/c3&gt;</ept> is at least 16bits on all systems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035146Z">
        <seg>一般的に、UTF8 を使用するときはコード単位を <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> に格納します。なぜなら、ほぼすべてのシステムで <bpt i="1" x="1">&lt;c1&gt;</bpt>char<ept i="1">&lt;/c1&gt;</ept> 型は 8 ビットの大きさを持つためです; そして、一般的に UTF-16 を使用するときはコード単位を <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept> 型に格納します。 <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t<ept i="3">&lt;/c3&gt;</ept> はすべてのプラットフォームで少なくとも 16 ビットだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UTF-32 is commonly used under Unix systems for internal representation of Unicode strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T031248Z">
        <seg>一般に、UTF-32 は Unix システムにおける Unicode 文字列の内部表現に使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UTF-8 uses code units of 8 bits (1 byte); code points beyond the usual english alphabet are represented using a variable number of bytes, which makes it less efficient than UTF-32 for internal representation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T033101Z">
        <seg>UTF-8 は 8 ビット (1 バイト) のコード単位を使用します; 普通のアルファベット以外のコードポイントは可変バイトで表現されるため、内部表現としては UTF-32 よりも若干効率が落ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UTF8 encoding is more elaborated and in this example takes 7 bytes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T040741Z">
        <seg>UTF8 の符号化はより複雑で、この例では 7 バイトを消費します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Unix systems, including Mac OS X, UCS-4 (also known as UTF-32) is used by default, however it is also possible to build wxWidgets to use UTF-8 internally by passing <bpt i="3" x="3">&lt;c3&gt;</bpt>--enable-utf8<ept i="3">&lt;/c3&gt;</ept> option to configure.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T093135Z">
        <seg>Mac OS X を含む Unix システムでは、デフォルトで (UTF-32 としても知られる) UCS-4 が使用されますが、設定に <bpt i="3" x="3">&lt;c3&gt;</bpt>--enable-utf8<ept i="3">&lt;/c3&gt;</ept> オプションを渡すことで内部に UTF-8 を使用するように wxWidgets をビルドすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Unix, the service name may be either an integer port identifier in which case an Internet domain socket will be used for the communications or a valid file name (which shouldn't exist and will be deleted afterwards) in which case a Unix domain socket is created.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T021206Z">
        <seg>Unix におけるサービス名はインターネットドメインソケットが通信に使用する整数のポート識別子か、Unix ドメインソケットが作成する有効なファイル名 (このファイルは存在してはならず、後で削除されます) のいずれかになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Windows 3, modal dialogs have to be emulated using modeless dialogs and a message loop.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T150038Z">
        <seg>Windows 3 ではモーダルダイアログはモードレスダイアログとメッセージループを使用してエミュレートしなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Windows, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154959Z">
        <seg>Windows では <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Windows, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCursor<ept i="0">&lt;/a0&gt;</ept> may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155048Z">
        <seg>Windows では <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCursor<ept i="0">&lt;/a0&gt;</ept> は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Windows, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxIcon<ept i="0">&lt;/a0&gt;</ept> may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155024Z">
        <seg>Windows では <bpt i="0" x="0">&lt;a0&gt;</bpt>wxIcon<ept i="0">&lt;/a0&gt;</ept> は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Windows, wxBitmap may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T141924Z">
        <seg>Windows では wxBitmap は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Windows, wxCursor may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142222Z">
        <seg>Windows では wxCursor は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Windows, wxIcon may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142134Z">
        <seg>Windows では wxIcon は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under certain circumstances, it will be required to define your own event class e.g. for sending more complex data from one place to another.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T163058Z">
        <seg>(より複雑なデータをある場所から別の場所へ送るといった) 特定の状況下では独自のイベントクラスの定義が必要になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under certain circumstances, you must define your own event class e.g., for sending more complex data from one place to another.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T033840Z">
        <seg>(より複雑なデータをある場所から別の場所へ送るといった) 特定の状況下では独自のイベントクラスを定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxGTK, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155007Z">
        <seg>wxGTK では <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxGTK, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCursor<ept i="0">&lt;/a0&gt;</ept> may load the following formats (in addition to stock cursors):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155055Z">
        <seg>wxGTK では <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCursor<ept i="0">&lt;/a0&gt;</ept> は (既存のカーソルに加えて) 以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxGTK, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxIcon<ept i="0">&lt;/a0&gt;</ept> may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155032Z">
        <seg>wxGTK では <bpt i="0" x="0">&lt;a0&gt;</bpt>wxIcon<ept i="0">&lt;/a0&gt;</ept> は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxGTK, wxBitmap may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142050Z">
        <seg>wxGTK では wxBitmap は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxGTK, wxCursor may load the following formats (in additional to stock cursors):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142320Z">
        <seg>wxGTK では wxCursor は (既存のカーソルに加えて) 以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxGTK, wxIcon may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142202Z">
        <seg>wxGTK では wxIcon は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxMotif and wxX11, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155015Z">
        <seg>wxMotif と wxX11 では <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBitmap<ept i="0">&lt;/a0&gt;</ept> は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxMotif and wxX11, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCursor<ept i="0">&lt;/a0&gt;</ept> may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155103Z">
        <seg>wxMotif と wxX11 では <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCursor<ept i="0">&lt;/a0&gt;</ept> は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxMotif and wxX11, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxIcon<ept i="0">&lt;/a0&gt;</ept> may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155040Z">
        <seg>wxMotif と wxX11 では <bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxMotif and wxX11, wxBitmap may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142108Z">
        <seg>wxMotif と wxX11 では wxBitmap は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxMotif and wxX11, wxCursor may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142349Z">
        <seg>wxMotif と wxX11 では wxCursor は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under wxMotif and wxX11, wxIcon may load the following formats:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142212Z">
        <seg>wxMotif と wxX11 では wxImage は以下の形式を読み込むことができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unfortunately many languages use different charsets under Unix and Windows (and other platforms, to make the situation even more complicated).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T120716Z">
        <seg>残念なことに、Unix や Windows では多くの言語で異なる文字コードが使用されています。(そして、他のプラットフォームではさらに複雑なことになっています) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unfortunately, some of them have rather counter-intuitive behaviour (like <bpt i="0" x="0">&lt;c0&gt;</bpt>strncpy()<ept i="0">&lt;/c0&gt;</ept> which doesn't always terminate the resulting string with a <bpt i="1" x="1">&lt;s1&gt;</bpt>NULL<ept i="1">&lt;/s1&gt;</ept>) and are in general not very safe (passing <bpt i="2" x="2">&lt;s2&gt;</bpt>NULL<ept i="2">&lt;/s2&gt;</ept> to them will probably lead to program crash).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T120356Z">
        <seg>残念なことに、いくつかの関数は直感的でない振る舞いをします (例えば <bpt i="0" x="0">&lt;c0&gt;</bpt>strncpy()<ept i="0">&lt;/c0&gt;</ept> は結果の文字列を常に <bpt i="1" x="1">&lt;s1&gt;</bpt>NULL<ept i="1">&lt;/s1&gt;</ept> で終端させるとは限りません) し、一般的にあまり安全ではありません。（それらの関数に <bpt i="2" x="2">&lt;s2&gt;</bpt>NULL<ept i="2">&lt;/s2&gt;</ept> を渡すとおそらくプログラムがクラッシュするでしょう) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unfortunately, some of them have rather counter-intuitive behaviour (like strncpy() which doesn't always terminate the resulting string with a NULL) and are in general not very safe (passing NULL to them will probably lead to program crash).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T093315Z">
        <seg>残念なことに、いくつかの関数は直感的でない振る舞いをします (例えば strncpy() は結果の文字列を常に NULL で終端させるとは限りません) し、一般的にあまり安全ではありません。（それらの関数に NULL を渡すとおそらくプログラムがクラッシュするでしょう) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode Related Preprocessor Symbols</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T120325Z">
        <seg>Unicode 関連のプリプロセッサシンボル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode Representations and Terminology</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005556Z">
        <seg>Unicode の表現方法と用語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode Support in wxWidgets</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004802Z">
        <seg>wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode and ANSI modes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T165215Z">
        <seg>Unicode モードと ANSI モード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode and the Outside World</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005637Z">
        <seg>Unicode と外部の世界</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode and the outside world</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T141754Z">
        <seg>Unicode と外部の世界</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode assigns each character of almost any existing alphabet/script a number, which is called <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>code point<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>; it's typically indicated in documentation manuals and in the Unicode website as <bpt i="2" x="2">&lt;c2&gt;</bpt>U+xxxx<ept i="2">&lt;/c2&gt;</ept> where <bpt i="3" x="3">&lt;c3&gt;</bpt>xxxx<ept i="3">&lt;/c3&gt;</ept> is an hexadecimal number.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031700Z">
        <seg>Unicode では、存在するほぼすべての文字を <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>コードポイント<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> と呼ばれる番号に割り当てています; 一般的に、マニュアルや Unicode のウェブサイトでは <bpt i="2" x="2">&lt;c2&gt;</bpt>U+xxxx<ept i="2">&lt;/c2&gt;</ept> (<bpt i="3" x="3">&lt;c3&gt;</bpt>xxxx<ept i="3">&lt;/c3&gt;</ept> は 16 進数です) という形で表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode is Always Used by Default</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T032856Z">
        <seg>デフォルトで Unicode が常に使用されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode is a standard for character encoding which addresses the shortcomings of the previous standards (e.g. the ASCII standard), by using 8, 16 or 32 bits for encoding each character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005825Z">
        <seg>Unicode とは、 1 文字あたり 8、 16、 32 ビットを使用することで、これまでの標準的な文字コード (例えば ASCII) の欠点に対処した文字コードの標準規格のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode is a standard for character encoding which addresses the shortcomings of the previous, 8 bit standards, by using at least 16 (and possibly 32) bits for encoding each character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T160249Z">
        <seg>Unicode とは、 1 文字あたり少なくとも 16 (あるいは 32) ビットを使用することで、これまでの標準的な 8 ビットの文字コードの欠点に対処した文字コードの標準規格のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode support in wxWidgets</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T154556Z">
        <seg>wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode-Related Compilation Errors</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121243Z">
        <seg>Unicode 関連のコンパイルエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode-related Changes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T150109Z">
        <seg>Unicode に関連する変更</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode-related compilation settings</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144526Z">
        <seg>Unicode 関連のコンパイル設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike for all the other logging functions, this function can't be overridden by a log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005311Z">
        <seg>他のすべてのロギング関数と異なり、この関数はログターゲットによってオーバーライドすることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike in earlier versions of wxWidgets, OnInit does not return a frame.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T151214Z">
        <seg>wxWidgets の初期バージョンとは違い、OnInit はフレームを返却しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike the original wxWidgets Dialog Editor, editors such as wxDesigner, DialogBlocks, XRCed and wxWorkshop create dialogs based exclusively on sizers, practically forcing the user to create platform independent layouts without compromises.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T114516Z">
        <seg>wxWidgets のオリジナルのダイアログエディタと異なり、wxDesigner、DialogBlocks、XRCed、wxWorkshop などのエディタはもっぱらサイザーのみに基づいてダイアログを作成し、事実上、プラットフォーム非依存のレイアウトを妥協なしに作ることをユーザに強制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Up</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145429Z">
        <seg>Up</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Usage is simple.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141623Z">
        <seg>使用方法は単純です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::ChangeSelection<ept i="0">&lt;/a0&gt;</ept> instead, as <bpt i="1" x="1">&lt;a1&gt;</bpt>wxNotebook::SetSelection<ept i="1">&lt;/a1&gt;</ept> is deprecated</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061010Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxNotebook::SetSelection<ept i="1">&lt;/a1&gt;</ept> は非推奨のため、代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::ChangeSelection<ept i="0">&lt;/a0&gt;</ept> を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use <bpt i="0" x="0">&lt;t0&gt;</bpt>wxString<ept i="0">&lt;/t0&gt;</ept> instead of C style strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151905Z">
        <seg>C 形式の文字列の代わりに <bpt i="0" x="0">&lt;t0&gt;</bpt>wxString<ept i="0">&lt;/t0&gt;</ept> を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use PushEventHandler/PopEventHandler to form a chain of event handlers, where each handler processes a different range of events independently from the other handlers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T070526Z">
        <seg>他のイベントハンドラとは異なる範囲のイベントを独立して処理するようなイベントハンドラを作成する場合に PushEventHandler/PopEventHandler を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use of this function for windows which are not toplevel windows (such as wxDialog or wxFrame) is disc...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T151307Z">
        <seg>(wxDialog や wxFrame といった) トップレベルウィンドウでないウィンドウに対してこの関数を使用することは推奨されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> member functions to send messages to the server.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T150357Z">
        <seg>サーバへメッセージを送信するには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxConnection<ept i="0">&lt;/a0&gt;</ept> のメンバ関数を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the macros DECLARE_DYNAMIC_CLASS and IMPLEMENT_DYNAMIC_CLASS in order to allow the framework to create view objects on demand.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T020328Z">
        <seg>Use the macros DECLARE_DYNAMIC_CLASS and IMPLEMENT_DYNAMIC_CLASS in order to allow the framework to create view objects on demand.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the wxConnection member functions to send messages to the server.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T032046Z">
        <seg>サーバへメッセージを送信するには wxConnection のメンバ関数を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this macro in a source file to end listing static event handlers for a specific class...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022449Z">
        <seg>静的イベントハンドラの列挙を終了するために、ソースファイル内でこのマクロを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this macro in a source file to start listing static event handlers for a specific class...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022348Z">
        <seg>静的イベントハンドラの列挙を開始するために、ソースファイル内でこのマクロを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this macro inside a class declaration to declare a static event table for that class...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T014717Z">
        <seg>静的イベントテーブルを宣言するために、クラス宣言の中でこのマクロを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this to paint on the client area of a window, but <bpt i="2" x="2">&lt;e2&gt;</bpt>only<ept i="2">&lt;/e2&gt;</ept> from within a <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPaintEvent<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154306Z">
        <seg>ウィンドウのクライアントエリアに描画するときに使用しますが、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxPaintEvent<ept i="3">&lt;/a3&gt;</ept> の中で <bpt i="2" x="2">&lt;e2&gt;</bpt>のみ<ept i="2">&lt;/e2&gt;</ept> 使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this to paint on the client area of window (the part without borders and other decorations), but do not use it from within an <bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintEvent<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154132Z">
        <seg>ウィンドウのクライアントエリア (ボーダーや他の装飾を除いた部分) に描画するときに使用します。ただし、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintEvent<ept i="2">&lt;/a2&gt;</ept> の中で使用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this to paint on the screen, as opposed to an individual window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T153925Z">
        <seg>個別のウィンドウではなく、スクリーン上に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this to paint on the whole area of a window, including decorations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154315Z">
        <seg>装飾を含む、ウィンドウ全体に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Used for special cursor processing based on current mouse position</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055453Z">
        <seg>現在のマウス位置に基づいた特殊なカーソル処理に使用される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Used to query layout information</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055346Z">
        <seg>レイアウト情報の問い合わせに使用される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>User Calls to Exit From a Menu</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T034127Z">
        <seg>終了メニューのユーザ呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>User Generated Events vs Programmatically Generated Events</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155312Z">
        <seg>ユーザ生成イベント vs プログラム生成イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using Existing Event Classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145424Z">
        <seg>既存のイベントクラスの使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using a cast to force the issue (listed only for completeness):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T125204Z">
        <seg>型を決定させるためのキャスト (これはリストの網羅性のために上げているだけです):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using an explicit conversion to narrow, multibyte, string:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124953Z">
        <seg>ナロー (マルチバイト) 文字列への明示的な変換:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using existing event classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T154608Z">
        <seg>既存のイベントクラスの使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using preconstructed <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept> instance.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151938Z">
        <seg>事前に構築した <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept> インスタンスを使用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using preconstructed wxCSConv instance.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T144146Z">
        <seg>事前に構築した wxCSConv インスタンスを使用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using these target all the log messages can be redirected to a text control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T125000Z">
        <seg>これらのターゲットを使用してログメッセージをテキストコントロールへリダイレクトできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using trace masks</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131107Z">
        <seg>トレースマスクの使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using wxString to store binary data</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030040Z">
        <seg>wxString を使用したバイナリデータの格納</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Usually there is no next event handler so the control passes to the next step but see <bpt i="0" x="0">&lt;a0&gt;</bpt>Event Handlers Chain<ept i="0">&lt;/a0&gt;</ept> for how the next handler may be defined.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T141636Z">
        <seg>普通は次のイベントハンドラが存在しないため、次のステップを行いますが、次のイベントハンドラを定義する方法は <bpt i="0" x="0">&lt;a0&gt;</bpt>イベントハンドラの連鎖<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Usually this doesn't matter much because most algorithms used on the strings examine them sequentially anyhow and because <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> implements a cache for iterating over the string by index but it can have serious consequences for algorithms using random access to string elements as they typically acquire O(N^2) time complexity instead of O(N) where N is the length of the string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151138Z">
        <seg>大半のアルゴリズムでは文字列を逐次的に調べますし、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> は文字列にインデックスでアクセスするためのキャッシュを持つため、通常はこのことがそれほど問題になることはありません。しかし、文字列にランダムアクセスするアルゴリズムにとっては、一般的に計算時間が O(N) から O(N^2) になる (N は文字列長です) ため、深刻な影響があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Usually you don't need to worry about this as the conversions do their work behind the scenes however in some cases it doesn't work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122249Z">
        <seg>これらの変換は裏側で行われるため、通常はこのことを気にする必要はありませんが、いくつかの場合ではうまく動作しないことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Validates the current values of the child controls using their validators.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T152921Z">
        <seg>バリデータを使用して子コントロールの現在の値を検証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Validation of data in controls is covered in <bpt i="2" x="2">&lt;a2&gt;</bpt>Validator overview<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T150753Z">
        <seg>コントロールのバリデーションは <bpt i="2" x="2">&lt;a2&gt;</bpt>バリデータの概要<ept i="2">&lt;/a2&gt;</ept> で触れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Validation of data in controls is covered in <bpt i="2" x="2">&lt;a2&gt;</bpt>wxValidator Overview<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T154630Z">
        <seg>コントロールのバリデーションは <bpt i="2" x="2">&lt;a2&gt;</bpt>wxValidator の概要<ept i="2">&lt;/a2&gt;</ept> で触れています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Validator basic concepts</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150345Z">
        <seg>バリデータの基本的な概念</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Validator for text entries used for floating point numbers entry.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150328Z">
        <seg>浮動小数点を入力するテキスト項目に使用するバリデータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Validator for text entries used for integer entry.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150249Z">
        <seg>整数を入力するテキスト項目に使用するバリデータ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Version: 2.9.4</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004613Z">
        <seg>Version: 2.9.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WXMODE</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155355Z">
        <seg>WXMODE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WXPREFIX</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154852Z">
        <seg>WXPREFIX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WXSTDERR</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155512Z">
        <seg>WXSTDERR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WXTRACE</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154508Z">
        <seg>WXTRACE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Watch out to put in enough casts to the inherited event function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042446Z">
        <seg>継承したイベント関数へのキャストが必要なことも忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We believe the new behaviour corresponds better to user expectations but if you did rely on the old behaviour you will have to update your code to set the minimal sizes of the sizer items to be in the same proportion as the items proportions to return to the old behaviour.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T151903Z">
        <seg>この新しい振る舞いはユーザの予想により一致するものだと信じていますが、以前の振る舞いに依存している場合、コントロールのプロポーションと同じ比率でコントロールの最小サイズを設定するようにコードを更新する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can take the example of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFileInputStream<ept i="0">&lt;/a0&gt;</ept> and here is some sample code:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T141237Z">
        <seg>例として <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFileInputStream<ept i="0">&lt;/a0&gt;</ept> のサンプルコードを以下に示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can take the example of wxFileInputStream and here is some sample code:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141650Z">
        <seg>例として wxFileInputStream のサンプルコードを以下に示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We have a <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> type which maps either on <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> or <bpt i="2" x="2">&lt;t2&gt;</bpt>wchar_t<ept i="2">&lt;/t2&gt;</ept> depending on the mode in which program is being compiled.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151556Z">
        <seg><bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> 型はコンパイル時のモードによって <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> か <bpt i="2" x="2">&lt;t2&gt;</bpt>wchar_t<ept i="2">&lt;/t2&gt;</ept> のいずれかにマッピングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We have seen that it was easy to write Unicode programs using wxWidgets types and macros, but it has been also mentioned that it isn't quite enough.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T142305Z">
        <seg>すでに見てきたように、wxWidgets の型とマクロを使用することで簡単に Unicode プログラムを書くことができます。しかし、それで十分ではないことについても述べてきました。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What about other kinds of window?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T050255Z">
        <seg>他の種類のウィンドウについてはどうでしょう?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What happens here?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151527Z">
        <seg>ここでは何が起きているのでしょうか? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What is Unicode?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T165157Z">
        <seg>Unicode とは?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What is the default behaviour?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T050325Z">
        <seg>デフォルトの振る舞いどのようなものですか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What is the sequence of events in a window deletion?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T045925Z">
        <seg>ウィンドウ削除時に発生する一連のイベントにはどのようなものがありますか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What makes sizers so well fitted for use in wxWidgets is the fact that every control reports its own minimal size and the algorithm can handle differences in font sizes or different window (dialog item) sizes on different platforms without problems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T143344Z">
        <seg>サイザーが wxWidgets に非常に適している理由は、すべてのコントロールが自身の最小サイズを通知し、このアルゴリズムが異なるプラットフォームのフォントサイズやウィンドウ (ダイアログのアイテム) のサイズの違いを問題なく取り扱うことができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What should I do to upgrade my 1.xx OnClose to 2.0?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T050008Z">
        <seg>1.xx の OnClose を 2.0 にアップグレードするには何をすべきですか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What should I do when the user calls up Exit from a menu?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T044654Z">
        <seg>ユーザがメニューから終了を選んだときに何をすべきですか?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::Show<ept i="0">&lt;/a0&gt;</ept> is called (for a modeless dialog) or <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::ShowModal<ept i="1">&lt;/a1&gt;</ept> is called (for a modal dialog), the function <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::InitDialog<ept i="2">&lt;/a2&gt;</ept> is automatically called.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145331Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::Show<ept i="0">&lt;/a0&gt;</ept> (モードレスダイアログ用) または <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::ShowModal<ept i="1">&lt;/a1&gt;</ept> (モーダルダイアログ用) が呼ばれると自動的に <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::InitDialog<ept i="2">&lt;/a2&gt;</ept> が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When a character is input, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextValidator<ept i="0">&lt;/a0&gt;</ept> checks the character against the allowed filter flag (<bpt i="1" x="1">&lt;c1&gt;</bpt>wxFILTER_ALPHA<ept i="1">&lt;/c1&gt;</ept> in this case).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150632Z">
        <seg>文字が入力されたときに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextValidator<ept i="0">&lt;/a0&gt;</ept> はその文字がフィルタフラグ (この場合は <bpt i="1" x="1">&lt;c1&gt;</bpt>wxFILTER_ALPHA<ept i="1">&lt;/c1&gt;</ept>) に合致するか確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When a character is input, wxTextValidator checks the character against the allowed filter flag (wxFILTER_ALPHA in this case).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143516Z">
        <seg>文字が入力されたときに wxTextValidator はその文字がフィルタフラグ (この場合は wxFILTER_ALPHA) に合致するか確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When an event is received from the windowing system, wxWidgets calls <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::ProcessEvent()<ept i="0">&lt;/a0&gt;</ept> on the first event handler object belonging to the window generating the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T064141Z">
        <seg>ウィンドウからイベントを受信したとき、wxWidgets はイベントを生成したウィンドウに属する最初のイベントハンドラオブジェクトの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::ProcessEvent<ept i="0">&lt;/a0&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When an event is received from the windowing system, wxWidgets calls <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::ProcessEvent<ept i="0">&lt;/a0&gt;</ept> on the first event handler object belonging to the window generating the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T083429Z">
        <seg>ウィンドウからイベントを受信したとき、wxWidgets はイベントを生成したウィンドウに属する最初のイベントハンドラオブジェクトの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::ProcessEvent<ept i="0">&lt;/a0&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When appropriate, create a new connection using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient::MakeConnection<ept i="0">&lt;/a0&gt;</ept>, with arguments host name (processed in Unix only, use 'localhost' for local computer), service name, and topic name for this connection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T145959Z">
        <seg>適切なときにホスト名 (Unix の場合のみ使用されます。ローカルコンピュータを指定する場合は 'localhost' を使用してください)、サービス名、この接続用のトピック名を指定して <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient::MakeConnection<ept i="0">&lt;/a0&gt;</ept> を呼び出し、新しいコネクションを作成する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When controls get more complicated, more specific wxCommandEvent-derived event classes providing additional control-specific information can be used, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTreeEvent<ept i="2">&lt;/a2&gt;</ept> for events from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTreeCtrl<ept i="3">&lt;/a3&gt;</ept> windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024036Z">
        <seg>より複雑なコントロールのときには、コントロール独自の追加情報を提供する、wxCommandEvent を継承したより具体的なイベントクラスを使用できます。例えば、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxTreeCtrl<ept i="3">&lt;/a3&gt;</ept> ウィンドウから送られるイベントでは <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTreeEvent<ept i="2">&lt;/a2&gt;</ept> が使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When controls get more complicated, then specific event classes are used, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTreeEvent<ept i="2">&lt;/a2&gt;</ept> for events from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTreeCtrl<ept i="3">&lt;/a3&gt;</ept> windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081654Z">
        <seg>より複雑なコントロールのときには特定のイベントクラスが使用されます。例えば、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxTreeCtrl<ept i="3">&lt;/a3&gt;</ept> から発生するイベントには <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTreeEvent<ept i="2">&lt;/a2&gt;</ept> が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When instead <bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE_UTF8==1<ept i="0">&lt;/c0&gt;</ept> (e.g. on Linux and Mac OS X) <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> handles UTF8 multi-bytes sequences just fine also for characters outside the BMP (it implements <bpt i="2" x="2">&lt;e2&gt;</bpt>per code point indexing<ept i="2">&lt;/e2&gt;</ept>), so that you can use UTF8 in a completely transparent way:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T125728Z">
        <seg>代わりに <bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE_UTF8==1<ept i="0">&lt;/c0&gt;</ept> (例えば、Linux、Mac OS X) とした場合、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> は BMP 以外の文字でも (<bpt i="2" x="2">&lt;e2&gt;</bpt>コードポイントごとのインデックス<ept i="2">&lt;/e2&gt;</ept> として実装されているため) UTF8 マルチバイトシーケンスとして扱います。そのため、完全に透過的な方法で UTF8 を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the client application starts, it must create an instance of the derived <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152948Z">
        <seg>クライアントアプリケーションを実行するときには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient<ept i="0">&lt;/a0&gt;</ept> の継承クラスのインスタンスを作成する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the client application starts, it must create an instance of the derived wxClient.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T150926Z">
        <seg>クライアントアプリケーションを実行するときには wxClient の継承クラスのインスタンスを作成する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the fitting size for the given contents is computed, it will usually be the client size and the size of the borders needs to be added to obtain the full best size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T145842Z">
        <seg>指定された内容物にフィットするサイズが計算されると、通常はそれがクライアントサイズになり、それにボーダーのサイズを加えることで全体の最適サイズを取得します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the mouse moves in a window of a program which understands the same drag-and-drop protocol (any program under Windows or any program supporting the XDnD protocol under X Windows), the corresponding <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDropTarget<ept i="2">&lt;/a2&gt;</ept> methods are called - see below.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T131653Z">
        <seg>同じ ドラッグ・アンド・ドロップ プロトコルを解釈するプログラム (Windows の任意のプログラム、もしくは X ウィンドウの XDnD プロトコルに対応しているプログラム) のウィンドウ内へマウスが入ると、対応する <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDropTarget<ept i="2">&lt;/a2&gt;</ept> 関数が呼ばれます。以下を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the user clicks on a button, for example the OK button, the application should first call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Validate<ept i="0">&lt;/a0&gt;</ept>, which returns <bpt i="1" x="1">&lt;s1&gt;</bpt>false<ept i="1">&lt;/s1&gt;</ept> if any of the child window validators failed to validate the window data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153402Z">
        <seg>OK ボタンなど、ユーザがボタンを押下すると最初に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Validate<ept i="0">&lt;/a0&gt;</ept> が呼ばれます。この関数は子ウィンドウのいずれかでウィンドウデータの検証に失敗した場合に <bpt i="1" x="1">&lt;s1&gt;</bpt>false<ept i="1">&lt;/s1&gt;</ept> を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the user clicks on a button, for example the OK button, the application should first call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Validate<ept i="0">&lt;/a0&gt;</ept>, which returns false if any of the child window validators failed to validate the window data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T145852Z">
        <seg>OK ボタンなど、ユーザがボタンを押下すると最初に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Validate<ept i="0">&lt;/a0&gt;</ept> が呼ばれます。この関数は子ウィンドウのいずれかでウィンドウデータの検証に失敗した場合に false を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When the user clicks on the system close button or system close command, in a frame or a dialog, wxWidgets calls <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T143852Z">
        <seg>ユーザがフレームやダイアログの閉じるボタンを押下したときや、終了コマンドを実行したときに wxWidgets は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When to use multiple threads</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150933Z">
        <seg>マルチスレッドをいつ使用するべきか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When using a vertical sizer, each child can be centered, aligned to the right or aligned to the left.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T151449Z">
        <seg>垂直方向のサイザーを使用する場合、各子コントロールを中央寄せ、右寄せ、左寄せにすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When working with Unicode, it's important to define the meaning of some terms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T012942Z">
        <seg>Unicode を使用するときは、いくつかの言葉を定義しておくことが重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When writing a multi-threaded application, it is strongly recommended that <bpt i="0" x="0">&lt;b0&gt;</bpt>no secondary threads call GUI functions<ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T235614Z">
        <seg>マルチスレッドアプリケーションを作成するときには <bpt i="0" x="0">&lt;b0&gt;</bpt>サブスレッドから GUI 関数を呼び出さない<ept i="0">&lt;/b0&gt;</ept> ことを強く推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When wxGROW flag is not used, the item can be aligned within available space.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T161646Z">
        <seg>wxGROW フラグを使用しない場合、コントロールを利用可能なスペース内で整列させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you tell the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> class to load a message catalog that contains a correct header, it checks the charset.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T135027Z">
        <seg>正しいヘッダを含むメッセージカタログを読み込むように <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> クラスへ指示すると、そこで文字コードのチェックが行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you tell the wxLocale class to load a message catalog that contains a correct header, it checks the charset.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T133858Z">
        <seg>正しいヘッダを含むメッセージカタログを読み込むように wxLocale クラスへ指示すると、そこで文字コードのチェックが行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>While generically <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvents<ept i="0">&lt;/a0&gt;</ept> can be generated both by user actions (e.g. resize of a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>) and by calls to functions (e.g. <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSize<ept i="2">&lt;/a2&gt;</ept>), wxWidgets controls normally send <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCommandEvent<ept i="3">&lt;/a3&gt;</ept>-derived events only for the user-generated events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060815Z">
        <seg>一般的に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvents<ept i="0">&lt;/a0&gt;</ept> はユーザ操作 (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> のリサイズなど) と関数呼び出し (<bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSize<ept i="2">&lt;/a2&gt;</ept> など) のどちらからでも発生しますが、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxCommandEvent<ept i="3">&lt;/a3&gt;</ept> を継承したイベントはユーザが操作した場合のみ、wxWidgets コントロールから送信されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>While generically wxEvents can be generated both by user actions (e.g., resize of a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept>) and by calls to functions (e.g., <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetSize<ept i="1">&lt;/a1&gt;</ept>), wxWidgets controls normally send wxCommandEvent-derived events only for the user-generated events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155511Z">
        <seg>一般的に wxEvents はユーザ操作 (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> のリサイズなど) と関数呼び出し (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetSize<ept i="1">&lt;/a1&gt;</ept> など) のどちらからでも発生しますが、wxCommandEvent を継承したイベントはユーザが操作した場合のみ、wxWidgets コントロールから送信されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window Deletion</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T033806Z">
        <seg>ウィンドウの削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window Identifiers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T171133Z">
        <seg>ウィンドウ識別子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window Sizing Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T154040Z">
        <seg>ウィンドウサイズの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window Styles</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153858Z">
        <seg>ウィンドウスタイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window deletion can be a confusing subject, so this overview is provided to help make it clear when and how you delete windows, or respond to user requests to close windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T144456Z">
        <seg>ウィンドウの削除は混乱しやすいテーマなので、この概要ではいつ、どのようにウィンドウを削除するか、もしくはユーザの要求に応じてウィンドウを閉じるかについて、理解の手助けになる情報を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window deletion overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T033706Z">
        <seg>ウィンドウ削除の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window identifiers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T070533Z">
        <seg>ウィンドウ識別子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window identifiers are integers, and are used to uniquely determine window identity in the event system (though you can use it for other purposes).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041815Z">
        <seg>ウィンドウ識別子とは、イベントシステムにおいてウィンドウを一意に識別するための整数値です。 (とはいえ、他の用途に使用することもできます)  </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window styles</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T152825Z">
        <seg>ウィンドウスタイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window styles are used to specify alternative behaviour and appearances for windows, when they are created.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153049Z">
        <seg>ウィンドウスタイルはウィンドウの作成時に別の振る舞いや見た目を指定するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Windows bitmap file (wxBITMAP_TYPE_BMP)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T141948Z">
        <seg>Windows ビットマップファイル (wxBITMAP_TYPE_BMP)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Windows bitmap resource (wxBITMAP_TYPE_BMP_RESOURCE)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T141938Z">
        <seg>Windows ビットマップリソース (wxBITMAP_TYPE_BMP_RESOURCE)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Windows cursor file (wxBITMAP_TYPE_CUR)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142241Z">
        <seg>Windows カーソルファイル (wxBITMAP_TYPE_CUR)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Windows cursor resource (wxBITMAP_TYPE_CUR_RESOURCE)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142231Z">
        <seg>Windows カーソルリソース (wxBITMAP_TYPE_CUR_RESOURCE)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Windows icon file (wxBITMAP_TYPE_ICO)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142150Z">
        <seg>Windows アイコンファイル (wxBITMAP_TYPE_ICO)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Windows icon resource (wxBITMAP_TYPE_ICO_RESOURCE)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142142Z">
        <seg>Windows アイコンリソース (wxBITMAP_TYPE_ICO_RESOURCE)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Windows with parents, such as controls, don't have delayed destruction and don't usually have close event handlers, though you can implement them if you wish.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T143126Z">
        <seg>コントロールなど、親を持つウィンドウは直ちに削除され、通常は終了イベントハンドラを持ちません。とはいえ、必要であればそれらを実装することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Windows-specific data types could also be used on the PC.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T033543Z">
        <seg>また、Windows 独自のデータ型を使用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Bind&lt;&gt;() they simply won't be called if it wasn't correctly initialized.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T025528Z">
        <seg>Bind&lt;&gt;() を使用することで、初期化が正常に行われなかった場合は単純にイベントハンドラが呼び出されないだけになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With adaptation enabled, if the display size is too small for the dialog, wxWidgets (or rather the standard adapter class wxStandardDialogLayoutAdapter) will make part of the dialog scrolling, leaving standard buttons in a non-scrolling part at the bottom of the dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T150459Z">
        <seg>適応を有効にすると、ダイアログを表示するのに画面サイズが小さすぎる場合に wxWidgets (と言うより標準の適応クラスである wxStandardDialogLayoutAdapter) が標準ボタンをダイアログ下部の非スクロール領域に残してダイアログの一部をスクロールするようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With the aid of boost::bind&lt;&gt;() you can even use methods or functions which don't quite have the correct signature:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030546Z">
        <seg>boost::bind&lt;&gt;() のおかげで、シグネチャが完全に一致しないメンバ関数でも使用することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With the event handlers, you only have the option of pre-processing the events and in order to still let the default behaviour happen you must call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::Skip()<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;e1&gt;</bpt>not<ept i="1">&lt;/e1&gt;</ept> call the base class event handler directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T154704Z">
        <seg>イベントハンドラでは選択肢は事前処理だけで、デフォルトの振る舞いを呼び出すためには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::Skip()<ept i="0">&lt;/a0&gt;</ept> を呼ぶ必要があり、基底クラスのイベントハンドラを直接呼び出しては <bpt i="1" x="1">&lt;e1&gt;</bpt>いけません<ept i="1">&lt;/e1&gt;</ept> 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With the virtual functions, you need to call the base class function directly and you can do it either in the beginning of the derived class handler function (to post-process the event) or at its end (to pre-process the event).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T154649Z">
        <seg>仮想関数では基底クラスの関数を直接呼び出す必要があり、継承クラスのイベントハンドラの最初 (イベントの事後処理を行なう場合) か最後 (イベントの事前処理を行なう場合) で呼ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Within wxDesigner, this stretch factor gets set from the <bpt i="0" x="0">&lt;e0&gt;</bpt>Option<ept i="0">&lt;/e0&gt;</ept> menu.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141317Z">
        <seg>wxDesigner では、ストレッチ係数は <bpt i="0" x="0">&lt;e0&gt;</bpt>Option<ept i="0">&lt;/e0&gt;</ept> メニューから指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Within wxDesigner, this stretch factor gets set from the <bpt i="0" x="0">&lt;i0&gt;</bpt>Option<ept i="0">&lt;/i0&gt;</ept> menu.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T151238Z">
        <seg>wxDesigner では、ストレッチ係数は <bpt i="0" x="0">&lt;i0&gt;</bpt>Option<ept i="0">&lt;/i0&gt;</ept> メニューから指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Works like Yield() with onlyIfNeeded == true, except that it allows the caller to specify a mask of t...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T000812Z">
        <seg>onlyIfNeeded == true の場合の Yield() と同じように動作しますが、呼び出し元が wxEventCategory の値のマスクを指定できる点が異なります。このマスクではどのイベントを処理するか、もしくは "遅延させる" かを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Write data to the file (descriptor).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091803Z">
        <seg>ファイル (ディスクリプタ) へデータを書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Write your in-code messages in English or without diacritics and put real messages into the message catalog (see <bpt i="0" x="0">&lt;a0&gt;</bpt>Internationalization<ept i="0">&lt;/a0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T134920Z">
        <seg>コード中のメッセージは英語か、もしくは発音区別符号を使用せずに書き、実際のメッセージはメッセージカタログ (<bpt i="0" x="0">&lt;a0&gt;</bpt>国際化<ept i="0">&lt;/a0&gt;</ept> 参照) に書くようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writeable reference to a character in wxString.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121343Z">
        <seg>wxString 内の文字列の書き込み可能な参照です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes text at the current position.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T020644Z">
        <seg>Writes text at the current position.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the text into the text control at the current insertion position.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160644Z">
        <seg>テキストコントロールの現在の挿入位置へテキストを書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123050Z">
        <seg>次のように書くと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing Non-English Applications</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T131720Z">
        <seg>非英語アプリケーションの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing an image format handler for <bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> is also far easier than writing one for <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap<ept i="1">&lt;/a1&gt;</ept>, because <bpt i="2" x="2">&lt;a2&gt;</bpt>wxImage<ept i="2">&lt;/a2&gt;</ept> has exactly one format on all platforms whereas <bpt i="3" x="3">&lt;a3&gt;</bpt>wxBitmap<ept i="3">&lt;/a3&gt;</ept> can store pixel data very differently, depending on colour depths and platform.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T154951Z">
        <seg>また、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxImage<ept i="0">&lt;/a0&gt;</ept> 用の画像形式ハンドラは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBitmap<ept i="1">&lt;/a1&gt;</ept> のものより簡単に書くことができます。なぜなら、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxImage<ept i="2">&lt;/a2&gt;</ept> はすべてのプラットフォームでただひとつの形式を使用するのに対し、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxBitmap<ept i="3">&lt;/a3&gt;</ept> は色深度やプラットフォームに応じて様々な形式でピクセルデータを格納できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing an image format handler for wxImage is also far easier than writing one for wxBitmap, because wxImage has exactly one format on all platforms whereas wxBitmap can store pixel data very differently, depending on colour depths and platform.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T151145Z">
        <seg>また、wxImage 用の画像形式ハンドラは wxBitmap のものより簡単に書くことができます。なぜなら、wxImage はすべてのプラットフォームでただひとつの形式を使用するのに対し、wxBitmap は色深度やプラットフォームに応じて様々な形式でピクセルデータを格納できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing internationalized programs is much easier with Unicode and, as the support for it improves, it should become more and more so.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T154342Z">
        <seg>Unicode を使うことで、国際化対応のプログラムをより簡単に書くことができます。そして、 Unicode 対応が進むにつれ、それはますます簡単になっていくことでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing non-English applications</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T120120Z">
        <seg>非英語アプリケーションの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>XBM data and file (wxBITMAP_TYPE_XBM)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142123Z">
        <seg>XBM データおよび XBM ファイル (wxBITMAP_TYPE_XBM)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>XPM data and file (wxBITMAP_TYPE_XPM)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142000Z">
        <seg>XPM データおよび XPM ファイル (wxBITMAP_TYPE_XPM)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Yes, child windows are deleted from within the parent destructor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T142521Z">
        <seg>はい、子ウィンドウは親ウィンドウのデストラクタで削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You also don't need to use <bpt i="4" x="4">&lt;c4&gt;</bpt>wxChar<ept i="4">&lt;/c4&gt;</ept> any longer but can directly use the standard <bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> type even if, again, <bpt i="6" x="6">&lt;c6&gt;</bpt>wxChar<ept i="6">&lt;/c6&gt;</ept> continues to work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T123452Z">
        <seg>また、<bpt i="4" x="4">&lt;c4&gt;</bpt>wxChar<ept i="4">&lt;/c4&gt;</ept> ももはや使用する必要がありません。ただし、繰り返しますが、標準の <bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> を直接使用できるとはいえ、<bpt i="6" x="6">&lt;c6&gt;</bpt>wxChar<ept i="6">&lt;/c6&gt;</ept> は引き続き動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You also need to insert a macro</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T014624Z">
        <seg>また、以下のマクロを</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::SetTopWindow<ept i="0">&lt;/a0&gt;</ept> to let wxWidgets know about the top window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T151234Z">
        <seg>wxWidgets へトップウィンドウを教えるためには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::SetTopWindow<ept i="0">&lt;/a0&gt;</ept> を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also adjust adaptation on a per-dialog basis by calling <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDialog::SetLayoutAdaptationMode<ept i="2">&lt;/a2&gt;</ept> with one of <bpt i="3" x="3">&lt;c3&gt;</bpt>wxDIALOG_ADAPTATION_MODE_DEFAULT<ept i="3">&lt;/c3&gt;</ept> (use the global setting), <bpt i="4" x="4">&lt;c4&gt;</bpt>wxDIALOG_ADAPTATION_MODE_ENABLED<ept i="4">&lt;/c4&gt;</ept> or <bpt i="5" x="5">&lt;c5&gt;</bpt>wxDIALOG_ADAPTATION_MODE_DISABLED<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T145832Z">
        <seg>また、ダイアログごとに適応を行なうかどうかを指定する場合は <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDialog::SetLayoutAdaptationMode<ept i="2">&lt;/a2&gt;</ept> に <bpt i="3" x="3">&lt;c3&gt;</bpt>wxDIALOG_ADAPTATION_MODE_DEFAULT<ept i="3">&lt;/c3&gt;</ept> (グローバルな設定を使用)、 <bpt i="4" x="4">&lt;c4&gt;</bpt>wxDIALOG_ADAPTATION_MODE_ENABLED<ept i="4">&lt;/c4&gt;</ept>、 <bpt i="5" x="5">&lt;c5&gt;</bpt>wxDIALOG_ADAPTATION_MODE_DISABLED<ept i="5">&lt;/c5&gt;</ept> のいずれかを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also derive your own class for your own custom encoding and use it, should you need it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130716T160416Z">
        <seg>必要であれば、独自のエンコーディング用に継承クラスを作成して使用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also override <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::CanDoLayoutAdaptation<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::DoLayoutAdaptation<ept i="1">&lt;/a1&gt;</ept> in a class derived from <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDialog<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T145045Z">
        <seg>また、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxDialog<ept i="2">&lt;/a2&gt;</ept> を継承したクラスで <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::CanDoLayoutAdaptation<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::DoLayoutAdaptation<ept i="1">&lt;/a1&gt;</ept> をオーバライドすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also redirect the <bpt i="4" x="4">&lt;e4&gt;</bpt>wxLogXXX<ept i="4">&lt;/e4&gt;</ept> calls to <bpt i="5" x="5">&lt;e5&gt;</bpt>cout<ept i="5">&lt;/e5&gt;</ept> by just writing:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091504Z">
        <seg>以下のように書くことで <bpt i="4" x="4">&lt;e4&gt;</bpt>wxLogXXX<ept i="4">&lt;/e4&gt;</ept> 呼び出しを <bpt i="5" x="5">&lt;e5&gt;</bpt>cout<ept i="5">&lt;/e5&gt;</ept> へリダイレクトすることもできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also redirect the <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLogXXX<ept i="0">&lt;/i0&gt;</ept> calls to <bpt i="1" x="1">&lt;i1&gt;</bpt>cout<ept i="1">&lt;/i1&gt;</ept> by just writing:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015131Z">
        <seg>以下のように書くことで <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLogXXX<ept i="0">&lt;/i0&gt;</ept> 呼び出しを <bpt i="1" x="1">&lt;i1&gt;</bpt>cout<ept i="1">&lt;/i1&gt;</ept> へリダイレクトすることもできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also use DECLARE_APP(appClass) in a header file to declare the wxGetApp function which returns a reference to the application object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T151539Z">
        <seg>また、ヘッダファイル内で DECLARE_APP(appClass) を使用することで、アプリケーションオブジェクトへの参照を返却する wxGetApp 関数を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can derive a new class from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept> instead, defining the appropriate event table, and then call <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetEventHandler<ept i="1">&lt;/a1&gt;</ept> (or, preferably, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::PushEventHandler<ept i="2">&lt;/a2&gt;</ept>) to make this event handler the object that responds to events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T072042Z">
        <seg>代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept> を継承した新しいクラスを作成して適切なイベントテーブルを定義し、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetEventHandler<ept i="1">&lt;/a1&gt;</ept> (か、より望ましくは <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::PushEventHandler<ept i="2">&lt;/a2&gt;</ept>) を呼び出してこのイベントテーブルを使用するようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can derive a new class from wxEvtHandler instead, defining the appropriate event table, and then call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetEventHandler<ept i="0">&lt;/a0&gt;</ept> (or, preferably, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::PushEventHandler<ept i="1">&lt;/a1&gt;</ept>) to make this event handler the object that responds to events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041203Z">
        <seg>代わりに wxEvtHandler を継承した新しいクラスを作成して適切なイベントテーブルを定義し、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetEventHandler<ept i="0">&lt;/a0&gt;</ept> (か、より望ましいのは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::PushEventHandler<ept i="1">&lt;/a1&gt;</ept>) を呼び出してこのイベントテーブルを使用するようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can derive your own class from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialogLayoutAdapter<ept i="0">&lt;/a0&gt;</ept> or wxStandardDialogLayoutAdapter and call <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::SetLayoutAdapter<ept i="1">&lt;/a1&gt;</ept>, deleting the old object that this function returns.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T155111Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialogLayoutAdapter<ept i="0">&lt;/a0&gt;</ept> か wxStandardDialogLayoutAdapter を継承した独自のクラスを作成することができます。その場合、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDialog::SetLayoutAdapter<ept i="1">&lt;/a1&gt;</ept> を呼び出し、返却されてきた古いオブジェクトは削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can do checking to see if your application can be safely exited at this point, either from within your close event handler, or from within your exit menu command handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T155706Z">
        <seg>このときにアプリケーションを安全に終了できるかどうかを自前の終了イベントハンドラ、もしくは終了メニューコマンドハンドラから確認することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can either choose a single approach that you find preferable or freely combine both methods in your program in different classes or even in one and the same class, although this is probably sufficiently confusing to be a bad idea.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T021925Z">
        <seg>より適切と思ういずれかの方法を選択することもできますし、(おそらく混乱を招く、悪い考えでしょうが) 異なるクラスや同じクラス内で自由に両方の方法を組み合わせることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can grab all the input for an existing dialog box, and edit it 'in situ', before restoring its behaviour to normal.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T124411Z">
        <seg>その場合、既存のダイアログの振る舞いを元に戻す前にすべての入力を取得し、"その場で" 編集することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can help make sure that your dialogs will continue to function after adaptation by:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T150447Z">
        <seg>次のようにすることで、適応の実施後もダイアログが引き続き正常に動作するようにできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can hide controls contained in sizers the same way you would hide any control, using the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Show<ept i="0">&lt;/a0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T151534Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Show<ept i="0">&lt;/a0&gt;</ept> を用いて任意のコントロールを非表示にするのと同じ方法で、サイザー内のコントロールを非表示にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can however safely assume that GUI is (already/still) available when your log target as used as wxWidgets automatically switches to using <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogStderr<ept i="3">&lt;/a3&gt;</ept> if it isn't.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T122008Z">
        <seg>しかし、ログターゲットを使用するときに (すでに/まだ) GUI が存在すると安全に仮定することができます。なぜなら、 GUI が存在しない場合は <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogStderr<ept i="3">&lt;/a3&gt;</ept> を使用するように wxWidgets がログターゲットを自動的に切り替えるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can ignore the <bpt i="0" x="0">&lt;i0&gt;</bpt>value<ept i="0">&lt;/i0&gt;</ept> parameter of the DECLARE_EVENT_TYPE macro since it used only for backwards compatibility with wxWidgets 2.0.x based applications where you have to give the event type ID an explicit value.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T154344Z">
        <seg>DECLARE_EVENT_TYPE の <bpt i="0" x="0">&lt;i0&gt;</bpt>value<ept i="0">&lt;/i0&gt;</ept> 引数はイベント ID を明示的に指定していた wxWidgets 2.0.x との後方互換性のために使用されているだけなので、無視することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can not store binary data, for example.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T150447Z">
        <seg>例えば、バイナリデータを格納することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can optionally define event handlers for the validator, to implement filtering.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T144857Z">
        <seg>イベントのフィルタリングを行なうためにバリデータ用のイベントハンドラを任意に定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can set WXPREFIX if you are for example distributing a binary version of an application and you don't know in advance where it will be installed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155354Z">
        <seg>例えば、アプリケーションのバイナリを配布するときにどこへインストールされるか分からないような場合に WXPREFIX を設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can simply call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept> on the frame.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T155225Z">
        <seg>フレームの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept> を単純に呼ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can skip the first two sections if you're already familiar with Unicode and wish to jump directly in the details of its support in the library:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005506Z">
        <seg>すでに Unicode について詳しい場合、最初の 2 つの章は飛ばして、直接ライブラリの対応内容の詳細に飛んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::AddMainButtonId<ept i="0">&lt;/a0&gt;</ept> to add identifiers for buttons that should also be treated as standard buttons for the non-scrolling area.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T153026Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::AddMainButtonId<ept i="0">&lt;/a0&gt;</ept> を使用することで非スクロール領域にする標準ボタンとして扱う識別子を追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv Overview<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFontMapper<ept i="1">&lt;/a1&gt;</ept> to display text:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143313Z">
        <seg>テキストを表示するのに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv の概要<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFontMapper<ept i="1">&lt;/a1&gt;</ept> を使用できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv classes<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFontMapper<ept i="1">&lt;/a1&gt;</ept> to display text:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132627Z">
        <seg>テキストを表示するのに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv クラス<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFontMapper<ept i="1">&lt;/a1&gt;</ept> を使用できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept> class to convert data to the encoding used by the system your application is running on (see <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale::GetSystemEncoding<ept i="2">&lt;/a2&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T133024Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept> クラスを使用することで、アプリケーションを実行しているシステムで使用されているエンコーディングにデータを変換することができます。(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale::GetSystemEncoding<ept i="2">&lt;/a2&gt;</ept> 参照)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept> to convert data to the encoding used by the system your application is running on (see <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale::GetSystemEncoding<ept i="2">&lt;/a2&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143604Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxCSConv<ept i="1">&lt;/a1&gt;</ept> を使用することで、アプリケーションを実行しているシステムで使用されているエンコーディングにデータを変換することができます。(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale::GetSystemEncoding<ept i="2">&lt;/a2&gt;</ept> 参照)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use a stock validator, such as <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextValidator<ept i="0">&lt;/a0&gt;</ept> (which does text control data transfer, validation and filtering) and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGenericValidator<ept i="1">&lt;/a1&gt;</ept> (which does data transfer for a range of controls); or you can write your own.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143021Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextValidator<ept i="0">&lt;/a0&gt;</ept> (テキストデータの転送、検証、フィルタリングを行います) や <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGenericValidator<ept i="1">&lt;/a1&gt;</ept> (複数のコントロールへデータを転送します) といった既存のバリデータを使用することもできますし、自分で作成することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use these predefined objects directly, or you can instantiate your own objects.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130716T160802Z">
        <seg>これらの事前定義されたオブジェクトを直接使用することもできますし、それとは別にインスタンス化することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use wxID_HIGHEST to determine the number above which it is safe to define your own identifiers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080114Z">
        <seg>新たな識別子を定義する場合、wxID_HIGHEST 以上の値を使用することで安全に値を決定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You cannot store binary data, for example.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T153851Z">
        <seg>例えば、バイナリデータを格納することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You could be sending data over a network, or processing a text file for some other application.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T154350Z">
        <seg>これはネットワーク越しにデータを送信する場合や他のアプリケーションで扱うテキストファイルを処理する場合です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You have to fill in proper charset information.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T134954Z">
        <seg>ここに適切な文字コードの情報を記入する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may also force the conversion to <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> by using an explicit cast but beware that converting the value to char uses the conversion to current locale and may return 0 if it fails.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122945Z">
        <seg>もしくは、明示的なキャストを用いて強制的に <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> か <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> へ変換することもできますが、 char 型への変換は現在のロケールに対して行われ、変換に失敗した場合は 0 が返却されることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may give some custom UI feedback during the drag and drop operation by overriding this function...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135000Z">
        <seg>この関数をオーバーライドすることで、ドラッグ・アンド・ドロップ中に独自の UI フィードバックを提供することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may include the XPM inline as below, since it's C code, or you can load it at run-time.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T140213Z">
        <seg>XPM は C のコードであるため、以下のようにして XPM をインラインでインクルードしたり、実行時に読み込むことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may try setting it to greater amount (say twice nLen) or to 0 (to see performance degradation which will follow) and analyse the impact of it on your program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T083114Z">
        <seg>この値を大きく (ここでは nLen の倍にしたとしましょう) したり、(性能の劣化具合を確認するために) 0 に設定したりしてプログラムに与える影響を分析しようとするかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may use the <bpt i="0" x="0">&lt;c0&gt;</bpt>wxID_OK<ept i="0">&lt;/c0&gt;</ept> identifier, for example, on any number of dialogs as long as you don't have several within the same dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T171208Z">
        <seg>例えば、同じダイアログ内で複数回使うのでなければ、いくつものダイアログで <bpt i="0" x="0">&lt;c0&gt;</bpt>wxID_OK<ept i="0">&lt;/c0&gt;</ept> 識別子を使用しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may use the <bpt i="0" x="0">&lt;t0&gt;</bpt>wxID_OK<ept i="0">&lt;/t0&gt;</ept> identifier, for example, on any number of dialogs so long as you don't have several within the same dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T075113Z">
        <seg>例えば、同じダイアログ内で複数回使うのでなければ、いくつものダイアログで <bpt i="0" x="0">&lt;t0&gt;</bpt>wxID_OK<ept i="0">&lt;/t0&gt;</ept> 識別子を使用しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may want to store all program data (created documents etc.) in the same encoding, let's say <bpt i="0" x="0">&lt;c0&gt;</bpt>utf-8<ept i="0">&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143550Z">
        <seg>プログラムで扱うデータ (作成したドキュメントなど) をすべて同じエンコーディングで保持したいと思うかもしれません。仮に <bpt i="0" x="0">&lt;c0&gt;</bpt>utf-8<ept i="0">&lt;/c0&gt;</ept> としましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may want to store all program data (created documents etc.) in the same encoding, let's say <bpt i="0" x="0">&lt;t0&gt;</bpt>utf-8<ept i="0">&lt;/t0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132922Z">
        <seg>プログラムで扱うデータ (作成したドキュメントなど) をすべて同じエンコーディングで保持したいと思うかもしれません。仮に <bpt i="0" x="0">&lt;t0&gt;</bpt>utf-8<ept i="0">&lt;/t0&gt;</ept> としましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You must derive a class from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDropTarget<ept i="3">&lt;/a3&gt;</ept> and override its pure virtual methods.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T135443Z">
        <seg>また、ドロップ先になるには <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDropTarget<ept i="3">&lt;/a3&gt;</ept> を継承し、純粋仮想関数をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You must derive a class from wxDropTarget and override its pure virtual methods.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T132111Z">
        <seg>また、ドロップ先になるには wxDropTarget を継承し、純粋仮想関数をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You must then call Layout on the sizer to force an update.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T145952Z">
        <seg>その後、強制的に更新するためにサイザーの Layout 関数を呼び出す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You need a way to quickly convert your easily-handled Unicode data to and from a traditional 8-bit encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T154613Z">
        <seg>取り扱いの簡単な Unicode データと伝統的な 8 ビットエンコーディングとを相互に変換する方法が欲しいと思うでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You only need to make sure that all the HTML files contain the META tag, e.g.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T133345Z">
        <seg>すべての HTML ファイルに次のような META タグを含めて、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You only need to make sure that all the HTML files contain the META tag:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T144652Z">
        <seg>必要なことはすべての HTML ファイルに次のような META タグを含めることだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should also look at the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread<ept i="0">&lt;/a0&gt;</ept> docs for important notes about secondary threads and their deletion.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T000239Z">
        <seg>また、サブスレッドとその削除に関する注意事項について <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread<ept i="0">&lt;/a0&gt;</ept> のドキュメントも参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should always use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxICON()<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBITMAP()<ept i="1">&lt;/a1&gt;</ept> macros because they work for any platform (unlike the code above which doesn't deal with wxMac, wxX11, ...) and are shorter and more clear than versions with many <bpt i="2" x="2">&lt;s2&gt;</bpt>#ifdef<ept i="2">&lt;/s2&gt;</ept> blocks.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T155738Z">
        <seg>常に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxICON()<ept i="0">&lt;/a0&gt;</ept> マクロと <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBITMAP()<ept i="1">&lt;/a1&gt;</ept> マクロを使用するべきです。なぜなら、これらのマクロはどのプラットフォームでも動作しますし (上記のコードは wxMac、wxX11、... に対応していません)、<bpt i="2" x="2">&lt;s2&gt;</bpt>#ifdef<ept i="2">&lt;/s2&gt;</ept> を使用したものより簡潔で明確だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should always use wxICON and wxBITMAP macros because they work for any platform (unlike the code above which doesn't deal with wxMac, wxX11, ...) and are more short and clear than versions with <bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef<ept i="0">&lt;/t0&gt;</ept>s.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T150859Z">
        <seg>常に wxICON マクロと wxBITMAP マクロを使用するべきです。なぜなら、これらのマクロはどのプラットフォームでも動作しますし (上記のコードは wxMac、wxX11、... に対応していません)、<bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef<ept i="0">&lt;/t0&gt;</ept> を使用したものより簡潔で明確だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should define <bpt i="0" x="0">&lt;t0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/t0&gt;</ept> to 1 to compile your program in Unicode mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144600Z">
        <seg>プログラムを Unicode モードでコンパイルする場合、 <bpt i="0" x="0">&lt;t0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/t0&gt;</ept> を 1 に定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should delete all wxWidgets object that you created by the time OnExit finishes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162416Z">
        <seg>作成した wxWidgets は OnExit が完了するまでにすべて削除するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You shouldn't pass <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> result to vararg functions such as standard <bpt i="1" x="1">&lt;c1&gt;</bpt>printf()<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124508Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> の戻り値を標準 <bpt i="1" x="1">&lt;c1&gt;</bpt>printf()<ept i="1">&lt;/c1&gt;</ept> などの可変引数関数へ渡してはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You will find the details about the event table macros and the corresponding wxEvent-derived classes in the discussion of each control generating these events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024411Z">
        <seg>イベントテーブルマクロと、それに付随する wxEvent の継承クラスについては、イベントを生成する各コントロールの説明で詳しく説明しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You will need to change it in your derived renderer class accordingly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T154336Z">
        <seg>これにあわせて継承クラスを変更する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You will need to change it in your derived renderer class too if you override it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T154124Z">
        <seg>この関数をオーバーライドしている場合、継承クラスのシグネチャも変更する必要があります。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You'll have to define and declare a new event type using either way, and this is done using the following macros:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162809Z">
        <seg>どちらの方法を使うにせよ、新しいイベント型の定義と宣言が必要となりますが、それには以下のマクロを使用します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You're instead encouraged to use <bpt i="4" x="4">&lt;a4&gt;</bpt>wxThreadHelper<ept i="4">&lt;/a4&gt;</ept> as it greatly simplifies the communication and the sharing of resources.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T000101Z">
        <seg>代わりに <bpt i="4" x="4">&lt;a4&gt;</bpt>wxThreadHelper<ept i="4">&lt;/a4&gt;</ept> を使用することが奨励されており、このクラスはスレッド間のやり取りとリソースの共有を非常に単純化してくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Your .po file may look like this after doing so:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T123633Z">
        <seg>これを行ったあとの .po ファイルはこのようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Your application can either use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept> event just as the framework does, or it can call <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Destroy<ept i="1">&lt;/a1&gt;</ept> directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T151124Z">
        <seg>アプリケーションではフレームワークが行なうように <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept> イベントを使用するか、もしくは直接 <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::Destroy<ept i="1">&lt;/a1&gt;</ept> を呼び出すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>and that the hhp project file contains one additional line in the <bpt i="0" x="0">&lt;t0&gt;</bpt>OPTIONS<ept i="0">&lt;/t0&gt;</ept> section:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T133340Z">
        <seg>hhp プロジェクトファイルの <bpt i="0" x="0">&lt;t0&gt;</bpt>OPTIONS<ept i="0">&lt;/t0&gt;</ept> セクションに一行追加するだけで充分です:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>and the custom <bpt i="3" x="3">&lt;a3&gt;</bpt>wxServer<ept i="3">&lt;/a3&gt;</ept> is required so that a user-overridden <bpt i="4" x="4">&lt;a4&gt;</bpt>wxClient::OnMakeConnection<ept i="4">&lt;/a4&gt;</ept> member can return a <bpt i="5" x="5">&lt;a5&gt;</bpt>wxConnection<ept i="5">&lt;/a5&gt;</ept> of the required class, when a connection is made.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130820T152617Z">
        <seg>そして <bpt i="3" x="3">&lt;a3&gt;</bpt>wxServer<ept i="3">&lt;/a3&gt;</ept> を継承したクラスが必要になります。これにより、接続が確立したときに <bpt i="4" x="4">&lt;a4&gt;</bpt>wxClient::OnMakeConnection<ept i="4">&lt;/a4&gt;</ept> をオーバーライドした関数が要求されたクラスの <bpt i="5" x="5">&lt;a5&gt;</bpt>wxConnection<ept i="5">&lt;/a5&gt;</ept> を返却できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>and the custom wxServer is required so that a user-overridden <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient::OnMakeConnection<ept i="0">&lt;/a0&gt;</ept> member can return a wxConnection of the required class, when a connection is made.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T150518Z">
        <seg>そして wxServer を継承したクラスが必要になります。これにより、接続が確立したときに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxClient::OnMakeConnection<ept i="0">&lt;/a0&gt;</ept> をオーバーライドした関数が要求されたクラスの wxConnection を返却できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>and the somewhat less usual</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041535Z">
        <seg>そして、若干、一般的ではないですが、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>avoiding the above situations and assumptions;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T150520Z">
        <seg>上記のような状況や仮定を避ける;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>because the argument of <bpt i="0" x="0">&lt;c0&gt;</bpt>puts()<ept i="0">&lt;/c0&gt;</ept> is known to be of the type <bpt i="1" x="1">&lt;c1&gt;</bpt>const char*<ept i="1">&lt;/c1&gt;</ept>, this is <bpt i="2" x="2">&lt;b2&gt;</bpt>not<ept i="2">&lt;/b2&gt;</ept> done for <bpt i="3" x="3">&lt;c3&gt;</bpt>printf()<ept i="3">&lt;/c3&gt;</ept> which is a function with variable number of arguments (and whose arguments are of unknown types).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114039Z">
        <seg>なぜなら、<bpt i="0" x="0">&lt;c0&gt;</bpt>puts()<ept i="0">&lt;/c0&gt;</ept> の引数が <bpt i="1" x="1">&lt;c1&gt;</bpt>const char *<ept i="1">&lt;/c1&gt;</ept> 型であることが分かっているためです。これは (引数が不明な型になる) 可変数引数を受け取る <bpt i="3" x="3">&lt;c3&gt;</bpt>printf()<ept i="3">&lt;/c3&gt;</ept> では <bpt i="2" x="2">&lt;b2&gt;</bpt>行われません<ept i="2">&lt;/b2&gt;</ept> 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>because the argument of <bpt i="0" x="0">&lt;i0&gt;</bpt>puts()<ept i="0">&lt;/i0&gt;</ept> is known to be of the type <bpt i="1" x="1">&lt;i1&gt;</bpt>const char *<ept i="1">&lt;/i1&gt;</ept>, this is <bpt i="2" x="2">&lt;b2&gt;</bpt>not<ept i="2">&lt;/b2&gt;</ept> done for <bpt i="3" x="3">&lt;i3&gt;</bpt>printf()<ept i="3">&lt;/i3&gt;</ept> which is a function with variable number of arguments (and whose arguments are of unknown types).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T054815Z">
        <seg>なぜなら、<bpt i="0" x="0">&lt;i0&gt;</bpt>puts()<ept i="0">&lt;/i0&gt;</ept> の引数が <bpt i="1" x="1">&lt;i1&gt;</bpt>const char *<ept i="1">&lt;/i1&gt;</ept> 型であることが分かっているためです。これは (引数が不明な型になる) 可変数引数を受け取る <bpt i="3" x="3">&lt;i3&gt;</bpt>printf()<ept i="3">&lt;/i3&gt;</ept> では <bpt i="2" x="2">&lt;b2&gt;</bpt>行われません<ept i="2">&lt;/b2&gt;</ept> 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>bind( &amp;MyHandler::OnExit, &amp;myHandler, EXIT_FAILURE, _1, <bpt i="5" x="5">&lt;s5&gt;</bpt>"Bye"<ept i="5">&lt;/s5&gt;</ept> ));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061218Z">
        <seg>bind( &amp;MyHandler::OnExit, &amp;myHandler, EXIT_FAILURE, _1, <bpt i="5" x="5">&lt;s5&gt;</bpt>"Bye"<ept i="5">&lt;/s5&gt;</ept> ));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>bool OnAdvise(const wxString&amp; topic, const wxString&amp; item, char *data, int size, wxIPCFormat format)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134045Z">
        <seg>bool OnAdvise(const wxString&amp; topic, const wxString&amp; item, char *data, int size, wxIPCFormat format)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>break;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160341Z">
        <seg>break;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112815Z">
        <seg>button_sizer,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;<bpt i="34" x="34">&lt;a34&gt;</bpt>Add<ept i="34">&lt;/a34&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145523Z">
        <seg>button_sizer-&gt;<bpt i="34" x="34">&lt;a34&gt;</bpt>Add<ept i="34">&lt;/a34&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;<bpt i="35" x="35">&lt;a35&gt;</bpt>Add<ept i="35">&lt;/a35&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143818Z">
        <seg>button_sizer-&gt;<bpt i="35" x="35">&lt;a35&gt;</bpt>Add<ept i="35">&lt;/a35&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;<bpt i="42" x="42">&lt;a42&gt;</bpt>Add<ept i="42">&lt;/a42&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145533Z">
        <seg>button_sizer-&gt;<bpt i="42" x="42">&lt;a42&gt;</bpt>Add<ept i="42">&lt;/a42&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;<bpt i="45" x="45">&lt;a45&gt;</bpt>Add<ept i="45">&lt;/a45&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143853Z">
        <seg>button_sizer-&gt;<bpt i="45" x="45">&lt;a45&gt;</bpt>Add<ept i="45">&lt;/a45&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112307Z">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>case wxID_CANCEL:   // Do nothing - so don't quit app.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T140533Z">
        <seg>case wxID_CANCEL:   // 何もしない - そのため、アプリケーションを終了しない
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>case wxID_NO:       // Don't save; just destroy, quitting app</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160403Z">
        <seg>case wxID_NO:       // 保存しない; 破棄してアプリケーションを終了する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>case wxID_YES:      // Save, then destroy, quitting app</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160339Z">
        <seg>case wxID_YES:      // 保存し、アプリケーションを終了する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>char ch = '*';</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160628Z">
        <seg>char ch = '*';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>class DerivedApp : public wxApp
{
public:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161002Z">
        <seg>class DerivedApp : public wxApp
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>class MyApp : public wxApp
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162433Z">
        <seg>class MyApp : public wxApp
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>class MyConnection: public wxConnection {</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134041Z">
        <seg>class MyConnection: public wxConnection {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>class MyFrame : public wxFrame
{
public:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081755Z">
        <seg>class MyFrame : public wxFrame
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>conf.Write(<bpt i="1" x="1">&lt;s1&gt;</bpt>"MyFavouriteColour"<ept i="1">&lt;/s1&gt;</ept>, Red);       <bpt i="2" x="2">&lt;s2&gt;</bpt>// ERROR: no match<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T124434Z">
        <seg>conf.Write(<bpt i="1" x="1">&lt;s1&gt;</bpt>"MyFavouriteColour"<ept i="1">&lt;/s1&gt;</ept>, Red);       <bpt i="2" x="2">&lt;s2&gt;</bpt>// エラー: 一致しない<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>conf.Write(<bpt i="3" x="3">&lt;s3&gt;</bpt>"MyFavouriteColour"<ept i="3">&lt;/s3&gt;</ept>, <bpt i="4" x="4">&lt;s4&gt;</bpt>int<ept i="4">&lt;/s4&gt;</ept>(Red));  <bpt i="5" x="5">&lt;s5&gt;</bpt>// OK<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152928Z">
        <seg>conf.Write(<bpt i="3" x="3">&lt;s3&gt;</bpt>"MyFavouriteColour"<ept i="3">&lt;/s3&gt;</ept>, <bpt i="4" x="4">&lt;s4&gt;</bpt>int<ept i="4">&lt;/s4&gt;</ept>(Red));  <bpt i="5" x="5">&lt;s5&gt;</bpt>// OK<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>connection = (MyConnection *)client-&gt;MakeConnection(hostName, server, "IPC TEST");</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134753Z">
        <seg>connection = (MyConnection *)client-&gt;MakeConnection(hostName, server, "IPC TEST");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>connection-&gt;StartAdvise("Item");</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134758Z">
        <seg>connection-&gt;StartAdvise("Item");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>const char *s = "Hello, world!";</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160629Z">
        <seg>const char *s = "Hello, world!";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>const char* ascii_str = "Some text";</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144205Z">
        <seg>const char* ascii_str = "Some text";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>const wchar_t *ws = L"Hello, world!";</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160623Z">
        <seg>const wchar_t *ws = L"Hello, world!";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>const wxWX2MBbuf tmp_buf = wxConvCurrent-&gt;cWX2MB(unicode_data);
const char *tmp_str = (const char*) tmp_buf;
printf("Data: %s\n", tmp_str);
process_data(tmp_str);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T150027Z">
        <seg>const wxWX2MBbuf tmp_buf = wxConvCurrent-&gt;cWX2MB(unicode_data);
const char *tmp_str = (const char*) tmp_buf;
printf("Data: %s\n", tmp_str);
process_data(tmp_str);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>default:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160445Z">
        <seg>default:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>delete m_helpCtrl;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162759Z">
        <seg>delete m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>dialog-&gt;Destroy();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160314Z">
        <seg>dialog-&gt;Destroy();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>do everything at once but call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Update()<ept i="0">&lt;/a0&gt;</ept> or wxApp::YieldFor(wxEVT_CATEGORY_UI) periodically to update the screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T234947Z">
        <seg>すべての計算を一度に行うが、画面を更新するために <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Update()<ept i="0">&lt;/a0&gt;</ept> か wxApp::YieldFor(wxEVT_CATEGORY_UI) を定期的に呼び出す。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>does <bpt i="0" x="0">&lt;b0&gt;</bpt>not<ept i="0">&lt;/b0&gt;</ept> work because the temporary buffer returned by <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::ToUTF8()<ept i="1">&lt;/a1&gt;</ept> is destroyed and <bpt i="2" x="2">&lt;c2&gt;</bpt>p<ept i="2">&lt;/c2&gt;</ept> is left pointing nowhere.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171118Z">
        <seg>動作 <bpt i="0" x="0">&lt;b0&gt;</bpt>しません<ept i="0">&lt;/b0&gt;</ept>。これは、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::ToUTF8()<ept i="1">&lt;/a1&gt;</ept> の返却した一時バッファが破棄され、<bpt i="2" x="2">&lt;c2&gt;</bpt>p<ept i="2">&lt;/c2&gt;</ept> が存在しないアドレスを指したままになるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>does not compile when using Microsoft Visual C++ and needs to be changed to use mb_str() (which will not work for file names containing Unicode characters, consider using wxWidgets classes and functions to work with such file names as they are not supported by standard C++ library).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T123835Z">
        <seg>Microsoft Visual C++ を使用するとコンパイルされないため、mb_str() を使用するように変更する必要があります。(mb_str() は Unicode 文字を含むファイル名では動作しません。標準の C++ ライブラリではそのようなフィアル名に対応していないため、これらを取り扱える wxWidgets のクラスと関数を使用することを検討してください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>doesn't compile.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130846Z">
        <seg>これはコンパイルすることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>doesn't work because the argument of the switch statement must be an integer expression so you need to replace <bpt i="0" x="0">&lt;c0&gt;</bpt>s<ept i="0">&lt;/c0&gt;</ept>[n] with</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123101Z">
        <seg>うまく動作しません。なぜなら、switch 文の引数は整数式でなければならないためです。そのため、<bpt i="0" x="0">&lt;c0&gt;</bpt>s<ept i="0">&lt;/c0&gt;</ept>[n] を次のように置き換える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>doesn't yield a pointer to char so you may not pass it to functions expecting <bpt i="0" x="0">&lt;c0&gt;</bpt>char*<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t*<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034117Z">
        <seg>では char 型のポインタを得ることはできないため、これを <bpt i="0" x="0">&lt;c0&gt;</bpt>char*<ept i="0">&lt;/c0&gt;</ept> または <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t*<ept i="1">&lt;/c1&gt;</ept> を受け取る関数に渡すことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>dragSource.SetData( my_data );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T134857Z">
        <seg>dragSource.SetData( my_data );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>else</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022721Z">
        <seg>else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>event.SetCurve( m_curve );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164453Z">
        <seg>event.SetCurve( m_curve );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>event.SetEventObject( this );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155833Z">
        <seg>event.SetEventObject( this );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>event.SetText( wxT("Hallo") );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155946Z">
        <seg>event.SetText( wxT("Hallo") );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>event.Skip();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022720Z">
        <seg>event.Skip();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>event.Veto();     // Notify the calling code that we didn't delete the frame.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T140549Z">
        <seg>event.Veto();     // フレームを削除しなかったことを呼び出し元へ通知する
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>facename, <bpt i="5" x="5">&lt;s5&gt;</bpt>false<ept i="5">&lt;/s5&gt;</ept>))</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143518Z">
        <seg>facename, <bpt i="5" x="5">&lt;s5&gt;</bpt>false<ept i="5">&lt;/s5&gt;</ept>))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>facename, false))</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132637Z">
        <seg>facename, false))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>for ( size_t n = 0; n &lt; len; n++ )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080451Z">
        <seg>for ( size_t n = 0; n &lt; len; n++ )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061208Z">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler( bind( &amp;MyHandler::OnExit, &amp;myHandler, _1 ));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060952Z">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler( bind( &amp;MyHandler::OnExit, &amp;myHandler, _1 ));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>however this doesn't work correctly for strings with embedded <bpt i="0" x="0">&lt;c0&gt;</bpt>NUL<ept i="0">&lt;/c0&gt;</ept> characters and the use of iterators is generally preferred as they provide some run-time checks (at least in debug build) unlike the raw pointers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T154638Z">
        <seg>ただし、これは文字列中に <bpt i="0" x="0">&lt;c0&gt;</bpt>NUL<ept i="0">&lt;/c0&gt;</ept> 文字が含まれる場合には正しく動作しません。生ポインタと違い、イテレータを使うといくつかの実行時チェックが (少なくともデバッグビルドでは) 行われるため、一般的にはこちらの方が望ましいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if ( !file.Open("bar") )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030138Z">
        <seg>if ( !file.Open("bar") )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if ( IsModal() )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150139Z">
        <seg>if ( IsModal() )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if ( Validate() &amp;&amp; TransferDataFromWindow() )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150138Z">
        <seg>if ( Validate() &amp;&amp; TransferDataFromWindow() )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if ( isalpha( event.KeyCode() ) )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022522Z">
        <seg>if ( isalpha( event.KeyCode() ) )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if ( strchr("aeuio", tolower(original[n])) == NULL )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080454Z">
        <seg>if ( strchr("aeuio", tolower(original[n])) == NULL )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if (!connection)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134753Z">
        <seg>if (!connection)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if (!event.CanVeto()) // Test if we can veto this deletion</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T140539Z">
        <seg>if (!event.CanVeto()) // この削除が拒否可能か確認する
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if (!wxFontMapper::Get()-&gt;IsEncodingAvailable(enc, facename))
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132629Z">
        <seg>if (!wxFontMapper::Get()-&gt;IsEncodingAvailable(enc, facename))
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if (MyDataHasBeenModified())</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160305Z">
        <seg>if (MyDataHasBeenModified())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if (in_stream.LastError() != wxSTREAM_NOERROR) {</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141807Z">
        <seg>if (in_stream.LastError() != wxSTREAM_NOERROR) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if (in_stream.Read(data, nb_datas).LastError() != wxSTREAM_NOERROR) {</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141857Z">
        <seg>if (in_stream.Read(data, nb_datas).LastError() != wxSTREAM_NOERROR) {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if (wxFontMapper::Get()-&gt;GetAltForEncoding(enc, &amp;alternative,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132634Z">
        <seg>if (wxFontMapper::Get()-&gt;GetAltForEncoding(enc, &amp;alternative,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>in_stream.Read(data, nb_datas);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141804Z">
        <seg>in_stream.Read(data, nb_datas);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>int       m_count;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081804Z">
        <seg>int       m_count;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>int ans = dialog-&gt;ShowModal();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160314Z">
        <seg>int ans = dialog-&gt;ShowModal();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>int len = s.Len();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161655Z">
        <seg>int len = s.Len();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>int len = strlen(s);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160630Z">
        <seg>int len = strlen(s);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>int len = wcslen(ws);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160624Z">
        <seg>int len = wcslen(ws);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>is not going to work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124620Z">
        <seg>これは正常に動作しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>locale.AddCatalog(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxT<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"myapp"<ept i="1">&lt;/s1&gt;</ept>), <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLANGUAGE_GERMAN<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxT<ept i="3">&lt;/a3&gt;</ept>(<bpt i="4" x="4">&lt;s4&gt;</bpt>"iso-8859-1"<ept i="4">&lt;/s4&gt;</ept>));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T135522Z">
        <seg>locale.AddCatalog(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxT<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"myapp"<ept i="1">&lt;/s1&gt;</ept>), <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLANGUAGE_GERMAN<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxT<ept i="3">&lt;/a3&gt;</ept>(<bpt i="4" x="4">&lt;s4&gt;</bpt>"iso-8859-1"<ept i="4">&lt;/s4&gt;</ept>));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>locale.AddCatalog(_T("myapp"),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132536Z">
        <seg>locale.AddCatalog(_T("myapp"),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>m_child-&gt;Bind(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEVT_LEAVE_WINDOW<ept i="0">&lt;/a0&gt;</ept>, &amp;MyFrame::OnMouseLeave, <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045726Z">
        <seg>m_child-&gt;Bind(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEVT_LEAVE_WINDOW<ept i="0">&lt;/a0&gt;</ept>, &amp;MyFrame::OnMouseLeave, <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>m_helpCtrl = <bpt i="6" x="6">&lt;s6&gt;</bpt>new<ept i="6">&lt;/s6&gt;</ept> wxCHMHelpController;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124601Z">
        <seg>m_helpCtrl = <bpt i="6" x="6">&lt;s6&gt;</bpt>new<ept i="6">&lt;/s6&gt;</ept> wxCHMHelpController;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>m_helpCtrl = new wxCHMHelpController;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162755Z">
        <seg>m_helpCtrl = new wxCHMHelpController;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>m_pos(pos)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150434Z">
        <seg>m_pos(pos)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112813Z">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112308Z">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112137Z">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>off_t old_position = in_stream.SeekI(0, wxFromBeginning);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T142018Z">
        <seg>off_t old_position = in_stream.SeekI(0, wxFromBeginning);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>off_t position = in_stream.TellI();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T144955Z">
        <seg>off_t position = in_stream.TellI();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>only making assumptions about hierarchy immediately after the dialog is created;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T150639Z">
        <seg>ダイアログ内の階層構造について仮定するのはダイアログの作成直後だけにする;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>otherwise.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123840Z">
        <seg> </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overriding <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::GetContentWindow<ept i="0">&lt;/a0&gt;</ept> to return a book control if your dialog implements pages: wxWidgets will then only make the pages scrollable.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T151317Z">
        <seg>ダイアログでページを実装している場合、ブックコントロールを返却するように <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::GetContentWindow<ept i="0">&lt;/a0&gt;</ept> をオーバーライドする: その場合、wxWidgets はページのみをスクロール可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_events_chain.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151309Z">
        <seg>overview_events_chain.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_events_winstack.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T152147Z">
        <seg>overview_events_winstack.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_00.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141213Z">
        <seg>overview_sizer_00.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_01.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141213Z">
        <seg>overview_sizer_01.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_02.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141215Z">
        <seg>overview_sizer_02.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_03.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141202Z">
        <seg>overview_sizer_03.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_04.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141203Z">
        <seg>overview_sizer_04.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_05.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141203Z">
        <seg>overview_sizer_05.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_06.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141223Z">
        <seg>overview_sizer_06.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_07.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141309Z">
        <seg>overview_sizer_07.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_08.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141653Z">
        <seg>overview_sizer_08.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_09.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141805Z">
        <seg>overview_sizer_09.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_10.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141806Z">
        <seg>overview_sizer_10.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_11.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141822Z">
        <seg>overview_sizer_11.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_unicode_codes.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T033327Z">
        <seg>overview_unicode_codes.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_unicode_glyphs.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T013332Z">
        <seg>overview_unicode_glyphs.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_wxstring_encoding.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T040419Z">
        <seg>overview_wxstring_encoding.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf("Compiled at %s\n", __DATE__);
#endif // Unicode/ANSI</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160636Z">
        <seg>printf("Compiled at %s\n", __DATE__);
#endif // Unicode/ANSI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf("Data: %s\n", (const char*) wxConvCurrent-&gt;cWX2MB(unicode_data));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T145947Z">
        <seg>printf("Data: %s\n", (const char*) wxConvCurrent-&gt;cWX2MB(unicode_data));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf("Hello, %s!\n", output);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T053437Z">
        <seg>printf("Hello, %s!\n", output);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf("Hello, %s!\n", output.c_str());</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T055045Z">
        <seg>printf("Hello, %s!\n", output.c_str());</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Data: %s\n"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept>*) wxConvCurrent-&gt;cWX2MB(unicode_data));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T152102Z">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Data: %s\n"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept>*) wxConvCurrent-&gt;cWX2MB(unicode_data));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s!\n"<ept i="0">&lt;/s0&gt;</ept>, output.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>());</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T114156Z">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s!\n"<ept i="0">&lt;/s0&gt;</ept>, output.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>());</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>c_str<ept i="3">&lt;/a3&gt;</ept>())</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T125205Z">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>c_str<ept i="3">&lt;/a3&gt;</ept>())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>mb_str<ept i="3">&lt;/a3&gt;</ept>())</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T125001Z">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>mb_str<ept i="3">&lt;/a3&gt;</ept>())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>())</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124606Z">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf(<bpt i="8" x="8">&lt;s8&gt;</bpt>"Hello, %s!\n"<ept i="8">&lt;/s8&gt;</ept>, output);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T113913Z">
        <seg>printf(<bpt i="8" x="8">&lt;s8&gt;</bpt>"Hello, %s!\n"<ept i="8">&lt;/s8&gt;</ept>, output);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>program can't continue, abort immediately</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110410Z">
        <seg>プログラムを継続できないため、ただちに中断します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>public:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162435Z">
        <seg>public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>puts(output);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T054500Z">
        <seg>puts(output);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>puts(str.mb_str(wxConvUTF8));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T143942Z">
        <seg>puts(str.mb_str(wxConvUTF8));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>result += *i;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121157Z">
        <seg>result += *i;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>result += original[n];</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080456Z">
        <seg>result += original[n];</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>return 0;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162801Z">
        <seg>return 0;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>return NULL;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134756Z">
        <seg>return NULL;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>return output;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T053438Z">
        <seg>return output;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>return result;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080500Z">
        <seg>return result;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>return true;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161010Z">
        <seg>return true;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>rewrite this overview; it's not up2date with <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> changes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151524Z">
        <seg>この概要を書き直す; <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の変更が反映されていない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>s.<bpt i="0" x="0">&lt;a0&gt;</bpt>c_str<ept i="0">&lt;/a0&gt;</ept>() + n</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123831Z">
        <seg>s.<bpt i="0" x="0">&lt;a0&gt;</bpt>c_str<ept i="0">&lt;/a0&gt;</ept>() + n</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>s[n].GetValue()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122634Z">
        <seg>s[n].GetValue()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>should be rewritten as</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151602Z">
        <seg>これは以下のように書き換えるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>size_t len = original.length();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080450Z">
        <seg>size_t len = original.length();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>size_t really_read = in_stream.LastRead();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141931Z">
        <seg>size_t really_read = in_stream.LastRead();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>somewhere in the class declaration.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015006Z">
        <seg>クラス宣言内のどこかに挿入する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>std::ifstream ifs(filename.<bpt i="4" x="4">&lt;a4&gt;</bpt>c_str<ept i="4">&lt;/a4&gt;</ept>());</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T143013Z">
        <seg>std::ifstream ifs(filename.<bpt i="4" x="4">&lt;a4&gt;</bpt>c_str<ept i="4">&lt;/a4&gt;</ept>());</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>switch (ans)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160315Z">
        <seg>switch (ans)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>switch (result)
	{
	    case wxDragCopy: /* copy the data */ break;
	    case wxDragMove: /* move the data */ break;
	    default:         /* do nothing */ break;
	}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T161143Z">
        <seg>switch (result)
	{
	    case wxDragCopy: /* データをコピーする */ break;
	    case wxDragMove: /* データを移動する */ break;
	    default:         /* 何もしない */ break;
	}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>text = <bpt i="10" x="10">&lt;a10&gt;</bpt>wxString<ept i="10">&lt;/a10&gt;</ept>(text.<bpt i="11" x="11">&lt;a11&gt;</bpt>mb_str<ept i="11">&lt;/a11&gt;</ept>(convFrom), convTo);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143512Z">
        <seg>text = <bpt i="10" x="10">&lt;a10&gt;</bpt>wxString<ept i="10">&lt;/a10&gt;</ept>(text.<bpt i="11" x="11">&lt;a11&gt;</bpt>mb_str<ept i="11">&lt;/a11&gt;</ept>(convFrom), convTo);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>text = wxString(text.mb_str(convFrom), convTo);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132641Z">
        <seg>text = wxString(text.mb_str(convFrom), convTo);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the "IO" classes: wxSocketIn/OutputStream, wxDataIn/OutputStream, wxFileIn/OutputStream, ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140000Z">
        <seg>"IO" クラス: wxSocketIn/OutputStream, wxDataIn/OutputStream, wxFileIn/OutputStream, ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the core: wxStreamBase, wxStreamBuffer, wxInputStream, wxOutputStream, wxFilterIn/OutputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T142945Z">
        <seg>コアクラス: wxStreamBase, wxStreamBuffer, wxInputStream, wxOutputStream, wxFilterIn/OutputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the_frame-&gt;<bpt i="10" x="10">&lt;a10&gt;</bpt>Show<ept i="10">&lt;/a10&gt;</ept>(<bpt i="11" x="11">&lt;s11&gt;</bpt>true<ept i="11">&lt;/s11&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152700Z">
        <seg>the_frame-&gt;<bpt i="10" x="10">&lt;a10&gt;</bpt>Show<ept i="10">&lt;/a10&gt;</ept>(<bpt i="11" x="11">&lt;s11&gt;</bpt>true<ept i="11">&lt;/s11&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the_frame-&gt;Show(true);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161008Z">
        <seg>the_frame-&gt;Show(true);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>this-&gt;<bpt i="12" x="12">&lt;a12&gt;</bpt>Show<ept i="12">&lt;/a12&gt;</ept>(<bpt i="13" x="13">&lt;s13&gt;</bpt>false<ept i="13">&lt;/s13&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T153616Z">
        <seg>this-&gt;<bpt i="12" x="12">&lt;a12&gt;</bpt>Show<ept i="12">&lt;/a12&gt;</ept>(<bpt i="13" x="13">&lt;s13&gt;</bpt>false<ept i="13">&lt;/s13&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>this-&gt;Destroy();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160340Z">
        <seg>this-&gt;Destroy();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>this-&gt;Destroy();    // If not, destroy the window anyway.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130614T140545Z">
        <seg>this-&gt;Destroy();    // 拒否不可の場合、とにかくウィンドウを破棄する
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>this-&gt;Show(false);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150141Z">
        <seg>this-&gt;Show(false);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;<bpt i="17" x="17">&lt;a17&gt;</bpt>Add<ept i="17">&lt;/a17&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142940Z">
        <seg>topsizer-&gt;<bpt i="17" x="17">&lt;a17&gt;</bpt>Add<ept i="17">&lt;/a17&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;<bpt i="18" x="18">&lt;a18&gt;</bpt>Add<ept i="18">&lt;/a18&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145451Z">
        <seg>topsizer-&gt;<bpt i="18" x="18">&lt;a18&gt;</bpt>Add<ept i="18">&lt;/a18&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;<bpt i="51" x="51">&lt;a51&gt;</bpt>Add<ept i="51">&lt;/a51&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145551Z">
        <seg>topsizer-&gt;<bpt i="51" x="51">&lt;a51&gt;</bpt>Add<ept i="51">&lt;/a51&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;<bpt i="55" x="55">&lt;a55&gt;</bpt>Add<ept i="55">&lt;/a55&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144050Z">
        <seg>topsizer-&gt;<bpt i="55" x="55">&lt;a55&gt;</bpt>Add<ept i="55">&lt;/a55&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112134Z">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;SetSizeHints( this );   // set size hints to honour minimum size
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113023Z">
        <seg>topsizer-&gt;SetSizeHints( this );   // 最小サイズを守るためのサイズヒントを設定する
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>trace messages are also only enabled in debug mode</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110441Z">
        <seg>トレースメッセージもデバッグモード時のみ有効化されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxIdleEvent<ept i="0">&lt;/a0&gt;</ept> (e.g. to perform a long calculation while updating a progress dialog)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130628T234449Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxIdleEvent<ept i="0">&lt;/a0&gt;</ept> を使用する。(例えば、プログレスダイアログを更新しながら長い計算を行なうために使用します)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStdDialogButtonSizer<ept i="0">&lt;/a0&gt;</ept>;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T150528Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStdDialogButtonSizer<ept i="0">&lt;/a0&gt;</ept> を使用する;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>using an intermediate sizer under the main sizer, a <bpt i="0" x="0">&lt;s0&gt;</bpt>false<ept i="0">&lt;/s0&gt;</ept> top-level sizer that can be relied on to exist for the purposes of manipulating child sizers and windows;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T154305Z">
        <seg>メインのサイザーの下に仲介サイザーを使用する; これは偽のトップレベルサイザーで、子サイザーとウィンドウを操作するために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>virtual bool OnInit();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161004Z">
        <seg>virtual bool OnInit();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void MyFrame::OnCloseWindow(wxCloseEvent&amp; event)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160304Z">
        <seg>void MyFrame::OnCloseWindow(wxCloseEvent&amp; event)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void MyTextCtrl::OnChar(wxKeyEvent&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022521Z">
        <seg>void MyTextCtrl::OnChar(wxKeyEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void MyWindow::OnMyCmd(wxCommandEvent&amp; event)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141638Z">
        <seg>void MyWindow::OnMyCmd(wxCommandEvent&amp; event)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void OnExit(wxCommandEvent&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081800Z">
        <seg>void OnExit(wxCommandEvent&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void OnSize(wxSizeEvent&amp; event);

protected:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081802Z">
        <seg>void OnSize(wxSizeEvent&amp; event);

protected:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void wxDialog::OnOK(wxCommandEvent&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T150136Z">
        <seg>void wxDialog::OnOK(wxCommandEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wchar_t wch = L'*';</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160622Z">
        <seg>wchar_t wch = L'*';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>we call event.Skip() so the</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022637Z">
        <seg>wxWidgets の規定クラスや</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>we don't call event.Skip() so the</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022818Z">
        <seg>このイベントを他の場所で処理することはないため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>which does work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171317Z">
        <seg>これは正常に動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>will log the message if it was preceded by:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T133057Z">
        <seg>このメッセージは先に以下の処理を行なっている場合に記録されます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>will work exactly as expected.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045825Z">
        <seg>期待した通りに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>work as expected.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041919Z">
        <seg>これは期待した通りに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>works both with wxWidgets 3.0 and previous library versions and so should be used for writing code which should be compatible with both 2.8 and 3.0.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123346Z">
        <seg>wxWidgets 3.0 と以前のバージョンの両方で動作します。そのため、2.8 と 3.0 で互換性のあるコードを書かなければならない場合はこのように書くべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wouldn't work if the encoding used on the user system is incompatible with ISO-8859-1 (or even if the sources were compiled under different locale in the case of gcc).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T080912Z">
        <seg>これはユーザのシステムが ISO-8859-1 と互換性がない場合 (gcc の場合、別のロケールでコンパイルされたとしても) 、うまく動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wprintf(L"Compiled at %s\n", __TDATE__);
#else // ANSI</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160628Z">
        <seg>wprintf(L"Compiled at %s\n", __TDATE__);
#else // ANSI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wx</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T020455Z">
        <seg>wx</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALIGN_CENTER ); // no border and centre horizontally</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112848Z">
        <seg>wxALIGN_CENTER ); // ボーダーなしで水平方向に中央寄せ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALIGN_CENTRE (same as wxALIGN_CENTER) is defined as (wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T162105Z">
        <seg>wxALIGN_CENTRE (wxALIGN_CENTER と同じです) は (wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL) として定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALIGN_LEFT, wxALIGN_TOP, wxALIGN_RIGHT, wxALIGN_BOTTOM, wxALIGN_CENTER_HORIZONTAL and wxALIGN_CENTER_VERTICAL do what they say.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T161853Z">
        <seg>wxALIGN_LEFT、wxALIGN_TOP、wxALIGN_RIGHT、wxALIGN_BOTTOM、wxALIGN_CENTER_HORIZONTAL、wxALIGN_CENTER_VERTICAL はその名前の通りのことを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALL,        //   and make border all around</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112250Z">
        <seg>wxALL,        //  全方向にボーダーを持たせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALL,       // make border all around (implicit top alignment)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112744Z">
        <seg>wxALL,       // 全方向にボーダーを持たせる (暗黙的に上寄せになる)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxActivateEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055055Z">
        <seg>wxActivateEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxApp Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T135011Z">
        <seg>wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxApp overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T155912Z">
        <seg>wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxArrayString is an efficient container for storing wxString objects.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T025920Z">
        <seg>wxArrayString は wxString オブジェクトを効率的に格納するためのコンテナです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBACKWARD  // return wxID_BACKWARD</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T120016Z">
        <seg>wxBACKWARD  // wxID_BACKWARD を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBell();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022832Z">
        <seg>wxBell();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBitmap</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T141839Z">
        <seg>wxBitmap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBitmap bmp("bmpname", wxBITMAP_TYPE_RESOURCE);
#else // Unix</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T140810Z">
        <seg>wxBitmap bmp("bmpname", wxBITMAP_TYPE_RESOURCE);
#else // Unix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBitmap bmp(bmpname_xpm, wxBITMAP_TYPE_XPM);
#endif</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T140813Z">
        <seg>wxBitmap bmp(bmpname_xpm, wxBITMAP_TYPE_XPM);
#endif</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBitmapHandler</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T153117Z">
        <seg>wxBitmapHandler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145417Z">
        <seg>wxBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112306Z">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112044Z">
        <seg>wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer::CalcMin</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145430Z">
        <seg>wxBoxSizer::CalcMin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer::GetOrientation</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145437Z">
        <seg>wxBoxSizer::GetOrientation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer::RecalcSizes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145420Z">
        <seg>wxBoxSizer::RecalcSizes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer::wxBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145407Z">
        <seg>wxBoxSizer::wxBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCANCEL // return wxID_CANCEL</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115856Z">
        <seg>wxCANCEL // wxID_CANCEL を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCAPTION | wxMINIMIZE_BOX | wxMAXIMIZE_BOX | wxRESIZE_BORDER</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153521Z">
        <seg>wxCAPTION | wxMINIMIZE_BOX | wxMAXIMIZE_BOX | wxRESIZE_BORDER</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCHMHelpController *m_helpCtrl;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162752Z">
        <seg>wxCHMHelpController *m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCHMHelpController m_helpCtrl;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162436Z">
        <seg>wxCHMHelpController m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCSConv</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T142214Z">
        <seg>wxCSConv</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCSConv convFrom(wxFontMapper::Get()-&gt;GetEncodingName(enc));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132639Z">
        <seg>wxCSConv convFrom(wxFontMapper::Get()-&gt;GetEncodingName(enc));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCSConv convTo(wxFontMapper::Get()-&gt;GetEncodingName(alternative));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132640Z">
        <seg>wxCSConv convTo(wxFontMapper::Get()-&gt;GetEncodingName(alternative));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCSConv cust(user_encoding);
printf("Data: %s\n", (const char*) str.mb_str(cust));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T144149Z">
        <seg>wxCSConv cust(user_encoding);
printf("Data: %s\n", (const char*) str.mb_str(cust));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxChar ch = wxT('*');</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161652Z">
        <seg>wxChar ch = wxT('*');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxChar is defined to be</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123159Z">
        <seg>wxChar は次のように定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxClient.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T150026Z">
        <seg>wxClient.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxClientDC dc(window);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141639Z">
        <seg>wxClientDC dc(window);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCloseEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055130Z">
        <seg>wxCloseEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCommandEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080732Z">
        <seg>wxCommandEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCommandEvent event( wxEVT_MY_EVENT, GetId() );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155830Z">
        <seg>wxCommandEvent event( wxEVT_MY_EVENT, GetId() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCondition variables correspond to pthread conditions or to Win32 event objects.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150824Z">
        <seg>wxCondition 変数は pthread のコンディションや Win32 のイベントオブジェクトに相当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxConfig Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T153747Z">
        <seg>wxConfig の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxConfig classes overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130610T145546Z">
        <seg>wxConfig クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxConfig conf;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152922Z">
        <seg>wxConfig conf;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxConfigBase defines the basic interface of all config classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T153829Z">
        <seg>wxConfigBase はすべてのコンフィグクラスの基本インタフェースを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxConnection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T150118Z">
        <seg>wxConnection.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxConnectionBase *OnMakeConnection(void) { return new MyConnection; }
};</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134050Z">
        <seg>wxConnectionBase *OnMakeConnection(void) { return new MyConnection; }
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCursor</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142214Z">
        <seg>wxCursor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112043Z">
        <seg>wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDataInputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T132545Z">
        <seg>wxDataInputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDataOutputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T132554Z">
        <seg>wxDataOutputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDataViewCustomRenderer::Activate() and <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataViewCustomRenderer::LeftClick()<ept i="0">&lt;/a0&gt;</ept> were replaced with the new <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDataViewCustomRenderer::ActivateCell()<ept i="1">&lt;/a1&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T154308Z">
        <seg>wxDataViewCustomRenderer::Activate() と <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDataViewCustomRenderer::LeftClick()<ept i="0">&lt;/a0&gt;</ept> は新しい <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDataViewCustomRenderer::ActivateCell()<ept i="1">&lt;/a1&gt;</ept> 関数に置き換えられました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDbTable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004405Z">
        <seg>wxDbTable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDialog Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T143724Z">
        <seg>wxDialog の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDialog overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T145538Z">
        <seg>wxDialog の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDir is a helper class for enumerating the files or subdirectories of a directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T065649Z">
        <seg>wxDir はディレクトリ内のファイル、サブディレクトリを列挙するためのヘルパークラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDir is a portable equivalent of Unix open/read/closedir functions which allow enumerating of the fi...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T070654Z">
        <seg>wxDir は ファイルやディレクトリの列挙を行う Unix の open/read/closedir 関数と同じことを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDocument::FileHistoryLoad() and <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFileHistory::Load()<ept i="0">&lt;/a0&gt;</ept> now take const reference to <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConfigBase<ept i="1">&lt;/a1&gt;</ept> argument and not just a reference, please update your code if you overrode these functions and change the functions in the derived classes to use const reference as well.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T152648Z">
        <seg>wxDocument::FileHistoryLoad() と <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFileHistory::Load()<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxConfigBase<ept i="1">&lt;/a1&gt;</ept> の単なる参照ではなく、const 参照を受け取るようになりました。そのため、これらの関数をオーバーライドしている場合は const 参照を使用するように継承クラスの関数を変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDropFilesEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081025Z">
        <seg>wxDropFilesEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDropSource dragSource( this );
	dragSource.SetData( my_data );
	wxDragResult result = dragSource.DoDragDrop( TRUE );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T160420Z">
        <seg>wxDropSource dragSource( this );
	dragSource.SetData( my_data );
	wxDragResult result = dragSource.DoDragDrop( TRUE );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxEXPAND |    // make horizontally stretchable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112224Z">
        <seg>wxEXPAND |    // 水平方向にリサイズ可能にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxEraseEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055213Z">
        <seg>wxEraseEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055041Z">
        <seg>wxEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxEvent* Clone();

private:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164310Z">
        <seg>wxEvent* Clone();

private:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFORWARD   // return wxID_FORWARD</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T120007Z">
        <seg>wxFORWARD   // wxID_FORWARD を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFTP can be used to establish a connection to an FTP server and perform all the usual operations...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T124333Z">
        <seg>wxFTP は FTP サーバへの接続と、便利な操作すべてを行なうために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFile</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T070910Z">
        <seg>wxFile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFile file;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025918Z">
        <seg>wxFile file;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFile may be used for low-level IO.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T055758Z">
        <seg>wxFile は低レベル入出力のために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFileConfig implements wxConfigBase interface for storing and retrieving configuration information u...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130619T144342Z">
        <seg>wxFileConfig は wxConfigBase インタフェースを実装しており、プレインテキストファイルを使用して設定情報を格納、取得するためのクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFileInputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T131126Z">
        <seg>wxFileInputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFileInputStream in_stream("the_file_to_be_read");</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T141742Z">
        <seg>wxFileInputStream in_stream("the_file_to_be_read");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFileOutputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T131139Z">
        <seg>wxFileOutputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFilterIn/OutputStream is the base class definition for stream filtering.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140643Z">
        <seg>wxFilterIn/OutputStream はフィルタリング用の基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFilterInputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130953Z">
        <seg>wxFilterInputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFilterOutputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130954Z">
        <seg>wxFilterOutputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFlexGridSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153320Z">
        <seg>wxFlexGridSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFocusEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055226Z">
        <seg>wxFocusEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFontEncoding alternative;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132630Z">
        <seg>wxFontEncoding alternative;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFontMapper manages user-definable correspondence between logical font names and the fonts present o...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T143252Z">
        <seg>wxFontMapper はユーザが定義可能な論理フォント名とマシン上のフォントとの対応を管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFrame *the_frame = new wxFrame(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161006Z">
        <seg>wxFrame *the_frame = new wxFrame(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxGenericValidator performs data transfer (but not validation or filtering) for many type of controls...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150211Z">
        <seg>wxGenericValidator は様々なコントロールへデータを転送します。(しかし、検証やフィルタリングは行いません)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxGetHostName(hostName);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134744Z">
        <seg>wxGetHostName(hostName);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxGridSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152805Z">
        <seg>wxGridSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxHELP   // return wxID_HELP</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115957Z">
        <seg>wxHELP   // wxID_HELP を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxHTTP can be used to establish a connection to an HTTP server.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T124435Z">
        <seg>wxHTTP は HTTP サーバへ接続するために使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxHashSet</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T132018Z">
        <seg>wxHashSet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxIcon</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T142124Z">
        <seg>wxIcon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxIcon icon(wxICON(mondrian));

// Equivalent to:

#if defined(__WXGTK__) || defined(__WXMOTIF__)
wxIcon icon(mondrian_xpm);
#endif

#if defined(__WXMSW__)
wxIcon icon("mondrian");
#endif</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T140344Z">
        <seg>wxIcon icon(wxICON(mondrian));

// これは以下と同等:

#if defined(__WXGTK__) || defined(__WXMOTIF__)
wxIcon icon(mondrian_xpm);
#endif

#if defined(__WXMSW__)
wxIcon icon("mondrian");
#endif</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxIdleEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055239Z">
        <seg>wxIdleEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxInitDialogEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055245Z">
        <seg>wxInitDialogEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxInputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130726Z">
        <seg>wxInputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxInputStream and wxOutputStream inherit from it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140146Z">
        <seg>wxInputStream と wxOutputStream はこのクラスを継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxInputStream is an abstract base class which may not be used directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130726Z">
        <seg>wxInputStream は抽象クラスであり、直接使用することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxInputStream is the base class for read-only streams.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140412Z">
        <seg>wxInputStream は読み取り専用ストリームの基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxJoystickEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055253Z">
        <seg>wxJoystickEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxKeyEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055232Z">
        <seg>wxKeyEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLANGUAGE_GERMAN, _T("iso-8859-1"));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T132537Z">
        <seg>wxLANGUAGE_GERMAN, _T("iso-8859-1"));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxListCtrl overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004420Z">
        <seg>wxListCtrl の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxListEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081505Z">
        <seg>wxListEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLocale class encapsulates all language-dependent settings and is a generalization of the C locale c...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035939Z">
        <seg>wxLocale クラスは C 言語におけるロケールの概念を一般化したものであり、言語に依存するすべての設定をカプセル化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLog *logger=new wxLogStream(&amp;cout);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015309Z">
        <seg>wxLog *logger=new wxLogStream(&amp;cout);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLog Classes Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T143645Z">
        <seg>wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLog class defines the interface for the log targets used by wxWidgets logging functions as explaine...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072429Z">
        <seg>wxLog クラスは wxWidgets のロギング関数で使用されるログターゲットのインタフェースを定義するクラスです。 詳細は wxLog クラスの概要を参照してください、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLog classes overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003245Z">
        <seg>wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLog::SetActiveTarget(logger);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015312Z">
        <seg>wxLog::SetActiveTarget(logger);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLogBuffer is a very simple implementation of log sink which simply collects all the logged messages...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130142Z">
        <seg>wxLogBuffer はログ出力先の非常に単純な実装で、すべてのログメッセージを単純に文字列へ集めます。 (ただし、デバッグメッセージは除きます。なぜなら、普通、デバッグメッセージはただちに出力されるので、後で集めることにおそらく関心がないためです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLogFormatter class is used to format the log messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130957Z">
        <seg>wxLogFormatter クラスはログメッセージをフォーマットするのに使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLogMessage("..."); // ok</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030253Z">
        <seg>wxLogMessage("..."); // ok</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLogNull logNo;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030137Z">
        <seg>wxLogNull logNo;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMBConv Classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151417Z">
        <seg>wxMBConv クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMBConv Objects</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T151418Z">
        <seg>wxMBConv オブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMBConv Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T150621Z">
        <seg>wxMBConv の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMBConv classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130716T155951Z">
        <seg>wxMBConv クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMBConv classes overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130704T151939Z">
        <seg>wxMBConv クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMBConv objects</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130716T160558Z">
        <seg>wxMBConv オブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMORE      // return wxID_MORE</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T120032Z">
        <seg>wxMORE      // wxID_MORE を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMenuEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055300Z">
        <seg>wxMenuEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMessageBox("Failed to make connection to server", "Client Demo Error");</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134755Z">
        <seg>wxMessageBox("Failed to make connection to server", "Client Demo Error");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMessageDialog* dialog = new wxMessageDialog(this,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130613T160306Z">
        <seg>wxMessageDialog* dialog = new wxMessageDialog(this,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMouseEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055304Z">
        <seg>wxMouseEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMoveEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055314Z">
        <seg>wxMoveEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNO     // return wxID_NO</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115802Z">
        <seg>wxNO     // wxID_NO を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNO_DEFAULT // make the wxNO button the default, otherwise wxYES or wxOK button will be default</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115839Z">
        <seg>wxNO_DEFAULT // wxNO ボタンをデフォルトにします。これを指定しない場合、wxYES ボタンか wxOK ボタンがデフォルトになります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNotebook::AddPage</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060859Z">
        <seg>wxNotebook::AddPage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNotebook::AdvanceSelection</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060937Z">
        <seg>wxNotebook::AdvanceSelection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNotebook::DeletePage</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060939Z">
        <seg>wxNotebook::DeletePage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNotebook::SetSelection</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060941Z">
        <seg>wxNotebook::SetSelection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxOK     // return wxID_OK</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115848Z">
        <seg>wxOK     // wxID_OK を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxOutputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130733Z">
        <seg>wxOutputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxOutputStream does the same thing but it is for write-only streams.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140621Z">
        <seg>wxOutputStream も同じことを行いますが、こちらは書き込み専用のストリーム用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxOutputStream is an abstract base class which may not be used directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130732Z">
        <seg>wxOutputStream は抽象クラスであり、直接使用することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPaintEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055321Z">
        <seg>wxPaintEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotCurve   *m_curve;
};

DECLARE_EVENT_TYPE( wxEVT_PLOT_ACTION, -1 )

typedef void (wxEvtHandler::*wxPlotEventFunction)(wxPlotEvent&amp;);

#define EVT_PLOT(id, fn) \</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164314Z">
        <seg>wxPlotCurve   *m_curve;
};

DECLARE_EVENT_TYPE( wxEVT_PLOT_ACTION, -1 )

typedef void (wxEvtHandler::*wxPlotEventFunction)(wxPlotEvent&amp;);

#define EVT_PLOT(id, fn) \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotCurve *GetCurve()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164224Z">
        <seg>wxPlotCurve *GetCurve()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotCurve *curve = event.GetCurve();
}


// user code sending the event

void MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164445Z">
        <seg>wxPlotCurve *curve = event.GetCurve();
}


// イベントを送信するユーザコード

void MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotEvent event( wxEVT_PLOT_ACTION, GetId() );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164447Z">
        <seg>wxPlotEvent event( wxEVT_PLOT_ACTION, GetId() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotEvent( wxEventType commandType = wxEVT_NULL, int id = 0 );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164215Z">
        <seg>wxPlotEvent( wxEventType commandType = wxEVT_NULL, int id = 0 );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPoint(10, 10), wxSize(100, 80), 0,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143053Z">
        <seg>wxPoint(10, 10), wxSize(100, 80), 0,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPrintf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124736Z">
        <seg>wxPrintf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPrintf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>())</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124916Z">
        <seg>wxPrintf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPrintf(<bpt i="10" x="10">&lt;s10&gt;</bpt>"wxString reports a length of %d character(s)"<ept i="10">&lt;/s10&gt;</ept>, test.<bpt i="11" x="11">&lt;a11&gt;</bpt>length<ept i="11">&lt;/a11&gt;</ept>());</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T034547Z">
        <seg>wxPrintf(<bpt i="10" x="10">&lt;s10&gt;</bpt>"wxString reports a length of %d character(s)"<ept i="10">&lt;/s10&gt;</ept>, test.<bpt i="11" x="11">&lt;a11&gt;</bpt>length<ept i="11">&lt;/a11&gt;</ept>());</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPrintf(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Red is %d"<ept i="1">&lt;/s1&gt;</ept>, Red);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130835Z">
        <seg>wxPrintf(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Red is %d"<ept i="1">&lt;/s1&gt;</ept>, Red);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPrintf(<bpt i="25" x="25">&lt;s25&gt;</bpt>"wxString reports a length of %d character(s)"<ept i="25">&lt;/s25&gt;</ept>, test2.length());</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T035631Z">
        <seg>wxPrintf(<bpt i="25" x="25">&lt;s25&gt;</bpt>"wxString reports a length of %d character(s)"<ept i="25">&lt;/s25&gt;</ept>, test2.length());</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPropertySheetDialog and wxWizard</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T151329Z">
        <seg>wxPropertySheetDialog と wxWizard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxQueryLayoutInfoEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055326Z">
        <seg>wxQueryLayoutInfoEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSETUP     // return wxID_SETUP</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T120027Z">
        <seg>wxSETUP     // wxID_SETUP を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxScrollEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081735Z">
        <seg>wxScrollEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxScrollWinEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055501Z">
        <seg>wxScrollWinEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSemaphore is a counter limiting the number of threads concurrently accessing a shared resource...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150911Z">
        <seg>wxSemaphore は共有リソースへ同時アクセス可能なスレッド数を制限するカウンターです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxServer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130726T150050Z">
        <seg>wxServer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSetCursorEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055409Z">
        <seg>wxSetCursorEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizeEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055455Z">
        <seg>wxSizeEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizer is the abstract base class used for laying out subwindows in a window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135038Z">
        <seg>wxSizer はウィンドウ内にサブウィンドウを配置するために使用される抽象基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113935Z">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizerFlags(0).Center() );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114010Z">
        <seg>wxSizerFlags(0).Center() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizerFlags(1).Align().Expand().Border(wxALL, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113656Z">
        <seg>wxSizerFlags(1).Align().Expand().Border(wxALL, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSocketBase is the base class for all socket-related objects, and it defines all basic IO functional...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151823Z">
        <seg>wxSocketBase はソケットに関連するオブジェクトすべての基底クラスで、基本的な IO 機能をすべて定義しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSplitterEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081859Z">
        <seg>wxSplitterEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStaticBoxSixer is the same as a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept>, but surrounded by a static box.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T152110Z">
        <seg>wxStaticBoxSixer は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> と同じですが、スタティックボックスで周りを囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStaticBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152038Z">
        <seg>wxStaticBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStaticBoxSizer is a sizer derived from wxBoxSizer but adds a static box around the sizer...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135216Z">
        <seg>wxStaticBoxSizer は wxBoxSizer を継承したサイザーですが、サイザーの周囲にスタティックボックスを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStaticCastEvent( wxPlotEventFunction, &amp; fn ), (wxObject *) NULL ),


// code implementing the event type and the event class

DEFINE_EVENT_TYPE( wxEVT_PLOT_ACTION )

wxPlotEvent::wxPlotEvent( ...


// user code intercepting the event

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164431Z">
        <seg>wxStaticCastEvent( wxPlotEventFunction, &amp; fn ), (wxObject *) NULL ),


// イベント型とイベントクラスを定義するコード

DEFINE_EVENT_TYPE( wxEVT_PLOT_ACTION )

wxPlotEvent::wxPlotEvent( ...


// イベントを捕まえるユーザコード

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStdInputStream is a std::istream derived stream which reads from a wxInputStream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T134429Z">
        <seg>wxStdInputStream は std::istream を継承したストリームで、wxInputStream からデータを読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStdOutputStream is a std::ostream derived stream which writes to a wxOutputStream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T134452Z">
        <seg>wxStdOutputStream は std::ostream を継承したストリームで、wxOutputStream へデータを書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStream classes are divided in two main groups:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T135705Z">
        <seg>wxStream クラスはふたつの主なグループに分けられます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStreamBase</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130624Z">
        <seg>wxStreamBase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStreamBase is the base definition of a stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140036Z">
        <seg>wxStreamBase はストリームの基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStreamBuffer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130648Z">
        <seg>wxStreamBuffer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStreamBuffer is a cache manager for wxStreamBase: it manages a stream buffer linked to a stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T140257Z">
        <seg>wxStreamBuffer は wxStreamBase 用のキャッシュマネージャです: このクラスはストリームに関連付けられたストリームバッファを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStreamBuffer is a cache manager for wxStreamBase: it manages a stream buffer linked to a stream...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130647Z">
        <seg>wxStreamBuffer は wxStreamBase 用のキャッシュマネージャです: このクラスはストリームに関連付けられたストリームバッファを管理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStreams is divided in two main parts:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T135134Z">
        <seg>wxStreams は主となるふたつの部分に分けられます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStreams overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T133253Z">
        <seg>wxStreams の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T094937Z">
        <seg>wxString の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString Related Compilation Settings</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030116Z">
        <seg>wxString に関するコンパイル設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString hostName;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134742Z">
        <seg>wxString hostName;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString input_str(input_data);
wxString str(input_str.wc_str(wxConvUTF8), *wxConvCurrent);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T145711Z">
        <seg>wxString input_str(input_data);
wxString str(input_str.wc_str(wxConvUTF8), *wxConvCurrent);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString is a class which represents a character string of arbitrary length (limited by <bpt i="0" x="0">&lt;i0&gt;</bpt>MAX_INT<ept i="0">&lt;/i0&gt;</ept> which is usually 2147483647 on 32 bit machines) and containing arbitrary characters.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T092340Z">
        <seg>wxString は任意の長さ (最大は <bpt i="0" x="0">&lt;i0&gt;</bpt>MAX_INT<ept i="0">&lt;/i0&gt;</ept> で、32 ビットマシンの場合、通常は 2147483647 です) で任意の文字を含む文字列を表すクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString output = input.Upper();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T053435Z">
        <seg>wxString output = input.Upper();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T043321Z">
        <seg>wxString の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString result;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131020T080448Z">
        <seg>wxString result;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString s = wxT("Hello, world!");</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161654Z">
        <seg>wxString s = wxT("Hello, world!");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString server = "4242";</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134741Z">
        <seg>wxString server = "4242";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString str(ascii_str, wxConvUTF8);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144207Z">
        <seg>wxString str(ascii_str, wxConvUTF8);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString str(input_data, *wxConvCurrent);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T143237Z">
        <seg>wxString str(input_data, *wxConvCurrent);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString str(input_data, wxCSConv(wxT("koi8-r")));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T143524Z">
        <seg>wxString str(input_data, wxCSConv(wxT("koi8-r")));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString str(input_data, wxConvUTF8);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T143314Z">
        <seg>wxString str(input_data, wxConvUTF8);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString str(wxConvUTF8.cMB2WC(input_data), *wxConvCurrent);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130717T145022Z">
        <seg>wxString str(wxConvUTF8.cMB2WC(input_data), *wxConvCurrent);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString text = event.GetText();
}


// user code sending the event

void MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155828Z">
        <seg>wxString text = event.GetText();
}


// イベントを送信するユーザコード

void MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString works with both ASCII (traditional, 7 or 8 bit, characters) as well as Unicode (wide characters) strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131014T044318Z">
        <seg>wxString は ASCII (従来の 7 ビットまたは 8 ビット) 文字列と Unicode (ワイド) 文字列の両方を取り扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString::const_iterator i;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121151Z">
        <seg>wxString::const_iterator i;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStringCharType is defined to be:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131119T153148Z">
        <seg>wxStringCharType は次のいずれかの型に定義されます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStringTokenizer helps you to break a string up into a number of tokens.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T030005Z">
        <seg>wxStringTokenizer は文字列を複数のトークンに分割することを支援します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSysColourChangedEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055534Z">
        <seg>wxSysColourChangedEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTE_AUTO_SCROLL style is deprecated as it's always on by default anyhow in the ports which support it so you should simply remove any mentions of it from your code.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130620T124604Z">
        <seg>wxTE_AUTO_SCROLL スタイルはこれに対応している移植版ではデフォルトで常に有効になっているため、非推奨になりました。そのため、単純にコードから削除してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTempFile is a very small file designed to make replacing the files contents safer - see its <bpt i="0" x="0">&lt;a0&gt;</bpt>documentation<ept i="0">&lt;/a0&gt;</ept> for more details.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T064731Z">
        <seg>wxTempFile はより安全にファイルの置換を行うためのとても小さなファイルです。詳細は <bpt i="0" x="0">&lt;a0&gt;</bpt>ドキュメント<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTempFile provides a relatively safe way to replace the contents of the existing file...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T071855Z">
        <seg>wxTempFile は既存のファイルの置換を行うための比較的安全な方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTextCtrl *txt1 = new wxTextCtrl(this, -1, wxT(""),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143052Z">
        <seg>wxTextCtrl *txt1 = new wxTextCtrl(this, -1, wxT(""),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTextDataObject is a specialization of wxDataObjectSimple for text data.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T133246Z">
        <seg>wxTextDataObject は wxDataObjectSimple を特殊化したもので、テキストデータに特化しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTextDataObject my_data("This text will be dragged.");</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130911T160256Z">
        <seg>wxTextDataObject my_data("This text will be dragged.");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTextFile is a general purpose class for working with small text files on line by line basis.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T064827Z">
        <seg>wxTextFile は小さなテキストファイルを行単位で扱うための汎用的なクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTextInputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T131311Z">
        <seg>wxTextInputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTextOutputStream</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T132512Z">
        <seg>wxTextOutputStream</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTextValidator validates text controls, providing a variety of filtering behaviours.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150115Z">
        <seg>wxTextValidator はテキストコントロールの検証と振る舞いの様々なフィルタリングを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTextValidator(wxFILTER_ALPHA, &amp;g_data.m_string));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T143054Z">
        <seg>wxTextValidator(wxFILTER_ALPHA, &amp;g_data.m_string));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTimerEvent object is passed to the event handler of timer events (see wxTimer::SetOwner).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153757Z">
        <seg>wxTimerEvent はタイマーイベントのイベントハンドラへ引き渡されるオブジェクトです。 (wxTimer::SetOwner 参照) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTopLevelWindow is a common base class for wxDialog and wxFrame.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T154557Z">
        <seg>wxTopLevelWindow は wxDialog と wxFrame の共通の基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTreeCtrl::Delete</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061011Z">
        <seg>wxTreeCtrl::Delete</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTreeCtrl::DeleteAllItems</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061013Z">
        <seg>wxTreeCtrl::DeleteAllItems</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTreeCtrl::EditLabel</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061014Z">
        <seg>wxTreeCtrl::EditLabel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTreeEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082226Z">
        <seg>wxTreeEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxURL is a specialization of wxURI for parsing URLs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T152119Z">
        <seg>wxURL は URL をパースするために wxURI を特殊化したものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxUString is a class representing a Unicode character string where each character is stored using a 3...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131120T121925Z">
        <seg>wxUString は各文字が 32 ビット値に格納される Unicode 文字列を表したクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxUpdateUIEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082317Z">
        <seg>wxUpdateUIEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxValidator Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150001Z">
        <seg>wxValidator の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxValidator is the base class for a family of validator classes that mediate between a class of contr...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T135218Z">
        <seg>wxValidator はコントロールクラスとアプリケーションデータを仲介する、バリデータクラスファミリーの基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxValidator overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130623T142246Z">
        <seg>wxValidator の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets 2.8.12: A portable C++ and Python GUI toolkit</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T131846Z">
        <seg>wxWidgets 2.8.12: A portable C++ and Python GUI toolkit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets and Standard Streams</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T132627Z">
        <seg>wxWidgets と標準ストリーム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets does not provide translations for all of these currently.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043604Z">
        <seg>修飾子の翻訳について、今のところ wxWidgets はすべてに対応しているわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets does not yet handle translated special key names such as Backspace, End, Insert, etc.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T003951Z">
        <seg>Backspace、End、Insert といった特殊キーの名前が翻訳された場合、wxWidgets はまだ取り扱うことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets has a number of different classes to help with interprocess communication and network programming.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151729Z">
        <seg>wxWidgets にはプロセス間通信やネットワークプログラミングを支援する様々なクラスがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets has support for compiling in Unicode mode on the platforms which support it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155655Z">
        <seg>wxWidgets は Unicode に対応しているプラットフォームであれば Unicode モードでコンパイルすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets has the notion of a <bpt i="0" x="0">&lt;e0&gt;</bpt>log target<ept i="0">&lt;/e0&gt;</ept>: it is just a class deriving from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111358Z">
        <seg>wxWidgets では <bpt i="0" x="0">&lt;e0&gt;</bpt>ログターゲット<ept i="0">&lt;/e0&gt;</ept> という考え方があります: これは単純に <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> を継承したクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets has the notion of a <bpt i="0" x="0">&lt;i0&gt;</bpt>log target<ept i="0">&lt;/i0&gt;</ept>: it is just a class deriving from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T022242Z">
        <seg>wxWidgets では <bpt i="0" x="0">&lt;i0&gt;</bpt>ログターゲット<ept i="0">&lt;/i0&gt;</ept> という考え方があります: これは単純に <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> を継承したクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets is able to use this catalog under any supported platform (although iso8859-2 is a Unix encoding and is normally not understood by Windows).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130629T130522Z">
        <seg>wxWidgets の対応しているすべてのプラットフォームでこのカタログを使用できます。(iso8859-2 は Unix のエンコーディングであり、通常は Windows で使用できないとしてもです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets looks for a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStdDialogButtonSizer<ept i="0">&lt;/a0&gt;</ept> and uses it for the non-scrolling part.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130604T151656Z">
        <seg>wxWidgets は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStdDialogButtonSizer<ept i="0">&lt;/a0&gt;</ept> を探してその部分を非スクロール領域として使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides a complete set of classes encapsulating objects necessary in multithreaded (MT) programs: the <bpt i="0" x="0">&lt;a0&gt;</bpt>thread<ept i="0">&lt;/a0&gt;</ept> class itself and different synchronization objects: <bpt i="1" x="1">&lt;a1&gt;</bpt>mutexes<ept i="1">&lt;/a1&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt>critical sections<ept i="2">&lt;/a2&gt;</ept> with <bpt i="3" x="3">&lt;a3&gt;</bpt>conditions<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T145604Z">
        <seg>wxWidgets はマルチスレッド (MT) プログラムで必要となるオブジェクトをカプセル化したクラスの一式を提供しています: <bpt i="0" x="0">&lt;a0&gt;</bpt>thread<ept i="0">&lt;/a0&gt;</ept> クラス自身と、他の同期オブジェクトである <bpt i="1" x="1">&lt;a1&gt;</bpt>ミューテックス<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>クリティカルセクション<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>コンディション<ept i="3">&lt;/a3&gt;</ept> が含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides a complete set of classes encapsulating objects necessary in multithreaded (MT) programs: the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread<ept i="0">&lt;/a0&gt;</ept> class itself and different synchronization objects: mutexes (see <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMutex<ept i="1">&lt;/a1&gt;</ept>) and critical sections (see <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCriticalSection<ept i="2">&lt;/a2&gt;</ept>) with conditions (see <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCondition<ept i="3">&lt;/a3&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T151105Z">
        <seg>wxWidgets はマルチスレッド (MT) プログラムで必要となるオブジェクトをカプセル化したクラスの一式を提供しています: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxThread<ept i="0">&lt;/a0&gt;</ept> クラス自身と、他の同期オブジェクトであるミューテックス (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxMutex<ept i="1">&lt;/a1&gt;</ept> 参照)、クリティカルセクション(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxCriticalSection<ept i="2">&lt;/a2&gt;</ept> 参照)、コンディション (<bpt i="3" x="3">&lt;a3&gt;</bpt>wxCondition<ept i="3">&lt;/a3&gt;</ept> 参照) が含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides facilities for message translation with it's <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> class and is itself fully translated into several languages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040006Z">
        <seg>wxWidgets は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> クラスを使用したメッセージ翻訳機能を提供しており、wxWidgets 自体がいくつかの言語に完全に翻訳されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides facilities for message translation with its <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> class and is itself fully translated into several languages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T152447Z">
        <seg>wxWidgets は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> クラスを使用したメッセージ翻訳機能を提供しており、wxWidgets 自体がいくつかの言語に完全に翻訳されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides its own set of stream classes in order to support platforms not providing standard C++ streams implementation and also to make it possible to provide binary versions of wxWidgets application not depending on any particular standard library version.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T132948Z">
        <seg>wxWidgets は標準の C++ ストリームを提供していないプラットフォームに対応するためと、標準ライブラリの特定のバージョンに依存することなく、wxWidgets アプリケーションのバイナリ版を提供可能にするために独自のストリームクラス群を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides some functions and classes to facilitate working with files.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T055028Z">
        <seg>wxWidgets はファイルの取り扱いを手助けするための関数やクラスを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides the macros <bpt i="0" x="0">&lt;t0&gt;</bpt>__TFILE__<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>__TDATE__<ept i="1">&lt;/t1&gt;</ept> and <bpt i="2" x="2">&lt;t2&gt;</bpt>__TTIME__<ept i="2">&lt;/t2&gt;</ept> which behave exactly as the standard ones except that they produce ANSI strings in ANSI build and Unicode ones in the Unicode build.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160219Z">
        <seg>wxWidgets では <bpt i="0" x="0">&lt;t0&gt;</bpt>__TFILE__<ept i="0">&lt;/t0&gt;</ept>、 <bpt i="1" x="1">&lt;t1&gt;</bpt>__TDATE__<ept i="1">&lt;/t1&gt;</ept>、 <bpt i="2" x="2">&lt;t2&gt;</bpt>__TTIME__<ept i="2">&lt;/t2&gt;</ept> マクロを提供しており、これらは ANSI ビルド時には ANSI 文字列に、 Unicode ビルド時には Unicode 文字列になることを除き、標準トークンとまったく同じに振る舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets uses the message catalogs which are binary compatible with gettext catalogs and this allows to use all of the programs in this package to work with them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T160117Z">
        <seg>wxWidgets では gettext のカタログとバイナリ互換性のあるメッセージカタログを使用します。これにより、メッセージカタログを扱う際に gettext のすべてのプログラムを使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets uses the system <bpt i="0" x="0">&lt;c0&gt;</bpt>wchar_t<ept i="0">&lt;/c0&gt;</ept> in <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> implementation by default under all systems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092511Z">
        <seg>すべてのシステムにおいて、wxWidgets はデフォルトで <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> の実装に <bpt i="0" x="0">&lt;c0&gt;</bpt>wchar_t<ept i="0">&lt;/c0&gt;</ept> を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets' DDE-like protocol is a high-level protocol based on Windows DDE.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130725T153513Z">
        <seg>wxWidgets の DDE 風プロトコルは Windows DDE に基づく高レベルのプロトコルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Bitmaps and Icons</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130609T152925Z">
        <seg>wxWidgets: wxWidgets: ビットマップとアイコン</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Changes Since wxWidgets 2.8</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130618T145947Z">
        <seg>wxWidgets: wxWidgets: wxWidgets 2.8 からの変更点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Device Contexts</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T143051Z">
        <seg>wxWidgets: wxWidgets: デバイスコンテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Drag and Drop Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131013T132918Z">
        <seg>wxWidgets: wxWidgets: ドラッグ・アンド・ドロップの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Environment Variables</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155606Z">
        <seg>wxWidgets: wxWidgets: 環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Events and Event Handling</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T151119Z">
        <seg>wxWidgets: wxWidgets: イベントとイベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: File Classes and Functions</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132425Z">
        <seg>wxWidgets: wxWidgets: ファイルクラスと関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Internationalization</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035449Z">
        <seg>wxWidgets: wxWidgets: 国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Interprocess Communication</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130731T151213Z">
        <seg>wxWidgets: wxWidgets: プロセス間通信</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Multithreading Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130625T150213Z">
        <seg>wxWidgets: wxWidgets: マルチスレッドの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Sizers Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135003Z">
        <seg>wxWidgets: wxWidgets: サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Stream classes overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130622T130525Z">
        <seg>wxWidgets: wxWidgets: ストリームクラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Unicode Support in wxWidgets</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004606Z">
        <seg>wxWidgets: wxWidgets: wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Window Deletion</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130615T033828Z">
        <seg>wxWidgets: wxWidgets: ウィンドウの削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Window Sizing Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130722T143754Z">
        <seg>wxWidgets: wxWidgets: ウィンドウサイズの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Window Styles</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130724T153929Z">
        <seg>wxWidgets: wxWidgets: ウィンドウスタイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Writing Non-English Applications</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130703T134440Z">
        <seg>wxWidgets: wxWidgets: 非英語アプリケーションの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxApp Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152152Z">
        <seg>wxWidgets: wxWidgets: wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxConfig Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130612T153807Z">
        <seg>wxWidgets: wxWidgets: wxConfig の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxDialog Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130531T151530Z">
        <seg>wxWidgets: wxWidgets: wxDialog の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxLog Classes Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T090608Z">
        <seg>wxWidgets: wxWidgets: wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxMBConv Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130718T150741Z">
        <seg>wxWidgets: wxWidgets: wxMBConv の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxString Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20131104T025839Z">
        <seg>wxWidgets: wxWidgets: wxString の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxValidator Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130624T150018Z">
        <seg>wxWidgets: wxWidgets: wxValidator の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWindow is the base class for all windows and represents any visible object on screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T152539Z">
        <seg>wxWindow はすべてのウィンドウの基底クラスであり、画面上に表示されるすべての可視オブジェクトを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWindow's sizers hierarchy is parallel to the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> children hierarchy: child windows are children of their parent window and the sizer (or sizers) form separate hierarchy attached to the window with <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSizer()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T172216Z">
        <seg>wxWindow's sizers hierarchy is parallel to the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> children hierarchy: child windows are children of their parent window and the sizer (or sizers) form separate hierarchy attached to the window with <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSizer()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWizard is the central class for implementing 'wizard-like' dialogs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130606T151645Z">
        <seg>wxWizard はウィザード風のダイアログを実装するための中心的なクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxYES    // return wxID_YES</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115747Z">
        <seg>wxYES    // wxID_YES を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxYES_NO // Add Yes/No subpanel</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115739Z">
        <seg>wxYES_NO // Yes/No サブパネルを追加します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022523Z">
        <seg>{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>{ return m_curve; }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164225Z">
        <seg>{ return m_curve; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>{ wxMessageBox(topic, data); }
};

class MyClient: public wxClient {</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134048Z">
        <seg>{ wxMessageBox(topic, data); }
};

class MyClient: public wxClient {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022720Z">
        <seg>}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>}
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022834Z">
        <seg>}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>}
};</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152924Z">
        <seg>}
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>}
};

<bpt i="17" x="17">&lt;s17&gt;</bpt>class <ept i="17">&lt;/s17&gt;</ept>MyClient: <bpt i="18" x="18">&lt;s18&gt;</bpt>public<ept i="18">&lt;/s18&gt;</ept> <bpt i="19" x="19">&lt;a19&gt;</bpt>wxClient<ept i="19">&lt;/a19&gt;</ept>
{
<bpt i="20" x="20">&lt;s20&gt;</bpt>public<ept i="20">&lt;/s20&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152918Z">
        <seg>}
};

<bpt i="17" x="17">&lt;s17&gt;</bpt>class <ept i="17">&lt;/s17&gt;</ept>MyClient: <bpt i="18" x="18">&lt;s18&gt;</bpt>public<ept i="18">&lt;/s18&gt;</ept> <bpt i="19" x="19">&lt;a19&gt;</bpt>wxClient<ept i="19">&lt;/a19&gt;</ept>
{
<bpt i="20" x="20">&lt;s20&gt;</bpt>public<ept i="20">&lt;/s20&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>}
};

MyFunctor myFunctor;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060828Z">
        <seg>}
};

MyFunctor myFunctor;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>} // ~wxLogNull called, old log sink restored</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030224Z">
        <seg>} // ~wxLogNull が呼ばれ、古いログ出力先が元に戻される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>} <bpt i="7" x="7">&lt;s7&gt;</bpt>// ~wxLogNull called, old log sink restored<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114545Z">
        <seg>} <bpt i="7" x="7">&lt;s7&gt;</bpt>// ~wxLogNull が呼ばれ、古いログ出力先が元に戻される<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>~MyConnection(<bpt i="6" x="6">&lt;s6&gt;</bpt>void<ept i="6">&lt;/s6&gt;</ept>) { }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130804T152912Z">
        <seg>~MyConnection(<bpt i="6" x="6">&lt;s6&gt;</bpt>void<ept i="6">&lt;/s6&gt;</ept>) { }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>~MyConnection(void) { }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130727T134043Z">
        <seg>~MyConnection(void) { }</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
