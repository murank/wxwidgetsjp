<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="2.6.3_1" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#define wxID_ANY                -1

#define wxID_LOWEST             4999

#define wxID_OPEN               5000
#define wxID_CLOSE              5001
#define wxID_NEW                5002
#define wxID_SAVE               5003
#define wxID_SAVEAS             5004
#define wxID_REVERT             5005
#define wxID_EXIT               5006
#define wxID_UNDO               5007
#define wxID_REDO               5008
#define wxID_HELP               5009
#define wxID_PRINT              5010
#define wxID_PRINT_SETUP        5011
#define wxID_PREVIEW            5012
#define wxID_ABOUT              5013
#define wxID_HELP_CONTENTS      5014
#define wxID_HELP_COMMANDS      5015
#define wxID_HELP_PROCEDURES    5016
#define wxID_HELP_CONTEXT       5017

#define wxID_CUT                5030
#define wxID_COPY               5031
#define wxID_PASTE              5032
#define wxID_CLEAR              5033
#define wxID_FIND               5034
#define wxID_DUPLICATE          5035
#define wxID_SELECTALL          5036
#define wxID_DELETE             5037
#define wxID_REPLACE            5038
#define wxID_REPLACE_ALL        5039
#define wxID_PROPERTIES         5040

#define wxID_VIEW_DETAILS       5041
#define wxID_VIEW_LARGEICONS    5042
#define wxID_VIEW_SMALLICONS    5043
#define wxID_VIEW_LIST          5044
#define wxID_VIEW_SORTDATE      5045
#define wxID_VIEW_SORTNAME      5046
#define wxID_VIEW_SORTSIZE      5047
#define wxID_VIEW_SORTTYPE      5048

#define wxID_FILE1              5050
#define wxID_FILE2              5051
#define wxID_FILE3              5052
#define wxID_FILE4              5053
#define wxID_FILE5              5054
#define wxID_FILE6              5055
#define wxID_FILE7              5056
#define wxID_FILE8              5057
#define wxID_FILE9              5058

#define wxID_OK                 5100
#define wxID_CANCEL             5101
#define wxID_APPLY              5102
#define wxID_YES                5103
#define wxID_NO                 5104
#define wxID_STATIC             5105

#define wxID_HIGHEST            5999</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080120Z">
        <seg>#define wxID_ANY                -1

#define wxID_LOWEST             4999

#define wxID_OPEN               5000
#define wxID_CLOSE              5001
#define wxID_NEW                5002
#define wxID_SAVE               5003
#define wxID_SAVEAS             5004
#define wxID_REVERT             5005
#define wxID_EXIT               5006
#define wxID_UNDO               5007
#define wxID_REDO               5008
#define wxID_HELP               5009
#define wxID_PRINT              5010
#define wxID_PRINT_SETUP        5011
#define wxID_PREVIEW            5012
#define wxID_ABOUT              5013
#define wxID_HELP_CONTENTS      5014
#define wxID_HELP_COMMANDS      5015
#define wxID_HELP_PROCEDURES    5016
#define wxID_HELP_CONTEXT       5017

#define wxID_CUT                5030
#define wxID_COPY               5031
#define wxID_PASTE              5032
#define wxID_CLEAR              5033
#define wxID_FIND               5034
#define wxID_DUPLICATE          5035
#define wxID_SELECTALL          5036
#define wxID_DELETE             5037
#define wxID_REPLACE            5038
#define wxID_REPLACE_ALL        5039
#define wxID_PROPERTIES         5040

#define wxID_VIEW_DETAILS       5041
#define wxID_VIEW_LARGEICONS    5042
#define wxID_VIEW_SMALLICONS    5043
#define wxID_VIEW_LIST          5044
#define wxID_VIEW_SORTDATE      5045
#define wxID_VIEW_SORTNAME      5046
#define wxID_VIEW_SORTSIZE      5047
#define wxID_VIEW_SORTTYPE      5048

#define wxID_FILE1              5050
#define wxID_FILE2              5051
#define wxID_FILE3              5052
#define wxID_FILE4              5053
#define wxID_FILE5              5054
#define wxID_FILE6              5055
#define wxID_FILE7              5056
#define wxID_FILE8              5057
#define wxID_FILE9              5058

#define wxID_OK                 5100
#define wxID_CANCEL             5101
#define wxID_APPLY              5102
#define wxID_YES                5103
#define wxID_NO                 5104
#define wxID_STATIC             5105

#define wxID_HIGHEST            5999</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>#if wxUSE_UNICODE</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160620Z">
        <seg>#if wxUSE_UNICODE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&amp;myFrameHandler, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060237Z">
        <seg>&amp;myFrameHandler, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&amp;s[n]</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123351Z">
        <seg>&amp;s[n]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxChar<ept i="0">&lt;/a0&gt;</ept>)s[n]</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123200Z">
        <seg>(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxChar<ept i="0">&lt;/a0&gt;</ept>)s[n]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(<bpt i="0" x="0">&lt;s0&gt;</bpt>char<ept i="0">&lt;/s0&gt;</ept> *)(<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>c_str<ept i="3">&lt;/a3&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130438Z">
        <seg>(<bpt i="0" x="0">&lt;s0&gt;</bpt>char<ept i="0">&lt;/s0&gt;</ept> *)(<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>c_str<ept i="3">&lt;/a3&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(But only command events, so you can't catch mouse move events in a child control in the parent window in the same way because <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMouseEvent<ept i="1">&lt;/a1&gt;</ept> doesn't derive from <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023846Z">
        <seg> (しかし、これが可能なのはコマンドイベントのみです。そのため、同じ方法で子コントロールでのマウス移動イベントを親ウィンドウで捕まえることはできません。なぜなら <bpt i="1" x="1">&lt;a1&gt;</bpt>wxMouseEvent<ept i="1">&lt;/a1&gt;</ept> は <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> を継承していないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Debug build only.) This variable can be set to a comma-separated list of trace masks used in <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept> calls; <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::AddTraceMask<ept i="1">&lt;/a1&gt;</ept> is called for every mask in the list during wxWidgets initialization.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154850Z">
        <seg>(デバッグビルドのみ) この変数は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept> の呼び出しの中で使用されるトレースマスクのカンマ区切りリストを設定します; wxWidgets の初期化中にリスト内の各マスクに対して <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::AddTraceMask<ept i="1">&lt;/a1&gt;</ept> が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Debug build only.) This variable can be set to a comma-separated list of trace masks used in wxLogTrace calls; <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask<ept i="0">&lt;/a0&gt;</ept> is called for every mask in the list during wxWidgets initialization.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155852Z">
        <seg>(デバッグビルドのみ) この変数は wxLogTrace の呼び出しの中で使用されるトレースマスクのカンマ区切りリストを設定します; wxWidgets の初期化中にリスト内の各マスクに対して <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask<ept i="0">&lt;/a0&gt;</ept> が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Note that even UTF-32 is still not completely trivial as the mapping is different for little and big-endian architectures).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T032240Z">
        <seg> (UTF-32 であっても、リトルエンディアンとビッグエンディアンではバイト列へのマッピングが異なるため、完全に自明とはまだ言えないことに注意してください。) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Unix only.) Overrides installation prefix.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154923Z">
        <seg>(Unix のみ) インストールプレフィックスを上書きします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(notice the absence of <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept>, it is not needed at all with wxWidgets functions)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034246Z">
        <seg>(<bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> を使用していないことに注目してください。wxWidgets の関数にはそれは必要ありません)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(referring to the image, if <bpt i="0" x="0">&lt;c0&gt;</bpt>A-&gt;ProcessEvent<ept i="0">&lt;/c0&gt;</ept> is called and it doesn't handle the event, <bpt i="1" x="1">&lt;c1&gt;</bpt>B-&gt;ProcessEvent<ept i="1">&lt;/c1&gt;</ept> will be called and so on...).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151810Z">
        <seg>(図を参照すると分かるように、<bpt i="0" x="0">&lt;c0&gt;</bpt>A-&gt;ProcessEvent<ept i="0">&lt;/c0&gt;</ept> でイベントが処理されないと <bpt i="1" x="1">&lt;c1&gt;</bpt>B-&gt;ProcessEvent<ept i="1">&lt;/c1&gt;</ept> が呼び出され、これが繰り返されます。) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(referring to the image, if <bpt i="0" x="0">&lt;c0&gt;</bpt>W-&gt;ProcessEvent<ept i="0">&lt;/c0&gt;</ept> is called, it immediately calls <bpt i="1" x="1">&lt;c1&gt;</bpt>A-&gt;ProcessEvent<ept i="1">&lt;/c1&gt;</ept>; if nor <bpt i="2" x="2">&lt;c2&gt;</bpt>A<ept i="2">&lt;/c2&gt;</ept> nor <bpt i="3" x="3">&lt;c3&gt;</bpt>B<ept i="3">&lt;/c3&gt;</ept> handle the event, then the <bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindow<ept i="4">&lt;/a4&gt;</ept> itself is used -- i.e. the dynamically bind event handlers and static event table entries of <bpt i="5" x="5">&lt;a5&gt;</bpt>wxWindow<ept i="5">&lt;/a5&gt;</ept> are looked as the last possibility, after all pushed event handlers were tested).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T153318Z">
        <seg>(図を見ると分かるように、<bpt i="0" x="0">&lt;c0&gt;</bpt>W-&gt;ProcessEvent<ept i="0">&lt;/c0&gt;</ept> が呼ばれるとすぐに <bpt i="1" x="1">&lt;c1&gt;</bpt>A-&gt;ProcessEvent<ept i="1">&lt;/c1&gt;</ept> を呼び出します; もし <bpt i="2" x="2">&lt;c2&gt;</bpt>A<ept i="2">&lt;/c2&gt;</ept> でも <bpt i="3" x="3">&lt;c3&gt;</bpt>B<ept i="3">&lt;/c3&gt;</ept> でもイベントを処理しなかった場合、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindow<ept i="4">&lt;/a4&gt;</ept> 自身が使用されます。つまり、登録されたすべてのイベントハンドラを調べた後に<bpt i="5" x="5">&lt;a5&gt;</bpt>wxWindow<ept i="5">&lt;/a5&gt;</ept> の動的イベントハンドラと静的イベントテーブルを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(void)m_docManager-&gt;CreateDocument(f, wxDOC_SILENT);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040148Z">
        <seg>(void)m_docManager-&gt;CreateDocument(f, wxDOC_SILENT);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(wxMGL only.) Redirects stderr output to a file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155530Z">
        <seg>(wxMGL のみ) 標準エラー出力をファイルへリダイレクトします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(wxMGL only.) Sets MGL video mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155415Z">
        <seg>(wxMGL のみ) MGL ビデオモードを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) (wxNotifyEventFunction) \</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164320Z">
        <seg>(wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction) (wxNotifyEventFunction) \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122641Z">
        <seg> </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081759Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...

protected:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015442Z">
        <seg>...

protected:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
}

<bpt i="7" x="7">&lt;s7&gt;</bpt>int<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>MyApp::OnExit<ept i="8">&lt;/a8&gt;</ept>()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124602Z">
        <seg>...
}

<bpt i="7" x="7">&lt;s7&gt;</bpt>int<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>MyApp::OnExit<ept i="8">&lt;/a8&gt;</ept>()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
}

int MyApp::OnExit()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162758Z">
        <seg>...
}

int MyApp::OnExit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
};</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162439Z">
        <seg>...
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
};

<bpt i="4" x="4">&lt;s4&gt;</bpt>bool<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>MyApp::OnInit<ept i="5">&lt;/a5&gt;</ept>()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124559Z">
        <seg>...
};

<bpt i="4" x="4">&lt;s4&gt;</bpt>bool<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>MyApp::OnInit<ept i="5">&lt;/a5&gt;</ept>()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>...
};

bool MyApp::OnInit()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162754Z">
        <seg>...
};

bool MyApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>... <bpt i="55" x="55">&lt;s55&gt;</bpt>do<ept i="55">&lt;/s55&gt;</ept> something with <bpt i="56" x="56">&lt;s56&gt;</bpt>event<ept i="56">&lt;/s56&gt;</ept>.GetPoint() ...
}


<bpt i="57" x="57">&lt;s57&gt;</bpt>// example of code generating the event:<ept i="57">&lt;/s57&gt;</ept>
<bpt i="58" x="58">&lt;s58&gt;</bpt>void<ept i="58">&lt;/s58&gt;</ept> MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T122444Z">
        <seg>...<bpt i="56" x="56">&lt;s56&gt;</bpt>event<ept i="56">&lt;/s56&gt;</ept>.GetPoint() を使用して処理を行なう...
}


<bpt i="57" x="57">&lt;s57&gt;</bpt>// イベントを生成するコードの例:<ept i="57">&lt;/s57&gt;</ept>
<bpt i="58" x="58">&lt;s58&gt;</bpt>void<ept i="58">&lt;/s58&gt;</ept> MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>... process error ourselves ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030154Z">
        <seg>... 自分自身でエラー処理を行なう ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>... update the frame <bpt i="4" x="4">&lt;s4&gt;</bpt>using<ept i="4">&lt;/s4&gt;</ept> the <bpt i="5" x="5">&lt;s5&gt;</bpt>new<ept i="5">&lt;/s5&gt;</ept> size ...
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034644Z">
        <seg>... 新しいサイズを使用してフレームを更新する ...
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// ....</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155751Z">
        <seg>// ....</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// Give it some contents</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155943Z">
        <seg>// 何か値を設定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// Send it</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155956Z">
        <seg>// 送信する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// accessors</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164223Z">
        <seg>// アクセサ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// code defining event

class wxPlotEvent: public wxNotifyEvent
{
public:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164155Z">
        <seg>// イベントを定義するコード

class wxPlotEvent: public wxNotifyEvent
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// create text ctrl with minimal size 100x60</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112131Z">
        <seg>// 最小サイズ 100x60 のテキストコントロールを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// create text ctrl with minimal size 100x60 that is horizontally and</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113559Z">
        <seg>// 最小サイズ 100x60 のテキストコントロールを作成し、水平方向と</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// do something</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155813Z">
        <seg>//処理を行う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// event can be processed either in the base wxWidgets class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022654Z">
        <seg>// ネイティブコントロールでもイベントを処理するため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// event is not processed anywhere else.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040205Z">
        <seg>// event.Skip() は呼び出さない。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// illegal key hit.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022741Z">
        <seg>// 対象外のキーが押下された。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// in the header of the source file
BEGIN_DECLARE_EVENT_TYPES()
DECLARE_EVENT_TYPE(name, value)
END_DECLARE_EVENT_TYPES()

// in the implementation
DEFINE_EVENT_TYPE(name)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T154147Z">
        <seg>// ヘッダファイルで使用する
BEGIN_DECLARE_EVENT_TYPES()
DECLARE_EVENT_TYPE(name, value)
END_DECLARE_EVENT_TYPES()

// ソースファイルで使用する
DEFINE_EVENT_TYPE(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// key code is within legal range.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022716Z">
        <seg>// キーコードが正しい範囲に入っている。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// or the native control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040200Z">
        <seg>// event.Skip() を呼び出す。

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// required for sending with wxPostEvent()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164309Z">
        <seg>// wxPostEvent() で必要になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// vertically stretchable with a border width of 10</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113647Z">
        <seg>// 垂直方向にリサイズ可能で、ボーダーの太さは 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// we want to get a dialog that is stretchable because it
// has a text ctrl at the top and two buttons at the bottom

MyDialog::MyDialog(wxFrame *parent, wxWindowID id, const wxString &amp;title )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112038Z">
        <seg>// 上部にテキストコントロールと下部にふたつのボタンを持つので
// リサイズ可能なダイアログにしたい

MyDialog::MyDialog(wxFrame *parent, wxWindowID id, const wxString &amp;title )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// with an all-around border with a width of 10 and implicit top alignment</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114006Z">
        <seg>// 太さ 10 のボーダーを全方向に持たせ、暗黙的に上揃えにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>// wxFile.Open() normally complains if file can't be opened, we don't want it</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030136Z">
        <seg>// 通常はファイルを開けなかった場合に wxFile.Open() がエラーメッセージを出力するが、そうさせたくない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>//create a sizer with no border and centered horizontally</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114002Z">
        <seg>//サイザーを作成し、ボーダーなしで水平方向に中央揃えにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>//create two buttons that are horizontally unstretchable,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113933Z">
        <seg>//ふたつのボタンを作成し、水平方向にはリサイズ不可にして、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,                // make vertically unstretchable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112830Z">
        <seg>0,                // 垂直方向にはリサイズ不可にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,                <bpt i="56" x="56">&lt;s56&gt;</bpt>// make vertically unstretchable<ept i="56">&lt;/s56&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144100Z">
        <seg>0,                <bpt i="56" x="56">&lt;s56&gt;</bpt>// 垂直方向にはリサイズ不可にする<ept i="56">&lt;/s56&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,           // make horizontally unstretchable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112328Z">
        <seg>0,           // 水平方向にはリサイズ不可にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,           <bpt i="41" x="41">&lt;s41&gt;</bpt>// make horizontally unstretchable<ept i="41">&lt;/s41&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143831Z">
        <seg>0,           <bpt i="41" x="41">&lt;s41&gt;</bpt>// 水平方向にはリサイズ不可にする<ept i="41">&lt;/s41&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>0,           <bpt i="51" x="51">&lt;s51&gt;</bpt>// make horizontally unstretchable<ept i="51">&lt;/s51&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144025Z">
        <seg>0,           <bpt i="51" x="51">&lt;s51&gt;</bpt>// 水平方向にはリサイズ不可にする<ept i="51">&lt;/s51&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>1,            // make vertically stretchable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112215Z">
        <seg>1,            // 垂直方向にリサイズ可能にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>1,            <bpt i="25" x="25">&lt;s25&gt;</bpt>// make vertically stretchable<ept i="25">&lt;/s25&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143000Z">
        <seg>1,            <bpt i="25" x="25">&lt;s25&gt;</bpt>// 垂直方向にリサイズ可能にする<ept i="25">&lt;/s25&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );         // set border width to 10</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112305Z">
        <seg>10 );         // ボーダーの幅は 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );         <bpt i="30" x="30">&lt;s30&gt;</bpt>// set border width to 10<ept i="30">&lt;/s30&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143812Z">
        <seg>10 );         <bpt i="30" x="30">&lt;s30&gt;</bpt>// ボーダーの幅は 10 にする<ept i="30">&lt;/s30&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );        // set border width to 10</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112809Z">
        <seg>10 );        // ボーダーの幅は 10 にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );        <bpt i="44" x="44">&lt;s44&gt;</bpt>// set border width to 10<ept i="44">&lt;/s44&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143850Z">
        <seg>10 );        <bpt i="44" x="44">&lt;s44&gt;</bpt>// ボーダーの幅は 10 にする<ept i="44">&lt;/s44&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>10 );        <bpt i="54" x="54">&lt;s54&gt;</bpt>// set border width to 10<ept i="54">&lt;/s54&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144048Z">
        <seg>10 );        <bpt i="54" x="54">&lt;s54&gt;</bpt>// ボーダーの幅は 10 にする<ept i="54">&lt;/s54&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>: <bpt i="9" x="9">&lt;a9&gt;</bpt>wxEvent<ept i="9">&lt;/a9&gt;</ept>(winid, eventType),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150432Z">
        <seg>: <bpt i="9" x="9">&lt;a9&gt;</bpt>wxEvent<ept i="9">&lt;/a9&gt;</ept>(winid, eventType),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>: wxDialog(parent, id, title, wxDefaultPosition, wxDefaultSize,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112039Z">
        <seg>: wxDialog(parent, id, title, wxDefaultPosition, wxDefaultSize,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Device contexts<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141947Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>デバイスコンテキスト<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Internationalization Sample<ept i="0">&lt;/a0&gt;</ept> - Shows you how all this looks in practice.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043643Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>国際化サンプル<ept i="0">&lt;/a0&gt;</ept> - 国際化を実際にどういう風に行うのかを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Introduction<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074645Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>イントロダクション<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Laying out window elements with sizers<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132046Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>サイザーを利用したウィンドウ要素の配置<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>The idea behind sizers<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T122848Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>サイザーの背後にある考え方<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>What is Unicode?<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155433Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Unicode とは?<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>Writing Non-English Applications<ept i="0">&lt;/a0&gt;</ept> - It focuses on handling charsets related problems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041638Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>非英語アプリケーションの作成<ept i="0">&lt;/a0&gt;</ept> - 文字コードに関連した問題について取り組む場合に参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept> Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152201Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept> の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="0">&lt;/a0&gt;</ept>(MyFrame, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022450Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="0">&lt;/a0&gt;</ept>(MyFrame, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer::wxBoxSizer<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145926Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer::wxBoxSizer<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> can lay out its children either vertically or horizontally, depending on what flag is being used in its constructor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T150612Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> はコンストラクタで使用されたフラグに基づいて、子コントロールを垂直方向または水平方向のいずれかに配置できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDECLARE_EVENT_TABLE<ept i="0">&lt;/a0&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T014946Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDECLARE_EVENT_TABLE<ept i="0">&lt;/a0&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDir<ept i="0">&lt;/a0&gt;</ept> is a helper class for enumerating the files or subdirectories of a directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072758Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDir<ept i="0">&lt;/a0&gt;</ept> はディレクトリ内のファイル、サブディレクトリを列挙するためのヘルパークラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept> file;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113205Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept> file;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept> may be used for low-level IO.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072442Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept> は低レベル入出力のために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFlexGridSizer<ept i="0">&lt;/a0&gt;</ept> is a sizer which lays out its children in a two-dimensional table with all table fields in one row having the same height and all fields in one column having the same width, but all rows or all columns are not necessarily the same height or width as in the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGridSizer<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115123Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxFlexGridSizer<ept i="0">&lt;/a0&gt;</ept> は子コントロールを 2 次元の表にレイアウトするサイザーです。同じ行中のセルは同じ高さを持ち、同じ列中のセルは同じ幅を持ちますが、すべての行と列が <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGridSizer<ept i="1">&lt;/a1&gt;</ept> のように同じ高さや幅を持つ必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridBagSizer<ept i="0">&lt;/a0&gt;</ept> is a rather special kind of sizer which, unlike the other classes, allows to directly put the elements at the given position in the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145838Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridBagSizer<ept i="0">&lt;/a0&gt;</ept> はかなり特殊な種類のサイザーで、他のクラスと異なり、サイザー内の指定した位置に子コントロールを直接配置することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> is a sizer which lays out its children in a two-dimensional table with all table fields having the same size, i.e. the width of each field is the width of the widest child, the height of each field is the height of the tallest child.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135720Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> は子コントロールを 2 次元の表にレイアウトするサイザーで、表中のセルはすべて同じ大きさを持ちます。つまり、各セルの幅はもっとも幅の広い子コントロールの幅になり、高さはもっとも高い子コントロールの高さになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> is a two-dimensional sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152816Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> は 2 次元のサイザーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask<ept i="0">&lt;/a0&gt;</ept>( wxTRACE_OleCalls );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T133058Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask<ept i="0">&lt;/a0&gt;</ept>( wxTRACE_OleCalls );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> Classes Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T090619Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>* logger = <bpt i="1" x="1">&lt;s1&gt;</bpt>new<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStream<ept i="2">&lt;/a2&gt;</ept>(&amp;cout);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091557Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>* logger = <bpt i="1" x="1">&lt;s1&gt;</bpt>new<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStream<ept i="2">&lt;/a2&gt;</ept>(&amp;cout);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogBuffer<ept i="0">&lt;/a0&gt;</ept>: This target collects all the logged messages in an internal buffer allowing to show them later to the user all at once.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113120Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogBuffer<ept i="0">&lt;/a0&gt;</ept>: このターゲットはすべてのログメッセージを内部バッファに収集し、後で一括してユーザに通知できるようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogDebug()<ept i="0">&lt;/a0&gt;</ept> is <bpt i="1" x="1">&lt;b1&gt;</bpt>the<ept i="1">&lt;/b1&gt;</ept> right function for debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091154Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogDebug<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;b1&gt;</bpt>まさに<ept i="1">&lt;/b1&gt;</ept> デバッグ出力に適切な関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogError()<ept i="0">&lt;/a0&gt;</ept> is the function to use for error messages, i.e. the messages that must be shown to the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131440Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogError<ept i="0">&lt;/a0&gt;</ept> はエラーメッセージ (ユーザに通知しなければならないメッセージ) 用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogFatalError()<ept i="0">&lt;/a0&gt;</ept> which is like <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogError()<ept i="1">&lt;/a1&gt;</ept>, but also terminates the program with the exit code 3 (using <bpt i="2" x="2">&lt;e2&gt;</bpt>abort()<ept i="2">&lt;/e2&gt;</ept> standard function).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131421Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogFatalError<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogError<ept i="1">&lt;/a1&gt;</ept> と似ていますが、(<bpt i="2" x="2">&lt;e2&gt;</bpt>abort()<ept i="2">&lt;/e2&gt;</ept> 標準関数を使用して) リターンコード 3 でプログラムを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogGui<ept i="0">&lt;/a0&gt;</ept>: This is the standard log target for wxWidgets applications (it is used by default if you don't do anything) and provides the most reasonable handling of all types of messages for given platform.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112827Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogGui<ept i="0">&lt;/a0&gt;</ept>: これは wxWidgets アプリケーションの標準ログターゲット (何もしない場合にデフォルトで使用されます) で、指定されたプラットフォームについて、メッセージのすべての型に対してもっとも合理的な処理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogMessage()<ept i="0">&lt;/a0&gt;</ept> is for all normal, informational messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131739Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogMessage<ept i="0">&lt;/a0&gt;</ept> はすべての通常 (通知) メッセージ用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogNull<ept i="0">&lt;/a0&gt;</ept>: The last log class is quite particular: it doesn't do anything.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113150Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogNull<ept i="0">&lt;/a0&gt;</ept>: 最後のログクラスは極めて特殊です: これは何も行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStatus()<ept i="0">&lt;/a0&gt;</ept> is for status messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T085809Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStatus()<ept i="0">&lt;/a0&gt;</ept> はステータスメッセージ用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStderr<ept i="0">&lt;/a0&gt;</ept>: This class logs messages to a <bpt i="1" x="1">&lt;c1&gt;</bpt>FILE *<ept i="1">&lt;/c1&gt;</ept>, using stderr by default as its name suggests.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112815Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStderr<ept i="0">&lt;/a0&gt;</ept>: このクラスはメッセージを <bpt i="1" x="1">&lt;c1&gt;</bpt>FILE *<ept i="1">&lt;/c1&gt;</ept> へ出力します。その名の通り、デフォルトでは stderr へ出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStream<ept i="0">&lt;/a0&gt;</ept>: This class has the same functionality as <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogStderr<ept i="1">&lt;/a1&gt;</ept>, but uses <bpt i="2" x="2">&lt;e2&gt;</bpt>ostream<ept i="2">&lt;/e2&gt;</ept> and cerr instead of <bpt i="3" x="3">&lt;c3&gt;</bpt>FILE *<ept i="3">&lt;/c3&gt;</ept> and stderr.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112822Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogStream<ept i="0">&lt;/a0&gt;</ept>: このクラスは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogStderr<ept i="1">&lt;/a1&gt;</ept> と同じ機能を持ちますが、<bpt i="3" x="3">&lt;c3&gt;</bpt>FILE *<ept i="3">&lt;/c3&gt;</ept> と stderr の代わりに <bpt i="2" x="2">&lt;e2&gt;</bpt>ostream<ept i="2">&lt;/e2&gt;</ept> と cerr を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogSysError()<ept i="0">&lt;/a0&gt;</ept> is mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T090926Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogSysError<ept i="0">&lt;/a0&gt;</ept> は主に wxWidgets 自身で使用されますが、システムコール (API 関数) の失敗後のエラーログを記録するのに便利かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace()<ept i="0">&lt;/a0&gt;</ept> as <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogDebug()<ept i="1">&lt;/a1&gt;</ept> only does something in debug build.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091414Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept> も <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogDebug<ept i="1">&lt;/a1&gt;</ept> と同じようにデバッグビルド時のみ動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept>( wxTRACE_OleCalls, <bpt i="1" x="1">&lt;s1&gt;</bpt>"IFoo::Bar() called"<ept i="1">&lt;/s1&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132930Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace<ept i="0">&lt;/a0&gt;</ept>( wxTRACE_OleCalls, <bpt i="1" x="1">&lt;s1&gt;</bpt>"IFoo::Bar() called"<ept i="1">&lt;/s1&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogVerbose()<ept i="0">&lt;/a0&gt;</ept> is for verbose output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131800Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogVerbose<ept i="0">&lt;/a0&gt;</ept> は詳細な出力用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogWarning()<ept i="0">&lt;/a0&gt;</ept> for warnings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131627Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogWarning()<ept i="0">&lt;/a0&gt;</ept> は警告メッセージ用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogWindow<ept i="0">&lt;/a0&gt;</ept>: This log target provides a "log console" which collects all messages generated by the application and also passes them to the previous active log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112841Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogWindow<ept i="0">&lt;/a0&gt;</ept>: このログターゲットはアプリケーションの生成するすべてのメッセージを収集する "ログコンソール" を提供するとともに、前に有効だったログターゲットに収集したメッセージを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::FromUTF8<ept i="1">&lt;/a1&gt;</ept>(<bpt i="2" x="2">&lt;s2&gt;</bpt>"Salut \xC3\xA0 toi!"<ept i="2">&lt;/s2&gt;</ept>));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082537Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::FromUTF8<ept i="1">&lt;/a1&gt;</ept>(<bpt i="2" x="2">&lt;s2&gt;</bpt>"Salut \xC3\xA0 toi!"<ept i="2">&lt;/s2&gt;</ept>));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Hello, world!"<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041452Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Hello, world!"<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Salut à toi!"<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T042102Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Salut à toi!"<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(L<bpt i="1" x="1">&lt;s1&gt;</bpt>"Salut \u00E0 toi!"<ept i="1">&lt;/s1&gt;</ept>); <bpt i="2" x="2">&lt;s2&gt;</bpt>// U+00E0 is "Latin Small Letter a with Grave"<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041853Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxMessageBox<ept i="0">&lt;/a0&gt;</ept>(L<bpt i="1" x="1">&lt;s1&gt;</bpt>"Salut \u00E0 toi!"<ept i="1">&lt;/s1&gt;</ept>); <bpt i="2" x="2">&lt;s2&gt;</bpt>// U+00E0 は "グレイヴ付きのラテン小文字の a" です<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::AddPage<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155707Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::AddPage<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::AdvanceSelection<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155945Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::AdvanceSelection<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::DeletePage<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160016Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::DeletePage<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::SetSelection<ept i="0">&lt;/a0&gt;</ept>: Use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxNotebook::ChangeSelection<ept i="1">&lt;/a1&gt;</ept> instead, as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxNotebook::SetSelection<ept i="2">&lt;/a2&gt;</ept> is deprecated</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160216Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::SetSelection<ept i="0">&lt;/a0&gt;</ept>: <bpt i="2" x="2">&lt;a2&gt;</bpt>wxNotebook::SetSelection<ept i="2">&lt;/a2&gt;</ept> は非推奨のため、代わりに <bpt i="1" x="1">&lt;a1&gt;</bpt>wxNotebook::ChangeSelection<ept i="1">&lt;/a1&gt;</ept> を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>Sizer overview<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145922Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>Sizer の概要<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145841Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept><it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSixer<ept i="0">&lt;/a0&gt;</ept> is the same as a wxBoxSizer, but surrounded by a static box.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152747Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSixer<ept i="0">&lt;/a0&gt;</ept> は wxBoxSizer と同じですが、スタティックボックスで周りを囲まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSizer<ept i="0">&lt;/a0&gt;</ept> is a sizer derived from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBoxSizer<ept i="1">&lt;/a1&gt;</ept> but adds a static box around the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145729Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSizer<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBoxSizer<ept i="1">&lt;/a1&gt;</ept> を継承したサイザーですが、サイザーの周囲にスタティックボックスを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSizer<ept i="0">&lt;/a0&gt;</ept> is a sizer derived from wxBoxSizer but adds a static box around the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115224Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxStaticBoxSizer<ept i="0">&lt;/a0&gt;</ept> は wxBoxSizer を継承したサイザーですが、サイザーの周囲にスタティックボックスを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::mb_str()<ept i="0">&lt;/a0&gt;</ept> converts the string to the encoding used by the current locale and so can return an empty string if the string contains characters not representable in it as explained in <bpt i="1" x="1">&lt;a1&gt;</bpt>Data Loss due To Unicode Conversion Errors<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161442Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::mb_str()<ept i="0">&lt;/a0&gt;</ept> は文字列を現在のロケールで使用されているエンコーディングに変換します。そのため、<bpt i="1" x="1">&lt;a1&gt;</bpt>Unicode の変換エラーによるデータ喪失<ept i="1">&lt;/a1&gt;</ept> で述べたように、変換先のエンコーディングで表現できない文字が含まれている場合に空文字列を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> API provides implicit conversion of the internal Unicode string contents to narrow, char strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T134230Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> API は内部の Unicode 文字列からナロー (char) 文字列への暗黙的な変換を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> also provides two convenience functions: <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::From8BitData()<ept i="1">&lt;/a1&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::To8BitData()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T162920Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> はさらに 2 つの便利な関数を提供しています: <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::From8BitData()<ept i="1">&lt;/a1&gt;</ept> と <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::To8BitData()<ept i="2">&lt;/a2&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;s3&gt;</bpt>const<ept i="3">&lt;/s3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>wchar_t<ept i="4">&lt;/s4&gt;</ept> *p = s.<bpt i="5" x="5">&lt;a5&gt;</bpt>wc_str<ept i="5">&lt;/a5&gt;</ept>(); *p; p++ )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T153022Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;s3&gt;</bpt>const<ept i="3">&lt;/s3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>wchar_t<ept i="4">&lt;/s4&gt;</ept> *p = s.<bpt i="5" x="5">&lt;a5&gt;</bpt>wc_str<ept i="5">&lt;/a5&gt;</ept>(); *p; p++ )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;s3&gt;</bpt>size_t<ept i="3">&lt;/s3&gt;</ept> i = 0; i &lt; s.<bpt i="4" x="4">&lt;a4&gt;</bpt>length<ept i="4">&lt;/a4&gt;</ept>(); i++ )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151500Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( <bpt i="3" x="3">&lt;s3&gt;</bpt>size_t<ept i="3">&lt;/s3&gt;</ept> i = 0; i &lt; s.<bpt i="4" x="4">&lt;a4&gt;</bpt>length<ept i="4">&lt;/a4&gt;</ept>(); i++ )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( wxString::const_iterator i = s.<bpt i="3" x="3">&lt;a3&gt;</bpt>begin<ept i="3">&lt;/a3&gt;</ept>(); i != s.<bpt i="4" x="4">&lt;a4&gt;</bpt>end<ept i="4">&lt;/a4&gt;</ept>(); ++i )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151615Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> s(<bpt i="1" x="1">&lt;s1&gt;</bpt>"hello"<ept i="1">&lt;/s1&gt;</ept>);
<bpt i="2" x="2">&lt;s2&gt;</bpt>for<ept i="2">&lt;/s2&gt;</ept> ( wxString::const_iterator i = s.<bpt i="3" x="3">&lt;a3&gt;</bpt>begin<ept i="3">&lt;/a3&gt;</ept>(); i != s.<bpt i="4" x="4">&lt;a4&gt;</bpt>end<ept i="4">&lt;/a4&gt;</ept>(); ++i )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTempFile<ept i="0">&lt;/a0&gt;</ept> is a very small file designed to make replacing the files contents safer - see its documentation for more details.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072734Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTempFile<ept i="0">&lt;/a0&gt;</ept> はより安全にファイルの置換を行うためのとても小さなファイルです。詳細はドキュメントを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl::ChangeValue<ept i="0">&lt;/a0&gt;</ept> can be used instead of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl::SetValue<ept i="1">&lt;/a1&gt;</ept> but the other functions, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>Replace<ept i="2">&lt;/a2&gt;</ept> or <bpt i="3" x="3">&lt;a3&gt;</bpt>WriteText<ept i="3">&lt;/a3&gt;</ept> don't have event-free equivalents</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041031Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl::SetValue<ept i="1">&lt;/a1&gt;</ept> の代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl::ChangeValue<ept i="0">&lt;/a0&gt;</ept> を使用できますが、<bpt i="2" x="2">&lt;a2&gt;</bpt>Replace<ept i="2">&lt;/a2&gt;</ept> や <bpt i="3" x="3">&lt;a3&gt;</bpt>WriteText<ept i="3">&lt;/a3&gt;</ept> といった他の関数にはイベントを送信せずに同じことを行う関数はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl::ChangeValue<ept i="0">&lt;/a0&gt;</ept> can be used instead of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl::SetValue<ept i="1">&lt;/a1&gt;</ept> but the other functions, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTextCtrl::Replace<ept i="2">&lt;/a2&gt;</ept> or <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextCtrl::WriteText<ept i="3">&lt;/a3&gt;</ept> don't have event-free equivalents.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160802Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl::SetValue<ept i="1">&lt;/a1&gt;</ept> の代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl::ChangeValue<ept i="0">&lt;/a0&gt;</ept> を使用できますが、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxTextCtrl::Replace<ept i="2">&lt;/a2&gt;</ept> や <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextCtrl::WriteText<ept i="3">&lt;/a3&gt;</ept> といった他の関数にはイベントを送信せずに同じことを行う関数はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextFile<ept i="0">&lt;/a0&gt;</ept> is a general purpose class for working with small text files on line by line basis.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072746Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextFile<ept i="0">&lt;/a0&gt;</ept> は小さなテキストファイルを行単位で扱うための汎用的なクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::Delete<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160247Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::Delete<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::DeleteAllItems<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160305Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::DeleteAllItems<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::EditLabel<ept i="0">&lt;/a0&gt;</ept>: No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160330Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl::EditLabel<ept i="0">&lt;/a0&gt;</ept>: イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxYES_NO<ept i="0">&lt;/a0&gt;</ept>     <bpt i="1" x="1">&lt;s1&gt;</bpt>// Add Yes/No subpanel<ept i="1">&lt;/s1&gt;</ept>
<bpt i="2" x="2">&lt;a2&gt;</bpt>wxYES<ept i="2">&lt;/a2&gt;</ept>        <bpt i="3" x="3">&lt;s3&gt;</bpt>// return wxID_YES<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;a4&gt;</bpt>wxNO<ept i="4">&lt;/a4&gt;</ept>         <bpt i="5" x="5">&lt;s5&gt;</bpt>// return wxID_NO<ept i="5">&lt;/s5&gt;</ept>
<bpt i="6" x="6">&lt;a6&gt;</bpt>wxNO_DEFAULT<ept i="6">&lt;/a6&gt;</ept> <bpt i="7" x="7">&lt;s7&gt;</bpt>// make the wxNO button the default,<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T150103Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxYES_NO<ept i="0">&lt;/a0&gt;</ept>     <bpt i="1" x="1">&lt;s1&gt;</bpt>// Yes/No サブパネルを追加します<ept i="1">&lt;/s1&gt;</ept>
<bpt i="2" x="2">&lt;a2&gt;</bpt>wxYES<ept i="2">&lt;/a2&gt;</ept>        <bpt i="3" x="3">&lt;s3&gt;</bpt>// wxID_YES を返却します<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;a4&gt;</bpt>wxNO<ept i="4">&lt;/a4&gt;</ept>         <bpt i="5" x="5">&lt;s5&gt;</bpt>// wxID_NO を返却します<ept i="5">&lt;/s5&gt;</ept>
<bpt i="6" x="6">&lt;a6&gt;</bpt>wxNO_DEFAULT<ept i="6">&lt;/a6&gt;</ept> <bpt i="7" x="7">&lt;s7&gt;</bpt>// wxNO ボタンをデフォルトにします。<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>CreateButtonSizer<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115755Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>CreateButtonSizer<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>Event macros summary<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075037Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>イベントマクロの概要<ept i="10">&lt;/a10&gt;</ept><it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>wxDEFAULT_DIALOG_STYLE<ept i="10">&lt;/a10&gt;</ept> | <bpt i="11" x="11">&lt;a11&gt;</bpt>wxRESIZE_BORDER<ept i="11">&lt;/a11&gt;</ept>)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142908Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>wxDEFAULT_DIALOG_STYLE<ept i="10">&lt;/a10&gt;</ept> | <bpt i="11" x="11">&lt;a11&gt;</bpt>wxRESIZE_BORDER<ept i="11">&lt;/a11&gt;</ept>)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>wxLogGui<ept i="10">&lt;/a10&gt;</ept>,<it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003253Z">
        <seg><bpt i="10" x="10">&lt;a10&gt;</bpt>wxLogGui<ept i="10">&lt;/a10&gt;</ept>,<it pos="begin" x="11">&lt;br11&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="11" x="11">&lt;a11&gt;</bpt>wxPoint<ept i="11">&lt;/a11&gt;</ept> GetPoint()<bpt i="12" x="12">&lt;s12&gt;</bpt> const <ept i="12">&lt;/s12&gt;</ept>{ <bpt i="13" x="13">&lt;s13&gt;</bpt>return<ept i="13">&lt;/s13&gt;</ept> m_pos; }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150440Z">
        <seg><bpt i="11" x="11">&lt;a11&gt;</bpt>wxPoint<ept i="11">&lt;/a11&gt;</ept> GetPoint()<bpt i="12" x="12">&lt;s12&gt;</bpt> const <ept i="12">&lt;/s12&gt;</ept>{ <bpt i="13" x="13">&lt;s13&gt;</bpt>return<ept i="13">&lt;/s13&gt;</ept> m_pos; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt><bpt i="13" x="13">&lt;b13&gt;</bpt>wxApp overview<ept i="13">&lt;/b13&gt;</ept><ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="14">&lt;br14&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152025Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt><bpt i="13" x="13">&lt;b13&gt;</bpt>wxApp の概要<ept i="13">&lt;/b13&gt;</ept><ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="14">&lt;br14&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>Custom event summary<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075046Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>カスタムイベントの概要<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>Internationalization<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T054118Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>国際化<ept i="12">&lt;/a12&gt;</ept><it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxBoxSizer<ept i="12">&lt;/a12&gt;</ept> *topsizer = <bpt i="13" x="13">&lt;s13&gt;</bpt>new<ept i="13">&lt;/s13&gt;</ept> <bpt i="14" x="14">&lt;a14&gt;</bpt>wxBoxSizer<ept i="14">&lt;/a14&gt;</ept>( <bpt i="15" x="15">&lt;a15&gt;</bpt>wxVERTICAL<ept i="15">&lt;/a15&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142858Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxBoxSizer<ept i="12">&lt;/a12&gt;</ept> *topsizer = <bpt i="13" x="13">&lt;s13&gt;</bpt>new<ept i="13">&lt;/s13&gt;</ept> <bpt i="14" x="14">&lt;a14&gt;</bpt>wxBoxSizer<ept i="14">&lt;/a14&gt;</ept>( <bpt i="15" x="15">&lt;a15&gt;</bpt>wxVERTICAL<ept i="15">&lt;/a15&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxLog::SetComponentLevel<ept i="12">&lt;/a12&gt;</ept>(<bpt i="13" x="13">&lt;s13&gt;</bpt>"wx/base/module"<ept i="13">&lt;/s13&gt;</ept>, <bpt i="14" x="14">&lt;a14&gt;</bpt>wxLOG_Trace<ept i="14">&lt;/a14&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111102Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxLog::SetComponentLevel<ept i="12">&lt;/a12&gt;</ept>(<bpt i="13" x="13">&lt;s13&gt;</bpt>"wx/base/module"<ept i="13">&lt;/s13&gt;</ept>, <bpt i="14" x="14">&lt;a14&gt;</bpt>wxLOG_Trace<ept i="14">&lt;/a14&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxLogNull<ept i="12">&lt;/a12&gt;</ept>,<it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003253Z">
        <seg><bpt i="12" x="12">&lt;a12&gt;</bpt>wxLogNull<ept i="12">&lt;/a12&gt;</ept>,<it pos="begin" x="13">&lt;br13&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="13" x="13">&lt;a13&gt;</bpt>wxString<ept i="13">&lt;/a13&gt;</ept> text = <bpt i="14" x="14">&lt;s14&gt;</bpt>event<ept i="14">&lt;/s14&gt;</ept>.GetString();
}

<bpt i="15" x="15">&lt;s15&gt;</bpt>// example of code handling the event with Bind&lt;&gt;():<ept i="15">&lt;/s15&gt;</ept>
MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150132Z">
        <seg><bpt i="13" x="13">&lt;a13&gt;</bpt>wxString<ept i="13">&lt;/a13&gt;</ept> text = <bpt i="14" x="14">&lt;s14&gt;</bpt>event<ept i="14">&lt;/s14&gt;</ept>.GetString();
}

<bpt i="15" x="15">&lt;s15&gt;</bpt>// Bind&lt;&gt;() によるイベント処理のコード例:<ept i="15">&lt;/s15&gt;</ept>
MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>wxLogChain<ept i="14">&lt;/a14&gt;</ept>,<it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003254Z">
        <seg><bpt i="14" x="14">&lt;a14&gt;</bpt>wxLogChain<ept i="14">&lt;/a14&gt;</ept>,<it pos="begin" x="15">&lt;br15&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="168" x="168">&lt;a168&gt;</bpt><bpt i="169" x="169">&lt;b169&gt;</bpt>Environment variables<ept i="169">&lt;/b169&gt;</ept><ept i="168">&lt;/a168&gt;</ept><it pos="begin" x="170">&lt;br170&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T160335Z">
        <seg><bpt i="168" x="168">&lt;a168&gt;</bpt><bpt i="169" x="169">&lt;b169&gt;</bpt>環境変数<ept i="169">&lt;/b169&gt;</ept><ept i="168">&lt;/a168&gt;</ept><it pos="begin" x="170">&lt;br170&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;a16&gt;</bpt>wxLogPassThrough<ept i="16">&lt;/a16&gt;</ept>,<it pos="begin" x="17">&lt;br17&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003254Z">
        <seg><bpt i="16" x="16">&lt;a16&gt;</bpt>wxLogPassThrough<ept i="16">&lt;/a16&gt;</ept>,<it pos="begin" x="17">&lt;br17&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="18" x="18">&lt;a18&gt;</bpt>Logging overview<ept i="18">&lt;/a18&gt;</ept><it pos="begin" x="19">&lt;br19&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T124414Z">
        <seg><bpt i="18" x="18">&lt;a18&gt;</bpt>ロギングの概要<ept i="18">&lt;/a18&gt;</ept><it pos="begin" x="19">&lt;br19&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="18" x="18">&lt;a18&gt;</bpt>wxStreamToTextRedirector<ept i="18">&lt;/a18&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003254Z">
        <seg><bpt i="18" x="18">&lt;a18&gt;</bpt>wxStreamToTextRedirector<ept i="18">&lt;/a18&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="19" x="19">&lt;a19&gt;</bpt>wxCommandEvent<ept i="19">&lt;/a19&gt;</ept> event(MY_EVENT, GetId());</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150152Z">
        <seg><bpt i="19" x="19">&lt;a19&gt;</bpt>wxCommandEvent<ept i="19">&lt;/a19&gt;</ept> event(MY_EVENT, GetId());</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> does however guarantee that messages logged by each thread will appear in order in which they were logged.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120250Z">
        <seg>ただし、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> は各スレッドで記録されたメッセージは記録された順に表示されることを保証しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="20" x="20">&lt;a20&gt;</bpt>Event handling overview<ept i="20">&lt;/a20&gt;</ept><it pos="begin" x="21">&lt;br21&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T072009Z">
        <seg><bpt i="20" x="20">&lt;a20&gt;</bpt>イベント処理の概要<ept i="20">&lt;/a20&gt;</ept><it pos="begin" x="21">&lt;br21&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="20" x="20">&lt;a20&gt;</bpt>wxDECLARE_EVENT_TABLE<ept i="20">&lt;/a20&gt;</ept>()
};</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024755Z">
        <seg><bpt i="20" x="20">&lt;a20&gt;</bpt>wxDECLARE_EVENT_TABLE<ept i="20">&lt;/a20&gt;</ept>()
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>wxEXPAND<ept i="26">&lt;/a26&gt;</ept> |    <bpt i="27" x="27">&lt;s27&gt;</bpt>// make horizontally stretchable<ept i="27">&lt;/s27&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T152907Z">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>wxEXPAND<ept i="26">&lt;/a26&gt;</ept> |    <bpt i="27" x="27">&lt;s27&gt;</bpt>// 水平方向にリサイズ可能にし、<ept i="27">&lt;/s27&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>wxSizerFlags<ept i="26">&lt;/a26&gt;</ept>(1).Align().Expand().Border(<bpt i="27" x="27">&lt;a27&gt;</bpt>wxALL<ept i="27">&lt;/a27&gt;</ept>, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145457Z">
        <seg><bpt i="26" x="26">&lt;a26&gt;</bpt>wxSizerFlags<ept i="26">&lt;/a26&gt;</ept>(1).Align().Expand().Border(<bpt i="27" x="27">&lt;a27&gt;</bpt>wxALL<ept i="27">&lt;/a27&gt;</ept>, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>Environment variables<ept i="28">&lt;/a28&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T160418Z">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>環境変数<ept i="28">&lt;/a28&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>wxALL<ept i="28">&lt;/a28&gt;</ept>,        <bpt i="29" x="29">&lt;s29&gt;</bpt>//   and make border all around<ept i="29">&lt;/s29&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143803Z">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>wxALL<ept i="28">&lt;/a28&gt;</ept>,        <bpt i="29" x="29">&lt;s29&gt;</bpt>//   全方向にボーダーを持たせる<ept i="29">&lt;/s29&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>wxBoxSizer<ept i="28">&lt;/a28&gt;</ept> *button_sizer = <bpt i="29" x="29">&lt;s29&gt;</bpt>new<ept i="29">&lt;/s29&gt;</ept> <bpt i="30" x="30">&lt;a30&gt;</bpt>wxBoxSizer<ept i="30">&lt;/a30&gt;</ept>( <bpt i="31" x="31">&lt;a31&gt;</bpt>wxHORIZONTAL<ept i="31">&lt;/a31&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145459Z">
        <seg><bpt i="28" x="28">&lt;a28&gt;</bpt>wxBoxSizer<ept i="28">&lt;/a28&gt;</ept> *button_sizer = <bpt i="29" x="29">&lt;s29&gt;</bpt>new<ept i="29">&lt;/s29&gt;</ept> <bpt i="30" x="30">&lt;a30&gt;</bpt>wxBoxSizer<ept i="30">&lt;/a30&gt;</ept>( <bpt i="31" x="31">&lt;a31&gt;</bpt>wxHORIZONTAL<ept i="31">&lt;/a31&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>How events are processed<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074703Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>イベント処理の仕組み<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Programming with wxBoxSizer<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115650Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxBoxSizer を用いたプログラミング<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Unicode and ANSI modes<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155445Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>Unicode モードと ANSI モード<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxBoxSizer::RecalcSizes<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145926Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxBoxSizer::RecalcSizes<ept i="2">&lt;/a2&gt;</ept><it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxClientDC<ept i="2">&lt;/a2&gt;</ept> dc(window);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154319Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxClientDC<ept i="2">&lt;/a2&gt;</ept> dc(window);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::SetComponentLevel<ept i="2">&lt;/a2&gt;</ept>(<bpt i="3" x="3">&lt;s3&gt;</bpt>"MyProgram/DB"<ept i="3">&lt;/s3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLOG_FatalError<ept i="4">&lt;/a4&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110710Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::SetComponentLevel<ept i="2">&lt;/a2&gt;</ept>(<bpt i="3" x="3">&lt;s3&gt;</bpt>"MyProgram/DB"<ept i="3">&lt;/s3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLOG_FatalError<ept i="4">&lt;/a4&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogNull<ept i="2">&lt;/a2&gt;</ept> logNo;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113228Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogNull<ept i="2">&lt;/a2&gt;</ept> logNo;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStderr<ept i="2">&lt;/a2&gt;</ept>,<it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003251Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStderr<ept i="2">&lt;/a2&gt;</ept>,<it pos="begin" x="3">&lt;br3&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxObject<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145842Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxObject<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxSize<ept i="2">&lt;/a2&gt;</ept> size = <bpt i="3" x="3">&lt;s3&gt;</bpt>event<ept i="3">&lt;/s3&gt;</ept>.GetSize();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034455Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxSize<ept i="2">&lt;/a2&gt;</ept> size = <bpt i="3" x="3">&lt;s3&gt;</bpt>event<ept i="3">&lt;/s3&gt;</ept>.GetSize();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="31" x="31">&lt;a31&gt;</bpt>wxBoxSizer<ept i="31">&lt;/a31&gt;</ept> *button_sizer = <bpt i="32" x="32">&lt;s32&gt;</bpt>new<ept i="32">&lt;/s32&gt;</ept> <bpt i="33" x="33">&lt;a33&gt;</bpt>wxBoxSizer<ept i="33">&lt;/a33&gt;</ept>( <bpt i="34" x="34">&lt;a34&gt;</bpt>wxHORIZONTAL<ept i="34">&lt;/a34&gt;</ept> );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143816Z">
        <seg><bpt i="31" x="31">&lt;a31&gt;</bpt>wxBoxSizer<ept i="31">&lt;/a31&gt;</ept> *button_sizer = <bpt i="32" x="32">&lt;s32&gt;</bpt>new<ept i="32">&lt;/s32&gt;</ept> <bpt i="33" x="33">&lt;a33&gt;</bpt>wxBoxSizer<ept i="33">&lt;/a33&gt;</ept>( <bpt i="34" x="34">&lt;a34&gt;</bpt>wxHORIZONTAL<ept i="34">&lt;/a34&gt;</ept> );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="33" x="33">&lt;a33&gt;</bpt><bpt i="34" x="34">&lt;b34&gt;</bpt>Unicode support in wxWidgets<ept i="34">&lt;/b34&gt;</ept><ept i="33">&lt;/a33&gt;</ept><it pos="begin" x="35">&lt;br35&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132107Z">
        <seg><bpt i="33" x="33">&lt;a33&gt;</bpt><bpt i="34" x="34">&lt;b34&gt;</bpt>wxWidgets における Unicode 対応<ept i="34">&lt;/b34&gt;</ept><ept i="33">&lt;/a33&gt;</ept><it pos="begin" x="35">&lt;br35&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="39" x="39">&lt;a39&gt;</bpt><bpt i="40" x="40">&lt;b40&gt;</bpt>Internationalization<ept i="40">&lt;/b40&gt;</ept><ept i="39">&lt;/a39&gt;</ept><it pos="begin" x="41">&lt;br41&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132119Z">
        <seg><bpt i="39" x="39">&lt;a39&gt;</bpt><bpt i="40" x="40">&lt;b40&gt;</bpt>国際化<ept i="40">&lt;/b40&gt;</ept><ept i="39">&lt;/a39&gt;</ept><it pos="begin" x="41">&lt;br41&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;a3&gt;</bpt>wxLog::SetActiveTarget<ept i="3">&lt;/a3&gt;</ept>(logger);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091559Z">
        <seg><bpt i="3" x="3">&lt;a3&gt;</bpt>wxLog::SetActiveTarget<ept i="3">&lt;/a3&gt;</ept>(logger);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="40" x="40">&lt;a40&gt;</bpt>wxSizerFlags<ept i="40">&lt;/a40&gt;</ept>(0).Align().Border(<bpt i="41" x="41">&lt;a41&gt;</bpt>wxALL<ept i="41">&lt;/a41&gt;</ept>, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145530Z">
        <seg><bpt i="40" x="40">&lt;a40&gt;</bpt>wxSizerFlags<ept i="40">&lt;/a40&gt;</ept>(0).Align().Border(<bpt i="41" x="41">&lt;a41&gt;</bpt>wxALL<ept i="41">&lt;/a41&gt;</ept>, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="42" x="42">&lt;a42&gt;</bpt>wxALL<ept i="42">&lt;/a42&gt;</ept>,       <bpt i="43" x="43">&lt;s43&gt;</bpt>// make border all around (implicit top alignment)<ept i="43">&lt;/s43&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143841Z">
        <seg><bpt i="42" x="42">&lt;a42&gt;</bpt>wxALL<ept i="42">&lt;/a42&gt;</ept>,       <bpt i="43" x="43">&lt;s43&gt;</bpt>// 全方向にボーダーを持たせる (暗黙的に上寄せになる)<ept i="43">&lt;/s43&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="48" x="48">&lt;a48&gt;</bpt><bpt i="49" x="49">&lt;b49&gt;</bpt>File classes and functions overview<ept i="49">&lt;/b49&gt;</ept><ept i="48">&lt;/a48&gt;</ept><it pos="begin" x="50">&lt;br50&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132149Z">
        <seg><bpt i="48" x="48">&lt;a48&gt;</bpt><bpt i="49" x="49">&lt;b49&gt;</bpt>ファイルクラスと関数の概要<ept i="49">&lt;/b49&gt;</ept><ept i="48">&lt;/a48&gt;</ept><it pos="begin" x="50">&lt;br50&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="48" x="48">&lt;a48&gt;</bpt>wxSizerFlags<ept i="48">&lt;/a48&gt;</ept>(0).Align().Border(<bpt i="49" x="49">&lt;a49&gt;</bpt>wxALL<ept i="49">&lt;/a49&gt;</ept>, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145538Z">
        <seg><bpt i="48" x="48">&lt;a48&gt;</bpt>wxSizerFlags<ept i="48">&lt;/a48&gt;</ept>(0).Align().Border(<bpt i="49" x="49">&lt;a49&gt;</bpt>wxALL<ept i="49">&lt;/a49&gt;</ept>, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>Events generated by the user vs programmatically generated events<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074731Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>ユーザの生成したイベントとプログラム的に生成したイベント<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>Programming with wxGridSizer<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115658Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxGridSizer を用いたプログラミング<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>Unicode support in wxWidgets<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T165146Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxWidgets における Unicode 対応<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxBoxSizer::CalcMin<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145926Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxBoxSizer::CalcMin<ept i="4">&lt;/a4&gt;</ept><it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogStream<ept i="4">&lt;/a4&gt;</ept>,<it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003252Z">
        <seg><bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogStream<ept i="4">&lt;/a4&gt;</ept>,<it pos="begin" x="5">&lt;br5&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="52" x="52">&lt;a52&gt;</bpt>wxALL<ept i="52">&lt;/a52&gt;</ept>,       <bpt i="53" x="53">&lt;s53&gt;</bpt>// make border all around (implicit top alignment)<ept i="53">&lt;/s53&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144038Z">
        <seg><bpt i="52" x="52">&lt;a52&gt;</bpt>wxALL<ept i="52">&lt;/a52&gt;</ept>,       <bpt i="53" x="53">&lt;s53&gt;</bpt>// 全方向にボーダーを持たせる (暗黙的に上寄せになる)<ept i="53">&lt;/s53&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="52" x="52">&lt;a52&gt;</bpt>wxSizerFlags<ept i="52">&lt;/a52&gt;</ept>(0).Center() );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145555Z">
        <seg><bpt i="52" x="52">&lt;a52&gt;</bpt>wxSizerFlags<ept i="52">&lt;/a52&gt;</ept>(0).Center() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="54" x="54">&lt;a54&gt;</bpt><bpt i="55" x="55">&lt;b55&gt;</bpt>wxLog classes overview<ept i="55">&lt;/b55&gt;</ept><ept i="54">&lt;/a54&gt;</ept><it pos="begin" x="56">&lt;br56&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T124444Z">
        <seg><bpt i="54" x="54">&lt;a54&gt;</bpt><bpt i="55" x="55">&lt;b55&gt;</bpt>wxLog クラスの概要<ept i="55">&lt;/b55&gt;</ept><ept i="54">&lt;/a54&gt;</ept><it pos="begin" x="56">&lt;br56&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="57" x="57">&lt;a57&gt;</bpt>wxALIGN_CENTER<ept i="57">&lt;/a57&gt;</ept> ); <bpt i="58" x="58">&lt;s58&gt;</bpt>// no border and centre horizontally<ept i="58">&lt;/s58&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144109Z">
        <seg><bpt i="57" x="57">&lt;a57&gt;</bpt>wxALIGN_CENTER<ept i="57">&lt;/a57&gt;</ept> ); <bpt i="58" x="58">&lt;s58&gt;</bpt>// ボーダーなしで水平方向に中央寄せ<ept i="58">&lt;/s58&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;a5&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="5">&lt;/a5&gt;</ept> should be overridden if you simply want to redirect the log messages somewhere else, without changing their formatting.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112214Z">
        <seg>メッセージの形式を変更することなく、ログメッセージを単純に他の場所へリダイレクトしたいだけの場合、<bpt i="5" x="5">&lt;a5&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="5">&lt;/a5&gt;</ept> をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="66" x="66">&lt;a66&gt;</bpt><bpt i="67" x="67">&lt;b67&gt;</bpt>Event handling overview<ept i="67">&lt;/b67&gt;</ept><ept i="66">&lt;/a66&gt;</ept><it pos="begin" x="68">&lt;br68&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132222Z">
        <seg><bpt i="66" x="66">&lt;a66&gt;</bpt><bpt i="67" x="67">&lt;b67&gt;</bpt>イベント処理の概要<ept i="67">&lt;/b67&gt;</ept><ept i="66">&lt;/a66&gt;</ept><it pos="begin" x="68">&lt;br68&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Application class: wxApp<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T151947Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>アプリケーションクラス: wxApp<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Pluggable event handlers<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074926Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>動的イベントハンドラ<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Programming with wxFlexGridSizer<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115708Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxFlexGridSizer を用いたプログラミング<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Unicode and the outside world<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155523Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>Unicode と外部の世界<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxBoxSizer::GetOrientation<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145927Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxBoxSizer::GetOrientation<ept i="6">&lt;/a6&gt;</ept><it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogTextCtrl<ept i="6">&lt;/a6&gt;</ept>,<it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003252Z">
        <seg><bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogTextCtrl<ept i="6">&lt;/a6&gt;</ept>,<it pos="begin" x="7">&lt;br7&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>wxFrame<ept i="7">&lt;/a7&gt;</ept> *the_frame = <bpt i="8" x="8">&lt;s8&gt;</bpt>new<ept i="8">&lt;/s8&gt;</ept> <bpt i="9" x="9">&lt;a9&gt;</bpt>wxFrame<ept i="9">&lt;/a9&gt;</ept>(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152659Z">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>wxFrame<ept i="7">&lt;/a7&gt;</ept> *the_frame = <bpt i="8" x="8">&lt;s8&gt;</bpt>new<ept i="8">&lt;/s8&gt;</ept> <bpt i="9" x="9">&lt;a9&gt;</bpt>wxFrame<ept i="9">&lt;/a9&gt;</ept>(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>wxLog::SetComponentLevel<ept i="7">&lt;/a7&gt;</ept>(<bpt i="8" x="8">&lt;s8&gt;</bpt>"MyProgram/DB/Trans"<ept i="8">&lt;/s8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxLOG_Trace<ept i="9">&lt;/a9&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110923Z">
        <seg><bpt i="7" x="7">&lt;a7&gt;</bpt>wxLog::SetComponentLevel<ept i="7">&lt;/a7&gt;</ept>(<bpt i="8" x="8">&lt;s8&gt;</bpt>"MyProgram/DB/Trans"<ept i="8">&lt;/s8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxLOG_Trace<ept i="9">&lt;/a9&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="87" x="87">&lt;a87&gt;</bpt><bpt i="88" x="88">&lt;b88&gt;</bpt>Sizer overview<ept i="88">&lt;/b88&gt;</ept><ept i="87">&lt;/a87&gt;</ept><it pos="begin" x="89">&lt;br89&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132236Z">
        <seg><bpt i="87" x="87">&lt;a87&gt;</bpt><bpt i="88" x="88">&lt;b88&gt;</bpt>サイザーの概要<ept i="88">&lt;/b88&gt;</ept><ept i="87">&lt;/a87&gt;</ept><it pos="begin" x="89">&lt;br89&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>File classes and functions<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132259Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>ファイルクラスと関数<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Programming with wxStaticBoxSizer<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115715Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxStaticBoxSizer を用いたプログラミング<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Unicode support in wxWidgets<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092759Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxWidgets における Unicode 対応<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Unicode-related compilation settings<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155549Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Unicode 関連のコンパイル設定<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>Window identifiers<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074938Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>ウィンドウ識別子<ept i="8">&lt;/a8&gt;</ept><it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogMessage<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;s9&gt;</bpt>"..."<ept i="9">&lt;/s9&gt;</ept>); <bpt i="10" x="10">&lt;s10&gt;</bpt>// ok<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114550Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogMessage<ept i="8">&lt;/a8&gt;</ept>(<bpt i="9" x="9">&lt;s9&gt;</bpt>"..."<ept i="9">&lt;/s9&gt;</ept>); <bpt i="10" x="10">&lt;s10&gt;</bpt>// ok<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogWindow<ept i="8">&lt;/a8&gt;</ept>,<it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003253Z">
        <seg><bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogWindow<ept i="8">&lt;/a8&gt;</ept>,<it pos="begin" x="9">&lt;br9&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="99" x="99">&lt;a99&gt;</bpt><bpt i="100" x="100">&lt;b100&gt;</bpt>Device context overview<ept i="100">&lt;/b100&gt;</ept><ept i="99">&lt;/a99&gt;</ept><it pos="begin" x="101">&lt;br101&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T142001Z">
        <seg><bpt i="99" x="99">&lt;a99&gt;</bpt><bpt i="100" x="100">&lt;b100&gt;</bpt>デバイスコンテキストの概要<ept i="100">&lt;/b100&gt;</ept><ept i="99">&lt;/a99&gt;</ept><it pos="begin" x="101">&lt;br101&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxClientDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154030Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxClientDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxPaintDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154136Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxPaintDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxScreenDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T153911Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxScreenDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxSize<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> <it pos="end" x="2">&lt;/b2&gt;</it> <bpt i="3" x="3">&lt;b3&gt;</bpt>CalcMin<ept i="3">&lt;/b3&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150638Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxSize<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> <it pos="end" x="2">&lt;/b2&gt;</it> <bpt i="3" x="3">&lt;b3&gt;</bpt>CalcMin<ept i="3">&lt;/b3&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindowDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154309Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindowDC<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A border:<ept i="0">&lt;/b0&gt;</ept> The border is just empty space and is used to separate dialog items in a dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142045Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ボーダー :<ept i="0">&lt;/b0&gt;</ept> ボーダーは単なる空白スペースで、ダイアログ内でコントロール同士を分けるために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A border<ept i="0">&lt;/b0&gt;</ept>: The border is just empty space and is used to separate dialog items in a dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141211Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ボーダー :<ept i="0">&lt;/b0&gt;</ept> ボーダーは単なる空白スペースで、ダイアログ内でコントロール同士を分けるために使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A minimal size:<ept i="0">&lt;/b0&gt;</ept> This minimal size is usually identical to the initial size of the controls and may either be set explicitly in the wxSize field of the control constructor or may be calculated by wxWidgets, typically by setting the height and/or the width of the item to -1.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T133301Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>最小サイズ :<ept i="0">&lt;/b0&gt;</ept> 通常、この最小サイズはコントロールの初期サイズと同じであり、コントロールのコンストラクタの wxSize フィールドに明示的に設定されるか、(普通は高さや幅に -1 を設定することで) wxWidgets によって計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A minimal size<ept i="0">&lt;/b0&gt;</ept>: This minimal size is usually identical to the initial size of the controls and may either be set explicitly in the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSize<ept i="1">&lt;/a1&gt;</ept> field of the control constructor or may be calculated by wxWidgets, typically by setting the height and/or the width of the item to -1.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141200Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>最小サイズ :<ept i="0">&lt;/b0&gt;</ept> 通常、この最小サイズはコントロールの初期サイズと同じであり、コントロールのコンストラクタの <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSize<ept i="1">&lt;/a1&gt;</ept> フィールドに明示的に設定されるか、(普通は高さや幅に -1 を設定することで) wxWidgets によって計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A stretch factor:<ept i="0">&lt;/b0&gt;</ept> If a sizer contains more than one child and it is offered more space than its children and their borders need, the question arises how to distribute the surplus space among the children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T145521Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ストレッチ係数 :<ept i="0">&lt;/b0&gt;</ept> サイザーがひとつ以上の子コントロールを持ち、子コントロールとそのボーダーの必要とするサイズ以上のサイズを持つ場合、余剰スペースを子コントロールに対してどのように分配するかが問題となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>A stretch factor<ept i="0">&lt;/b0&gt;</ept>: If a sizer contains more than one child and it is offered more space than its children and their borders need, the question arises how to distribute the surplus space among the children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141230Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ストレッチ係数 :<ept i="0">&lt;/b0&gt;</ept> サイザーがひとつ以上の子コントロールを持ち、子コントロールとそのボーダーの必要とするサイズ以上のサイズを持つ場合、余剰スペースを子コントロールに対してどのように分配するかが問題となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>An alignment:<ept i="0">&lt;/b0&gt;</ept> Often, a dialog item is given more space than its minimal size plus its border.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T123510Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>アライメント :<ept i="0">&lt;/b0&gt;</ept> ダイアログアイテムに対して、最小サイズとボーダーのスペースよりも多くのスペースを与えることはよくあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>An alignment<ept i="0">&lt;/b0&gt;</ept>: Often, a dialog item is given more space than its minimal size plus its border.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141221Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>アライメント :<ept i="0">&lt;/b0&gt;</ept> ダイアログアイテムに対して、最小サイズとボーダーのスペースよりも多くのスペースを与えることはよくあります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Completeness:<ept i="0">&lt;/b0&gt;</ept> Usually, an error message should be presented to the user when some operation fails.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091816Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>完全性 :<ept i="0">&lt;/b0&gt;</ept> 通常、処理が失敗した場合にはエラーメッセージが表示されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Completeness<ept i="0">&lt;/b0&gt;</ept> Usually, an error message should be presented to the user when some operation fails.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015937Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>完全性<ept i="0">&lt;/b0&gt;</ept> 通常、処理が失敗した場合にはエラーメッセージが表示されるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Flexibility:<ept i="0">&lt;/b0&gt;</ept> The output of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> functions can be redirected or suppressed entirely based on their importance, which is either impossible or difficult to do with traditional methods.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091643Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>柔軟性 :<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> 関数の出力はその重要度に応じてリダイレクトしたり抑制したりできます。これは従来の関数では不可能、もしくは困難なことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Flexibility<ept i="0">&lt;/b0&gt;</ept> The output of wxLog functions can be redirected or suppressed entirely based on their importance, which is either impossible or difficult to do with traditional methods.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T090235Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>柔軟性<ept i="0">&lt;/b0&gt;</ept> wxLog 関数の出力はその重要度に応じてリダイレクトしたり抑制したりできます。これは従来の関数では不可能、もしくは困難なことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Pay close attention to Step 5.<ept i="0">&lt;/b0&gt;</ept> People often overlook or get confused by this powerful feature of the wxWidgets event processing system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T031315Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>ステップ 5 に注意してください。<ept i="0">&lt;/b0&gt;</ept> wxWidgets のイベント処理システムの持つこの強力な機能はしばしば見落とされたり、人を混乱させたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Portability:<ept i="0">&lt;/b0&gt;</ept> It is a common practice to use <bpt i="1" x="1">&lt;e1&gt;</bpt>printf()<ept i="1">&lt;/e1&gt;</ept> statements or cout/cerr C++ streams for writing out some (debug or otherwise) information.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091656Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>移植性 :<ept i="0">&lt;/b0&gt;</ept> デバッグ情報や他の情報の出力に <bpt i="1" x="1">&lt;e1&gt;</bpt>printf()<ept i="1">&lt;/e1&gt;</ept> や cout/cerr などの C++ ストリームを使用するのはごく普通のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Portability<ept i="0">&lt;/b0&gt;</ept> It is a common practice to use <bpt i="1" x="1">&lt;i1&gt;</bpt>printf()<ept i="1">&lt;/i1&gt;</ept> statements or cout/cerr C++ streams for writing out some (debug or otherwise) information.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015828Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>移植性<ept i="0">&lt;/b0&gt;</ept> デバッグ情報や他の情報の出力に <bpt i="1" x="1">&lt;i1&gt;</bpt>printf()<ept i="1">&lt;/i1&gt;</ept> や cout/cerr などの C++ ストリームを使用するのはごく普通のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>SearchEventTable<ept i="0">&lt;/b0&gt;</ept> is called for this event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T024421Z">
        <seg>このイベントハンドラから <bpt i="0" x="0">&lt;b0&gt;</bpt>SearchEventTable<ept i="0">&lt;/b0&gt;</ept> が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>Warning:<ept i="0">&lt;/b0&gt;</ept> gettext versions &lt; 0.10 are known to be buggy, so you should find a later version of it!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T160602Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>注意:<ept i="0">&lt;/b0&gt;</ept> gettext バージョン &lt; 0.10 はバグが多いため、最新版を利用するべきです!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>int<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;b1&gt;</bpt>GetOrientation<ept i="1">&lt;/b1&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150703Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>int<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;b1&gt;</bpt>GetOrientation<ept i="1">&lt;/b1&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>void<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;b1&gt;</bpt>RecalcSizes<ept i="1">&lt;/b1&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150049Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>void<ept i="0">&lt;/b0&gt;</ept> <bpt i="1" x="1">&lt;b1&gt;</bpt>RecalcSizes<ept i="1">&lt;/b1&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/b0&gt;</ept>(<bpt i="1" x="1">&lt;b1&gt;</bpt>int <ept i="1">&lt;/b1&gt;</ept><bpt i="2" x="2">&lt;i2&gt;</bpt>orient<ept i="2">&lt;/i2&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145929Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/b0&gt;</ept>(<bpt i="1" x="1">&lt;b1&gt;</bpt>int <ept i="1">&lt;/b1&gt;</ept><bpt i="2" x="2">&lt;i2&gt;</bpt>orient<ept i="2">&lt;/i2&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxClientDC.<ept i="0">&lt;/b0&gt;</ept> Use this to paint on the client area of window (the part without borders and other decorations), but do not use it from within an <bpt i="1" x="1">&lt;a1&gt;</bpt>wxPaintEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141425Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxClientDC<ept i="0">&lt;/b0&gt;</ept>。ウィンドウのクライアントエリア (ボーダーや他の装飾を除いた部分) に描画するときに使用します。ただし、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxPaintEvent<ept i="1">&lt;/a1&gt;</ept> の中で使用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogDebug<ept i="0">&lt;/b0&gt;</ept> is <bpt i="1" x="1">&lt;b1&gt;</bpt>the<ept i="1">&lt;/b1&gt;</ept> right function for debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011629Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogDebug<ept i="0">&lt;/b0&gt;</ept> は <bpt i="1" x="1">&lt;b1&gt;</bpt>まさに<ept i="1">&lt;/b1&gt;</ept> デバッグ出力に適切な関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogError<ept i="0">&lt;/b0&gt;</ept> is the function to use for error messages, i.e. the messages that must be shown to the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010103Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogError<ept i="0">&lt;/b0&gt;</ept> はエラーメッセージ (ユーザに通知しなければならないメッセージ) 用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogFatalError<ept i="0">&lt;/b0&gt;</ept> which is like <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogError<ept i="1">&lt;/i1&gt;</ept>, but also terminates the program with the exit code 3 (using <bpt i="2" x="2">&lt;i2&gt;</bpt>abort()<ept i="2">&lt;/i2&gt;</ept> standard function).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005238Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogFatalError<ept i="0">&lt;/b0&gt;</ept> は <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogError<ept i="1">&lt;/i1&gt;</ept> と似ていますが、(<bpt i="2" x="2">&lt;i2&gt;</bpt>abort()<ept i="2">&lt;/i2&gt;</ept> 標準関数を使用して) リターンコード 3 でプログラムを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogGui<ept i="0">&lt;/b0&gt;</ept> This is the standard log target for wxWidgets applications (it is used by default if you don't do anything) and provides the most reasonable handling of all types of messages for given platform.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T090443Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogGui<ept i="0">&lt;/b0&gt;</ept> これは wxWidgets アプリケーションの標準ログターゲット (何もしない場合にデフォルトで使用されます) で、指定されたプラットフォームについて、メッセージのすべての型に対してもっとも合理的な処理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogMessage<ept i="0">&lt;/b0&gt;</ept> is for all normal, informational messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010056Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogMessage<ept i="0">&lt;/b0&gt;</ept> はすべての通常 (通知) メッセージ用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogNull<ept i="0">&lt;/b0&gt;</ept> The last log class is quite particular: it doesn't do anything.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025643Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogNull<ept i="0">&lt;/b0&gt;</ept> 最後のログクラスは極めて特殊です: これは何も行いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStatus<ept i="0">&lt;/b0&gt;</ept> is for status messages - they will go into the status bar of the active or specified (as the first argument) <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> if it has one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011009Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStatus<ept i="0">&lt;/b0&gt;</ept> はステータスメッセージ用の関数で、このメッセージはアクティブまたは第一引数で指定された <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> がステータスバーを持つ場合に、ステータスバーへ出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStderr<ept i="0">&lt;/b0&gt;</ept> This class logs messages to a <bpt i="1" x="1">&lt;i1&gt;</bpt>FILE *<ept i="1">&lt;/i1&gt;</ept>, using stderr by default as its name suggests.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T024402Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStderr<ept i="0">&lt;/b0&gt;</ept> このクラスはメッセージを <bpt i="1" x="1">&lt;i1&gt;</bpt>FILE *<ept i="1">&lt;/i1&gt;</ept> へ出力します。その名の通り、デフォルトでは stderr へ出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStream<ept i="0">&lt;/b0&gt;</ept> This class has the same functionality as wxLogStderr, but uses <bpt i="1" x="1">&lt;i1&gt;</bpt>ostream<ept i="1">&lt;/i1&gt;</ept> and cerr instead of <bpt i="2" x="2">&lt;i2&gt;</bpt>FILE *<ept i="2">&lt;/i2&gt;</ept> and stderr.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T024353Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogStream<ept i="0">&lt;/b0&gt;</ept> このクラスは wxLogStderr と同じ機能を持ちますが、<bpt i="2" x="2">&lt;i2&gt;</bpt>FILE *<ept i="2">&lt;/i2&gt;</ept> と stderr の代わりに <bpt i="1" x="1">&lt;i1&gt;</bpt>ostream<ept i="1">&lt;/i1&gt;</ept> と cerr を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogSysError<ept i="0">&lt;/b0&gt;</ept> is mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011243Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogSysError<ept i="0">&lt;/b0&gt;</ept> は主に wxWidgets 自身で使用されますが、システムコール (API 関数) の失敗後のエラーログを記録するのに便利かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogTrace<ept i="0">&lt;/b0&gt;</ept> as <bpt i="1" x="1">&lt;b1&gt;</bpt>wxLogDebug<ept i="1">&lt;/b1&gt;</ept> only does something in debug build.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T012357Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogTrace<ept i="0">&lt;/b0&gt;</ept> も <bpt i="1" x="1">&lt;b1&gt;</bpt>wxLogDebug<ept i="1">&lt;/b1&gt;</ept> と同じようにデバッグビルド時のみ動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogVerbose<ept i="0">&lt;/b0&gt;</ept> is for verbose output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010049Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogVerbose<ept i="0">&lt;/b0&gt;</ept> は詳細な出力用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogWarning<ept i="0">&lt;/b0&gt;</ept> for warnings - they are also normally shown to the user, but don't interrupt the program work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010113Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogWarning<ept i="0">&lt;/b0&gt;</ept> は警告メッセージ (通常はユーザに通知されますが、プログラムの動作を妨げないメッセージ） 用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogWindow<ept i="0">&lt;/b0&gt;</ept> This log target provides a "log console" which collects all messages generated by the application and also passes them to the previous active log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025402Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxLogWindow<ept i="0">&lt;/b0&gt;</ept> このログターゲットはアプリケーションの生成するすべてのメッセージを収集する "ログコンソール" を提供するとともに、前に有効だったログターゲットに収集したメッセージを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxPaintDC.<ept i="0">&lt;/b0&gt;</ept> Use this to paint on the client area of a window, but <bpt i="1" x="1">&lt;i1&gt;</bpt>only<ept i="1">&lt;/i1&gt;</ept> from within a <bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintEvent<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141422Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxPaintDC<ept i="0">&lt;/b0&gt;</ept>。ウィンドウのクライアントエリアに描画するときに使用しますが、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintEvent<ept i="2">&lt;/a2&gt;</ept> の中で <bpt i="1" x="1">&lt;i1&gt;</bpt>のみ<ept i="1">&lt;/i1&gt;</ept> 使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxScreenDC.<ept i="0">&lt;/b0&gt;</ept> Use this to paint on the screen, as opposed to an individual window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141428Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxScreenDC<ept i="0">&lt;/b0&gt;</ept>。個別のウィンドウではなく、スクリーン上に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxWindowDC.<ept i="0">&lt;/b0&gt;</ept> Use this to paint on the whole area of a window, including decorations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141502Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt>wxWindowDC<ept i="0">&lt;/b0&gt;</ept>。装飾を含む、ウィンドウ全体に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;b2&gt;</bpt>Tip:<ept i="2">&lt;/b2&gt;</ept> under Windows, you must either run the program under debugger or use a 3rd party program such as <bpt i="3" x="3">&lt;a3&gt;</bpt>DbgView<ept i="3">&lt;/a3&gt;</ept> to actually see the debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T012227Z">
        <seg><bpt i="2" x="2">&lt;b2&gt;</bpt>ヒント:<ept i="2">&lt;/b2&gt;</ept> Windows でデバッグ出力を確認するためにはデバッガーを使用するか、<bpt i="3" x="3">&lt;a3&gt;</bpt>DbgView<ept i="3">&lt;/a3&gt;</ept> のようなサードパーティーのプログラムを使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/c0&gt;</ept> is defined as 1 now to indicate Unicode support.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033722Z">
        <seg>Unicode に対応しているため、現在、 <bpt i="0" x="0">&lt;c0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/c0&gt;</ept> は 1 として定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Event class<ept i="0">&lt;/e0&gt;</ept> carried by the event: each event has some information associated with it and this data is represented by an object of a class derived from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T034810Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>イベントクラス<ept i="0">&lt;/e0&gt;</ept> : 各イベントは自分自身に関連する情報を持っており、これは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent<ept i="1">&lt;/a1&gt;</ept> の継承クラスで表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Event source<ept i="0">&lt;/e0&gt;</ept>: <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent<ept i="1">&lt;/a1&gt;</ept> stores the object which generated the event and, for windows, its identifier (see <bpt i="2" x="2">&lt;a2&gt;</bpt>Window Identifiers<ept i="2">&lt;/a2&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T021644Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Event 発生元<ept i="0">&lt;/e0&gt;</ept> : <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent<ept i="1">&lt;/a1&gt;</ept> はイベントを生成したオブジェクトや、生成元がウィンドウの場合はその識別子 (<bpt i="2" x="2">&lt;a2&gt;</bpt>ウィンドウ識別子<ept i="2">&lt;/a2&gt;</ept> 参照) を格納しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Event type<ept i="0">&lt;/e0&gt;</ept>: this is simply a value of type wxEventType which uniquely identifies the type of the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T021606Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>イベント型<ept i="0">&lt;/e0&gt;</ept> : イベントの型を一意に識別するための wxEventType 型の値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>OnInit<ept i="0">&lt;/e0&gt;</ept> will usually create a top window as a bare minimum.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T123716Z">
        <seg>通常、<bpt i="0" x="0">&lt;e0&gt;</bpt>OnInit<ept i="0">&lt;/e0&gt;</ept> では最低限、トップウィンドウを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>Please pay close attention to step 6!<ept i="0">&lt;/e0&gt;</ept> People often overlook or get confused by this powerful feature of the wxWidgets event processing system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T145251Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>ステップ 6 に注意してください。<ept i="0">&lt;/e0&gt;</ept> wxWidgets のイベント処理システムの持つこの強力な機能はしばしば見落とされたり、人を混乱させたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;i0&gt;</bpt>orient<ept i="0">&lt;/i0&gt;</ept> may be either of wxVERTICAL or wxHORIZONTAL for creating either a column sizer or a row sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150042Z">
        <seg>列サイザー、行サイザーを作成する場合、 <bpt i="0" x="0">&lt;i0&gt;</bpt>orient<ept i="0">&lt;/i0&gt;</ept> はそれぞれ wxVERTICAL または wxHORIZONTAL になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;i2&gt;</bpt>OnInit<ept i="2">&lt;/i2&gt;</ept> will usually create a top window as a bare minimum.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T123741Z">
        <seg>通常、<bpt i="2" x="2">&lt;i2&gt;</bpt>OnInit<ept i="2">&lt;/i2&gt;</ept> では最低限、トップウィンドウを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// We want to get a dialog that is stretchable because it<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>// has a text ctrl at the top and two buttons at the bottom.<ept i="1">&lt;/s1&gt;</ept>

MyDialog::MyDialog(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept> *parent, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindowID<ept i="3">&lt;/a3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>id<ept i="4">&lt;/s4&gt;</ept>, <bpt i="5" x="5">&lt;s5&gt;</bpt>const<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> &amp;title )
: <bpt i="7" x="7">&lt;a7&gt;</bpt>wxDialog<ept i="7">&lt;/a7&gt;</ept>(parent, id, title, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxDefaultPosition<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxDefaultSize<ept i="9">&lt;/a9&gt;</ept>,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142852Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// 上部にテキストコントロールと下部にふたつのボタンを持つので<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>// リサイズ可能なダイアログにしたい。<ept i="1">&lt;/s1&gt;</ept>

MyDialog::MyDialog(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept> *parent, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindowID<ept i="3">&lt;/a3&gt;</ept> <bpt i="4" x="4">&lt;s4&gt;</bpt>id<ept i="4">&lt;/s4&gt;</ept>, <bpt i="5" x="5">&lt;s5&gt;</bpt>const<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString<ept i="6">&lt;/a6&gt;</ept> &amp;title )
: <bpt i="7" x="7">&lt;a7&gt;</bpt>wxDialog<ept i="7">&lt;/a7&gt;</ept>(parent, id, title, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxDefaultPosition<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxDefaultSize<ept i="9">&lt;/a9&gt;</ept>,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// define a new event class<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>class <ept i="1">&lt;/s1&gt;</ept>MyPlotEvent: <bpt i="2" x="2">&lt;s2&gt;</bpt>public<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEvent<ept i="3">&lt;/a3&gt;</ept>
{
<bpt i="4" x="4">&lt;s4&gt;</bpt>public<ept i="4">&lt;/s4&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150427Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// 新しいイベントクラスを定義する<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;s1&gt;</bpt>class <ept i="1">&lt;/s1&gt;</ept>MyPlotEvent: <bpt i="2" x="2">&lt;s2&gt;</bpt>public<ept i="2">&lt;/s2&gt;</ept> <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEvent<ept i="3">&lt;/a3&gt;</ept>
{
<bpt i="4" x="4">&lt;s4&gt;</bpt>public<ept i="4">&lt;/s4&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// disable all database error messages, everybody knows databases never<ept i="0">&lt;/s0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110908Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// 絶対にデータベースが失敗しないことを誰もが知っているため、<ept i="0">&lt;/s0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// this is typically in a header: it just declares MY_EVENT event type<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDECLARE_EVENT<ept i="1">&lt;/a1&gt;</ept>(MY_EVENT, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept>);

<bpt i="3" x="3">&lt;s3&gt;</bpt>// this is a definition so can't be in a header<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;a4&gt;</bpt>wxDEFINE_EVENT<ept i="4">&lt;/a4&gt;</ept>(MY_EVENT, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxCommandEvent<ept i="5">&lt;/a5&gt;</ept>);

<bpt i="6" x="6">&lt;s6&gt;</bpt>// example of code handling the event with event tables<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;a7&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="7">&lt;/a7&gt;</ept>(MyFrame, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxFrame<ept i="8">&lt;/a8&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150052Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>// このマクロは一般的にヘッダファイル内で使用します: これは MY_EVENT イベント型を定義するだけです<ept i="0">&lt;/s0&gt;</ept>
<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDECLARE_EVENT<ept i="1">&lt;/a1&gt;</ept>(MY_EVENT, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept>);

<bpt i="3" x="3">&lt;s3&gt;</bpt>// これは定義なのでヘッダ内で使用することはできません<ept i="3">&lt;/s3&gt;</ept>
<bpt i="4" x="4">&lt;a4&gt;</bpt>wxDEFINE_EVENT<ept i="4">&lt;/a4&gt;</ept>(MY_EVENT, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxCommandEvent<ept i="5">&lt;/a5&gt;</ept>);

<bpt i="6" x="6">&lt;s6&gt;</bpt>// イベントテーブルによるイベント処理のコード例<ept i="6">&lt;/s6&gt;</ept>
<bpt i="7" x="7">&lt;a7&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="7">&lt;/a7&gt;</ept>(MyFrame, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxFrame<ept i="8">&lt;/a8&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>DerivedApp : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152654Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>DerivedApp : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyApp : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124532Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyApp : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyFrame : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024704Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>class <ept i="0">&lt;/s0&gt;</ept>MyFrame : <bpt i="1" x="1">&lt;s1&gt;</bpt>public<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFrame<ept i="2">&lt;/a2&gt;</ept>
{
<bpt i="3" x="3">&lt;s3&gt;</bpt>public<ept i="3">&lt;/s3&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScopedCharBuffer<ept i="1">&lt;/a1&gt;</ept> p(s.<bpt i="2" x="2">&lt;a2&gt;</bpt>ToUTF8<ept i="2">&lt;/a2&gt;</ept>());
puts(p);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171253Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScopedCharBuffer<ept i="1">&lt;/a1&gt;</ept> p(s.<bpt i="2" x="2">&lt;a2&gt;</bpt>ToUTF8<ept i="2">&lt;/a2&gt;</ept>());
puts(p);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> <bpt i="1" x="1">&lt;s1&gt;</bpt>char<ept i="1">&lt;/s1&gt;</ept> *p = s.<bpt i="2" x="2">&lt;a2&gt;</bpt>ToUTF8<ept i="2">&lt;/a2&gt;</ept>();
...
puts(p); <bpt i="3" x="3">&lt;s3&gt;</bpt>// or call any other function taking const char *<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170753Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>const<ept i="0">&lt;/s0&gt;</ept> <bpt i="1" x="1">&lt;s1&gt;</bpt>char<ept i="1">&lt;/s1&gt;</ept> *p = s.<bpt i="2" x="2">&lt;a2&gt;</bpt>ToUTF8<ept i="2">&lt;/a2&gt;</ept>();
...
puts(p); <bpt i="3" x="3">&lt;s3&gt;</bpt>// または const char * を受け取る他の関数の呼び出し<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>enum<ept i="0">&lt;/s0&gt;</ept> { Red, Green, Blue };</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130832Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>enum<ept i="0">&lt;/s0&gt;</ept> { Red, Green, Blue };</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>struct <ept i="0">&lt;/s0&gt;</ept>MyFunctor
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060809Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>struct <ept i="0">&lt;/s0&gt;</ept>MyFunctor
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>switch<ept i="0">&lt;/s0&gt;</ept> ( s[n] )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122458Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>switch<ept i="0">&lt;/s0&gt;</ept> ( s[n] )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>using namespace <ept i="0">&lt;/s0&gt;</ept>boost;

<bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> MyHandler::OnExit( <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp; )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060938Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>using namespace <ept i="0">&lt;/s0&gt;</ept>boost;

<bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> MyHandler::OnExit( <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp; )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> HandleExit( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> &amp; )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060659Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> HandleExit( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> &amp; )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrame::OnExit(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; WXUNUSED(event))
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034205Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrame::OnExit(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; WXUNUSED(event))
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrame::OnSize(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizeEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034454Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrame::OnSize(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizeEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrameHandler::OnFrameExit( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> &amp; )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060207Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyFrameHandler::OnFrameExit( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> &amp; )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyHandler::OnExit( <bpt i="1" x="1">&lt;s1&gt;</bpt>int<ept i="1">&lt;/s1&gt;</ept> exitCode, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp;, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> goodByeMessage )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061147Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyHandler::OnExit( <bpt i="1" x="1">&lt;s1&gt;</bpt>int<ept i="1">&lt;/s1&gt;</ept> exitCode, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp;, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> goodByeMessage )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyWindow::OnMyCmd(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154318Z">
        <seg><bpt i="0" x="0">&lt;s0&gt;</bpt>void<ept i="0">&lt;/s0&gt;</ept> MyWindow::OnMyCmd(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// accessors<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155555Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// アクセサ<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// also enable tracing messages from wxWidgets dynamic module loading<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111013Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>// また、wxWidgets の動的モジュールロード機能の<ept i="10">&lt;/s10&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>return<ept i="10">&lt;/s10&gt;</ept> 0;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124606Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>return<ept i="10">&lt;/s10&gt;</ept> 0;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>void<ept i="10">&lt;/s10&gt;</ept> OnExit(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCommandEvent<ept i="11">&lt;/a11&gt;</ept>&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024715Z">
        <seg><bpt i="10" x="10">&lt;s10&gt;</bpt>void<ept i="10">&lt;/s10&gt;</ept> OnExit(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCommandEvent<ept i="11">&lt;/a11&gt;</ept>&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="11" x="11">&lt;s11&gt;</bpt>// mechanism<ept i="11">&lt;/s11&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111052Z">
        <seg><bpt i="11" x="11">&lt;s11&gt;</bpt>// トレースメッセージも有効化する<ept i="11">&lt;/s11&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>// do something<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150109Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>// 処理を行なう<ept i="12">&lt;/s12&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>return<ept i="12">&lt;/s12&gt;</ept> <bpt i="13" x="13">&lt;s13&gt;</bpt>true<ept i="13">&lt;/s13&gt;</ept>;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152703Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>return<ept i="12">&lt;/s12&gt;</ept> <bpt i="13" x="13">&lt;s13&gt;</bpt>true<ept i="13">&lt;/s13&gt;</ept>;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>void<ept i="12">&lt;/s12&gt;</ept> OnButton1(<bpt i="13" x="13">&lt;a13&gt;</bpt>wxCommandEvent<ept i="13">&lt;/a13&gt;</ept>&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T020036Z">
        <seg><bpt i="12" x="12">&lt;s12&gt;</bpt>void<ept i="12">&lt;/s12&gt;</ept> OnButton1(<bpt i="13" x="13">&lt;a13&gt;</bpt>wxCommandEvent<ept i="13">&lt;/a13&gt;</ept>&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>// implement the base class pure virtual<ept i="14">&lt;/s14&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150512Z">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>// 基底クラスの純粋仮想関数を実装する<ept i="14">&lt;/s14&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>void<ept i="14">&lt;/s14&gt;</ept> OnSize(<bpt i="15" x="15">&lt;a15&gt;</bpt>wxSizeEvent<ept i="15">&lt;/a15&gt;</ept>&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T020037Z">
        <seg><bpt i="14" x="14">&lt;s14&gt;</bpt>void<ept i="14">&lt;/s14&gt;</ept> OnSize(<bpt i="15" x="15">&lt;a15&gt;</bpt>wxSizeEvent<ept i="15">&lt;/a15&gt;</ept>&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="15" x="15">&lt;s15&gt;</bpt>virtual<ept i="15">&lt;/s15&gt;</ept> <bpt i="16" x="16">&lt;a16&gt;</bpt>wxEvent<ept i="16">&lt;/a16&gt;</ept> *<bpt i="17" x="17">&lt;a17&gt;</bpt>Clone<ept i="17">&lt;/a17&gt;</ept>()<bpt i="18" x="18">&lt;s18&gt;</bpt> const <ept i="18">&lt;/s18&gt;</ept>{ <bpt i="19" x="19">&lt;s19&gt;</bpt>return<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;s20&gt;</bpt>new<ept i="20">&lt;/s20&gt;</ept> MyPlotEvent(*<bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>); }

<bpt i="22" x="22">&lt;s22&gt;</bpt>private<ept i="22">&lt;/s22&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150515Z">
        <seg><bpt i="15" x="15">&lt;s15&gt;</bpt>virtual<ept i="15">&lt;/s15&gt;</ept> <bpt i="16" x="16">&lt;a16&gt;</bpt>wxEvent<ept i="16">&lt;/a16&gt;</ept> *<bpt i="17" x="17">&lt;a17&gt;</bpt>Clone<ept i="17">&lt;/a17&gt;</ept>()<bpt i="18" x="18">&lt;s18&gt;</bpt> const <ept i="18">&lt;/s18&gt;</ept>{ <bpt i="19" x="19">&lt;s19&gt;</bpt>return<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;s20&gt;</bpt>new<ept i="20">&lt;/s20&gt;</ept> MyPlotEvent(*<bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>); }

<bpt i="22" x="22">&lt;s22&gt;</bpt>private<ept i="22">&lt;/s22&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// create text ctrl with minimal size 100x60 that is horizontally and<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145437Z">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// 最小サイズ 100x60 のテキストコントロールを作成し、水平方向と<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// create text ctrl with minimal size 100x60<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142933Z">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// 最小サイズ 100x60 のテキストコントロールを作成する<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// it's common to call the event handlers OnSomething() but there is no<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T020204Z">
        <seg><bpt i="16" x="16">&lt;s16&gt;</bpt>// イベントハンドラは OnSomething() という名前にするのが一般的ですが、<ept i="16">&lt;/s16&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="17" x="17">&lt;s17&gt;</bpt>// obligation to do that; this one is an event handler too:<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024748Z">
        <seg><bpt i="17" x="17">&lt;s17&gt;</bpt>// そうしなければならないわけではありません； これもイベントハンドラです:<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="17" x="17">&lt;s17&gt;</bpt>// vertically stretchable with a border width of 10<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T153110Z">
        <seg><bpt i="17" x="17">&lt;s17&gt;</bpt>// 垂直方向にリサイズ可能で、ボーダーの太さは 10 にする<ept i="17">&lt;/s17&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="18" x="18">&lt;s18&gt;</bpt>new<ept i="18">&lt;/s18&gt;</ept> <bpt i="19" x="19">&lt;a19&gt;</bpt>wxTextCtrl<ept i="19">&lt;/a19&gt;</ept>( <bpt i="20" x="20">&lt;s20&gt;</bpt>this<ept i="20">&lt;/s20&gt;</ept>, -1, <bpt i="21" x="21">&lt;s21&gt;</bpt>"My text."<ept i="21">&lt;/s21&gt;</ept>, <bpt i="22" x="22">&lt;a22&gt;</bpt>wxDefaultPosition<ept i="22">&lt;/a22&gt;</ept>, <bpt i="23" x="23">&lt;a23&gt;</bpt>wxSize<ept i="23">&lt;/a23&gt;</ept>(100,60), <bpt i="24" x="24">&lt;a24&gt;</bpt>wxTE_MULTILINE<ept i="24">&lt;/a24&gt;</ept>),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142947Z">
        <seg><bpt i="18" x="18">&lt;s18&gt;</bpt>new<ept i="18">&lt;/s18&gt;</ept> <bpt i="19" x="19">&lt;a19&gt;</bpt>wxTextCtrl<ept i="19">&lt;/a19&gt;</ept>( <bpt i="20" x="20">&lt;s20&gt;</bpt>this<ept i="20">&lt;/s20&gt;</ept>, -1, <bpt i="21" x="21">&lt;s21&gt;</bpt>"My text."<ept i="21">&lt;/s21&gt;</ept>, <bpt i="22" x="22">&lt;a22&gt;</bpt>wxDefaultPosition<ept i="22">&lt;/a22&gt;</ept>, <bpt i="23" x="23">&lt;a23&gt;</bpt>wxSize<ept i="23">&lt;/a23&gt;</ept>(100,60), <bpt i="24" x="24">&lt;a24&gt;</bpt>wxTE_MULTILINE<ept i="24">&lt;/a24&gt;</ept>),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="18" x="18">&lt;s18&gt;</bpt>void<ept i="18">&lt;/s18&gt;</ept> DoTest(<bpt i="19" x="19">&lt;a19&gt;</bpt>wxCommandEvent<ept i="19">&lt;/a19&gt;</ept>&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T020304Z">
        <seg><bpt i="18" x="18">&lt;s18&gt;</bpt>void<ept i="18">&lt;/s18&gt;</ept> DoTest(<bpt i="19" x="19">&lt;a19&gt;</bpt>wxCommandEvent<ept i="19">&lt;/a19&gt;</ept>&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="19" x="19">&lt;s19&gt;</bpt>new<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;a20&gt;</bpt>wxTextCtrl<ept i="20">&lt;/a20&gt;</ept>( <bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>, -1, <bpt i="22" x="22">&lt;s22&gt;</bpt>"My text."<ept i="22">&lt;/s22&gt;</ept>, <bpt i="23" x="23">&lt;a23&gt;</bpt>wxDefaultPosition<ept i="23">&lt;/a23&gt;</ept>, <bpt i="24" x="24">&lt;a24&gt;</bpt>wxSize<ept i="24">&lt;/a24&gt;</ept>(100,60), <bpt i="25" x="25">&lt;a25&gt;</bpt>wxTE_MULTILINE<ept i="25">&lt;/a25&gt;</ept>),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145454Z">
        <seg><bpt i="19" x="19">&lt;s19&gt;</bpt>new<ept i="19">&lt;/s19&gt;</ept> <bpt i="20" x="20">&lt;a20&gt;</bpt>wxTextCtrl<ept i="20">&lt;/a20&gt;</ept>( <bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>, -1, <bpt i="22" x="22">&lt;s22&gt;</bpt>"My text."<ept i="22">&lt;/s22&gt;</ept>, <bpt i="23" x="23">&lt;a23&gt;</bpt>wxDefaultPosition<ept i="23">&lt;/a23&gt;</ept>, <bpt i="24" x="24">&lt;a24&gt;</bpt>wxSize<ept i="24">&lt;/a24&gt;</ept>(100,60), <bpt i="25" x="25">&lt;a25&gt;</bpt>wxTE_MULTILINE<ept i="25">&lt;/a25&gt;</ept>),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>// fail anyhow<ept i="1">&lt;/s1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110921Z">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>// データベースのすべてのエラーメッセージを無効化する<ept i="1">&lt;/s1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>// wxFile.Open() normally complains if file can't be opened, we don't want it<ept i="1">&lt;/s1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113225Z">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>// 通常はファイルを開けなかった場合に wxFile.Open() がエラーメッセージを出力するが、そうさせたくない<ept i="1">&lt;/s1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> operator()( <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp; )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060812Z">
        <seg><bpt i="1" x="1">&lt;s1&gt;</bpt>void<ept i="1">&lt;/s1&gt;</ept> operator()( <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> &amp; )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="20" x="20">&lt;s20&gt;</bpt>event<ept i="20">&lt;/s20&gt;</ept>.SetEventObject(<bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150154Z">
        <seg><bpt i="20" x="20">&lt;s20&gt;</bpt>event<ept i="20">&lt;/s20&gt;</ept>.SetEventObject(<bpt i="21" x="21">&lt;s21&gt;</bpt>this<ept i="21">&lt;/s21&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="22" x="22">&lt;s22&gt;</bpt>// Give it some contents<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155523Z">
        <seg><bpt i="22" x="22">&lt;s22&gt;</bpt>// 何か値を設定する<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>const<ept i="23">&lt;/s23&gt;</ept> <bpt i="24" x="24">&lt;a24&gt;</bpt>wxPoint<ept i="24">&lt;/a24&gt;</ept> m_pos;
};

<bpt i="25" x="25">&lt;s25&gt;</bpt>// we define a single MY_PLOT_CLICKED event type associated with the class<ept i="25">&lt;/s25&gt;</ept>
<bpt i="26" x="26">&lt;s26&gt;</bpt>// above but typically you are going to have more than one event type, e.g. you<ept i="26">&lt;/s26&gt;</ept>
<bpt i="27" x="27">&lt;s27&gt;</bpt>// could also have MY_PLOT_ZOOMED or MY_PLOT_PANNED &amp;c -- in which case you<ept i="27">&lt;/s27&gt;</ept>
<bpt i="28" x="28">&lt;s28&gt;</bpt>// would just add more similar lines here<ept i="28">&lt;/s28&gt;</ept>
<bpt i="29" x="29">&lt;a29&gt;</bpt>wxDEFINE_EVENT<ept i="29">&lt;/a29&gt;</ept>(MY_PLOT_CLICKED, MyPlotEvent);


<bpt i="30" x="30">&lt;s30&gt;</bpt>// if you want to support old compilers you need to use some ugly macros:<ept i="30">&lt;/s30&gt;</ept>
<bpt i="31" x="31">&lt;s31&gt;</bpt>typedef<ept i="31">&lt;/s31&gt;</ept> void (<bpt i="32" x="32">&lt;a32&gt;</bpt>wxEvtHandler<ept i="32">&lt;/a32&gt;</ept>::*MyPlotEventFunction)(MyPlotEvent&amp;);
<bpt i="33" x="33">&lt;s33&gt;</bpt>#define MyPlotEventHandler(func) wxEVENT_HANDLER_CAST(MyPlotEventFunction, func)<ept i="33">&lt;/s33&gt;</ept>
<bpt i="34" x="34">&lt;s34&gt;</bpt><ept i="34">&lt;/s34&gt;</ept>
<bpt i="35" x="35">&lt;s35&gt;</bpt>// if your code is only built using reasonably modern compilers, you could just<ept i="35">&lt;/s35&gt;</ept>
<bpt i="36" x="36">&lt;s36&gt;</bpt>// do this instead:<ept i="36">&lt;/s36&gt;</ept>
<bpt i="37" x="37">&lt;s37&gt;</bpt>#define MyPlotEventHandler(func) (&amp;func)<ept i="37">&lt;/s37&gt;</ept>
<bpt i="38" x="38">&lt;s38&gt;</bpt><ept i="38">&lt;/s38&gt;</ept>
<bpt i="39" x="39">&lt;s39&gt;</bpt>// finally define a macro for creating the event table entries for the new<ept i="39">&lt;/s39&gt;</ept>
<bpt i="40" x="40">&lt;s40&gt;</bpt>// event type<ept i="40">&lt;/s40&gt;</ept>
<bpt i="41" x="41">&lt;s41&gt;</bpt>//<ept i="41">&lt;/s41&gt;</ept>
<bpt i="42" x="42">&lt;s42&gt;</bpt>// remember that you don't need this at all if you only use Bind&lt;&gt;() and that<ept i="42">&lt;/s42&gt;</ept>
<bpt i="43" x="43">&lt;s43&gt;</bpt>// you can replace MyPlotEventHandler(func) with just &amp;func unless you use a<ept i="43">&lt;/s43&gt;</ept>
<bpt i="44" x="44">&lt;s44&gt;</bpt>// really old compiler<ept i="44">&lt;/s44&gt;</ept>
<bpt i="45" x="45">&lt;s45&gt;</bpt>#define MY_EVT_PLOT_CLICK(id, func) \<ept i="45">&lt;/s45&gt;</ept>
<bpt i="46" x="46">&lt;s46&gt;</bpt>    wx__DECLARE_EVT1(MY_PLOT_CLICKED, id, MyPlotEventHandler(func))<ept i="46">&lt;/s46&gt;</ept>
<bpt i="47" x="47">&lt;s47&gt;</bpt><ept i="47">&lt;/s47&gt;</ept>

<bpt i="48" x="48">&lt;s48&gt;</bpt>// example of code handling the event (you will use one of these methods, not<ept i="48">&lt;/s48&gt;</ept>
<bpt i="49" x="49">&lt;s49&gt;</bpt>// both, of course):<ept i="49">&lt;/s49&gt;</ept>
<bpt i="50" x="50">&lt;a50&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="50">&lt;/a50&gt;</ept>(MyFrame, <bpt i="51" x="51">&lt;a51&gt;</bpt>wxFrame<ept i="51">&lt;/a51&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T152446Z">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>const<ept i="23">&lt;/s23&gt;</ept> <bpt i="24" x="24">&lt;a24&gt;</bpt>wxPoint<ept i="24">&lt;/a24&gt;</ept> m_pos;
};

<bpt i="25" x="25">&lt;s25&gt;</bpt>// 上記のクラスに関連する MY_PLOT_CLICKED イベント型をひとつだけ定義しますが、<ept i="25">&lt;/s25&gt;</ept>
<bpt i="26" x="26">&lt;s26&gt;</bpt>// 通常は複数のイベント型を持つようになるでしょう。例えば、<ept i="26">&lt;/s26&gt;</ept>
<bpt i="27" x="27">&lt;s27&gt;</bpt>// MY_PLOT_ZOOMED や MY_PLOT_PANNED などです。<ept i="27">&lt;/s27&gt;</ept>
<bpt i="28" x="28">&lt;s28&gt;</bpt>// そのような場合はこれと似たような行をここに追加するだけです。<ept i="28">&lt;/s28&gt;</ept>
<bpt i="29" x="29">&lt;a29&gt;</bpt>wxDEFINE_EVENT<ept i="29">&lt;/a29&gt;</ept>(MY_PLOT_CLICKED, MyPlotEvent);


<bpt i="30" x="30">&lt;s30&gt;</bpt>// 古いコンパイラをサポートしたい場合、いくつかの醜いマクロを使用する必要があります:<ept i="30">&lt;/s30&gt;</ept>
<bpt i="31" x="31">&lt;s31&gt;</bpt>typedef<ept i="31">&lt;/s31&gt;</ept> void (<bpt i="32" x="32">&lt;a32&gt;</bpt>wxEvtHandler<ept i="32">&lt;/a32&gt;</ept>::*MyPlotEventFunction)(MyPlotEvent&amp;);
<bpt i="33" x="33">&lt;s33&gt;</bpt>#define MyPlotEventHandler(func) wxEVENT_HANDLER_CAST(MyPlotEventFunction, func)<ept i="33">&lt;/s33&gt;</ept>
<bpt i="34" x="34">&lt;s34&gt;</bpt><ept i="34">&lt;/s34&gt;</ept>
<bpt i="35" x="35">&lt;s35&gt;</bpt>// ほどほどにモダンなコンパイラのみでビルドする場合、<ept i="35">&lt;/s35&gt;</ept>
<bpt i="36" x="36">&lt;s36&gt;</bpt>// 代わりに以下のようにするだけです:<ept i="36">&lt;/s36&gt;</ept>
<bpt i="37" x="37">&lt;s37&gt;</bpt>#define MyPlotEventHandler(func) (&amp;func)<ept i="37">&lt;/s37&gt;</ept>
<bpt i="38" x="38">&lt;s38&gt;</bpt><ept i="38">&lt;/s38&gt;</ept>
<bpt i="39" x="39">&lt;s39&gt;</bpt>// 最後に、新しいイベント型のイベントテーブルエントリを作成するマクロを<ept i="39">&lt;/s39&gt;</ept>
<bpt i="40" x="40">&lt;s40&gt;</bpt>// 定義します<ept i="40">&lt;/s40&gt;</ept>
<bpt i="41" x="41">&lt;s41&gt;</bpt>//<ept i="41">&lt;/s41&gt;</ept>
<bpt i="42" x="42">&lt;s42&gt;</bpt>// Bind&lt;&gt;() のみを使用する場合はこうする必要がまったくないことと、<ept i="42">&lt;/s42&gt;</ept>
<bpt i="43" x="43">&lt;s43&gt;</bpt>// 本当に古いコンパイラを使うのでなければ MyPlotEventHandler(func) の代わりに &amp;func とすることができることを<ept i="43">&lt;/s43&gt;</ept>
<bpt i="44" x="44">&lt;s44&gt;</bpt>// 覚えておいてください<ept i="44">&lt;/s44&gt;</ept>
<bpt i="45" x="45">&lt;s45&gt;</bpt>#define MY_EVT_PLOT_CLICK(id, func) \<ept i="45">&lt;/s45&gt;</ept>
<bpt i="46" x="46">&lt;s46&gt;</bpt>    wx__DECLARE_EVT1(MY_PLOT_CLICKED, id, MyPlotEventHandler(func))<ept i="46">&lt;/s46&gt;</ept>
<bpt i="47" x="47">&lt;s47&gt;</bpt><ept i="47">&lt;/s47&gt;</ept>

<bpt i="48" x="48">&lt;s48&gt;</bpt>// イベント処理のサンプルコード (これらの関数のひとつを使用することになるでしょう。<ept i="48">&lt;/s48&gt;</ept>
<bpt i="49" x="49">&lt;s49&gt;</bpt>// もちろん、両方使うことはありません):<ept i="49">&lt;/s49&gt;</ept>
<bpt i="50" x="50">&lt;a50&gt;</bpt>wxBEGIN_EVENT_TABLE<ept i="50">&lt;/a50&gt;</ept>(MyFrame, <bpt i="51" x="51">&lt;a51&gt;</bpt>wxFrame<ept i="51">&lt;/a51&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>event<ept i="23">&lt;/s23&gt;</ept>.SetString(<bpt i="24" x="24">&lt;s24&gt;</bpt>"Hello"<ept i="24">&lt;/s24&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150203Z">
        <seg><bpt i="23" x="23">&lt;s23&gt;</bpt>event<ept i="23">&lt;/s23&gt;</ept>.SetString(<bpt i="24" x="24">&lt;s24&gt;</bpt>"Hello"<ept i="24">&lt;/s24&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="25" x="25">&lt;s25&gt;</bpt>// Do send it<ept i="25">&lt;/s25&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155533Z">
        <seg><bpt i="25" x="25">&lt;s25&gt;</bpt>// 送信する<ept i="25">&lt;/s25&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// Do something useful.<ept i="2">&lt;/s2&gt;</ept>
}

MyFrameHandler myFrameHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060232Z">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// 何か有用なことを行う。<ept i="2">&lt;/s2&gt;</ept>
}

MyFrameHandler myFrameHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// Do something useful<ept i="2">&lt;/s2&gt;</ept>
}

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060723Z">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// 何か有用なことを行う<ept i="2">&lt;/s2&gt;</ept>
}

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// when the user selects "Exit" from the menu we should close<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T160138Z">
        <seg><bpt i="2" x="2">&lt;s2&gt;</bpt>// ユーザがメニューから "Exit" を選択したときには終了する必要がある。<ept i="2">&lt;/s2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="32" x="32">&lt;s32&gt;</bpt>//create two buttons that are horizontally unstretchable,<ept i="32">&lt;/s32&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145510Z">
        <seg><bpt i="32" x="32">&lt;s32&gt;</bpt>//ふたつのボタンを作成し、水平方向にはリサイズ不可にして、<ept i="32">&lt;/s32&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="33" x="33">&lt;s33&gt;</bpt>// with an all-around border with a width of 10 and implicit top alignment<ept i="33">&lt;/s33&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145520Z">
        <seg><bpt i="33" x="33">&lt;s33&gt;</bpt>// 太さ 10 のボーダーを全方向に持たせ、暗黙的に上揃えにする<ept i="33">&lt;/s33&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="35" x="35">&lt;s35&gt;</bpt>new<ept i="35">&lt;/s35&gt;</ept> <bpt i="36" x="36">&lt;a36&gt;</bpt>wxButton<ept i="36">&lt;/a36&gt;</ept>( <bpt i="37" x="37">&lt;s37&gt;</bpt>this<ept i="37">&lt;/s37&gt;</ept>, <bpt i="38" x="38">&lt;a38&gt;</bpt>wxID_OK<ept i="38">&lt;/a38&gt;</ept>, <bpt i="39" x="39">&lt;s39&gt;</bpt>"OK"<ept i="39">&lt;/s39&gt;</ept> ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145526Z">
        <seg><bpt i="35" x="35">&lt;s35&gt;</bpt>new<ept i="35">&lt;/s35&gt;</ept> <bpt i="36" x="36">&lt;a36&gt;</bpt>wxButton<ept i="36">&lt;/a36&gt;</ept>( <bpt i="37" x="37">&lt;s37&gt;</bpt>this<ept i="37">&lt;/s37&gt;</ept>, <bpt i="38" x="38">&lt;a38&gt;</bpt>wxID_OK<ept i="38">&lt;/a38&gt;</ept>, <bpt i="39" x="39">&lt;s39&gt;</bpt>"OK"<ept i="39">&lt;/s39&gt;</ept> ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="36" x="36">&lt;s36&gt;</bpt>new<ept i="36">&lt;/s36&gt;</ept> <bpt i="37" x="37">&lt;a37&gt;</bpt>wxButton<ept i="37">&lt;/a37&gt;</ept>( <bpt i="38" x="38">&lt;s38&gt;</bpt>this<ept i="38">&lt;/s38&gt;</ept>, <bpt i="39" x="39">&lt;a39&gt;</bpt>wxID_OK<ept i="39">&lt;/a39&gt;</ept>, <bpt i="40" x="40">&lt;s40&gt;</bpt>"OK"<ept i="40">&lt;/s40&gt;</ept> ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143820Z">
        <seg><bpt i="36" x="36">&lt;s36&gt;</bpt>new<ept i="36">&lt;/s36&gt;</ept> <bpt i="37" x="37">&lt;a37&gt;</bpt>wxButton<ept i="37">&lt;/a37&gt;</ept>( <bpt i="38" x="38">&lt;s38&gt;</bpt>this<ept i="38">&lt;/s38&gt;</ept>, <bpt i="39" x="39">&lt;a39&gt;</bpt>wxID_OK<ept i="39">&lt;/a39&gt;</ept>, <bpt i="40" x="40">&lt;s40&gt;</bpt>"OK"<ept i="40">&lt;/s40&gt;</ept> ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// Do something useful<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060825Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// 何か有用なことを行う<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// Do something useful<ept i="3">&lt;/s3&gt;</ept>
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060951Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// 何か有用なことを行う<ept i="3">&lt;/s3&gt;</ept>
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// in UTF8 the character U+00E0 is encoded as 0xC3A0<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082644Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>// UTF-8 では U+00E0 は 0xC3A0 と符号化される<ept i="3">&lt;/s3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>if<ept i="3">&lt;/s3&gt;</ept> ( !file.<bpt i="4" x="4">&lt;a4&gt;</bpt>Open<ept i="4">&lt;/a4&gt;</ept>(<bpt i="5" x="5">&lt;s5&gt;</bpt>"bar"<ept i="5">&lt;/s5&gt;</ept>) )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113231Z">
        <seg><bpt i="3" x="3">&lt;s3&gt;</bpt>if<ept i="3">&lt;/s3&gt;</ept> ( !file.<bpt i="4" x="4">&lt;a4&gt;</bpt>Open<ept i="4">&lt;/a4&gt;</ept>(<bpt i="5" x="5">&lt;s5&gt;</bpt>"bar"<ept i="5">&lt;/s5&gt;</ept>) )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="43" x="43">&lt;s43&gt;</bpt>new<ept i="43">&lt;/s43&gt;</ept> <bpt i="44" x="44">&lt;a44&gt;</bpt>wxButton<ept i="44">&lt;/a44&gt;</ept>( <bpt i="45" x="45">&lt;s45&gt;</bpt>this<ept i="45">&lt;/s45&gt;</ept>, <bpt i="46" x="46">&lt;a46&gt;</bpt>wxID_CANCEL<ept i="46">&lt;/a46&gt;</ept>, <bpt i="47" x="47">&lt;s47&gt;</bpt>"Cancel"<ept i="47">&lt;/s47&gt;</ept> ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145535Z">
        <seg><bpt i="43" x="43">&lt;s43&gt;</bpt>new<ept i="43">&lt;/s43&gt;</ept> <bpt i="44" x="44">&lt;a44&gt;</bpt>wxButton<ept i="44">&lt;/a44&gt;</ept>( <bpt i="45" x="45">&lt;s45&gt;</bpt>this<ept i="45">&lt;/s45&gt;</ept>, <bpt i="46" x="46">&lt;a46&gt;</bpt>wxID_CANCEL<ept i="46">&lt;/a46&gt;</ept>, <bpt i="47" x="47">&lt;s47&gt;</bpt>"Cancel"<ept i="47">&lt;/s47&gt;</ept> ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="46" x="46">&lt;s46&gt;</bpt>new<ept i="46">&lt;/s46&gt;</ept> <bpt i="47" x="47">&lt;a47&gt;</bpt>wxButton<ept i="47">&lt;/a47&gt;</ept>( <bpt i="48" x="48">&lt;s48&gt;</bpt>this<ept i="48">&lt;/s48&gt;</ept>, <bpt i="49" x="49">&lt;a49&gt;</bpt>wxID_CANCEL<ept i="49">&lt;/a49&gt;</ept>, <bpt i="50" x="50">&lt;s50&gt;</bpt>"Cancel"<ept i="50">&lt;/s50&gt;</ept> ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143855Z">
        <seg><bpt i="46" x="46">&lt;s46&gt;</bpt>new<ept i="46">&lt;/s46&gt;</ept> <bpt i="47" x="47">&lt;a47&gt;</bpt>wxButton<ept i="47">&lt;/a47&gt;</ept>( <bpt i="48" x="48">&lt;s48&gt;</bpt>this<ept i="48">&lt;/s48&gt;</ept>, <bpt i="49" x="49">&lt;a49&gt;</bpt>wxID_CANCEL<ept i="49">&lt;/a49&gt;</ept>, <bpt i="50" x="50">&lt;s50&gt;</bpt>"Cancel"<ept i="50">&lt;/s50&gt;</ept> ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>// Do something useful<ept i="4">&lt;/s4&gt;</ept>
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061205Z">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>// 何か有用なことを行う<ept i="4">&lt;/s4&gt;</ept>
}

MyHandler myHandler;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>const<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFilterClassFactory<ept i="5">&lt;/a5&gt;</ept> *fcf;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T013317Z">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>const<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;a5&gt;</bpt>wxFilterClassFactory<ept i="5">&lt;/a5&gt;</ept> *fcf;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>virtual<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;s5&gt;</bpt>bool<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>OnInit<ept i="6">&lt;/a6&gt;</ept>();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152657Z">
        <seg><bpt i="4" x="4">&lt;s4&gt;</bpt>virtual<ept i="4">&lt;/s4&gt;</ept> <bpt i="5" x="5">&lt;s5&gt;</bpt>bool<ept i="5">&lt;/s5&gt;</ept> <bpt i="6" x="6">&lt;a6&gt;</bpt>OnInit<ept i="6">&lt;/a6&gt;</ept>();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="50" x="50">&lt;s50&gt;</bpt>//create a sizer with no border and centered horizontally<ept i="50">&lt;/s50&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145549Z">
        <seg><bpt i="50" x="50">&lt;s50&gt;</bpt>//サイザーを作成し、ボーダーなしで水平方向に中央揃えにする<ept i="50">&lt;/s50&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>// but enable tracing for the transactions as somehow our changes don't<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110833Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>// しかし、どういうわけか時たま変更のコミットに失敗するため、<ept i="5">&lt;/s5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>int<ept i="5">&lt;/s5&gt;</ept> m_whatever;

<bpt i="6" x="6">&lt;s6&gt;</bpt>private<ept i="6">&lt;/s6&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015445Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>int<ept i="5">&lt;/s5&gt;</ept> m_whatever;

<bpt i="6" x="6">&lt;s6&gt;</bpt>private<ept i="6">&lt;/s6&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> ch = *i</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151627Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> ch = *i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> ch = s[i];</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151504Z">
        <seg><bpt i="5" x="5">&lt;s5&gt;</bpt>wchar_t<ept i="5">&lt;/s5&gt;</ept> ch = s[i];</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="60" x="60">&lt;s60&gt;</bpt>// accordingly and prevent it from being resized<ept i="60">&lt;/s60&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144931Z">
        <seg><bpt i="60" x="60">&lt;s60&gt;</bpt>// ウィンドウのサイズを調整し、<ept i="60">&lt;/s60&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="60" x="60">&lt;s60&gt;</bpt>event<ept i="60">&lt;/s60&gt;</ept>.SetEventObject(<bpt i="61" x="61">&lt;s61&gt;</bpt>this<ept i="61">&lt;/s61&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151359Z">
        <seg><bpt i="60" x="60">&lt;s60&gt;</bpt>event<ept i="60">&lt;/s60&gt;</ept>.SetEventObject(<bpt i="61" x="61">&lt;s61&gt;</bpt>this<ept i="61">&lt;/s61&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="61" x="61">&lt;s61&gt;</bpt>// to smaller size<ept i="61">&lt;/s61&gt;</ept>
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145001Z">
        <seg><bpt i="61" x="61">&lt;s61&gt;</bpt>// より小さくリサイズされないようにする<ept i="61">&lt;/s61&gt;</ept>
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// ... process error ourselves ...<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114638Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// ... 自分自身でエラー処理を行なう ...<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// do something with it<ept i="6">&lt;/s6&gt;</ept>
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035106Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// なんらかの処理<ept i="6">&lt;/s6&gt;</ept>
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// get committed sometimes<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110838Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>// トランザクションのトレースは有効化する<ept i="6">&lt;/s6&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>wchar_t<ept i="6">&lt;/s6&gt;</ept> ch = *i</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T153029Z">
        <seg><bpt i="6" x="6">&lt;s6&gt;</bpt>wchar_t<ept i="6">&lt;/s6&gt;</ept> ch = *i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// Notice that as the event handlers normally are not called from outside<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015529Z">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// 通常、イベントハンドラはクラス外から呼ばれることはないため、<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// do something with it<ept i="7">&lt;/s7&gt;</ept>
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T153059Z">
        <seg><bpt i="7" x="7">&lt;s7&gt;</bpt>// これを使って何かする<ept i="7">&lt;/s7&gt;</ept>
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="8" x="8">&lt;s8&gt;</bpt>// otherwise wxYES or wxOK button will be default<ept i="8">&lt;/s8&gt;</ept>

<bpt i="9" x="9">&lt;a9&gt;</bpt>wxOK<ept i="9">&lt;/a9&gt;</ept>     <bpt i="10" x="10">&lt;s10&gt;</bpt>// return wxID_OK<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCANCEL<ept i="11">&lt;/a11&gt;</ept> <bpt i="12" x="12">&lt;s12&gt;</bpt>// return wxID_CANCEL<ept i="12">&lt;/s12&gt;</ept>
<bpt i="13" x="13">&lt;a13&gt;</bpt>wxHELP<ept i="13">&lt;/a13&gt;</ept>   <bpt i="14" x="14">&lt;s14&gt;</bpt>// return wxID_HELP<ept i="14">&lt;/s14&gt;</ept>

<bpt i="15" x="15">&lt;a15&gt;</bpt>wxFORWARD<ept i="15">&lt;/a15&gt;</ept>   <bpt i="16" x="16">&lt;s16&gt;</bpt>// return wxID_FORWARD<ept i="16">&lt;/s16&gt;</ept>
<bpt i="17" x="17">&lt;a17&gt;</bpt>wxBACKWARD<ept i="17">&lt;/a17&gt;</ept>  <bpt i="18" x="18">&lt;s18&gt;</bpt>// return wxID_BACKWARD<ept i="18">&lt;/s18&gt;</ept>
<bpt i="19" x="19">&lt;a19&gt;</bpt>wxSETUP<ept i="19">&lt;/a19&gt;</ept>     <bpt i="20" x="20">&lt;s20&gt;</bpt>// return wxID_SETUP<ept i="20">&lt;/s20&gt;</ept>
<bpt i="21" x="21">&lt;a21&gt;</bpt>wxMORE<ept i="21">&lt;/a21&gt;</ept>      <bpt i="22" x="22">&lt;s22&gt;</bpt>// return wxID_MORE<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T150353Z">
        <seg><bpt i="8" x="8">&lt;s8&gt;</bpt>// これを指定しない場合、wxYES ボタンか wxOK ボタンがデフォルトになります<ept i="8">&lt;/s8&gt;</ept>

<bpt i="9" x="9">&lt;a9&gt;</bpt>wxOK<ept i="9">&lt;/a9&gt;</ept>     <bpt i="10" x="10">&lt;s10&gt;</bpt>// wxID_OK を返却します<ept i="10">&lt;/s10&gt;</ept>
<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCANCEL<ept i="11">&lt;/a11&gt;</ept> <bpt i="12" x="12">&lt;s12&gt;</bpt>// wxID_CANCEL を返却します<ept i="12">&lt;/s12&gt;</ept>
<bpt i="13" x="13">&lt;a13&gt;</bpt>wxHELP<ept i="13">&lt;/a13&gt;</ept>   <bpt i="14" x="14">&lt;s14&gt;</bpt>// wxID_HELP を返却します<ept i="14">&lt;/s14&gt;</ept>

<bpt i="15" x="15">&lt;a15&gt;</bpt>wxFORWARD<ept i="15">&lt;/a15&gt;</ept>   <bpt i="16" x="16">&lt;s16&gt;</bpt>// wxID_FORWARD を返却します<ept i="16">&lt;/s16&gt;</ept>
<bpt i="17" x="17">&lt;a17&gt;</bpt>wxBACKWARD<ept i="17">&lt;/a17&gt;</ept>  <bpt i="18" x="18">&lt;s18&gt;</bpt>// wxID_BACKWARD を返却します<ept i="18">&lt;/s18&gt;</ept>
<bpt i="19" x="19">&lt;a19&gt;</bpt>wxSETUP<ept i="19">&lt;/a19&gt;</ept>     <bpt i="20" x="20">&lt;s20&gt;</bpt>// wxID_SETUP を返却します<ept i="20">&lt;/s20&gt;</ept>
<bpt i="21" x="21">&lt;a21&gt;</bpt>wxMORE<ept i="21">&lt;/a21&gt;</ept>      <bpt i="22" x="22">&lt;s22&gt;</bpt>// wxID_MORE を返却します<ept i="22">&lt;/s22&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><it pos="begin" x="8">&lt;s8&gt;</it>// the class, they normally are private.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015549Z">
        <seg><it pos="begin" x="8">&lt;s8&gt;</it>// 普通は private にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>// to be public.<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015621Z">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>// する必要はありません。<ept i="9">&lt;/s9&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>delete<ept i="9">&lt;/s9&gt;</ept> m_helpCtrl;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124605Z">
        <seg><bpt i="9" x="9">&lt;s9&gt;</bpt>delete<ept i="9">&lt;/s9&gt;</ept> m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>&lt;wx/sizer.h&gt;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145850Z">
        <seg>&lt;wx/sizer.h&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDC<ept i="0">&lt;/a0&gt;</ept> is a <bpt i="1" x="1">&lt;e1&gt;</bpt>device<ept i="1">&lt;/e1&gt;</ept> context onto which graphics and text can be drawn.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154211Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxDC<ept i="0">&lt;/a0&gt;</ept> は図形やテキストを描画可能な <bpt i="1" x="1">&lt;e1&gt;</bpt>デバイスコンテキスト<ept i="1">&lt;/e1&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>glyph<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> is a particular image (usually part of a font) that represents a character or part of a character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031637Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>グリフ<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> とは、文字、あるいは文字の一部を表現する特定のイメージです。 (通常はフォントの一部です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A <bpt i="0" x="0">&lt;c0&gt;</bpt>EVT_LEAVE_WINDOW(MyFrame::OnMouseLeave)<ept i="0">&lt;/c0&gt;</ept> line in the frame event table has no effect as mouse move (including entering and leaving) events are not propagated up to the parent window (at least not by default).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T025639Z">
        <seg>フレームのイベントテーブル内に <bpt i="0" x="0">&lt;c0&gt;</bpt>EVT_LEAVE_WINDOW(MyFrame::OnMouseLeave)<ept i="0">&lt;/c0&gt;</ept> を書いても効果がありません。なぜなら、マウス移動 (フレームへの出入りも含みます) イベントは (少なくともデフォルトでは) 親ウィンドウへ伝播しないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A better solution is to write programs in such way that they may be compiled either in ANSI (traditional) mode or in the Unicode one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150238Z">
        <seg>より良い解決策としては、(従来の) ANSI モードと Unicode モードのどちらでもコンパイルできるようにプログラムを書くことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A button is a control that contains a text string, and is one of the most common elements of a GUI...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153555Z">
        <seg>ボタンはテキストを含んだコントロールであり、もっとも一般的な GUI 要素のひとつです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class that can handle events from the windowing system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T151312Z">
        <seg>ウィンドウから送信されるベントを処理可能なクラス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A close window or end session event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055212Z">
        <seg>ウィンドウの終了、またはセッションの終了イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A common example of a functor is boost::function&lt;&gt;:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060913Z">
        <seg>ファンクタの一般的な例は boost::function&lt;&gt; です:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dialog box is a window with a title bar and sometimes a system menu, which can be moved around the ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142222Z">
        <seg>ダイアログボックスはタイトルバーと、たまにシステムメニューを持つ、移動可能なウィンドウです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A dialog initialisation event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055253Z">
        <seg>ダイアログの初期化イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A flex grid sizer is a sizer which lays out its children in a two-dimensional table with all table fi...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140306Z">
        <seg>可変グリッドサイザーは子コントロールを 2 次元の表にレイアウトするサイザーです。同じ行中のセルは同じ高さを持ち、同じ列中のセルは同じ幅を持ちますが、すべての行と列が wxGridSizer のように同じ高さや幅を持つ必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A frame is a window whose size and position can (usually) be changed by the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T010152Z">
        <seg>フレームは (通常は) ユーザがサイズや位置を変更可能なウィンドウです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A grid sizer is a sizer which lays out its children in a two-dimensional table with all table fields ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135807Z">
        <seg>グリッドサイザーは子コントロールを 2 次元の表にレイアウトするサイザーで、表中のセルはすべて同じ大きさを持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A handler method in another object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T000029Z">
        <seg>別のオブジェクトのハンドラ関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A joystick event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055300Z">
        <seg>ジョイスティックイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A keypress event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055239Z">
        <seg>キー押下イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A memory device context provides a means to draw graphics onto a bitmap.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T145713Z">
        <seg>メモリデバイスコンテキストはビットマップ上に描画するための方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A menu event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055304Z">
        <seg>メニューイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A method in another object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T042153Z">
        <seg>別のオブジェクトの関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A mouse event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055312Z">
        <seg>マウスイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A move event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055320Z">
        <seg>移動イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A paint event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055325Z">
        <seg>描画イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A paint event is sent when a window's contents needs to be repainted.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154007Z">
        <seg>ペイントイベントはウィンドウのコンテンツを再描画する必要があるときに送信されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A printer device context is specific to MSW and Mac, and allows access to any printer with a Windows ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150032Z">
        <seg>プリンタデバイスコンテキストは MSW と Mac に特有のデバイスコンテキストで、Windows や Macintosh のドライバを使用してプリンタへアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A range of commonly-used control events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080921Z">
        <seg>よく使われる一連のコントロールイベント。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A scroll event sent by a scrolled window (not a scroll bar)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055533Z">
        <seg>(スクロールバーではなく) スクロール可能なウィンドウから送信されるスクロールイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A size event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055500Z">
        <seg>リサイズイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A size event holds information about size change events of wxWindow.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015436Z">
        <seg>リサイズイベントは wxWindow のサイズ変更イベントに関する情報を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A special version of wxLogChain which uses itself as the new log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130639Z">
        <seg>wxLogChain の特別版で、自分自身を新しいログターゲットとして使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A system colour change event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055543Z">
        <seg>システムカラーの変更イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A text control allows text to be displayed and edited.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160411Z">
        <seg>テキストの表示と編集が可能なテキストコントロール。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A tree control presents information as a hierarchy, with items that may be expanded to show further i...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T032633Z">
        <seg>ツリーコントロールでは情報を (項目を展開すると追加の項目が現れる) 階層として表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A tree event holds information about events associated with wxTreeCtrl objects.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T032350Z">
        <seg>ツリーイベントは wxTreeCtrl オブジェクトに関連するイベントの情報を保持します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value of more than zero is interpreted in relation to the sum of all stretch factors in the children of the respective sizer, i.e. if two children get a stretch factor of 1, they will get half the extra space each <bpt i="1" x="1">&lt;e1&gt;</bpt>independent of whether one control has a minimal sizer inferior to the other or not<ept i="1">&lt;/e1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141308Z">
        <seg>0 より大きい値はサイザー内の子コントロールに設定されたすべてのストレッチ係数の合計に基づいて解釈されます。つまり、ふたつの子コントロールのストレッチ係数に 1 を指定した場合、<bpt i="1" x="1">&lt;e1&gt;</bpt>一方のコントロールの最小サイズがもう一方より小さいかどうかによらず<ept i="1">&lt;/e1&gt;</ept> 、余剰スペースは二等分されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value of more than zero is interpreted in relation to the sum of all stretch factors in the children of the respective sizer, i.e. if two children get a stretch factor of 1, they will get half the extra space each <bpt i="1" x="1">&lt;i1&gt;</bpt>independent of whether one control has a minimal sizer inferior to the other or not<ept i="1">&lt;/i1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T123716Z">
        <seg>0 より大きい値はサイザー内の子コントロールに設定されたすべてのストレッチ係数の合計に基づいて解釈されます。つまり、ふたつの子コントロールのストレッチ係数に 1 を指定した場合、<bpt i="1" x="1">&lt;i1&gt;</bpt>一方のコントロールの最小サイズがもう一方より小さいかどうかによらず<ept i="1">&lt;/i1&gt;</ept> 、余剰スペースは二等分されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A value uniquely identifying the type of the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150339Z">
        <seg>イベントの型を一意に識別する値。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A window focus event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055231Z">
        <seg>ウィンドウフォーカスイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A window or application activation event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055130Z">
        <seg>ウィンドウまたはアプリケーションのアクティブ化イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxClientDC must be constructed if an application wishes to paint on the client area of a window fro...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150230Z">
        <seg>wxClientDC は EVT_PAINT() イベントハンドラ以外の場所でクライアントエリアを描画する場合に使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxDC is a "device context" onto which graphics and text can be drawn.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T144316Z">
        <seg>wxDC は図形やテキストを描画可能なデバイスコンテキストです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxDC is a <bpt i="0" x="0">&lt;i0&gt;</bpt>device context<ept i="0">&lt;/i0&gt;</ept> onto which graphics and text can be drawn.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140552Z">
        <seg>wxDC は図形やテキストを描画可能な <bpt i="0" x="0">&lt;i0&gt;</bpt>デバイスコンテキスト<ept i="0">&lt;/i0&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxFile performs raw file I/O.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T070227Z">
        <seg>wxFile は低レベルファイル入出力を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxMemoryBuffer is a useful data structure for storing arbitrary sized blocks of memory...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T162831Z">
        <seg>wxMemoryBuffer は任意のサイズのメモリブロックを格納するのに役立つデータ構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxPaintDC must be constructed if an application wishes to paint on the client area of a window from...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150348Z">
        <seg>wxClientDC は EVT_PAINT() イベントハンドラ内でクライアントエリアを描画する場合に使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxPoint is a useful data structure for graphics operations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150355Z">
        <seg>wxPoint は図形操作のための有用なデータ構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxScreenDC can be used to paint on the screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150056Z">
        <seg>wxScreenDC はスクリーン上へ描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxSize is a useful data structure for graphics operations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034450Z">
        <seg>wxSize は図形操作のための有用なデータ構造です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxSizer that can lay out items in a virtual grid like a wxFlexGridSizer but in this case explicit p...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140810Z">
        <seg>wxFlexGridSizer のように子コントロールを仮想のグリッドに配置しますが、wxGBPosition を使用してコントロールを明示的に配置することが可能です。また、wxGBSpan を使用することで、複数の行または列にまたがってコントロールを配置することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxWidgets application does not have a <bpt i="0" x="0">&lt;e0&gt;</bpt>main<ept i="0">&lt;/e0&gt;</ept> procedure; the equivalent is the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxApp::OnInit<ept i="1">&lt;/a1&gt;</ept> member defined for a class derived from <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T151105Z">
        <seg>wxWidgets アプリケーションは <bpt i="0" x="0">&lt;e0&gt;</bpt>main<ept i="0">&lt;/e0&gt;</ept> 関数を持ちません。それと同等の関数が <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept> を継承したクラスで定義される <bpt i="1" x="1">&lt;a1&gt;</bpt>wxApp::OnInit<ept i="1">&lt;/a1&gt;</ept> メンバ関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxWidgets application does not have a <bpt i="0" x="0">&lt;i0&gt;</bpt>main<ept i="0">&lt;/i0&gt;</ept> procedure; the equivalent is the <bpt i="1" x="1">&lt;a1&gt;</bpt>OnInit<ept i="1">&lt;/a1&gt;</ept> member defined for a class derived from wxApp.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160017Z">
        <seg>wxWidgets アプリケーションは <bpt i="0" x="0">&lt;i0&gt;</bpt>main<ept i="0">&lt;/i0&gt;</ept> 関数を持ちません。それと同等の関数が wxApp を継承したクラスで定義される <bpt i="1" x="1">&lt;a1&gt;</bpt>OnInit<ept i="1">&lt;/a1&gt;</ept> メンバ関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A wxWindowDC must be constructed if an application wishes to paint on the whole area of a window (cli...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150635Z">
        <seg>wxWindowDC はウィンドウ全体 (クライアントエリアと装飾部分) を描画する場合に使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Acknowledgements</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T062043Z">
        <seg>謝辞</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Add the mask to the list of allowed masks for wxLogTrace().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155753Z">
        <seg>wxLogTrace() の許可マスクのリストへマスクを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Additionally, columns and rows can be declared to be stretchable if the sizer is assigned a size different from the one it requested.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T130250Z">
        <seg>加えて、サイザーの必要とするサイズと異なるサイズを指定した場合に、列や行をリサイズ可能にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Additionally, in the case of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> you can build a stack (implemented using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> double-linked list) using <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::PushEventHandler()<ept i="2">&lt;/a2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T152144Z">
        <seg>加えて <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> の場合、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::PushEventHandler()<ept i="2">&lt;/a2&gt;</ept> を使用してスタック (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> の双方向リンクリストで実装されます) を構築することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Additionally, you can customize the way full log messages are constructed from the components (such as time stamp, source file information, logging thread ID and so on).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T123024Z">
        <seg>加えて、ログメッセージを (タイムスタンプ、ソースファイルの情報、スレッドID などの) 部品から構築する方法を完全にカスタマイズすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Adds a new page.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155614Z">
        <seg>新しいページを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After having enumerated all the functions which are normally used to log the messages, and why would you want to use them we now describe how all this works.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T022130Z">
        <seg>メッセージのロギングに通常使用するすべての関数と、それらを使用する理由について列挙したので、これらの動作方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After having enumerated all the functions which are normally used to log the messages, and why would you want to use them, we now describe how all this works.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111348Z">
        <seg>メッセージのロギングに通常使用するすべての関数と、それらを使用する理由について列挙したので、これらの動作方法について説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Again, this mostly will be unnoticeable but can result in some problems:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124419Z">
        <seg>これはほとんど目立ちませんが、いくつかの問題を引き起こすことがあります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept> methods</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061029Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextCtrl<ept i="0">&lt;/a0&gt;</ept> のすべての関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All children are given the same size, which is the minimal size required by the biggest child, in this case the text control in the left bottom border.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153019Z">
        <seg>子コントロールはすべて同じサイズ (最大の子コントロールの必要とする最小サイズ) が与えられます。この例では左下のテキストコントロールが最大の子コントロールです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All of them have the same syntax as <bpt i="2" x="2">&lt;e2&gt;</bpt>printf()<ept i="2">&lt;/e2&gt;</ept> or <bpt i="3" x="3">&lt;e3&gt;</bpt>vprintf()<ept i="3">&lt;/e3&gt;</ept> , i.e. they take the format string as the first argument and respectively a variable number of arguments or a variable argument list pointer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131219Z">
        <seg>これらの関数はすべて <bpt i="2" x="2">&lt;e2&gt;</bpt>printf()<ept i="2">&lt;/e2&gt;</ept> や <bpt i="3" x="3">&lt;e3&gt;</bpt>vprintf()<ept i="3">&lt;/e3&gt;</ept> と同じ構文を持ちます。つまり、第一引数にフォーマット文字列を取り、続けて可変引数か可変引数リストのポインタを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All of them have the same syntax as <bpt i="2" x="2">&lt;i2&gt;</bpt>printf()<ept i="2">&lt;/i2&gt;</ept> or <bpt i="3" x="3">&lt;i3&gt;</bpt>vprintf()<ept i="3">&lt;/i3&gt;</ept> , i.e. they take the format string as the first argument and respectively a variable number of arguments or a variable argument list pointer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005012Z">
        <seg>これらの関数はすべて <bpt i="2" x="2">&lt;i2&gt;</bpt>printf()<ept i="2">&lt;/i2&gt;</ept> や <bpt i="3" x="3">&lt;i3&gt;</bpt>vprintf()<ept i="3">&lt;/i3&gt;</ept> と同じ構文を持ちます。つまり、第一引数にフォーマット文字列を取り、続けて可変引数か可変引数リストのポインタを取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>All sizers are containers, that is, they are used to lay out one dialog item (or several dialog items), which they contain.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T143422Z">
        <seg>サイザーはすべてコンテナです。つまり、ひとつ (または複数) のダイアログアイテムを内部に配置するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Allows the programmer to specify whether the application will exit when the top-level frame is delete...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T153140Z">
        <seg>トップレベルウィンドウが削除されたときにアプリケーションを終了するかどうかをユーザが指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Allows you to add a custom event table entry by specifying the event identifier (such as wxEVT_SIZE), the window identifier, and a member function to call.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160419Z">
        <seg>(wxEVT_SIZE といった) イベント識別子、ウィンドウ識別子、呼び出すメンバ関数を指定してカスタムイベントのエントリをイベントテーブルへ追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Almost last but very, very far from least is the increased flexibility which allows to bind an event to:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T042136Z">
        <seg>大事なことを一つ言い残しましたが、バインド対象についても柔軟性が向上しており、イベントを以下のものにバインドできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also notice that <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::EnableLogging()<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogNull<ept i="1">&lt;/a1&gt;</ept> class which uses it only affect the current thread, i.e. logging messages may still be generated by the other threads after a call to <bpt i="2" x="2">&lt;c2&gt;</bpt>EnableLogging(false)<ept i="2">&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120458Z">
        <seg>また、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::EnableLogging()<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogNull<ept i="1">&lt;/a1&gt;</ept> クラスは現在のスレッドにのみ影響することに注意してください。つまり、<bpt i="2" x="2">&lt;c2&gt;</bpt>EnableLogging(false)<ept i="2">&lt;/c2&gt;</ept> を呼んだ後でも他のスレッドでは依然としてログメッセージが生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also notice that in spite of the availability of these functions, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxString<ept i="7">&lt;/a7&gt;</ept> is not the ideal class for storing arbitrary binary data as they can take up to 4 times more space than needed (when using <bpt i="8" x="8">&lt;c8&gt;</bpt>wchar_t<ept i="8">&lt;/c8&gt;</ept> internal representation on the systems where size of wide characters is 4 bytes) and you should consider using <bpt i="9" x="9">&lt;a9&gt;</bpt>wxMemoryBuffer<ept i="9">&lt;/a9&gt;</ept> instead.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T165938Z">
        <seg>また、これらの関数が存在しているにも関わらず、任意のバイナリデータを格納するのに <bpt i="7" x="7">&lt;a7&gt;</bpt>wxString<ept i="7">&lt;/a7&gt;</ept> は理想的なクラスとは言えないことに注意してください。なぜなら、必要とされる量の最大 4 倍の領域を消費する (ワイド文字が 4 バイトのシステムで内部表現に <bpt i="8" x="8">&lt;c8&gt;</bpt>wchar_t<ept i="8">&lt;/c8&gt;</ept> を使用するときがこれに該当します) ためです。代わりに <bpt i="9" x="9">&lt;a9&gt;</bpt>wxMemoryBuffer<ept i="9">&lt;/a9&gt;</ept> を使用することを検討してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also notice that most of the existing wxWidgets tutorials and discussions use the event tables because they historically preceded the apparition of dynamic event handling in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022125Z">
        <seg>既存の wxWidgets のチュートリアルや議論の大半ではイベントテーブルを使用していることにも注意してください。これは歴史的に、wxWidgets で動的イベント処理が可能になる前から、それらの文書が存在するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also please notice that there are additional steps in the event handling for the windows-making part of wxWidgets document-view framework, i.e., <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDocParentFrame<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDocChildFrame<ept i="1">&lt;/a1&gt;</ept> and their MDI equivalents <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDocMDIParentFrame<ept i="2">&lt;/a2&gt;</ept> and <bpt i="3" x="3">&lt;a3&gt;</bpt>wxDocMDIChildFrame<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T151644Z">
        <seg>また、wxWidgets ドキュメント/フレームワークのウィンドウ部分、つまり、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxDocParentFrame<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxDocChildFrame<ept i="1">&lt;/a1&gt;</ept> と、その MDI 版である <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDocMDIParentFrame<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxDocMDIChildFrame<ept i="3">&lt;/a3&gt;</ept> でのイベント処理には追加のステップが存在することにも注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also, the string and character constants should be encoded using wide characters (<bpt i="0" x="0">&lt;t0&gt;</bpt>wchar_t<ept i="0">&lt;/t0&gt;</ept> type) which typically take 2 or 4 bytes instead of <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> which only takes one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T151853Z">
        <seg>また、文字列や文字定数は <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> (1 バイト) の代わりにワイド文字 (<bpt i="0" x="0">&lt;t0&gt;</bpt>wchar_t<ept i="0">&lt;/t0&gt;</ept> 型、通常 2 か 4 バイト) で符号化される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, you may use <bpt i="4" x="4">&lt;c4&gt;</bpt>-a<ept i="4">&lt;/c4&gt;</ept> option to extract all the strings, but it will usually result in many strings being found which don't have to be translated at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040610Z">
        <seg>代わりに <bpt i="4" x="4">&lt;c4&gt;</bpt>-a<ept i="4">&lt;/c4&gt;</ept> オプションを使用することもできますが、そうするとまったく翻訳する必要のない文字列が大量に見つかることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Alternatively, you may use <bpt i="2" x="2">&lt;t2&gt;</bpt>-a<ept i="2">&lt;/t2&gt;</ept> option to extract all the strings, but it will usually result in many strings being found which don't have to be translated at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001039Z">
        <seg>代わりに <bpt i="2" x="2">&lt;t2&gt;</bpt>-a<ept i="2">&lt;/t2&gt;</ept> オプションを使用することもできますが、そうするとまったく翻訳する必要のない文字列が大量に見つかることになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although everything works fine inside the program, things can get nasty when it tries to communicate with the outside world which, sadly, often expects ANSI strings (a notable exception is the entire Win32 API which accepts either Unicode or ANSI strings and which thus makes it unnecessary to ever perform any conversions in the program).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T143311Z">
        <seg>プログラム内部ではすべてうまく動作するとしても、外部の世界とやり取りしようとすると、それらは悲しいことにしばしば ANSI 文字列を想定しているため、ひどいことになります。 (特筆すべき例外として、すべての Win32 API は Unicode 文字列と ANSI 文字列の両方を受け付けるため、プログラム内でなんらかの変換を行う必要がまったくありません）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although internationalization of an application (i18n for short) involves far more than just translating its text messages to another message - date, time and currency formats need changing too, some languages are written left to right and others right to left, character encoding may differ and many other things may need changing too - it is a necessary first step.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T042842Z">
        <seg>アプリケーションの国際化 (略して i18n) には単にテキストメッセージを他のメッセージに翻訳すること以上のことが含まれます。日付や時間、通貨の形式も変更する必要がありますし、ある言語は左から右へ、別の言語では右から左へ表記するでしょう。文字コードも異なりますし、他にもたくさんのことを変更する必要がありますが、これは必要な最初のステップです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Although it works just fine under Unix, these messages go strictly nowhere under Windows where the stdout of GUI programs is not assigned to anything.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T085347Z">
        <seg>ただし、これは Unix では正常に動作しますが、GUI プログラムの標準出力がどこにも割り当てられない Windows では厳密にどこにも出力されません.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always enclose literal string constants in <bpt i="0" x="0">&lt;a0&gt;</bpt>wxT()<ept i="0">&lt;/a0&gt;</ept> macro unless they're already converted to the right representation (another standard wxWidgets macro <bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept> does it, for example, so there is no need for <bpt i="2" x="2">&lt;t2&gt;</bpt>wxT()<ept i="2">&lt;/t2&gt;</ept> in this case) or you intend to pass the constant directly to an external function which doesn't accept wide-character strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151824Z">
        <seg>リテラル文字列をすでに正しい表現に変換している (例えば、別の標準 wxWidgets マクロ <bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept> も <bpt i="2" x="2">&lt;t2&gt;</bpt>wxT()<ept i="2">&lt;/t2&gt;</ept> と同じ事を行うため、この場合は  <bpt i="2" x="2">&lt;t2&gt;</bpt>wxT()<ept i="2">&lt;/t2&gt;</ept> を使う必要はありません) か、ワイド文字列を受け付けない外部関数へ直接リテラル文字列を渡すのでない限り、リテラル文字列は常に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxT()<ept i="0">&lt;/a0&gt;</ept> で囲む</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Always use <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> instead of <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151820Z">
        <seg><bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> の代わりに常に <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An application closes by destroying all windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160515Z">
        <seg>アプリケーションはすべてのウィンドウを破棄することで終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An arbitrary functor like boost::function&lt;&gt;.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T000123Z">
        <seg>boost::function&lt;&gt; のような任意のファンクタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An erase background event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055225Z">
        <seg>背景の消去イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An event is a structure holding information about an event passed to a callback or member function...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153238Z">
        <seg>wxEvent はコールバック関数かメンバ関数に渡されるイベントの情報を格納した構造体です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An event table is placed in an implementation file to tell wxWidgets how to map events to member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075334Z">
        <seg>イベントテーブルはソースファイルに配置され、wxWidgets にイベントとメンバ関数のマッピング方法を知らせます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An example of defining an application follows:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160959Z">
        <seg>アプリケーションを定義する例は以下の通りです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An idle event</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055244Z">
        <seg>アイドルイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An ordinary function like a static method or a global function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T000110Z">
        <seg>静的関数やグローバル関数のような普通の関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And all components are children of the unnamed root component.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T105001Z">
        <seg>そして、すべてのコンポーネントは無名のルートコンポーネントの子になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And as with <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::FromUTF8()<ept i="3">&lt;/a3&gt;</ept> example above, you can always use <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::ToUTF8()<ept i="4">&lt;/a4&gt;</ept> to retrieve the string contents in UTF-8 encoding -- this, unlike converting to <bpt i="5" x="5">&lt;c5&gt;</bpt>char*<ept i="5">&lt;/c5&gt;</ept> using the current locale, never fails.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T091819Z">
        <seg>また、上の <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::FromUTF8()<ept i="3">&lt;/a3&gt;</ept> を使ったサンプルのように、UTF-8 で符号化された文字列を取得するために常に <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::ToUTF8()<ept i="4">&lt;/a4&gt;</ept> を使うことができます。この方法は、現在のロケールを使用して <bpt i="5" x="5">&lt;c5&gt;</bpt>char*<ept i="5">&lt;/c5&gt;</ept> に変換する方法と比較して、変換に失敗することがありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And finally you can bind to an arbitrary functor and use it as an event handler:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060806Z">
        <seg>そして、最後に任意のファンクタをバインドし、イベントハンドラとして使用することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And finally, the standard preprocessor tokens enumerated above expand to ANSI strings but it is more likely that Unicode strings are wanted in the Unicode build.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151410Z">
        <seg>最後に、上に挙げた標準プリプロセッサトークンは ANSI 文字列として展開されますが、Unicode ビルドの際には Unicode 文字列の方が必要なことが多いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And while the events are normally generated by wxWidgets itself, you can also do this, which is especially useful when using custom events (see <bpt i="0" x="0">&lt;a0&gt;</bpt>Custom Event Summary<ept i="0">&lt;/a0&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T160615Z">
        <seg>また、通常、イベントは wxWidgets 自身によって生成されますが、あなたがこれを行うことも可能です。これはカスタムイベントを使用する場合に特に有用です。 (<bpt i="0" x="0">&lt;a0&gt;</bpt>カスタムイベントの概要<ept i="0">&lt;/a0&gt;</ept> 参照) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another aspect of the application shutdown is <bpt i="0" x="0">&lt;a0&gt;</bpt>OnExit<ept i="0">&lt;/a0&gt;</ept> which is called when the application exits but <bpt i="1" x="1">&lt;i1&gt;</bpt>before<ept i="1">&lt;/i1&gt;</ept> wxWidgets cleans up its internal structures.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162318Z">
        <seg>アプリケーションの終了の別の側面は <bpt i="0" x="0">&lt;a0&gt;</bpt>OnExit<ept i="0">&lt;/a0&gt;</ept> です。この関数はアプリケーションの終了時に呼ばれますが、wxWidgets の内部構造が破棄される<bpt i="1" x="1">&lt;i1&gt;</bpt>前<ept i="1">&lt;/i1&gt;</ept>に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another aspect of the application shutdown is <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::OnExit<ept i="0">&lt;/a0&gt;</ept> which is called when the application exits but <bpt i="1" x="1">&lt;e1&gt;</bpt>before<ept i="1">&lt;/e1&gt;</ept> wxWidgets cleans up its internal structures.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T133120Z">
        <seg>アプリケーションの終了の別の側面は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::OnExit<ept i="0">&lt;/a0&gt;</ept> です。この関数はアプリケーションの終了時に呼ばれますが、wxWidgets の内部構造が破棄される<bpt i="1" x="1">&lt;e1&gt;</bpt>前<ept i="1">&lt;/e1&gt;</ept>に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another class of problems is related to the fact that the value returned by <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> itself is also not just a pointer to a buffer but a value of helper class wxCStrData which is implicitly convertible to both narrow and wide strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034210Z">
        <seg>発生しうる別の問題は <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> 自身の返却する値もまたバッファのポインタではなく、暗黙的にナロー文字列やワイド文字列へ変換可能なヘルパークラス wxCStrData であることに関連しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another two-dimensional sizer derived from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141821Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> を継承した別の 2 次元サイザーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another two-dimensional sizer derived from wxGridSizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153345Z">
        <seg>wxGridSizer を継承した別の 2 次元サイザーです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another very widespread standard is <bpt i="0" x="0">&lt;b0&gt;</bpt>UTF-16<ept i="0">&lt;/b0&gt;</ept> which is used by Microsoft Windows: it encodes the first (approximately) 64 thousands of Unicode code points (the BMP plane) using 16-bit code units (2 bytes) and uses a pair of 16-bit code units to encode the characters beyond this.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T031629Z">
        <seg>非常に広く使われている別の規格として、Microsoft Windows で使われている <bpt i="0" x="0">&lt;b0&gt;</bpt>UTF-16<ept i="0">&lt;/b0&gt;</ept> があります。これは最初の約 64,000 個の Unicode コードポイント (基本多言語面) を 16 ビット (2 バイト) のコード単位で符号化し、それ以降の文字は 16 ビットのコード単位の組で符号化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Another, similar, alternative is to use pointer arithmetic:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151839Z">
        <seg>別の方法としては、ポインタ計算を使う方法があります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any character may have one or more glyph associated; e.g. some of the possible glyphs for the capital letter 'A' are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T013331Z">
        <seg>どの文字も 1 つまたは複数のグリフと関連付けられています; 例えば、大文字の 'A' であれば以下のようなグリフが関連付けられているかもしれません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any wxWidgets function accepts arguments of either type as both kinds of strings are implicitly converted to <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept>, so both</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041335Z">
        <seg>どの wxWidgets 関数も引数を暗黙的に <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString<ept i="5">&lt;/a5&gt;</ept> へ変換するため、どちらの型でも受け付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Apart from defining your event class, you also need to define your own event table macro if you want to use event tables for handling events of this type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150302Z">
        <seg>イベントクラスの定義とは別に、独自のイベントテーブルマクロも定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Apart from defining your event class, you will also need to define your own event table macro (which is quite long).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042400Z">
        <seg>イベントクラスの定義とは別に、独自のイベントテーブルマクロも定義する必要があります。 (そしてこれは非常に長くなります) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Appends a child to the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142326Z">
        <seg>サイザーに子コントロールを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Application Shutdown</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152206Z">
        <seg>アプリケーションの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Application shutdown</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161738Z">
        <seg>アプリケーションの終了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a convenience, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDialog::CreateButtonSizer(long flags)<ept i="0">&lt;/a0&gt;</ept> can be used to create a standard button sizer in which standard buttons are displayed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145939Z">
        <seg>利便性のために、標準的なボタンを表示する標準ボタンサイザーを作成するのに <bpt i="0" x="0">&lt;a0&gt;</bpt>CreateButtonSizer (long フラグ)<ept i="0">&lt;/a0&gt;</ept> を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a convenience, CreateButtonSizer ( long flags ) can be used to create a standard button sizer in which standard buttons are displayed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T131746Z">
        <seg>利便性のために、標準的なボタンを表示する標準ボタンサイザーを作成するのに CreateButtonSizer (long フラグ) を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As a slight extension of the above, the handlers can also be unbound at any time with Unbind&lt;&gt;() (and maybe rebound later).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024945Z">
        <seg>この延長として、Unbind&lt;&gt;() を使ってイベントハンドラのバインディングを任意のタイミングで解除することもできます。 (また、あとから再バインドするかもしれません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an event type is a variable, it can also be declared using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDECLARE_EVENT()<ept i="1">&lt;/a1&gt;</ept> if necessary.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155125Z">
        <seg>イベント型は変数なので、必要であれば <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDECLARE_EVENT()<ept i="1">&lt;/a1&gt;</ept> を使用して宣言することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an example, trying to open a non-existing file will usually provoke an error message, but if for some reasons it is unwanted, just use this construction:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025916Z">
        <seg>例として、存在しないファイルを開こうとすると通常はエラーメッセージが表示されますが、何らかの理由でそれを望まない場合、次のようにするだけです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As an example, we will construct a dialog that will contain a text field at the top and two buttons at the bottom.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T162557Z">
        <seg>例として、上部にテキストフィールドを持ち、下部にふたつのボタンを持つダイアログを構築します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As each event is uniquely defined by its event type, defining a custom event starts with defining a new event type for it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155001Z">
        <seg>各イベントはイベント型によって一意に定義されるため、カスタムインベントは新しいイベント型を定義するところから始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As for the (real) trace messages, their handling depends on the currently enabled trace masks: if <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask()<ept i="0">&lt;/a0&gt;</ept> was called for the mask of the given message, it will be logged, otherwise nothing happens.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132927Z">
        <seg>(本当の) トレースメッセージについては、現在有効になっているトレースマスクに応じて処理が行われます: 指定されたメッセージのマスクに対して <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::AddTraceMask()<ept i="0">&lt;/a0&gt;</ept> が呼ばれている場合はメッセージが記録されますが、そうでない場合は何も起こりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As it is common to have more than one object generating events of the same type (e.g. a typical window contains several buttons, all generating the same button click event), checking the event source object or its id allows to distinguish between them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T041217Z">
        <seg>複数のオブジェクトが同じ型のイベントを生成すること (例えば、一般的なウィンドウは複数のボタンを持ちますが、それらはすべて同じボタンクリックイベントを生成します) はよくあるため、イベントの生成元オブジェクトやその識別子を確認することで生成元を区別することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As it is easy to see comparing the last fragment with the one above, this macro expands to nothing in the (usual) ANSI mode and prefixes <bpt i="1" x="1">&lt;t1&gt;</bpt>'L'<ept i="1">&lt;/t1&gt;</ept> to its argument in the Unicode mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T163504Z">
        <seg>最後の部分を上記の例と比較すると簡単に分かるように、このマクロは (通常の) ANSI モードでは何も起こりませんが、Unicode モードでは引数の接頭語 <bpt i="1" x="1">&lt;t1&gt;</bpt>'L'<ept i="1">&lt;/t1&gt;</ept> として展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, any window belonging to a sizer may have a border, and it can be specified which of the four sides may have this border, using the wxTOP, wxLEFT, wxRIGHT and wxBOTTOM constants or wxALL for all directions (and you may also use wxNORTH, wxWEST etc instead).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141926Z">
        <seg>上で述べたように、サイザーに所属するウィンドウはどれもボーダーを持ち、四方向のどの方向にボーダーを持たせるか指定することができます。これには wxTOP、wxLEFT、wxRIGHT、wxBOTTOM 定数か、全方向を表す wxALL を使用します。 (代わりに wxNORTH、wxWEST などを使用することも可能です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, any window belonging to a sizer may have border, and it can be specified which of the four sides may have this border, using the wxTOP, wxLEFT, wxRIGHT and wxBOTTOM constants or wxALL for all directions (and you may also use wxNORTH, wxWEST etc instead).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T110348Z">
        <seg>上で述べたように、サイザーに所属するウィンドウはどれもボーダーを持ち、四方向のどの方向にボーダーを持たせるか指定することができます。これには wxTOP、wxLEFT、wxRIGHT、wxBOTTOM 定数か、全方向を表す wxALL を使用します。 (代わりに wxNORTH、wxWEST などを使用することも可能です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, only command events are recursively applied to the parents event handler in the library itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T054917Z">
        <seg>上で述べたように、コマンドイベントだけが親コントロールのイベントハンドラで再帰的に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, the events of the classes deriving from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> are propagated by default to the parent window if they are not processed in this window itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T154600Z">
        <seg>以前述べたように、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を継承したクラスのイベントは、ウィンドウ自身で処理されなかった場合にデフォルトで親ウィンドウまで伝播します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned above, under Unix systems <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> class can use variable-width UTF-8 encoding for internal representation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T141540Z">
        <seg>上で述べたように、Unix システムでは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> クラスの内部表現に可変長の UTF-8 を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned before, all event handlers take a wxEvent-derived argument whose exact class differs according to the type of event and the class of the originating window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T033216Z">
        <seg>以前述べたように、すべてのイベントハンドラは wxEvent を継承した引数を取りますが、その引数のクラスはイベントの型と発生元ウィンドウのクラスに応じて異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As mentioned before, the member functions that handle events do not have to be virtual.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T080644Z">
        <seg>前に述べたように、イベントを処理するメンバ関数は仮想関数である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As not all platforms supported by wxWidgets support Unicode (fully) yet, in many cases it is unwise to write a program which can only work in Unicode environment.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T145921Z">
        <seg>wxWidgets の対応しているすべてのプラットフォームで Unicode が (完全に) サポートされているわけではないため、Unicode 環境でのみ動作するプログラムを書くのは多くの場合で賢明ではないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As such, it implements the virtual functions of the base class which are called when a message is logged.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T022449Z">
        <seg>そのため、メッセージのロギング時に呼ばれる基底クラスの仮想関数を実装ています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As this quite often causes confusion for users, here is a list of system events which will NOT get sent to the parent's event handler:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055040Z">
        <seg>このことについて混乱する人が多いため、親コントロールのイベントハンドラへ送信 "されない" システムイベントの一覧を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As this solution is obviously preferable to the previous ones (think of incompatible encodings for the same language, locale chaos and so on), many modern operating systems support it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T161546Z">
        <seg>この解決策は明らかにこれまでのものより望ましい (同じ言語の互換性のない文字コード、混沌としたロケールなどを想像してみてください) ため、多くのモダンなオペレーティングシステムでは Unicode をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As usual, the accent is put on cross-platform features which explains, for example, the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextFile<ept i="0">&lt;/a0&gt;</ept> class which may be used to convert between different types of text files (DOS/Unix/Mac).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T055739Z">
        <seg>いつものように、クロスプラットフォーム機能に重点がおかれています。例えば <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTextFile<ept i="0">&lt;/a0&gt;</ept> クラスでは異なる形式 (DOS/Unix/Mac) のテキストフアイル同士を変換するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As visual aid to understand the differences between the various concepts described so far, look at the different UTF representations of the same code point:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T032745Z">
        <seg>今までに述べたコンセプトの違いを理解するため、同じコードポイントにおける UTF の表現方法の違いを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As well as the event table in the implementation file, there must also be a DECLARE_EVENT_TABLE macro somewhere in the class declaration.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T032754Z">
        <seg>イベントテーブルをソースファイルに配置するように、クラス宣言のどこかに DECLARE_EVENT_TABLE マクロを配置しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075538Z">
        <seg>BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Basically you will need to use the latter when doing inter-thread communication; when you use only the main thread you can also safely use the former.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145010Z">
        <seg>基本的に、スレッド間通信を行なう場合は後者を選択する必要があります; メインスレッドのみを使用する場合は前者も安全に使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Basically, there are only a few things to watch out for:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150539Z">
        <seg>基本的には、気をつけなければならないことはごく僅かです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because all frames must be destroyed for the application to exit, it is advisable to use parent frames wherever possible when creating new frames, so that deleting the top level frame will automatically delete child frames.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160707Z">
        <seg>アプリケーションを終了するためにはすべてのフレームを破棄しなければならないため、可能な限り、新しいフレームを作成するときは親フレームを使用するようにするべきです。こうすることで、トップレベルフレームの削除時に自動的に子フレームが削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because of the need to support implicit conversions to both <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> and <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> implementation is rather involved and many of its operators don't return the types which they could be naively expected to return.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033944Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> と <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> の暗黙的な相互変換をサポートする必要があるため、 <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> の実装はかなり複雑で、演算子の多くは (返却されるものと) 単純に予想される型を実際には返却しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because of this you should only use <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::From8BitData()<ept i="5">&lt;/a5&gt;</ept> for the strings created using <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::To8BitData()<ept i="6">&lt;/a6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T165304Z">
        <seg>このため、<bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::From8BitData()<ept i="5">&lt;/a5&gt;</ept> は <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::To8BitData()<ept i="6">&lt;/a6&gt;</ept> によって作られた文字列に対してのみ、使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before anything else happens, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::FilterEvent()<ept i="0">&lt;/a0&gt;</ept> is called.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T071254Z">
        <seg>他の処理を行う前に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::FilterEvent()<ept i="0">&lt;/a0&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before showing how this can be useful, let us explain what log components are: they are simply arbitrary strings identifying the component, or module, which generated the message.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T140532Z">
        <seg>これがどれほど役立つか説明する前に、ログコンポーネントについて説明しましょう: ログコンポーネントとは単純に、メッセージを生成するコンポーネントやモジュールを識別する任意の文字列のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Before version 2.0 of wxWidgets, events were handled by the application either by supplying callback functions, or by overriding virtual member functions such as <bpt i="0" x="0">&lt;b0&gt;</bpt>OnSize<ept i="0">&lt;/b0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075156Z">
        <seg>wxWidgets 2.0 より前のバージョンでは、イベント処理はコールバック関数か、<bpt i="0" x="0">&lt;b0&gt;</bpt>OnSize<ept i="0">&lt;/b0&gt;</ept> といった仮想メンバ関数のオーバーライドで実現されていました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="3">&lt;/a3&gt;</ept>, &amp;HandleExit, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060727Z">
        <seg>Bind( <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="3">&lt;/a3&gt;</ept>, &amp;HandleExit, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="3">&lt;/a3&gt;</ept>, &amp;MyFrameHandler::OnFrameExit,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060235Z">
        <seg>Bind( <bpt i="3" x="3">&lt;a3&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="3">&lt;/a3&gt;</ept>, &amp;MyFrameHandler::OnFrameExit,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="4">&lt;/a4&gt;</ept>, &amp;myFunctor, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060829Z">
        <seg>Bind( <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="4">&lt;/a4&gt;</ept>, &amp;myFunctor, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="4">&lt;/a4&gt;</ept>, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060954Z">
        <seg>Bind( <bpt i="4" x="4">&lt;a4&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="4">&lt;/a4&gt;</ept>, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind( <bpt i="6" x="6">&lt;a6&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="6">&lt;/a6&gt;</ept>, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T160151Z">
        <seg>Bind( <bpt i="6" x="6">&lt;a6&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="6">&lt;/a6&gt;</ept>, exitHandler, wxID_EXIT );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="0">&lt;/a0&gt;</ept>, &amp;MyFrame::OnExit, <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept>, wxID_EXIT);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040336Z">
        <seg>Bind(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEVT_COMMAND_MENU_SELECTED<ept i="0">&lt;/a0&gt;</ept>, &amp;MyFrame::OnExit, <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept>, wxID_EXIT);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind(MY_EVENT, &amp;MyFrame::OnMyEvent, <bpt i="16" x="16">&lt;s16&gt;</bpt>this<ept i="16">&lt;/s16&gt;</ept>, ID_MY_WINDOW);
}

<bpt i="17" x="17">&lt;s17&gt;</bpt>// example of code generating the event<ept i="17">&lt;/s17&gt;</ept>
<bpt i="18" x="18">&lt;s18&gt;</bpt>void<ept i="18">&lt;/s18&gt;</ept> MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T122453Z">
        <seg>Bind(MY_EVENT, &amp;MyFrame::OnMyEvent, <bpt i="16" x="16">&lt;s16&gt;</bpt>this<ept i="16">&lt;/s16&gt;</ept>, ID_MY_WINDOW);
}

<bpt i="17" x="17">&lt;s17&gt;</bpt>// イベントを生成するコードの例<ept i="17">&lt;/s17&gt;</ept>
<bpt i="18" x="18">&lt;s18&gt;</bpt>void<ept i="18">&lt;/s18&gt;</ept> MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bind(MY_PLOT_CLICKED, &amp;MyFrame::OnPlot, <bpt i="53" x="53">&lt;s53&gt;</bpt>this<ept i="53">&lt;/s53&gt;</ept>, ID_MY_WINDOW);
}

<bpt i="54" x="54">&lt;s54&gt;</bpt>void<ept i="54">&lt;/s54&gt;</ept> MyFrame::OnPlot(MyPlotEvent&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151235Z">
        <seg>Bind(MY_PLOT_CLICKED, &amp;MyFrame::OnPlot, <bpt i="53" x="53">&lt;s53&gt;</bpt>this<ept i="53">&lt;/s53&gt;</ept>, ID_MY_WINDOW);
}

<bpt i="54" x="54">&lt;s54&gt;</bpt>void<ept i="54">&lt;/s54&gt;</ept> MyFrame::OnPlot(MyPlotEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Binds the given function, functor or method dynamically with the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T235325Z">
        <seg>指定された関数、ファンクタ、メンバ関数をイベントへ動的にバインドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Both strategies are described in details below.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155725Z">
        <seg>両方の戦略について、以下で詳細に述べています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But MyApp object is deleted after wxWidgets structures that wxCHMHelpController depends on were uninitialized!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162718Z">
        <seg>しかし、MyApp オブジェクトは wxCHMHelpController の依存する wxWidgets 構造が未初期化状態になった後に削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But although by default only the command events are propagated like this, other events can be propagated as well because the event handling code uses <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::ShouldPropagate()<ept i="1">&lt;/a1&gt;</ept> to check whether an event should be propagated.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T154932Z">
        <seg>しかし、コマンドイベントがデフォルトで伝播するとはいえ、他のイベントも伝播させることは可能です。なぜなら、イベント処理コードでは<bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::ShouldPropagate()<ept i="1">&lt;/a1&gt;</ept> を用いてイベントを伝播させるかどうかを確認するためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But calling a frame method with the child window pointer instead of the pointer to the frame is, of course, disastrous.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045642Z">
        <seg>しかし、当然のことながら、フレームのポインタの代わりに子ウィンドウのポインタに対してフレームのメンバ関数を呼ぶと悲惨なことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But even if it does exist at wxWidgets level, it should never be called directly as the event handlers are not part of wxWidgets API and should never be called directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155240Z">
        <seg>たとえ wxWidgets の階層に存在したとしても、イベントハンドラは wxWidgets API の一部ではないため、直接呼ぶべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But if you do use them, it is better to use <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> pointers rather than <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> ones to avoid the data loss problems due to conversion as discussed in the previous section.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T154905Z">
        <seg>それでもポインタを使用する場合、前のセクションで述べたような変換に伴うデータ喪失の問題を避けるために <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> ポインタよりも <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> ポインタを使うようにした方が良いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But in all cases wxWidgets represents these events in a uniform way and allows you to handle them in the same way wherever they originate from.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T160356Z">
        <seg>しかし、すべての場合において、wxWidgets ではそれらのイベントを同じ形式で表現しており、イベントの派生元によらず、同一の方法で処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But keep in mind that then the lifetime of <bpt i="2" x="2">&lt;c2&gt;</bpt>myFrameHandler<ept i="2">&lt;/c2&gt;</ept> must be greater than that of <bpt i="3" x="3">&lt;c3&gt;</bpt>MyFrame<ept i="3">&lt;/c3&gt;</ept> object -- or at least it needs to be unbound before being destroyed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060621Z">
        <seg>ただし、<bpt i="2" x="2">&lt;c2&gt;</bpt>myFrameHandler<ept i="2">&lt;/c2&gt;</ept> の寿命を <bpt i="3" x="3">&lt;c3&gt;</bpt>MyFrame<ept i="3">&lt;/c3&gt;</ept> よりも長くなるようにするか、もしくは少なくとも破棄される前にバインディングを解除する必要があることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But note that no additional libraries are needed during run-time, however, so you have only the message catalogs to distribute and nothing else.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T160403Z">
        <seg>しかし、実行時には追加のライブラリは必要ないため、メッセージカタログの他には何も配布する必要がないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But this absolutely doesn't mean that using the event tables is the preferred way: handling events dynamically is better in several aspects and you should strongly consider doing it if you are just starting with wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022242Z">
        <seg>ただし、これはイベントテーブルが適切な方法であることを意味しているわけではまったくありません: ある側面においては動的なイベント処理の方が優れており、wxWidgets を使い始める際には動的にイベント処理を行なうことを強く検討するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But, once again, none of these cryptic types is really needed if you just pass the return value of any of the functions mentioned in this section to another function directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171735Z">
        <seg>しかし、実際には上記の関数の戻り値を別の関数へ直接渡すだけで、この謎めいた型を使用する必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default the chain is empty, i.e. there is no next handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T154429Z">
        <seg>デフォルトでは連鎖は空、つまり、次のイベントハンドラは存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, <bpt i="3" x="3">&lt;c3&gt;</bpt>wxUSE_UNICODE_WCHAR<ept i="3">&lt;/c3&gt;</ept> is also defined as 1, however in UTF-8 build (described in the previous section), it is set to 0 and <bpt i="4" x="4">&lt;c4&gt;</bpt>wxUSE_UNICODE_UTF8<ept i="4">&lt;/c4&gt;</ept>, which is usually 0, is set to 1 instead.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T120930Z">
        <seg>デフォルトでは <bpt i="3" x="3">&lt;c3&gt;</bpt>wxUSE_UNICODE_WCHAR<ept i="3">&lt;/c3&gt;</ept> も 1 に定義されていますが、(前の章で述べた) UTF-8 ビルドでは 0 に設定されており、通常は 0 に設定されている <bpt i="4" x="4">&lt;c4&gt;</bpt>wxUSE_UNICODE_UTF8<ept i="4">&lt;/c4&gt;</ept> が代わりに 1 に設定されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, GetEventHandler returns a pointer to the window itself unless an application has redirected event handling using SetEventHandler or PushEventHandler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T062844Z">
        <seg>SetEventHandler や PushEventHandler を使用してイベント処理をリダイレクトしていない場合、デフォルトでは GetEventHandler はウィンドウ自身を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, all messages logged by wxWidgets originate from "wx" component or one of its subcomponents such as "wx/net/ftp", while the messages logged by your own code are assigned empty log component.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T140648Z">
        <seg>デフォルトでは wxWidgets によって記録されるすべてのメッセージは "wx" コンポーネントかそのサブコンポーネント ("wx/net/ftp" など) に割り当てられており、あなた自身のコードによって記録されるメッセージは空のログコンポーネントに割り当てられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, most log messages are enabled.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T092231Z">
        <seg>デフォルトでは大半のログメッセージが有効化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Called to log a new record.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111512Z">
        <seg>新しいレコードを記録するために呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Called to log the specified string at given level.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111537Z">
        <seg>指定されたレベルで与えられた文字列を記録するために呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Called to log the specified string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111550Z">
        <seg>指定された文字列を記録するために呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Calls wxFileTranslationsLoader::AddCatalogLookupPathPrefix().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041226Z">
        <seg>wxFileTranslationsLoader::AddCatalogLookupPathPrefix() を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Categories</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004637Z">
        <seg>カテゴリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Caveats When Not Using C++ RTTI</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024505Z">
        <seg>C++ RTTI を使用しない場合の注意点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Changes the selection for the given page, returning the previous selection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160136Z">
        <seg>指定されたページを変更し、以前選択していたページを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Character type (<bpt i="0" x="0">&lt;t0&gt;</bpt>char<ept i="0">&lt;/t0&gt;</ept> or <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t<ept i="1">&lt;/t1&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150637Z">
        <seg>文字型 (<bpt i="0" x="0">&lt;t0&gt;</bpt>char<ept i="0">&lt;/t0&gt;</ept> または <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t<ept i="1">&lt;/t1&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Choosing Unicode Representation</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092411Z">
        <seg>Unicode 表現の選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004641Z">
        <seg>クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T155917Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBufferedDC<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBufferedPaintDC<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDC<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPostScriptDC<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxMetafileDC<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxMemoryDC<ept i="5">&lt;/a5&gt;</ept>, <bpt i="6" x="6">&lt;a6&gt;</bpt>wxPrinterDC<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxScreenDC<ept i="7">&lt;/a7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxClientDC<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxPaintDC<ept i="9">&lt;/a9&gt;</ept>, <bpt i="10" x="10">&lt;a10&gt;</bpt>wxWindowDC<ept i="10">&lt;/a10&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140522Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBufferedDC<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBufferedPaintDC<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxDC<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPostScriptDC<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxMetafileDC<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxMemoryDC<ept i="5">&lt;/a5&gt;</ept>, <bpt i="6" x="6">&lt;a6&gt;</bpt>wxPrinterDC<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxScreenDC<ept i="7">&lt;/a7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxClientDC<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxPaintDC<ept i="9">&lt;/a9&gt;</ept>, <bpt i="10" x="10">&lt;a10&gt;</bpt>wxWindowDC<ept i="10">&lt;/a10&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074637Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDir<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTempFile<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextFile<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T054220Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxDir<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTempFile<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTextFile<ept i="3">&lt;/a3&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxListCtrl<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxImageList<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004435Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxListCtrl<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxImageList<ept i="1">&lt;/a1&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogStderr<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogTextCtrl<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogWindow<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxLogGui<ept i="5">&lt;/a5&gt;</ept>, <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogNull<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxLogBuffer<ept i="7">&lt;/a7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogChain<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxLogInterposer<ept i="9">&lt;/a9&gt;</ept>, <bpt i="10" x="10">&lt;a10&gt;</bpt>wxLogInterposerTemp<ept i="10">&lt;/a10&gt;</ept>, <bpt i="11" x="11">&lt;a11&gt;</bpt>wxStreamToTextRedirector<ept i="11">&lt;/a11&gt;</ept>, <bpt i="12" x="12">&lt;a12&gt;</bpt>wxLogFormatter<ept i="12">&lt;/a12&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131003Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogStderr<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogStream<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogTextCtrl<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogWindow<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxLogGui<ept i="5">&lt;/a5&gt;</ept>, <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogNull<ept i="6">&lt;/a6&gt;</ept>, <bpt i="7" x="7">&lt;a7&gt;</bpt>wxLogBuffer<ept i="7">&lt;/a7&gt;</ept>, <bpt i="8" x="8">&lt;a8&gt;</bpt>wxLogChain<ept i="8">&lt;/a8&gt;</ept>, <bpt i="9" x="9">&lt;a9&gt;</bpt>wxLogInterposer<ept i="9">&lt;/a9&gt;</ept>, <bpt i="10" x="10">&lt;a10&gt;</bpt>wxLogInterposerTemp<ept i="10">&lt;/a10&gt;</ept>, <bpt i="11" x="11">&lt;a11&gt;</bpt>wxStreamToTextRedirector<ept i="11">&lt;/a11&gt;</ept>, <bpt i="12" x="12">&lt;a12&gt;</bpt>wxLogFormatter<ept i="12">&lt;/a12&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>,<it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003250Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept>,<it pos="begin" x="1">&lt;br1&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBoxSizer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStaticBoxSizer<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxGridSizer<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFlexGridSizer<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxGridBagSizer<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140818Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBoxSizer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStaticBoxSizer<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxGridSizer<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFlexGridSizer<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxGridBagSizer<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGridSizer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFlexGridSizer<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxBoxSizer<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxStaticBoxSizer<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>CreateButtonSizer<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T110559Z">
        <seg>クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxGridSizer<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxFlexGridSizer<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxBoxSizer<ept i="3">&lt;/a3&gt;</ept>, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxStaticBoxSizer<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>CreateButtonSizer<ept i="5">&lt;/a5&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Close(<bpt i="3" x="3">&lt;s3&gt;</bpt>true<ept i="3">&lt;/s3&gt;</ept>);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034309Z">
        <seg>Close(<bpt i="3" x="3">&lt;s3&gt;</bpt>true<ept i="3">&lt;/s3&gt;</ept>);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Code points are represented in computer memory as a sequence of one or more <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>code units<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>, where a code unit is a unit of memory: 8, 16, or 32 bits.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T025750Z">
        <seg>コードポイントはメモリ上ではひとつ以上の <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>コード単位<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> の並びとして表現されます。コード単位とは 8、16、32 ビットといったメモリの単位のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Common Features</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140941Z">
        <seg>共通の機能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Common features</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T125314Z">
        <seg>共通の機能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Compatible with wxWidgets 2.8:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124909Z">
        <seg>wxWidgets 2.8 互換:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Compiling the .po file into .mo file to be used by the program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001253Z">
        <seg>.po ファイルをプログラムから使用される .mo ファイルにコンパイルする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Consider using string iterators instead if possible or replace this expression with</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123625Z">
        <seg>可能であれば代わりに文字列のイテレータを使用するようにするか、次のように置き換えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Constructor for a wxBoxSizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145952Z">
        <seg>wxBoxSizer のコンストラクタ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Container for sizer items flags providing readable names for them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145234Z">
        <seg>サイザーのフラグを格納するコンテナで、フラグに読みやすい名前を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Contents</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145426Z">
        <seg>Contents</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts C string encoded in UTF-8 to wxString.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082421Z">
        <seg>UTF-8 で符号化された C 文字列を UTF-8 に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts given buffer of binary data from 8-bit string to wxString.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161946Z">
        <seg>与えられたバイナリデータを 8 ビット文字列から wxString に変換します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the string to an 8-bit string in ISO-8859-1 encoding in the form of a wxCharBuffer (Unicode ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T162243Z">
        <seg>文字列を ISO-8859-1 の 8 ビット文字列に変換し、wxCharBuffer として返却します。 (Unicode ビルド時のみ) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the string to an ASCII, 7-bit string in the form of a wxCharBuffer (Unicode builds only) or ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T155223Z">
        <seg>wxCharBuffer (Unicode ビルドのみ) もしくは C 文字列 (ANSI ビルド) の形式で文字列を ASCII 7 ビット文字列に変換する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the strings contents to UTF-8 and returns it either as a temporary wxCharBuffer object or as...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T162641Z">
        <seg>文字列を UTF-8 に変換したものを一時的な wxWCharBuffer オブジェクト、または内部文字列のポインタ (UTF-8 ビルド時) として返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Converts the strings contents to the wide character representation and returns it as a temporary wxWC...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T153001Z">
        <seg>文字列をワイド文字表現に変換したものを一時的な wxWCharBuffer オブジェクト (Unix と OS X の場合)、またはワイド文字列である内部文字列のポインタ (Windows の場合) として返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Correspondingly, when using a horizontal sizer, each child can be centered, aligned at the bottom or aligned at the top.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T151613Z">
        <seg>同様に、水平方向のサイザーを使用する場合、各子コントロールを中央寄せ、下寄せ、上寄せにすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>CreateButtonSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115452Z">
        <seg>CreateButtonSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a sizer with standard buttons.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145917Z">
        <seg>標準ボタンを含むサイザーを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates a wxLog class for the application to use for logging errors.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120838Z">
        <seg>エラーを記録するためにアプリケーション用の wxLog クラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Creates the wxAppTraits object when GetTraits() needs it for the first time.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120908Z">
        <seg>最初に GetTraits() が必要とした時に wxAppTraits オブジェクトを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Custom Event Summary</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153309Z">
        <seg>カスタムイベントの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Custom event summary</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T130143Z">
        <seg>カスタムイベントの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Cycles through the tabs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155933Z">
        <seg>タブを循環させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DECLARE_EVENT_TABLE()
};</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081806Z">
        <seg>DECLARE_EVENT_TABLE()
};</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DECLARE_EVENT_TABLE_ENTRY( wxEVT_PLOT_ACTION, id, -1, \</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164318Z">
        <seg>DECLARE_EVENT_TABLE_ENTRY( wxEVT_PLOT_ACTION, id, -1, \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DECLARE_EVENT_TYPE(wxEVT_MY_EVENT, -1)

DEFINE_EVENT_TYPE(wxEVT_MY_EVENT)

// user code intercepting the event

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155743Z">
        <seg>DECLARE_EVENT_TYPE(wxEVT_MY_EVENT, -1)

DEFINE_EVENT_TYPE(wxEVT_MY_EVENT)

// イベントを捕まえるユーザコード

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Data Loss due To Unicode Conversion Errors</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T134125Z">
        <seg>Unicode の変換エラーによるデータ喪失</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Declares a custom event type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T154504Z">
        <seg>カスタムイベント型を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Default alignment is wxALIGN_LEFT | wxALIGN_TOP.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T162139Z">
        <seg>デフォルトのアライメントは wxALIGN_LEFT | wxALIGN_TOP です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Define a new event type associated with the specified event class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T154453Z">
        <seg>特定のイベントクラスに関連する新しいイベント型を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Defining Your Own Event Class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150218Z">
        <seg>独自のイベントクラスの定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Defining your own event class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162712Z">
        <seg>独自のイベントクラスの定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Deletes all items in the control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160300Z">
        <seg>コントロール内のすべての項目を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Deletes the specified item.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160228Z">
        <seg>指定された項目を削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Deletes the specified page, and the associated window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160010Z">
        <seg>指定されたページと、それに関連するウィンドウを削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Depending on what flags are used for the respective dialog item, the dialog item can be made to fill out the available space entirely, i.e. it will grow to a size larger than the minimal size, or it will be moved to either the centre of the available space or to either side of the space.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T123615Z">
        <seg>個々のコントロールに使用されたフラグに応じて空きスペースを満たす、つまり、最小サイズ以上に伸長させるか、空きスペースの中央またはいずれかの側に移動させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Derived from</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145836Z">
        <seg>継承元</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Device Contexts</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T142857Z">
        <seg>デバイスコンテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Device context overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140518Z">
        <seg>デバイスコンテキストの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Directories</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004713Z">
        <seg>ディレクトリ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Documentation</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004740Z">
        <seg>ドキュメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Documented for information.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150634Z">
        <seg>参考情報として文書化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Doing it in a naive way doesn't work:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T025608Z">
        <seg>これは単純な方法では実現できません:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DrawMyPicture(dc);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141640Z">
        <seg>DrawMyPicture(dc);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>DrawMyPicture(dc);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154321Z">
        <seg>DrawMyPicture(dc);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>During program development you will need the gettext package for working with message catalogs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T160435Z">
        <seg>プログラム開発を行なっている間はメッセージカタログを扱うために gettext パッケージが必要となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Dynamic Event Handling</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T035231Z">
        <seg>動的イベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_BUTTON  (BUTTON1,   MyFrame::OnButton1)
END_EVENT_TABLE()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075547Z">
        <seg>EVT_BUTTON  (BUTTON1,   MyFrame::OnButton1)
END_EVENT_TABLE()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_BUTTON(BUTTON1, MyFrame::OnButton1)
<bpt i="3" x="3">&lt;a3&gt;</bpt>wxEND_EVENT_TABLE<ept i="3">&lt;/a3&gt;</ept>()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022454Z">
        <seg>EVT_BUTTON(BUTTON1, MyFrame::OnButton1)
<bpt i="3" x="3">&lt;a3&gt;</bpt>wxEND_EVENT_TABLE<ept i="3">&lt;/a3&gt;</ept>()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_CHAR, EVT_KEY_DOWN and EVT_KEY_UP macros handle keyboard input for any window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081321Z">
        <seg>EVT_CHAR、EVT_KEY_DOWN、EVT_KEY_UP マクロは任意のウィンドウのキーボード入力を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_COMMAND  (ID_MY_WINDOW, wxEVT_MY_EVENT, MyFrame::OnMyEvent)
END_EVENT_TABLE()

void MyFrame::OnMyEvent( wxCommandEvent &amp;event )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155756Z">
        <seg>EVT_COMMAND  (ID_MY_WINDOW, wxEVT_MY_EVENT, MyFrame::OnMyEvent)
END_EVENT_TABLE()

void MyFrame::OnMyEvent( wxCommandEvent &amp;event )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_COMMAND (ID_MY_WINDOW, MY_EVENT, MyFrame::OnMyEvent)
<bpt i="9" x="9">&lt;a9&gt;</bpt>wxEND_EVENT_TABLE<ept i="9">&lt;/a9&gt;</ept>()

<bpt i="10" x="10">&lt;s10&gt;</bpt>void<ept i="10">&lt;/s10&gt;</ept> MyFrame::OnMyEvent(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCommandEvent<ept i="11">&lt;/a11&gt;</ept>&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150058Z">
        <seg>EVT_COMMAND (ID_MY_WINDOW, MY_EVENT, MyFrame::OnMyEvent)
<bpt i="9" x="9">&lt;a9&gt;</bpt>wxEND_EVENT_TABLE<ept i="9">&lt;/a9&gt;</ept>()

<bpt i="10" x="10">&lt;s10&gt;</bpt>void<ept i="10">&lt;/s10&gt;</ept> MyFrame::OnMyEvent(<bpt i="11" x="11">&lt;a11&gt;</bpt>wxCommandEvent<ept i="11">&lt;/a11&gt;</ept>&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_COMMAND(id, event, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160501Z">
        <seg>EVT_COMMAND(id, event, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_COMMAND_RANGE(id1, id2, event, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160551Z">
        <seg>EVT_COMMAND_RANGE(id1, id2, event, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_CUSTOM(event, id, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160022Z">
        <seg>EVT_CUSTOM(event, id, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_CUSTOM_RANGE(event, id1, id2, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160421Z">
        <seg>EVT_CUSTOM_RANGE(event, id1, id2, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_MENU    (DO_TEST,   MyFrame::DoTest)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075544Z">
        <seg>EVT_MENU    (DO_TEST,   MyFrame::DoTest)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_MENU    (wxID_EXIT, MyFrame::OnExit)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075540Z">
        <seg>EVT_MENU    (wxID_EXIT, MyFrame::OnExit)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_MENU(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxID_EXIT<ept i="2">&lt;/a2&gt;</ept>, MyFrame::OnExit)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024807Z">
        <seg>EVT_MENU(<bpt i="2" x="2">&lt;a2&gt;</bpt>wxID_EXIT<ept i="2">&lt;/a2&gt;</ept>, MyFrame::OnExit)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_MENU(DO_TEST, MyFrame::DoTest)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024809Z">
        <seg>EVT_MENU(DO_TEST, MyFrame::DoTest)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_NOTIFY(event, id, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162544Z">
        <seg>EVT_NOTIFY(event, id, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_NOTIFY_RANGE(event, id1, id2, func)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162621Z">
        <seg>EVT_NOTIFY_RANGE(event, id1, id2, func)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_PLOT  (ID_MY_WINDOW,  MyFrame::OnPlot)
END_EVENT_TABLE()

void MyFrame::OnPlot( wxPlotEvent &amp;event )
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164433Z">
        <seg>EVT_PLOT  (ID_MY_WINDOW,  MyFrame::OnPlot)
END_EVENT_TABLE()

void MyFrame::OnPlot( wxPlotEvent &amp;event )
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_PLOT(ID_MY_WINDOW, MyFrame::OnPlot)
<bpt i="52" x="52">&lt;a52&gt;</bpt>wxEND_EVENT_TABLE<ept i="52">&lt;/a52&gt;</ept>()

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151229Z">
        <seg>EVT_PLOT(ID_MY_WINDOW, MyFrame::OnPlot)
<bpt i="52" x="52">&lt;a52&gt;</bpt>wxEND_EVENT_TABLE<ept i="52">&lt;/a52&gt;</ept>()

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_SIZE    (           MyFrame::OnSize)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075545Z">
        <seg>EVT_SIZE    (           MyFrame::OnSize)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>EVT_SIZE(MyFrame::OnSize)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024810Z">
        <seg>EVT_SIZE(MyFrame::OnSize)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each represents either a certain way to lay out dialog items in a dialog or it fulfills a special task such as wrapping a static box around a dialog item (or another sizer).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124500Z">
        <seg>それぞれ、特定の方法でダイアログ内にコントロールを配置したり、コントロール (や他のサイザー) をスタティックボックスで囲むといった特別な処理を行ったりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Either the number of columns or the number or rows is fixed and the grid sizer will grow in the respectively other orientation if new children are added:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153259Z">
        <seg>列数か行数のどちらかは固定で、新しい子コントロールが追加されるとグリッドサイザーはもう一方の方向に伸びます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Enables or disables the event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T071121Z">
        <seg>イベントハンドラを有効化、無効化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Environment Variables</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155609Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Environment variables</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154427Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Even despite caching the index, indexed access should be replaced with sequential access using string iterators.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151404Z">
        <seg>インデックスのキャッシュを持つとはいえ、インデックスアクセスはイテレータを使った逐次アクセスに置き換えるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Even though wxWidgets always uses Unicode internally, not all the other libraries and programs do and even those that do use Unicode may use a different encoding of it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T155933Z">
        <seg>wxWidgets が常に内部で Unicode を使うとはいえ、他のすべてのライブラリやプログラムが Unicode を使っているとは限りませんし、Unicode を使っていたとしても、別のエンコーディングを使用しているかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event Handlers Chain</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T150657Z">
        <seg>イベントハンドラの連鎖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event Handlers vs Virtual Methods</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151413Z">
        <seg>イベントハンドラ vs 仮想関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event Handling</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153256Z">
        <seg>イベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event Handling with Event Tables</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T010033Z">
        <seg>イベントテーブルによるイベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event handlers can be bound at any moment.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040536Z">
        <seg>イベントハンドラは任意のタイミングでバインドできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event handling overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T074632Z">
        <seg>イベント処理の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Event macros summary</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080129Z">
        <seg>イベントマクロの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events and Event Handling</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T151141Z">
        <seg>イベントとイベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events generated by the user vs programmatically generated events</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060300Z">
        <seg>ユーザの生成したイベントとプログラム的に生成したイベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events of different types can use the same event class, for example both button click and listbox selection events use <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> class (as do all the other simple control events), but the key press event uses <bpt i="3" x="3">&lt;a3&gt;</bpt>wxKeyEvent<ept i="3">&lt;/a3&gt;</ept> as the information associated with it is different.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T034722Z">
        <seg>同じイベントクラスを別のイベント型に使用することができます。例えば、ボタンのクリックイベントとリストボックスの選択イベントは両方とも <bpt i="2" x="2">&lt;a2&gt;</bpt>wxCommandEvent<ept i="2">&lt;/a2&gt;</ept> クラスを使用しています (し、他のすべての単純なコントロールイベントも同じものを使用しています) が、キー押下イベントはイベントに関連する情報が異なるため、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxKeyEvent<ept i="3">&lt;/a3&gt;</ept> を使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events that have a higher level of meaning and/or are generated by the window itself, (button click, menu select, tree expand, etc.) are command events and are sent up to the parent to see if it is interested in the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T052930Z">
        <seg>(ボタンクリック、メニュー選択、ツリーの展開といった) 高水準で、ウィンドウ自身が生成するイベントはコマンドイベントと呼ばれ、そのイベントを処理対象とする場合に親コントロールに対して送られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Events that have a higher level of meaning or are generated by the window itself (button click, menu select, tree expand, etc.) are command events and are sent up to the parent to see if it is interested in the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T150333Z">
        <seg>(ボタンクリック、メニュー選択、ツリーの展開といった) 高水準で、ウィンドウ自身が生成するイベントはコマンドイベントと呼ばれ、そのイベントを処理対象とする場合に親コントロールに対して送られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Example:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145825Z">
        <seg>例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Extracting the strings to be translated from the program: this uses the work done in the previous step because <bpt i="0" x="0">&lt;c0&gt;</bpt>xgettext<ept i="0">&lt;/c0&gt;</ept> program used for string extraction recognises the standard <bpt i="1" x="1">&lt;c1&gt;</bpt><bpt i="2" x="2">&lt;a2&gt;</bpt>_()<ept i="2">&lt;/a2&gt;</ept><ept i="1">&lt;/c1&gt;</ept> as well as (using its <bpt i="3" x="3">&lt;c3&gt;</bpt>-k<ept i="3">&lt;/c3&gt;</ept> option) our wxGetTranslation and extracts all strings inside the calls to these functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040541Z">
        <seg>翻訳対象の文字列をプログラム中から抽出する: これには前のステップで行った作業の結果を利用します。なぜなら、文字列の抽出に使用する  <bpt i="0" x="0">&lt;c0&gt;</bpt>xgettext<ept i="0">&lt;/c0&gt;</ept> プログラムが標準的な <bpt i="1" x="1">&lt;c1&gt;</bpt><bpt i="2" x="2">&lt;a2&gt;</bpt>_()<ept i="2">&lt;/a2&gt;</ept><ept i="1">&lt;/c1&gt;</ept> や (<bpt i="3" x="3">&lt;c3&gt;</bpt>-k<ept i="3">&lt;/c3&gt;</ept> オプションを使用することで) wxGetTranslation を識別し、それらの中にある文字列をすべて抽出してくれるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Extracting the strings to be translated from the program: this uses the work done in the previous step because <bpt i="0" x="0">&lt;t0&gt;</bpt>xgettext<ept i="0">&lt;/t0&gt;</ept> program used for string extraction recognises the standard _() as well as (using its <bpt i="1" x="1">&lt;t1&gt;</bpt>-k<ept i="1">&lt;/t1&gt;</ept> option) our wxGetTranslation and extracts all strings inside the calls to these functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T000843Z">
        <seg>翻訳対象の文字列をプログラム中から抽出する: これには前のステップで行った作業の結果を利用します。なぜなら、文字列の抽出に使用する  <bpt i="0" x="0">&lt;t0&gt;</bpt>xgettext<ept i="0">&lt;/t0&gt;</ept> プログラムが標準的な _() や (<bpt i="1" x="1">&lt;t1&gt;</bpt>-k<ept i="1">&lt;/t1&gt;</ept> オプションを使用することで) wxGetTranslation を識別し、それらの中にある文字列をすべて抽出してくれるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>File Classes and Functions</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132432Z">
        <seg>ファイルクラスと関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>File classes and functions overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132400Z">
        <seg>ファイルクラスと関数の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Files</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004707Z">
        <seg>ファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Final word of caution: most of these functions may return either directly the pointer to internal string buffer or a temporary <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCharBuffer<ept i="0">&lt;/a0&gt;</ept> or <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWCharBuffer<ept i="1">&lt;/a1&gt;</ept> object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170249Z">
        <seg>最後の注意点です: これらの関数の大半は内部文字列のポインタを直接返却するか、一時的な <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCharBuffer<ept i="0">&lt;/a0&gt;</ept> または <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWCharBuffer<ept i="1">&lt;/a1&gt;</ept> のオブジェクトを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally notice that writing</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123115Z">
        <seg>最後の注意点として、次のように書くと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::ToUTF8()<ept i="3">&lt;/a3&gt;</ept> and <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::wc_str()<ept i="4">&lt;/a4&gt;</ept> functions never fail and always return a pointer to char string containing the UTF-8 representation of the string or <bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161847Z">
        <seg>最後に、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::ToUTF8()<ept i="3">&lt;/a3&gt;</ept> 関数と <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::wc_str()<ept i="4">&lt;/a4&gt;</ept> 関数は絶対に失敗せず、UTF-8 で表現された char 文字列や <bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> 文字列のポインタを常に返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> is called on the wxApp object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T030557Z">
        <seg>最後に、wxApp オブジェクトの <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> が呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, i.e., if the event is still not processed, the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept> object itself (which derives from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept>) gets a last chance to process it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T033002Z">
        <seg>最後に、つまり、イベントがまだ処理されていないときに、(<bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> を継承している) <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp<ept i="0">&lt;/a0&gt;</ept> オブジェクト自身でイベントが処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, if even more control over the output format is needed, then DoLogRecord() can be overridden as it allows to construct custom messages depending on the log level or even do completely different things depending on the message severity (for example, throw away all messages except warnings and errors, show warnings on the screen and forward the error messages to the user's (or programmer's) cell phone -- maybe depending on whether the timestamp tells us if it is day or night in the current time zone).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T144950Z">
        <seg>最後に、出力形式をさらに制御する必要がある場合、DoLogRecord() をオーバーライドすることでログレベルに応じてカスタムメッセージを構築したり、メッセージの重要度に応じてまったく別のことを行なうことさえできます。(例えば警告とエラー以外のメッセージを破棄し、警告は画面に表示して、エラーメッセージはユーザ (もしくはプログラマ) の携帯電話へ転送するなどです。ただ、これは現在のタイムゾーンにおいて昼か夜かがタイムスタンプで分かるかどうかによりますが)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, if you don't like using macros for static initialization of the event tables you may also use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::Connect<ept i="0">&lt;/a0&gt;</ept> to connect the events to the handlers dynamically, during run-time.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T083026Z">
        <seg>最後に、マクロを使ってイベントテーブルを静的に初期化したくない場合、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::Connect<ept i="0">&lt;/a0&gt;</ept> を使用して動的に (実行時に) イベントとイベントハンドラを接続することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, it is enough to override <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLog::DoLogText()<ept i="6">&lt;/a6&gt;</ept> if you only want to redirect the log messages and the destination doesn't depend on the message log level.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112346Z">
        <seg>最後に、メッセージのログレベルに関係なく、ログメッセージをリダイレクトしたいだけの場合、<bpt i="6" x="6">&lt;a6&gt;</bpt>wxLog::DoLogText()<ept i="6">&lt;/a6&gt;</ept> をオーバーライドすれば充分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, take a look at the <bpt i="0" x="0">&lt;a0&gt;</bpt>i18n sample<ept i="0">&lt;/a0&gt;</ept> which shows you how all this looks in practice.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043730Z">
        <seg>最後に、国際化を実際にどういう風に行うのかを示す例として <bpt i="0" x="0">&lt;a0&gt;</bpt>i18n サンプル<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, the most widespread encoding used for the external Unicode storage (e.g. files and network protocols) is <bpt i="0" x="0">&lt;b0&gt;</bpt>UTF-8<ept i="0">&lt;/b0&gt;</ept> which is byte-oriented and so avoids the endianness ambiguities of UTF-16 and UTF-32.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T032504Z">
        <seg>最後に、Unicode を外部記憶装置 (ファイルやネットワークプロトコルなど) へ格納する際に一番広く使われているのが <bpt i="0" x="0">&lt;b0&gt;</bpt>UTF-8<ept i="0">&lt;/b0&gt;</ept> です。これはバイト指向のエンコーディングであるため、 UTF-16 や UTF-32 のようにエンディアンの曖昧さがありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is a special <bpt i="0" x="0">&lt;a0&gt;</bpt>wxT()<ept i="0">&lt;/a0&gt;</ept> macro which should enclose all literal strings in the program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T162941Z">
        <seg>最後に、プログラム中のリテラル文字列を囲む、特別な <bpt i="0" x="0">&lt;a0&gt;</bpt>wxT()<ept i="0">&lt;/a0&gt;</ept> マクロがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is also a possibility to redirect the output sent to <bpt i="0" x="0">&lt;e0&gt;</bpt>cout<ept i="0">&lt;/e0&gt;</ept> to a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> by using the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamToTextRedirector<ept i="2">&lt;/a2&gt;</ept> class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091612Z">
        <seg>最後に、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamToTextRedirector<ept i="2">&lt;/a2&gt;</ept> クラスを使用することで <bpt i="0" x="0">&lt;e0&gt;</bpt>cout<ept i="0">&lt;/e0&gt;</ept> へ出力した内容を <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> にリダイレクトすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is also a possibility to redirect the output sent to <bpt i="0" x="0">&lt;i0&gt;</bpt>cout<ept i="0">&lt;/i0&gt;</ept> to a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> by using the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamToTextRedirector<ept i="2">&lt;/a2&gt;</ept> class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015408Z">
        <seg>最後に、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxStreamToTextRedirector<ept i="2">&lt;/a2&gt;</ept> クラスを使用することで <bpt i="0" x="0">&lt;i0&gt;</bpt>cout<ept i="0">&lt;/i0&gt;</ept> へ出力した内容を <bpt i="1" x="1">&lt;a1&gt;</bpt>wxTextCtrl<ept i="1">&lt;/a1&gt;</ept> にリダイレクトすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is another additional complication (which, in fact, simplifies life of wxWidgets programmers significantly): when propagating the command events up to the parent window, the event propagation stops when it reaches the parent dialog, if any.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T155514Z">
        <seg>最後に、他にも複雑な仕組みがあります (実際には、これは wxWidgets プログラマの生活を非常にシンプルにしてくれるものです): コマンドイベントが親ウィンドウへ伝播するとき、親ダイアログまで到達した時点で伝播が終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, there is another additional complication (which, in fact, simplifies life of wxWidgets programmers significantly): when propagating the command events upwards to the parent window, the event propagation stops when it reaches the parent dialog, if any.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T033645Z">
        <seg>最後に、他にも複雑な仕組みがあります (実際には、これは wxWidgets プログラマの生活を非常にシンプルにしてくれるものです): コマンドイベントが親ウィンドウへ伝播するとき、親ダイアログまで到達した時点で伝播が終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, you can allocate identifiers dynamically using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxNewId()<ept i="1">&lt;/a1&gt;</ept> function too.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012026Z">
        <seg>最後に、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxNewId()<ept i="1">&lt;/a1&gt;</ept> を使用して動的に識別子を割り当てることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, you need to implement the event handlers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T032749Z">
        <seg>最後に、イベントハンドラを実装する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, you will need to generate and post your custom events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144501Z">
        <seg>最後に、カスタムイベントを生成し、送信する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First define one or more <bpt i="0" x="0">&lt;e0&gt;</bpt>event handlers<ept i="0">&lt;/e0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T013847Z">
        <seg>最初に、ひとつ以上の <bpt i="0" x="0">&lt;e0&gt;</bpt>イベントハンドラ<ept i="0">&lt;/e0&gt;</ept> を定義してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of all, each character in an Unicode program takes 2 bytes instead of usual one, so another type should be used to store the characters (<bpt i="0" x="0">&lt;t0&gt;</bpt>char<ept i="0">&lt;/t0&gt;</ept> only holds 1 byte usually).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151208Z">
        <seg>最初に、プログラム中の文字について、通常であれば 1 文字あたり 1 バイトですが、Unicode プログラムの場合 2 バイトを消費するため、文字を格納するために別の型を使用する必要があります。 (<bpt i="0" x="0">&lt;t0&gt;</bpt>char<ept i="0">&lt;/t0&gt;</ept> 型は通常 1 バイトしか保持できません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of all, no knowledge of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> classes is needed to use them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131136Z">
        <seg>まず最初に、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> クラス郡を使用するのにその知識は必要とされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of all, no knowledge of <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLog<ept i="0">&lt;/i0&gt;</ept> classes is needed to use them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010433Z">
        <seg>まず最初に、<bpt i="0" x="0">&lt;i0&gt;</bpt>wxLog<ept i="0">&lt;/i0&gt;</ept> クラス郡を使用するのにその知識は必要とされません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First of all, you see that there are no more <bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef<ept i="0">&lt;/t0&gt;</ept>s at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161813Z">
        <seg>最初に、<bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef<ept i="0">&lt;/t0&gt;</ept> がまったくないことが分かると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For all normal, informational messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131732Z">
        <seg>すべての通常 (通知) メッセージ用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example a typical loop:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151546Z">
        <seg>例えば典型的なループである、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example it is possible to filter out a number of key events sent by the system to a native text control by overriding wxTextCtrl and defining a handler for key events using EVT_KEY_DOWN.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T085703Z">
        <seg>例えば、ネイティブテキストコントロールに送られるキーイベントをフィルタリングする場合、wxTextCtrl をオーバーライドし、EVT_KEY_DOWN を使用してキーイベントハンドラを定義することで実現できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034203Z">
        <seg>以下に例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a function to get the length of a wide-character string is called <bpt i="3" x="3">&lt;t3&gt;</bpt>wcslen()<ept i="3">&lt;/t3&gt;</ept> (compare with <bpt i="4" x="4">&lt;t4&gt;</bpt>strlen()<ept i="4">&lt;/t4&gt;</ept> - you see that the only difference is that the "str" prefix standing for "string" has been replaced with "wcs" standing for "wide-character string").</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151421Z">
        <seg>例えば、ワイド文字列の長さを取得する関数は <bpt i="3" x="3">&lt;t3&gt;</bpt>wcslen()<ept i="3">&lt;/t3&gt;</ept> と呼ばれます。(<bpt i="4" x="4">&lt;t4&gt;</bpt>strlen()<ept i="4">&lt;/t4&gt;</ept> と比べると、違いは "string" を表す接頭語 "str" が "wide-character string" を表す "wcs" に変わっているだけであることが分かると思います) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, clicking on a button, selecting an item from a list box and pressing a key on the keyboard all generate events with different event types.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T161205Z">
        <seg>例えば、ボタンクリック、リストボックスの選択、キー押下はすべて別々のイベント型のイベントを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, if the standard font as well as the overall design of Linux/GTK widgets requires more space than on Windows, the initial dialog size will automatically be bigger on Linux/GTK than on Windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124150Z">
        <seg>例えば、標準フォントが Linux/GTK ウィジェット全体のデザインと同じように Windows の場合より多くのスペースを必要とする場合、ダイアログの初期サイズは Windows より Linux/GTK の方が自動的に大きくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, it's possible to do some initialization first and only bind the handlers if and when it succeeds.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040630Z">
        <seg>例えば、先に何かの初期化処理を行い、それが成功したときにのみ、イベントハンドラをバインドすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, only error messages, or only error messages and warnings might be logged, filtering out all informational messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T085651Z">
        <seg>例えば、すべての通知メッセージをフィルタリングして、エラーメッセージのみ、もしくはエラーメッセージと警告メッセージのみを記録しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the <bpt i="3" x="3">&lt;c3&gt;</bpt>operator<ept i="3">&lt;/c3&gt;</ept>[] doesn't return neither a <bpt i="4" x="4">&lt;c4&gt;</bpt>char<ept i="4">&lt;/c4&gt;</ept> nor a <bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> but an object of a helper class <bpt i="6" x="6">&lt;a6&gt;</bpt>wxUniChar<ept i="6">&lt;/a6&gt;</ept> or <bpt i="7" x="7">&lt;a7&gt;</bpt>wxUniCharRef<ept i="7">&lt;/a7&gt;</ept> which is implicitly convertible to either.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122042Z">
        <seg>例えば、[] <bpt i="3" x="3">&lt;c3&gt;</bpt>演算子<ept i="3">&lt;/c3&gt;</ept> が返却する型は <bpt i="4" x="4">&lt;c4&gt;</bpt>char<ept i="4">&lt;/c4&gt;</ept> でも<bpt i="5" x="5">&lt;c5&gt;</bpt>wchar_t<ept i="5">&lt;/c5&gt;</ept> でもなく、どちらの型にも変換可能なヘルパークラスである <bpt i="6" x="6">&lt;a6&gt;</bpt>wxUniChar<ept i="6">&lt;/a6&gt;</ept> か <bpt i="7" x="7">&lt;a7&gt;</bpt>wxUniCharRef<ept i="7">&lt;/a7&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, this code may crash:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162431Z">
        <seg>例えば、このコードはクラッシュするでしょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you could define a class inheriting from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> which shows all the log messages in some part of your main application window reserved for the message output without interrupting the user work flow with modal message boxes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120750Z">
        <seg>例えば、モーダルメッセージボックスでユーザの操作を妨げないようにするため、メインウィンドウの一部にすべてのログメッセージを表示するように <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> を継承したクラスを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you might want to invoke a dialog editor in your application that changes aspects of dialog boxes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041412Z">
        <seg>例えば、ダイアログの外見を変更するためのダイアログエディタをアプリケーション内で起動したいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081820Z">
        <seg>以下に例を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For information about the new wxWidgets resource system, which can describe sizer-based dialogs, see the <bpt i="0" x="0">&lt;a0&gt;</bpt>XML-based resource system overview<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T115321Z">
        <seg>サイザーに基づいたダイアログを作成可能な wxWidgets の新しいリソースシステムについての情報は <bpt i="0" x="0">&lt;a0&gt;</bpt>XML に基づくリソースシステムの概要<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For information about the wxWidgets resource system, which can describe sizer-based dialogs, see the <bpt i="0" x="0">&lt;a0&gt;</bpt>XML Based Resource System (XRC)<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140937Z">
        <seg>サイザーに基づいたダイアログを作成可能な wxWidgets のリソースシステムについての情報は <bpt i="0" x="0">&lt;a0&gt;</bpt>XML に基づくリソースシステム (XRC)<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For menu commands and most control commands (such as button presses), <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> is used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081510Z">
        <seg>メニューコマンドと (ボタン押下といった) 大半のコマンドコントロールでは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more detailed information on how to use sizers programmatically, please refer to the section <bpt i="0" x="0">&lt;a0&gt;</bpt>Programming with Sizers<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124732Z">
        <seg>サイザーをプログラムで使用する方法については <bpt i="0" x="0">&lt;a0&gt;</bpt>サイザーを用いたプログラミング<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more detailed information on how to use sizers programmatically, please refer to the section <bpt i="0" x="0">&lt;a0&gt;</bpt>Programming with wxBoxSizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141118Z">
        <seg>サイザーをプログラムで使用する方法については <bpt i="0" x="0">&lt;a0&gt;</bpt>サイザーを用いたプログラミング<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more info about how <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> works, please see the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString Overview<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T091920Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の挙動についての詳細は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString の概要<ept i="1">&lt;/a1&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more information about converters and Unicode see the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv classes overview<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144515Z">
        <seg>Unicode の変換についての詳細は  <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv クラスの概要<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For more information, please see <bpt i="0" x="0">&lt;a0&gt;</bpt>Programming with wxBoxSizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124807Z">
        <seg>より詳しい情報は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer を用いたプログラミング<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For posting events to a certain event handler there are two possibilities: using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::AddPendingEvent<ept i="0">&lt;/a0&gt;</ept> or using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler::QueueEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144839Z">
        <seg>特定のイベントハンドラへイベントを送信する方法は 2 種類あります: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::AddPendingEvent<ept i="0">&lt;/a0&gt;</ept> を使用する方法と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler::QueueEvent<ept i="1">&lt;/a1&gt;</ept> を使用する方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For programming information, see <bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153320Z">
        <seg>プログラミングに関する情報は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxGridSizer<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For size events, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizeEvent<ept i="0">&lt;/a0&gt;</ept> is used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081247Z">
        <seg>リサイズイベントでは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizeEvent<ept i="0">&lt;/a0&gt;</ept> が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For the full list of event classes, please see the <bpt i="0" x="0">&lt;a0&gt;</bpt>event classes group page<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T013024Z">
        <seg>イベントクラスの完全な一覧は <bpt i="0" x="0">&lt;a0&gt;</bpt>イベントクラスグループ<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this purpose, a stretch factor may be assigned to each child, where the default value of 0 indicates that the child will not get more space than its requested minimum size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T145811Z">
        <seg>このため、子コントロールに対してストレッチ係数を割り当てます。ストレッチ係数のデフォルト値は 0 で、これは必要とする最小サイズ以上のスペースを取得しないことを表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogChain<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogPassThrough<ept i="1">&lt;/a1&gt;</ept> can be used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030523Z">
        <seg>このために <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogChain<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogPassThrough<ept i="1">&lt;/a1&gt;</ept> を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogChain<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogInterposer<ept i="1">&lt;/a1&gt;</ept>, and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogInterposerTemp<ept i="2">&lt;/a2&gt;</ept> can be used.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114628Z">
        <seg>このために <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogChain<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogInterposer<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogInterposerTemp<ept i="2">&lt;/a2&gt;</ept> を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this, you should only know about <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogXXX() functions<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131206Z">
        <seg>そのため、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogXXX() 関数<ept i="1">&lt;/a1&gt;</ept> についてのみ、知っておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For this, you should only know about <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/i1&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T004647Z">
        <seg>そのため、<bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/i1&gt;</ept> 関数についてのみ、知っておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For verbose output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131802Z">
        <seg>詳細な出力用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For warnings - they are also normally shown to the user, but don't interrupt the program work...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131614Z">
        <seg>警告メッセージ (通常はユーザに通知されますが、プログラムの動作を妨げないメッセージ) 用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>From a practical point of view, using Unicode is almost a requirement when writing applications for international audience.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031610Z">
        <seg>実用的な観点から見ると、世界中の人に向けてアプリケーションを書く時には Unicode の使用がほぼ必須と言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>From wxWidgets 2.0, <bpt i="0" x="0">&lt;i0&gt;</bpt>event tables<ept i="0">&lt;/i0&gt;</ept> are used instead, with a few exceptions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075240Z">
        <seg>wxWidgets 2.0 からは一部の例外を除き、代わりに <bpt i="0" x="0">&lt;i0&gt;</bpt>イベントテーブル<ept i="0">&lt;/i0&gt;</ept> が使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functions: see <bpt i="0" x="0">&lt;a0&gt;</bpt>Files and Directories<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072515Z">
        <seg>関数: <bpt i="0" x="0">&lt;a0&gt;</bpt>ファイルとディレクトリ<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Functions: see <bpt i="0" x="0">&lt;a0&gt;</bpt>file functions<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072621Z">
        <seg>関数: <bpt i="0" x="0">&lt;a0&gt;</bpt>ファイル関数<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>GTK 2.0 only accepts UTF-8 strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T143410Z">
        <seg>GTK 2.0 は UTF-8 文字列のみを受け付けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>General approach</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T130221Z">
        <seg>一般的なアプローチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generally speaking you should only use non-default UTF-8 build in specific circumstances e.g. building for resource-constrained systems where the overhead of conversions (and also reduced memory usage of UTF-8 compared to UTF-32 for the European languages) can be important.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033555Z">
        <seg>一般的に言うと、リソースが限られており、変換にかかるオーバーヘッド (と、ヨーロッパ言語において UTF-32 の代わりに UTF-8 を使用することによるメモリ消費量の削減) が重要となる、といった特殊な状況下でのみ、非標準の UTF-8 ビルドを使用するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generation is as simple as instancing your custom event class and initializing its internal fields.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144702Z">
        <seg>生成はカスタムイベントのインスタンス化と内部変数の初期化と同じくらい単純です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generic Event Table Macros</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012407Z">
        <seg>汎用的なイベントテーブルマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Generic event table macros</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160020Z">
        <seg>汎用的なイベントテーブルマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>GetEventHandler()-&gt;ProcessEvent( event );
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155957Z">
        <seg>GetEventHandler()-&gt;ProcessEvent( event );
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Global instance of a wxPoint initialized with values (-1,-1).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142254Z">
        <seg>(-1,-1) に初期化された wxPoint のグルーバルインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Global instance of a wxSize object initialized to (-1,-1).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142314Z">
        <seg>(-1,-1) に初期化された wxSize のグルーバルインスタンス。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Globally enable or disable logging.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T092213Z">
        <seg>ロギングをグローバルに有効化、または無効化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here are all of them:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005029Z">
        <seg>以下にすべての関数を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here are some examples, using a <bpt i="8" x="8">&lt;a8&gt;</bpt>wxString<ept i="8">&lt;/a8&gt;</ept> object <bpt i="9" x="9">&lt;c9&gt;</bpt>s<ept i="9">&lt;/c9&gt;</ept> and some integer <bpt i="10" x="10">&lt;c10&gt;</bpt>n:<ept i="10">&lt;/c10&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122441Z">
        <seg>その例を以下に示します。この例では <bpt i="8" x="8">&lt;a8&gt;</bpt>wxString<ept i="8">&lt;/a8&gt;</ept> オブジェクト <bpt i="9" x="9">&lt;c9&gt;</bpt>s<ept i="9">&lt;/c9&gt;</ept> と、ある整数 <bpt i="10" x="10">&lt;c10&gt;</bpt>n<ept i="10">&lt;/c10&gt;</ept> を使用しています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is a sample:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152804Z">
        <seg>以下に例を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is an example, taken mostly from the <bpt i="0" x="0">&lt;i0&gt;</bpt>wxPlot<ept i="0">&lt;/i0&gt;</ept> library, which is in the <bpt i="1" x="1">&lt;i1&gt;</bpt>contrib<ept i="1">&lt;/i1&gt;</ept> section of the wxWidgets sources.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164140Z">
        <seg><bpt i="0" x="0">&lt;i0&gt;</bpt>wxPlot<ept i="0">&lt;/i0&gt;</ept> ライブラリから抜粋した例を以下に示します。このコードは wxWidgets のソースコードの <bpt i="1" x="1">&lt;i1&gt;</bpt>contrib<ept i="1">&lt;/i1&gt;</ept> セクションにあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here is an example:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150318Z">
        <seg>例を以下に示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here's an example of an event table.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075537Z">
        <seg>イベントテーブルの例を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here's how you'd do the previous example with <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizerFlags<ept i="0">&lt;/a0&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145423Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizerFlags<ept i="0">&lt;/a0&gt;</ept> を使用して上記の例と同じことをすると以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here's how you'd do the previous example with wxSizerFlags:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145412Z">
        <seg>wxSizerFlags を使用して上記の例と同じことをすると以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, you can examine the events coming from buttons and windows, and if acceptable, pass them through to the original event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T065445Z">
        <seg>ここでは、ボタンやウィンドウから送られてくるイベントを検証し、それが適用可能なものである場合に元のイベントハンドラへ渡す、ということを行えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hiding Controls Using Sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140945Z">
        <seg>サイザーによるコントロールの非表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hiding controls using sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T151438Z">
        <seg>サイザーによるコントロールの非表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How Events Propagate Upwards</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T153611Z">
        <seg>上位階層へのイベント伝播方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How Events are Processed</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153305Z">
        <seg>イベント処理の仕組み</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>How events are processed</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T083106Z">
        <seg>イベント処理の仕組み</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However code such as</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170708Z">
        <seg>しかし、以下のようなコードは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However different formats have specific advantages and disadvantages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033450Z">
        <seg>しかし、各フォーマットにはそれぞれ利点と欠点があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However if the program never manipulates 8 bit strings internally, using <bpt i="2" x="2">&lt;c2&gt;</bpt>char*<ept i="2">&lt;/c2&gt;</ept> pointers is safe as well.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T141012Z">
        <seg>しかし、内部で絶対に 8 ビット文字列を操作しないというのであれば、<bpt i="2" x="2">&lt;c2&gt;</bpt>char*<ept i="2">&lt;/c2&gt;</ept> ポインターを使用しても安全です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However if you define a custom log target, messages may be logged out of order, e.g. messages from the main thread with later timestamp may appear before messages with earlier timestamp logged from other threads.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120049Z">
        <seg>しかし、カスタムログターゲットを定義している場合、メッセージの記録される順がバラバラになる可能性があります。例えば、より後のタイムスタンプを持つメインスレッドのメッセージがより早いタイムスタンプを持つ他のスレッドのメッセージの前に表示されることがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However initializing the string using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::FromUTF8()<ept i="0">&lt;/a0&gt;</ept> method and then accessing it as a char string via its <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::c_str()<ept i="1">&lt;/a1&gt;</ept> method is a recipe for disaster as the program may work perfectly well during testing on Unix systems using UTF-8 locale but completely fail under Windows where UTF-8 locales are never used because <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::c_str()<ept i="2">&lt;/a2&gt;</ept> would return an empty string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034628Z">
        <seg>しかし、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::FromUTF8()<ept i="0">&lt;/a0&gt;</ept> 関数で初期化した文字列に対して、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::c_str()<ept i="1">&lt;/a1&gt;</ept> 関数を使って char 文字列のようにアクセスしようとするのは災いのもとです。そのプログラムは UTF-8 ロケールを使用している Unix システムでテストしている間は完璧に動作するでしょうが、UTF-8 ロケールを使用していない Windows では <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::c_str()<ept i="2">&lt;/a2&gt;</ept> が空文字列を返すかもしれないため、全く動作しなくなるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However writing</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045715Z">
        <seg>しかし、次のように書くと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However you should be aware of the potential problems covered by the following section.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092358Z">
        <seg>しかし、次の章で触れる、潜在的な問題については注意すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizer<ept i="1">&lt;/a1&gt;</ept> also offers a separate method which can tell the sizer not to consider that control in its size calculations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141603Z">
        <seg>しかし、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizer<ept i="1">&lt;/a1&gt;</ept> はそのコントロールのサイズを考慮しないようにする別の関数も提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, as wxWidgets uses <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogError()<ept i="2">&lt;/a2&gt;</ept> in this situation, the exact error code (and the corresponding error message) will be given to the user together with "high level" message about data file writing error.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091846Z">
        <seg>しかし、このような状況で <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogError()<ept i="2">&lt;/a2&gt;</ept> を使用すれば、書き込みに失敗したファイルに関する "高レベル" なメッセージとともに正確なエラーコード (と対応するエラーメッセージ) が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, as wxWidgets uses <bpt i="2" x="2">&lt;i2&gt;</bpt>wxLogError()<ept i="2">&lt;/i2&gt;</ept> in this situation, the exact error code (and the corresponding error message) will be given to the user together with "high level" message about data file writing error.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T021817Z">
        <seg>しかし、このような状況で <bpt i="2" x="2">&lt;i2&gt;</bpt>wxLogError()<ept i="2">&lt;/i2&gt;</ept> を使用すれば、書き込みに失敗したファイルに関する "高レベル" なメッセージとともに正確なエラーコード (と対応するエラーメッセージ) が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, unlike the Unicode build mode of the previous versions of wxWidgets, this support is mostly transparent: you can still continue to work with the <bpt i="0" x="0">&lt;b0&gt;</bpt>narrow<ept i="0">&lt;/b0&gt;</ept> (i.e. current locale-encoded <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept>) strings even if <bpt i="2" x="2">&lt;b2&gt;</bpt>wide<ept i="2">&lt;/b2&gt;</ept> (i.e. UTF16-encoded <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t*<ept i="3">&lt;/c3&gt;</ept> or UTF8-encoded <bpt i="4" x="4">&lt;c4&gt;</bpt>char*<ept i="4">&lt;/c4&gt;</ept>) strings are also supported.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041201Z">
        <seg>しかし、wxWidgets の以前のバージョンにおける Unicode ビルドモードとは異なり、この対応はほとんど透過的です： <bpt i="2" x="2">&lt;b2&gt;</bpt>ワイド<ept i="2">&lt;/b2&gt;</ept> 文字列 (UTF16 で符号化された <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t*<ept i="3">&lt;/c3&gt;</ept> か、UTF8 で符号化された <bpt i="4" x="4">&lt;c4&gt;</bpt>char*<ept i="4">&lt;/c4&gt;</ept> のことです) がサポートされていても、引き続き  <bpt i="0" x="0">&lt;b0&gt;</bpt>ナロー<ept i="0">&lt;/b0&gt;</ept> 文字列 (現在のロケールで符号化された <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept> のことです) を使用することができます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, wxSizer also offers a separate method which can tell the sizer not to consider that control in its size calculations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T152022Z">
        <seg>しかし、wxSizer はそのコントロールのサイズを考慮しないようにする別の関数も提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>IE=9</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042759Z">
        <seg>IE=9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If it returns anything but -1 (default), the event handling stops immediately.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T071056Z">
        <seg>-1 (デフォルト) 以外の値を返却した場合、ただちにイベント処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If several windows have a value above zero, the value is interpreted relative to the sum of all weight factors of the sizer, so when adding two windows with a value of 1, they will both get resized equally much and each half as much as the sizer owning them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T130620Z">
        <seg>いくつかのウィンドウが 0 より大きい値を持つ場合、その値はサイザーのすべての重み係数の和に対する相対値として解釈されます。そのため、値が 1 であるウィンドウをふたつ追加する場合、両方とも同じようにリサイズされ、それぞれサイザーの半分の大きさになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the environment in which your program is running is under your control -- as is quite often the case in such scenarios -- consider ensuring that the system always uses UTF-8 locale and use <bpt i="0" x="0">&lt;c0&gt;</bpt>--enable-utf8only<ept i="0">&lt;/c0&gt;</ept> configure option to disable support for the other locales and consider all strings to be in UTF-8.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T033637Z">
        <seg>(そのような状況では、よくこの場合に当てはまりますが) もしプログラムの実行される環境を制御できるのであれば、システムが常に UTF-8 ロケールを使用するようにし、<bpt i="0" x="0">&lt;c0&gt;</bpt>--enable-utf8only<ept i="0">&lt;/c0&gt;</ept> オプションを使用して他のロケールのサポートを無効にすることを考慮してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the message catalogs are not installed in this default location you may explicitly use <bpt i="1" x="1">&lt;a1&gt;</bpt>AddCatalogLookupPathPrefix()<ept i="1">&lt;/a1&gt;</ept> to still allow wxWidgets to find them but it is strongly recommended to use the default directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001947Z">
        <seg>このデフォルトの場所にメッセージカタログをインストールしない場合、明示的に <bpt i="1" x="1">&lt;a1&gt;</bpt>AddCatalogLookupPathPrefix()<ept i="1">&lt;/a1&gt;</ept> を使用することで wxWidgets がその場所を探すようになります。ただし、デフォルトのディレクトリを使用することを強く推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the message catalogs are not installed in this default location you may explicitly use <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLocale::AddCatalogLookupPathPrefix()<ept i="2">&lt;/a2&gt;</ept> to still allow wxWidgets to find them but it is strongly recommended to use the default directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043355Z">
        <seg>このデフォルトの場所にメッセージカタログをインストールしない場合、明示的に <bpt i="2" x="2">&lt;a2&gt;</bpt>AddCatalogLookupPathPrefix()<ept i="2">&lt;/a2&gt;</ept> を使用することで wxWidgets がその場所を探すようになりますが、デフォルトのディレクトリを使用することを強く推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> and has an associated validator, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxValidator<ept i="1">&lt;/a1&gt;</ept> gets a chance to process the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T032524Z">
        <seg>オブジェクトが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> で、かつ、関連するバリデータを持っている場合、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxValidator<ept i="1">&lt;/a1&gt;</ept> でイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> and the event is set to propagate (by default only wxCommandEvent-derived events are set to propagate), then the processing restarts from the step (1) (and excluding the step (7)) for the parent window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T142127Z">
        <seg>オブジェクトが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> で、かつ、イベントが伝播するように設定されている (デフォルトでは wxCommandEvent を継承したイベントのみ、伝播するよう設定されています) 場合、親ウィンドウに対してステップ (1) から (ステップ (7) を除いて) 再度処理を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is a wxWindow and the event is set to set to propagate (in the library only wxCommandEvent based events are set to propagate), <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> is recursively applied to the parent window's event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T142314Z">
        <seg>オブジェクトが wxWindow で、かつ、イベントが伝播するように設定されている (ライブラリの中では wxCommandEvent の派生イベントのみ、伝播するよう設定されています) 場合、親ウィンドウの <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> が再帰的に呼ばれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is a wxWindow, <bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> is recursively called on the window's <bpt i="1" x="1">&lt;a1&gt;</bpt>wxValidator<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T024132Z">
        <seg>オブジェクトが wxWindow の場合、<bpt i="0" x="0">&lt;b0&gt;</bpt>ProcessEvent<ept i="0">&lt;/b0&gt;</ept> はウィンドウの <bpt i="1" x="1">&lt;a1&gt;</bpt>wxValidator<ept i="1">&lt;/a1&gt;</ept> から再帰的に呼び出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the object is disabled (via a call to <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetEvtHandlerEnabled<ept i="0">&lt;/a0&gt;</ept>) the function skips to step (6).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T024038Z">
        <seg>(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetEvtHandlerEnabled<ept i="0">&lt;/a0&gt;</ept> を呼ぶことで) オブジェクトが無効化されている場合、(6) までスキップします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this behaviour is not desirable <bpt i="1" x="1">&lt;a1&gt;</bpt>wxApp::SetExitOnFrameDelete<ept i="1">&lt;/a1&gt;</ept> can be called to change it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124028Z">
        <seg>この振る舞いが望ましくない場合、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxApp::SetExitOnFrameDelete<ept i="1">&lt;/a1&gt;</ept> を呼ぶことで振る舞いを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this behaviour is not desirable <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::SetExitOnFrameDelete<ept i="2">&lt;/a2&gt;</ept> can be called to change it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162007Z">
        <seg>この振る舞いが望ましくない場合、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::SetExitOnFrameDelete<ept i="2">&lt;/a2&gt;</ept> を呼ぶことで振る舞いを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this event handler is disabled via a call to <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetEvtHandlerEnabled()<ept i="0">&lt;/a0&gt;</ept> the next three steps are skipped and the event handler resumes at step (5).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T071243Z">
        <seg>イベントハンドラが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetEvtHandlerEnabled()<ept i="0">&lt;/a0&gt;</ept> によって無効化されている場合、次の 3 ステップはスキップし、(5) から処理を継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this fails, the base class table is tried, and so on until no more tables exist or an appropriate function was found, in which case the function exits.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040404Z">
        <seg>ProcessEvent が true を返さなかった場合、基底クラスのイベントテーブルを検索します。これを順次、イベントテーブルが存在しなくなるか、適切な関数が見つかるまで行います。適切な関数が見つからなかった場合、処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this object is not a window but the next handler exists, the event is passed to its parent if it is a window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T143204Z">
        <seg>このオブジェクトがウィンドウでないが次のイベントハンドラが存在する場合、親コントロールがウィンドウであれば親コントロールにイベントを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this returns true, the function exits.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T024357Z">
        <seg>ProcessEvent が true を返した場合、処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If this succeeds, the function exits.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T030211Z">
        <seg>検索に成功した場合、処理を終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you believe that it would be advantageous to use UTF-8 for the strings in your particular application, you may rebuild wxWidgets to use UTF-8 as explained above (notice that this is currently not supported under Microsoft Windows and arguably doesn't make much sense there as Windows itself uses UTF-16 and not UTF-8) but be sure to be aware of the performance implications (see <bpt i="1" x="1">&lt;a1&gt;</bpt>Performance Implications of Using UTF-8<ept i="1">&lt;/a1&gt;</ept>) of using UTF-8 in <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> before doing this!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T095112Z">
        <seg>もしあなたのアプリケーションで UTF-8 が好都合だと思うのなら、上で説明したように UTF-8 を使用するように wxWidgets をビルドし直してください。 (今のところ、Microsoft Windows ではこれに対応しておらず、Windows 自身は UTF-8 ではなく UTF-16 を使用しているため、明らかにあまり意味がないことに注意してください) ただし、これを行う前に <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString<ept i="2">&lt;/a2&gt;</ept> で UTF-8 を使用することによる性能への影響 (<bpt i="1" x="1">&lt;a1&gt;</bpt>UTF-8 を使用することによる性能への影響<ept i="1">&lt;/a1&gt;</ept> 参照) を必ず意識するようにしてください!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you compile your program in ANSI mode you can still define <bpt i="1" x="1">&lt;t1&gt;</bpt>wxUSE_WCHAR_T<ept i="1">&lt;/t1&gt;</ept> to get some limited support for <bpt i="2" x="2">&lt;t2&gt;</bpt>wchar_t<ept i="2">&lt;/t2&gt;</ept> type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144825Z">
        <seg>プログラムを ANSI モードでコンパイルした場合でも、 <bpt i="1" x="1">&lt;t1&gt;</bpt>wxUSE_WCHAR_T<ept i="1">&lt;/t1&gt;</ept> を定義することで <bpt i="2" x="2">&lt;t2&gt;</bpt>wchar_t<ept i="2">&lt;/t2&gt;</ept> の限定的な機能を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you do want to handle messages of different levels differently, then you should override <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T122739Z">
        <seg>異なるレベルのメッセージを別々に処理したい場合、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="0">&lt;/a0&gt;</ept> をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you ever have to call a window's event handler manually, use the GetEventHandler function to retrieve the window's event handler and use that to call the member function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T062722Z">
        <seg>もし手動でウィンドウのイベントハンドラを呼ぶ必要がある場合、GetEventHandler 関数でウィンドウのイベントハンドラを取得し、そのメンバ関数を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you just want to use a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> with a new event type, use one of the generic event table macros listed below, without having to define a new event class yourself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145820Z">
        <seg>新しいイベント型で <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を使用したいだけの場合、新しいイベントクラスを自分自身で定義する必要はなく、以下の汎用イベントテーブルマクロのひとつを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you just want to use a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> with a new event type, you can then use one of the generic event table macros listed below, without having to define a new macro yourself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042232Z">
        <seg>新しいイベント型で <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を使用したいだけの場合、自分自身で新しいマクロを定義するのではなく、以下の汎用的なイベントテーブルマクロを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to specify a different behaviour for some reason, you can use <bpt i="0" x="0">&lt;a0&gt;</bpt>SetExtraStyle(wxWS_EX_BLOCK_EVENTS)<ept i="0">&lt;/a0&gt;</ept> explicitly to prevent the events from being propagated beyond the given window or unset this flag for the dialogs which have it on by default.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T050456Z">
        <seg>なんらかの理由で別の振る舞いをさせる必要がある場合、明示的に <bpt i="0" x="0">&lt;a0&gt;</bpt>SetExtraStyle(wxWS_EX_BLOCK_EVENTS)<ept i="0">&lt;/a0&gt;</ept> を使用することでイベントが指定されたウィンドウ外へ伝播するのを止めたり、ダイアログ (デフォルトでこのフラグが設定されています) のフラグを解除したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you need to specify a different behaviour for some reason, you can use <bpt i="0" x="0">&lt;c0&gt;</bpt>wxWindow::SetExtraStyle(wxWS_EX_BLOCK_EVENTS)<ept i="0">&lt;/c0&gt;</ept> explicitly to prevent the events from being propagated beyond the given window or unset this flag for the dialogs that have it on by default.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T160130Z">
        <seg>なんらかの理由で別の振る舞いをさせる必要がある場合、明示的に <bpt i="0" x="0">&lt;c0&gt;</bpt>SetExtraStyle(wxWS_EX_BLOCK_EVENTS)<ept i="0">&lt;/c0&gt;</ept> を使用することでイベントが指定されたウィンドウ外へ伝播するのを止めたり、ダイアログ (デフォルトでこのフラグが設定されています) のフラグを解除したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you pass <bpt i="0" x="0">&lt;c0&gt;</bpt>wxID_ANY<ept i="0">&lt;/c0&gt;</ept> to a window constructor, an identifier will be generated for you automatically by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T171229Z">
        <seg>ウィンドウのコンストラクタに <bpt i="0" x="0">&lt;c0&gt;</bpt>wxID_ANY<ept i="0">&lt;/c0&gt;</ept> を渡した場合、wxWidgets が自動的に識別子を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you pass <bpt i="0" x="0">&lt;t0&gt;</bpt>wxID_ANY<ept i="0">&lt;/t0&gt;</ept> to a window constructor, an identifier will be generated for you automatically by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T075041Z">
        <seg>ウィンドウのコンストラクタに <bpt i="0" x="0">&lt;t0&gt;</bpt>wxID_ANY<ept i="0">&lt;/t0&gt;</ept> を渡した場合、wxWidgets が自動的に識別子を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you translate the accelerator modifier names (Ctrl, Alt and Shift) in your menu labels, you may find the accelerators no longer work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T003227Z">
        <seg>もしメニューラベル内のアクセラレータの修飾子名 ( Ctrl、Alt、Shift) を翻訳した場合、アクセラレータが動作しなくなることに気がつくでしょう。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you use <bpt i="2" x="2">&lt;a2&gt;</bpt>wxNewId()<ept i="2">&lt;/a2&gt;</ept> consistently in your application, you can be sure that your identifiers don't conflict accidentally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012416Z">
        <seg>もしアプリケーション内で一貫して <bpt i="2" x="2">&lt;a2&gt;</bpt>wxNewId()<ept i="2">&lt;/a2&gt;</ept> を使用するようにすれば、偶発的な識別子の衝突を避けることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Implements the calculation of a box sizer's dimensions and then sets the size of its children (calling <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetSize<ept i="0">&lt;/a0&gt;</ept> if the child is a window).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150430Z">
        <seg>ボックスサイザーの大きさを計算し、子コントロールのサイズをセットします。 (子コントロールがウィンドウの場合、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetSize<ept i="0">&lt;/a0&gt;</ept> を呼びます)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Implements the calculation of a box sizer's minimal.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150702Z">
        <seg>ボックスサイザーの最小サイズを計算します。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a GUI application, this function posts event to the specified dest object using wxEvtHandler::AddP...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144104Z">
        <seg>GUI アプリケーションにおいて、この関数は wxEvtHandler::AddPendingEvent() を使用して特定の送信先オブジェクトへイベントを送信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In a similar way, <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> provides access to its contents as either <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> or <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> character buffer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T090940Z">
        <seg>同様に、<bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> と <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> のどちらででも <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の保持する文字列にアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition to using a method of the object generating the event itself, you can use a method from a completely different object as an event handler:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060203Z">
        <seg>イベントを生成したオブジェクトに加えて、完全に別のオブジェクトのメンバ関数をイベントハンドラとして使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition, there will be a thin border around all controls to make the dialog look nice and - to make matter worse - the buttons shall be centred as the width of the dialog changes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T130437Z">
        <seg>加えて、ダイアログの見た目を良くするためにすべてのコントロールの周りに薄いボーダーを設定し、さらに悪いことに、ダイアログの幅の変更にあわせてボダンを中央寄せで配置するものとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In emergencies the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxExit<ept i="0">&lt;/a0&gt;</ept> function can be called to kill the application however normally the application shuts down automatically, <bpt i="1" x="1">&lt;a1&gt;</bpt>see below<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160945Z">
        <seg>緊急の場合は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxExit<ept i="0">&lt;/a0&gt;</ept> 関数を使用してアプリケーションを強制終了させることができます。しかし、通常、アプリケーションは自動的にシャットダウンされます。 <bpt i="1" x="1">&lt;a1&gt;</bpt>以下を参照してください<ept i="1">&lt;/a1&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In emergencies the wxExit function can be called to kill the application however normally the application shuts down automatically, see <bpt i="0" x="0">&lt;a0&gt;</bpt>Application Shutdown<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T133418Z">
        <seg>緊急の場合は wxExit 関数を使用してアプリケーションを強制終了させることができます。しかし、通常、アプリケーションは自動的にシャットダウンされます。 <bpt i="0" x="0">&lt;a0&gt;</bpt>アプリケーションの終了<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, identifiers do not need to be unique across your entire application as long they are unique within the particular context you're interested in, such as a frame and its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T171150Z">
        <seg>実際には、特定のコンテキスト (フレームやその子コントロール) 内で一意であれば、アプリケーション全体で一意である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, identifiers do not need to be unique across your entire application just so long as they are unique within a particular context you're interested in, such as a frame and its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T074556Z">
        <seg>実際には、特定のコンテキスト (フレームやその子コントロール) 内で一意であれば、アプリケーション全体で一意である必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, the event handler probably doesn't even exist in the base class as the default behaviour is often implemented in platform-specific code by the underlying toolkit or OS itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T154809Z">
        <seg>実際には、デフォルトの振る舞いは使用しているツールキットや OS によってプラットフォーム依存のコード内に実装されることが多いため、おそらく基底クラスにはイベントハンドラが存在しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In fact, you don't have to derive a new class from a window class if you don't want to.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041124Z">
        <seg>実際のところ、ウィンドウクラスを継承して新しいクラスを作成したくない場合は、必ずしもそうする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In many cases (particularly dialogs under Unix and normal frames) the main window will be resizable by the user and this change of size will have to get propagated to its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T154423Z">
        <seg>多くの場合で (特に、Unix のダイアログや通常のフレームの場合)、メインウィンドウはリサイズ可能であり、サイズの変更を子コントロールへ伝播させる必要があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In many cases this works even for changing the behaviour of native controls.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T085456Z">
        <seg>ネイティブコントロールの振る舞いを変更するような場合にも、これは動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In order to define a new event type, there are principally two choices.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T150930Z">
        <seg>新しいイベント型を定義する方法として、主に 2 種類の選択肢があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In other cases you may need some information carried by the <bpt i="0" x="0">&lt;c0&gt;</bpt>event<ept i="0">&lt;/c0&gt;</ept> argument, as in:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T034401Z">
        <seg>他の場合では、以下のように <bpt i="0" x="0">&lt;c0&gt;</bpt>event<ept i="0">&lt;/c0&gt;</ept> 引数の持つ情報が必要になるかもしれません:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In our case, we want the text area to grow with the dialog, whereas the button shall have a fixed size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T154608Z">
        <seg>この例では、ダイアログに合わせてテキストエリアのサイズを変更する一方で、ボタンのサイズは固定にしたいものとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In our example case, the vertical sizer is supposed to propagate all its height changes to only the text area, not to the button area.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T152653Z">
        <seg>今回の例では、垂直方向のサイザーは高さに対するすべての変化をテキストエリアにのみ伝播させ、ボタンエリアには伝播させないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular they don't need<it pos="end" x="8">&lt;/s8&gt;</it></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015610Z">
        <seg>特に、これらを public に<it pos="end" x="8">&lt;/s8&gt;</it></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, do <bpt i="0" x="0">&lt;b0&gt;</bpt>not<ept i="0">&lt;/b0&gt;</ept> destroy them from application class' destructor!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124528Z">
        <seg>特に、アプリケーションクラスのデストラクタで削除しては <bpt i="0" x="0">&lt;b0&gt;</bpt>いけません<ept i="0">&lt;/b0&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, do <bpt i="2" x="2">&lt;b2&gt;</bpt>not<ept i="2">&lt;/b2&gt;</ept> destroy them from application class' destructor!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162357Z">
        <seg>特に、アプリケーションクラスのデストラクタで削除しては <bpt i="2" x="2">&lt;b2&gt;</bpt>いけません<ept i="2">&lt;/b2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, the most common encoding used under modern Unix systems is UTF-8 and as the string above is not a valid UTF-8 byte sequence, nothing would be displayed at all in this case.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082020Z">
        <seg>特に、最近の Unix システムで最もよく使われているエンコーディングは UTF-8 であり、上記の文字列は正しい UTF-8 バイト列ではないため、この場合は何も表示されないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In particular, this means that errors logged by wxWidgets code itself (e.g. when it fails to perform some operation, for instance <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile::Open()<ept i="0">&lt;/a0&gt;</ept> logs an error when it fails to open a file) will be processed and shown to the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T092846Z">
        <seg>特に、wxWidgets 自身の記録するエラー (何らかの処理の失敗時、例えば、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxFile::Open()<ept i="0">&lt;/a0&gt;</ept> はファイルのオープンに失敗した場合にエラーを記録します) がユーザに通知されることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In practice, this would look like this if the derived text control only accepts 'a' to 'z' and 'A' to 'Z':</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022520Z">
        <seg>実際に、テキストコントロールで 'a' から 'z' と 'A' から 'Z' までのみを受け付ける場合、以下のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In some cases, it might be desired by the programmer to get a certain number of system events in a parent window, for example all key events sent to, but not used by, the native controls in a dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060007Z">
        <seg>例えばダイアログ内のネイティブコントロールへ送信される (そのコントロール自身では使用しない) キーイベントなど、特定のシステムイベントを親ウィンドウで取得したいと思うことがあるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the latter case, <bpt i="5" x="5">&lt;c5&gt;</bpt>wxUSE_UTF8_LOCALE_ONLY<ept i="5">&lt;/c5&gt;</ept> can also be set to 1 to indicate that all strings are considered to be in UTF-8.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121106Z">
        <seg>UTF-8 ビルドを行う場合、すべての文字列が UTF-8 であることを表すために <bpt i="5" x="5">&lt;c5&gt;</bpt>wxUSE_UTF8_LOCALE_ONLY<ept i="5">&lt;/c5&gt;</ept> も 1 に設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the next one, <bpt i="2" x="2">&lt;c2&gt;</bpt>EVT_SIZE<ept i="2">&lt;/c2&gt;</ept> means that any changes in the size of the frame will result in calling OnSize() method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023523Z">
        <seg>次の行の <bpt i="2" x="2">&lt;c2&gt;</bpt>EVT_SIZE<ept i="2">&lt;/c2&gt;</ept> はフレームのサイズを変更すると OnSize() を呼び出すことを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the next section we provide a short introduction to handling the events using the event tables.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T002949Z">
        <seg>次の章ではイベントテーブルを用いたイベント処理の導入部分を説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the simplest possible case an event handler may not use the <bpt i="0" x="0">&lt;c0&gt;</bpt>event<ept i="0">&lt;/c0&gt;</ept> parameter at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024222Z">
        <seg>ありえそうな一番単純な例では、イベントハンドラは <bpt i="0" x="0">&lt;c0&gt;</bpt>event<ept i="0">&lt;/c0&gt;</ept> 引数をまったく使用しないかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In these cases a single "character" may be mapped to more than one code point or viceversa more characters may be mapped to a single code point.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T024311Z">
        <seg>これらの場合、ひとつの "文字" が複数のコードポイントにマッピングされたり、逆に複数の文字がひとつのコードポイントにマッピングされたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case it can't guarantee constant-time access to N-th element of the string any longer as to find the position of this character in the string we have to examine all the preceding ones.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T143506Z">
        <seg>その場合、文字列中のN 番目の要素へ定数時間でアクセスできることはもはや保証されません。なぜなら、その要素の位置を見つけるためにはその前の文字列をすべて調べる必要があるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case the event handler function has to call Skip() so as to indicate that the search for the event handler should continue.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T090341Z">
        <seg>この場合、イベントハンドラの検索を続行させるためにイベントハンドラ関数で Skip() を呼ぶ必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, a special event handler will have to be written that will override ProcessEvent() in order to pass all events (or any selection of them) to the parent window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060249Z">
        <seg>この場合、すべてのイベント (もしくはその中の特定のイベント) を親ウィンドウへ渡すようにイベントハンドラの ProcessEvent() をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, the button's event table will be searched, then the parent panel's, then the frame's.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T080603Z">
        <seg>この場合、まずボタンのイベントテーブルが検索され、続いて、その親パネル、フレームの順に検索されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, you can use the converter-constructor, as follows:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144158Z">
        <seg>この場合、以下の変換コンストラクタを使用することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this particular case UTF8 requires more space than UTF16 (3 bytes instead of 2).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T033430Z">
        <seg>この場合では、UTF8 は UTF16 よりも多くの領域が必要となります。 (2 バイトではなく 3 バイト)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In wxWidgets, the code fragment from above should be written instead:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161649Z">
        <seg>wxWidgets では、上記のコードの代わりに以下のように書きます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In your message catalogs, you need to provide individual translations of these modifiers from their lower case names (ctrl, alt, shift) so that the wxWidgets accelerator code can recognise them even when translated.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T003631Z">
        <seg>メッセージカタログでは、修飾子の名前を小文字にしたもの (ctrl、alt、shift) とは別の名前に翻訳する必要があります。これによって、 wxWidgets がそれらの名前を翻訳されたものとして認識できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Include files</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145849Z">
        <seg>インクルードファイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Indeed, the member functions should not be virtual as the event handler ignores that the functions are virtual, i.e. overriding a virtual member function in a derived class will not have any effect.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T032638Z">
        <seg>実際に、イベントテーブルはメンバ関数が仮想関数であることを無視する、つまり、仮想メンバ関数を継承クラスでオーバーライドしてもなにも影響を及ぼしません。そのため、メンバ関数を仮想関数にするべきではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Independent of how the individual sizers lay out their children, all children have certain features in common:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T132513Z">
        <seg>個々のサイザーがどのように子コントロールを配置するかによらず、子コントロールはすべていくつかの共通機能を持ちます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Installing the .mo files with your application in the appropriate location for the target system which is the one returned by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStandardPaths::GetLocalizedResourcesDir(wxStandardPaths::ResourceCat_Messages)<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001529Z">
        <seg>あなたのプログラムと一緒に .mo ファイルを対象システム内の適切な場所 (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxStandardPaths::GetLocalizedResourcesDir(wxStandardPaths::ResourceCat_Messages)<ept i="0">&lt;/a0&gt;</ept> の返却する場所) にインストールする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Installing the .mo files with your application in the appropriate location for the target system which is the one returned by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxStandardPaths::GetLocalizedResourcesDir<ept i="0">&lt;/a0&gt;</ept>( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStandardPaths::ResourceCat_Messages<ept i="1">&lt;/a1&gt;</ept> ).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041415Z">
        <seg>あなたのプログラムと一緒に .mo ファイルを対象システム内の適切な場所 (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxStandardPaths::GetLocalizedResourcesDir<ept i="0">&lt;/a0&gt;</ept>( <bpt i="1" x="1">&lt;a1&gt;</bpt>wxStandardPaths::ResourceCat_Messages<ept i="1">&lt;/a1&gt;</ept> ) の返却する場所) にインストールする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead it returns a boolean value which indicates whether processing should continue (<bpt i="1" x="1">&lt;s1&gt;</bpt>true<ept i="1">&lt;/s1&gt;</ept>) or not (<bpt i="2" x="2">&lt;s2&gt;</bpt>false<ept i="2">&lt;/s2&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152514Z">
        <seg>代わりに処理を継続する (<bpt i="1" x="1">&lt;s1&gt;</bpt>true<ept i="1">&lt;/s1&gt;</ept>) かしない (<bpt i="2" x="2">&lt;s2&gt;</bpt>false<ept i="2">&lt;/s2&gt;</ept>) かを表す真偽値を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead it returns a boolean value which indicates whether processing should continue (true) or not (false).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160313Z">
        <seg>代わりに処理を継続する (true) かしない (false) かを表す真偽値を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead of run-time crashes you will get compilation errors in this case when using Bind().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030347Z">
        <seg>Bind() を使用すると、実行時にクラッシュするかわりにコンパイルエラーが発生するようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, in any place in your code, but usually in the code of the class defining the handler itself (and definitely not in the global scope as with the event tables), call its Bind&lt;&gt;() method like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040326Z">
        <seg>代わりに、コードの任意の場所で以下のように Bind&lt;&gt;() を呼び出します。 (通常はイベントを処理するクラスの定義内に配置し、イベントテーブルの場合のようにグローバルスコープ内には配置しません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead, we define some types and macros which behave differently in the Unicode and ANSI builds and allow us to avoid using conditional compilation in the program itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T162043Z">
        <seg>その代わり、Unicode ビルドと ANSI ビルドで異なる振る舞いをする型とマクロが定義されており、これによってプログラム内で条件付きコンパイルを使用しなくても済みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Internationalization</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T150202Z">
        <seg>国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035518Z">
        <seg>イントロダクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Introduction to Events</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153252Z">
        <seg>イントロダクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It also allows the direct binding of events to:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T000012Z">
        <seg>また、以下のものをイベントへ直接バインドすることができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can be also used to work with files with "non native" line termination characters and write them as "native" files if needed (in fact, the files may be written in any format).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T065601Z">
        <seg>プラットフォームと異なる行端文字を扱うこともできますし、必要であればプラットフォームの行端文字に変換して書き込むことも可能です。 (実際のところ、任意の形式でファイルを書き込むことが可能です)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can be corrected in one of the following ways:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124718Z">
        <seg>下記のいずれかの方法でこれを修正することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can be explicitly set to 0 in <bpt i="1" x="1">&lt;c1&gt;</bpt>setup.h<ept i="1">&lt;/c1&gt;</ept> under MSW or you can use <bpt i="2" x="2">&lt;c2&gt;</bpt>--disable-unicode<ept i="2">&lt;/c2&gt;</ept> under Unix but doing this is strongly discouraged.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T120718Z">
        <seg>MSW では <bpt i="1" x="1">&lt;c1&gt;</bpt>setup.h<ept i="1">&lt;/c1&gt;</ept> 内で明示的に 0 にセットするか、Unix では <bpt i="2" x="2">&lt;c2&gt;</bpt>--disable-unicode<ept i="2">&lt;/c2&gt;</ept> を使用することができますが、これは推奨しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It contains all the usual functions to work with files (opening/closing, reading/writing, seeking, and so on) but compared with using standard C functions, has error checking (in case of an error a message is logged using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> facilities) and closes the file automatically in the destructor which may be quite convenient.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T060646Z">
        <seg>このクラスは (オープン/クローズ、読み書き、ファイルシークといった) 通常のファイル操作で使われる関数が含まれますが、標準 C 関数と違い、エラーチェック機能がある (エラーが発生した場合、 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> 機能を使ってメッセージがログ出力されます) ほか、デストラクタで自動的にファイルがクローズされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It contains all the usual functions to work with files (opening/closing, reading/writing, seeking, and so on) but compared with using standard C functions, has error checking (in case of an error a message is logged using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> facilities) and closes the file automatically in the destructor which may be quite convenient.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T073503Z">
        <seg>このクラスには (オープン/クローズ、読み書き、ファイルシークといった) 通常のファイル操作で使われる関数が含まれますが、標準 C 関数と違い、エラーチェック機能がある (エラーが発生した場合、 <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> 機能を使ってメッセージがログ出力されます) ほか、デストラクタで自動的にファイルがクローズされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It could be a useful technique for on-line tutorials, too, where you take a user through a serious of steps and don't want them to diverge from the lesson.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T065237Z">
        <seg>これはオンラインチュートリアルでも有用なテクニックです。レッスンから外れることなく、ユーザに一連のステップを実行させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It doesn't matter where it appears but it's customary to put it at the end because the macro changes the access type internally so it's safest if nothing follows it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015252Z">
        <seg>どこに挿入しても構いませんが、慣習的にクラス宣言の最後に配置します。これはこのマクロがアクセス制御を内部的に変更してしまうからで、宣言の後ろに何もなければ一番安全だからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It focuses on handling charsets related problems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T011704Z">
        <seg>文字コードに関連した問題について取り組む場合には。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It involves editing the .po file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001222Z">
        <seg>これは .po ファイルを編集することで行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is 4 bytes under Unix systems, corresponding to the tradition of using UTF-32, but only 2 bytes under Windows which is required by compatibility with the OS which uses UTF-16.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T034200Z">
        <seg>Unix システムでは UTF-32 を使用してきた慣習にあわせて 4 バイトですが、Windows では UTF-16 を使用する OS との互換性のため、2 バイトとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is also possible to propagate the event only a limited number of times and not until it is processed (or a top level parent window is reached).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T155108Z">
        <seg>イベントの伝播回数を制限することも可能ですし、処理されるまで (もしくはトップレベルの親ウィンドウに到達するまで) 伝播させることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is based upon the idea of individual subwindows reporting their minimal required size and their ability to get stretched if the size of the parent window has changed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T140748Z">
        <seg>このアルゴリズムは、必要最小限のサイズを通知し、親ウィンドウのサイズが変化した場合にそれにあわせてサイズを変更することのできる、個別のサブウィンドウという考えに基づいています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is especially well suited for working with configuration files and program source files.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T064917Z">
        <seg>このクラスは設定ファイルやソースファイルを扱う場合に特に適しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is interpreted as a weight factor, i.e. it can be zero, indicating that the window may not be resized at all, or above zero.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T160524Z">
        <seg>これは重み係数として解釈されます。つまり、値を 0 (この場合、ウィンドウはまったくリサイズされません) か、0 より大きい値にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is the unique feature of a box sizer, that it can grow in both directions (height and width) but can distribute its growth in the main direction (horizontal for a row) <bpt i="0" x="0">&lt;e0&gt;</bpt>unevenly<ept i="0">&lt;/e0&gt;</ept> among its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141834Z">
        <seg>ボックスサイザーに固有の機能として、両方 (高さと幅) の方向に伸長させることができる一方で、主となる方向 (行に対しては水平方向) のサイズ変更を子コントロールに対して <bpt i="0" x="0">&lt;e0&gt;</bpt>不規則に<ept i="0">&lt;/e0&gt;</ept> 分配できる点が挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is the unique feature of a box sizer, that it can grow in both directions (height and width) but can distribute its growth in the main direction (horizontal for a row) <bpt i="0" x="0">&lt;i0&gt;</bpt>unevenly<ept i="0">&lt;/i0&gt;</ept> among its children.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T130514Z">
        <seg>ボックスサイザーに固有の機能として、両方 (高さと幅) の方向に伸長させることができる一方で、主となる方向 (行に対しては水平方向) のサイズ変更を子コントロールに対して <bpt i="0" x="0">&lt;i0&gt;</bpt>不規則に<ept i="0">&lt;/i0&gt;</ept> 分配できる点が挙げられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is used internally only and must not be called by the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150520Z">
        <seg>この関数は内部でのみ使用されるもので、ユーザが呼んではいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It logs the specified message text as well as the last system error code (<bpt i="1" x="1">&lt;e1&gt;</bpt>errno<ept i="1">&lt;/e1&gt;</ept> or Windows' <bpt i="2" x="2">&lt;e2&gt;</bpt>GetLastError()<ept i="2">&lt;/e2&gt;</ept> depending on the platform) and the corresponding error message.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091010Z">
        <seg>この関数は指定したメッセージとあわせて、最後のシステムエラーコード  (プラットフォームに応じて <bpt i="1" x="1">&lt;e1&gt;</bpt>errno<ept i="1">&lt;/e1&gt;</ept> または Windows の <bpt i="2" x="2">&lt;e2&gt;</bpt>::GetLastError()<ept i="2">&lt;/e2&gt;</ept> ) とそれに対応するエラーメッセージを出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It logs the specified message text as well as the last system error code (<bpt i="1" x="1">&lt;i1&gt;</bpt>errno<ept i="1">&lt;/i1&gt;</ept> or <bpt i="2" x="2">&lt;i2&gt;</bpt>::GetLastError()<ept i="2">&lt;/i2&gt;</ept> depending on the platform) and the corresponding error message.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011457Z">
        <seg>この関数は指定したメッセージとあわせて、最後のシステムエラーコード  (プラットフォームに応じて <bpt i="1" x="1">&lt;i1&gt;</bpt>errno<ept i="1">&lt;/i1&gt;</ept> または <bpt i="2" x="2">&lt;i2&gt;</bpt>::GetLastError()<ept i="2">&lt;/i2&gt;</ept> ) とそれに対応するエラーメッセージを出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be noted that wxWidgets' event processing system implements something close to virtual methods in normal C++ in spirit: both of these mechanisms allow you to alter the behaviour of the base class by defining the event handling functions in the derived classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T122712Z">
        <seg>wxWidgets の行うイベント処理の仕組みは通常の C++ の仮想関数にとても近いことに着目してください: 両方とも、継承クラスでイベント処理関数を定義することで基底クラスの振る舞いを置き換えることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be noted that wxWidgets' event processing system implements something very close to virtual methods in normal C++, i.e. it is possible to alter the behaviour of a class by overriding its event handling functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T033204Z">
        <seg>wxWidgets の行うイベント処理の仕組みは通常の C++ の仮想関数にとても近いことに着目してください。つまり、イベント処理関数をオーバーライドすることでクラスの振る舞いを変更できるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It may be used to enumerate all files, only files satisfying the given template mask or only non-hidden files.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T065828Z">
        <seg>このクラスを使って、すべてのファイル、特定のパターンに一致するファイル、隠しファイル以外のファイルを列挙することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It only does anything at all in the debug mode (when the preprocessor symbol <bpt i="2" x="2">&lt;c2&gt;</bpt>__WXDEBUG__<ept i="2">&lt;/c2&gt;</ept> is defined) and expands to nothing in release mode (otherwise).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091213Z">
        <seg>デバッグモードの場合 (プリプロセッサシンボル <bpt i="2" x="2">&lt;c2&gt;</bpt>__WXDEBUG__<ept i="2">&lt;/c2&gt;</ept> が定義されている場合) のみ処理を行い、リリースモードの場合 (それ以外の場合) では空文字列に展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It only does anything at all in the debug mode (when the preprocessor symbol __WXDEBUG__ is defined) and expands to nothing in release mode (otherwise).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T011829Z">
        <seg>デバッグモードの場合 (プリプロセッサシンボル __WXDEBUG__ が定義されている場合) のみ処理を行い、リリースモードの場合 (それ以外の場合) では空文字列に展開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It will also succeed if the current encoding is UTF-8 as all Unicode strings are representable in this encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T135725Z">
        <seg>また、Unicode 文字列はすべて UTF-8 で表現することが可能なため、現在のエンコーディングが UTF-8 である場合も常に成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Just let us state once again the rules:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T140900Z">
        <seg>もう一度だけルールを述べさせてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Last, note that there are also two simple global wrapper functions associated to the two <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler<ept i="2">&lt;/a2&gt;</ept> mentioned functions: <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPostEvent()<ept i="3">&lt;/a3&gt;</ept> and <bpt i="4" x="4">&lt;a4&gt;</bpt>wxQueueEvent()<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145412Z">
        <seg>最後に、前述の <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler<ept i="2">&lt;/a2&gt;</ept> の関数に関連する、ふたつのグローバルラッパー関数があります: それは <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPostEvent()<ept i="3">&lt;/a3&gt;</ept> と <bpt i="4" x="4">&lt;a4&gt;</bpt>wxQueueEvent()<ept i="4">&lt;/a4&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let us now look at more examples of how to use different event handlers using the two overloads of Bind() function: first one for the object methods and the other one for arbitrary functors (callable objects, including simple functions):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060031Z">
        <seg>Bind() のふたつのオーバーロードを用いて、異なるイベントハンドラを使用する例を見てみましょう: 最初のオーバーロードはメンバ関数用で、もう一方は任意のファンクタ (単純な関数を含む、呼び出し可能なオブジェクト) 用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let us now look at the details of this definition: the first line means that we are defining the event table for MyFrame class and that its base class is <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFrame<ept i="0">&lt;/a0&gt;</ept>, so events not processed by MyFrame will, by default, be handled by <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023409Z">
        <seg>この定義を詳しく見ていきましょう: 最初の行は MyFrame クラスのイベントテーブルを定義しようとしており、基底クラスが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxFrame<ept i="0">&lt;/a0&gt;</ept> であることを意味しています。そのため、デフォルトでは MyFrame で処理されなかったイベントは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> で処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let us start by looking at the syntax: the first obvious difference is that you need not use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDECLARE_EVENT_TABLE()<ept i="0">&lt;/a0&gt;</ept> nor <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBEGIN_EVENT_TABLE()<ept i="1">&lt;/a1&gt;</ept> and the associated macros.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T035836Z">
        <seg>構文を見ることから始めましょう: 最初の明らかな違いは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDECLARE_EVENT_TABLE()<ept i="0">&lt;/a0&gt;</ept> や <bpt i="1" x="1">&lt;a1&gt;</bpt>wxBEGIN_EVENT_TABLE()<ept i="1">&lt;/a1&gt;</ept>、およびそれらに関連するマクロを使用する必要がない点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's look at them in order.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150957Z">
        <seg>それではこれらを順番に見ていきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's take a quite simple but common case of a file error: suppose that you're writing your data file on disk and there is not enough space.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T020143Z">
        <seg>非常に単純で、よくあるファイルエラーの場合を考えてみましょう: データをディスク上のファイルに書き込もうとして充分な空き容量がなかったときを想像してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Like with all the other GUI frameworks, the control of flow in wxWidgets applications is event-based: the program normally performs most of its actions in response to the events generated by the user.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T154236Z">
        <seg>他のすべての GUI フレームワークのように、wxWidgets アプリケーションはイベントベースで処理の制御を行います: 一般的に、プログラムの処理の大半はユーザの生成するイベントに応じて行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Like wxLogError(), but also terminates the program with the exit code 3.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131253Z">
        <seg>wxLogError() と似ていますが、リターンコード 3 でプログラムを終了させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>List of wxWidgets events</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012733Z">
        <seg>wxWidgets のイベント一覧</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Literal strings (i.e. <bpt i="0" x="0">&lt;t0&gt;</bpt>"Hello, world!"<ept i="0">&lt;/t0&gt;</ept> or <bpt i="1" x="1">&lt;t1&gt;</bpt>'*'<ept i="1">&lt;/t1&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T165612Z">
        <seg>リテラル文字列 (すなわち <bpt i="0" x="0">&lt;t0&gt;</bpt>"Hello, world!"<ept i="0">&lt;/t0&gt;</ept> や <bpt i="1" x="1">&lt;t1&gt;</bpt>'*'<ept i="1">&lt;/t1&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Log Messages Selection</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131034Z">
        <seg>ログメッセージの選択</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Log Targets</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131038Z">
        <seg>ログターゲット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Log a message at wxLOG_Trace log level (see wxLogLevelValues enum).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091400Z">
        <seg>wxLOG_Trace ログレベル (wxLogLevelValues enum 参照) のメッセージを記録します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logging Customization</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131059Z">
        <seg>ロギングのカスタマイズ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logging in Multi-Threaded Applications</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131052Z">
        <seg>マルチスレッドアプリケーションでのロギング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Logo</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004612Z">
        <seg>Logo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Luckily, there is another way - see the next section.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161547Z">
        <seg>幸運なことに、別の方法があります。次の章を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Macro to be used around all literal strings that should be translated.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040334Z">
        <seg>翻訳対象となるすべてのリテラル文字列に対して使用するマクロです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Macros listed by event class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080547Z">
        <seg>イベントクラスごとのマクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Main Page</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004626Z">
        <seg>メインページ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Message catalog resources category.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041139Z">
        <seg>メッセージカタログを表すリソースカテゴリ。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Messages logged by this function will appear in the statusbar of the frame or of the top level applic...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T085759Z">
        <seg>この関数でロギングされたメッセージはデフォルトでフレームまたはトップレベルウィンドウのステータスバーに表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Messages logged from threads other than the main one will be buffered until <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::Flush()<ept i="0">&lt;/a0&gt;</ept> is called in the main thread (which usually happens during idle time, i.e. after processing all pending events) and will be really output only then.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T115355Z">
        <seg>メインスレッド以外のスレッドで記録されたメッセージはメインスレッドで <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::Flush()<ept i="0">&lt;/a0&gt;</ept> が呼ばれるまで (通常はアイドル時、つまり、未処理のイベントがすべて処理された後に呼ばれます) バッファリングされ、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::Flush()<ept i="0">&lt;/a0&gt;</ept> が呼ばれたときに初めて実際に出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Miscellaneous Notes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153449Z">
        <seg>雑多な覚書</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More details about Unicode may be found at <bpt i="0" x="0">&lt;a0&gt;</bpt>http://www.unicode.org/.<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092847Z">
        <seg>Unicode についての詳細は <bpt i="0" x="0">&lt;a0&gt;</bpt>http://www.unicode.org/<ept i="0">&lt;/a0&gt;</ept> にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More details about Unicode may be found at <bpt i="0" x="0">&lt;t0&gt;</bpt>www.unicode.org<ept i="0">&lt;/t0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151147Z">
        <seg>Unicode についての詳細は <bpt i="0" x="0">&lt;t0&gt;</bpt>www.unicode.org<ept i="0">&lt;/t0&gt;</ept> にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More precisely, a code unit is the minimal bit combination that can represent a unit of encoded text for processing or interchange.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T030510Z">
        <seg>より正確に言うと、コード単位とは、テキスト処理または交換のために符号化された文字を表現可能な最小のビットの組み合わせです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More precisely, as said above, all event classes <bpt i="0" x="0">&lt;b0&gt;</bpt>not<ept i="0">&lt;/b0&gt;</ept> deriving from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> (see the <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept> inheritance map) do <bpt i="3" x="3">&lt;b3&gt;</bpt>not<ept i="3">&lt;/b3&gt;</ept> propagate upward.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T150647Z">
        <seg>より正確に言うと、前に述べたように <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> を継承して  <bpt i="0" x="0">&lt;b0&gt;</bpt>いない<ept i="0">&lt;/b0&gt;</ept> イベントクラス (<bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept> の継承マップ参照) はどれも伝播 <bpt i="3" x="3">&lt;b3&gt;</bpt>しません<ept i="3">&lt;/b3&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>More rarely used, but still useful, is wc_str() function which always returns the Unicode string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T152201Z">
        <seg>めったに使われませんが、便利な関数として wc_str() 関数があり、これは常に Unicode 文字列を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, any application reading files which it didn't produce or receiving data from the network from other services should be ready to deal with Unicode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T012856Z">
        <seg>さらに、アプリケーション外で作成されたファイルを読み込んだり、ネットワーク経由で他のサービスからデータを読み込んだりするアプリケーションは Unicode を取り扱う準備をしておくべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, in the Windows NT/2000 case, even the program which uses only standard ASCII can profit from using Unicode because they will work more efficiently - there will be no need for the system to convert all strings the program uses to/from Unicode each time a system call is made.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T145642Z">
        <seg>さらに Windows NT/2000 の場合、標準的な ASCII モードのみを使用するプログラムであっても Unicode の恩恵を得ることができます。 なぜなら、システムコールを実行するたびにすべての文字列を Unicode に/から 変換する必要がないため、より効率的にプログラムが動作できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, the log level can be set separately for different log components.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T101356Z">
        <seg>さらに、異なるログコンポーネント間で別々にログレベルを設定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moreover, the second version of this function takes a trace mask as the first argument which allows to further restrict the amount of messages generated.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013138Z">
        <seg>くわえて、2 番目の形式では第一引数としてトレースマスクを指定できるため、生成されるメッセージの量をさらに制限することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Mostly used by wxWidgets itself, but might be handy for logging errors after system call (API functio...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T090915Z">
        <seg>主に wxWidgets 自身で使用されますが、システムコール (API 関数) の失敗後のエラーログを記録するのに便利かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Mouse event macros can handle either individual mouse events or all mouse events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081658Z">
        <seg>マウスイベントマクロは個別のマウスやすべてのマウスのイベントを処理することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyFrame(...) : <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFrame<ept i="4">&lt;/a4&gt;</ept>(...) { }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015441Z">
        <seg>MyFrame(...) : <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFrame<ept i="4">&lt;/a4&gt;</ept>(...) { }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyFrame::MyFrame(...)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045722Z">
        <seg>MyFrame::MyFrame(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyFrame::MyFrame(...)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040328Z">
        <seg>MyFrame::MyFrame(...)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyPlotEvent event(MY_PLOT_CLICKED, GetId(), <bpt i="59" x="59">&lt;a59&gt;</bpt>wxPoint<ept i="59">&lt;/a59&gt;</ept>(...));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T151355Z">
        <seg>MyPlotEvent event(MY_PLOT_CLICKED, GetId(), <bpt i="59" x="59">&lt;a59&gt;</bpt>wxPoint<ept i="59">&lt;/a59&gt;</ept>(...));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>MyPlotEvent(<bpt i="5" x="5">&lt;a5&gt;</bpt>wxEventType<ept i="5">&lt;/a5&gt;</ept> eventType, <bpt i="6" x="6">&lt;s6&gt;</bpt>int<ept i="6">&lt;/s6&gt;</ept> winid, <bpt i="7" x="7">&lt;s7&gt;</bpt>const<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>wxPoint<ept i="8">&lt;/a8&gt;</ept>&amp; pos)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150430Z">
        <seg>MyPlotEvent(<bpt i="5" x="5">&lt;a5&gt;</bpt>wxEventType<ept i="5">&lt;/a5&gt;</ept> eventType, <bpt i="6" x="6">&lt;s6&gt;</bpt>int<ept i="6">&lt;/s6&gt;</ept> winid, <bpt i="7" x="7">&lt;s7&gt;</bpt>const<ept i="7">&lt;/s7&gt;</ept> <bpt i="8" x="8">&lt;a8&gt;</bpt>wxPoint<ept i="8">&lt;/a8&gt;</ept>&amp; pos)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145433Z">
        <seg>Next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next the event table must be defined and, as with any definition, it must be placed in an implementation file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T021820Z">
        <seg>次に、イベントテーブルを定義する必要があります。これは必ずソースファイル内に配置しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>No event-free alternatives</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060936Z">
        <seg>イベントを送信しない代替方法を持たない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Normally, it is suppressed, but might be activated if the user wishes to know more details about the program progress (another, but possibly confusing name for the same function is <bpt i="1" x="1">&lt;b1&gt;</bpt> wxLogInfo<ept i="1">&lt;/b1&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010737Z">
        <seg>通常は出力されませんが、ユーザがプログラムの進捗状況についてより詳しく知りたい場合に有効化されるかもしれません。 (名前の紛らわしい同じ機能の関数として <bpt i="1" x="1">&lt;b1&gt;</bpt> wxLogInfo<ept i="1">&lt;/b1&gt;</ept> があります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Normally, it is suppressed, but might be activated if the user wishes to know more details about the program progress (another, but possibly confusing name for the same function is wxLogInfo).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131821Z">
        <seg>通常は出力されませんが、ユーザがプログラムの進捗状況についてより詳しく知りたい場合に有効化されるかもしれません。 (名前の紛らわしい同じ機能の関数として wxLogInfo があります)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Normally, the prefix is hard-coded and is the same as the value passed to <bpt i="0" x="0">&lt;c0&gt;</bpt>configure<ept i="0">&lt;/c0&gt;</ept> via the <bpt i="1" x="1">&lt;c1&gt;</bpt>--prefix<ept i="1">&lt;/c1&gt;</ept> switch when compiling the library (typically <bpt i="2" x="2">&lt;c2&gt;</bpt>/usr/local<ept i="2">&lt;/c2&gt;</ept> or <bpt i="3" x="3">&lt;c3&gt;</bpt>/usr<ept i="3">&lt;/c3&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T160031Z">
        <seg>通常、プレフィックスはハードコーディングされており、ライブラリのコンパイル時に <bpt i="1" x="1">&lt;c1&gt;</bpt>--prefix<ept i="1">&lt;/c1&gt;</ept> スイッチによって <bpt i="0" x="0">&lt;c0&gt;</bpt>configure<ept i="0">&lt;/c0&gt;</ept> へ渡される値と同じです。 (普通は <bpt i="2" x="2">&lt;c2&gt;</bpt>/usr/local<ept i="2">&lt;/c2&gt;</ept> か <bpt i="3" x="3">&lt;c3&gt;</bpt>/usr<ept i="3">&lt;/c3&gt;</ept> です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Normally, the prefix is hard-coded and is the same as the value passed to <bpt i="0" x="0">&lt;t0&gt;</bpt>configure<ept i="0">&lt;/t0&gt;</ept> via the <bpt i="1" x="1">&lt;t1&gt;</bpt>--prefix<ept i="1">&lt;/t1&gt;</ept> switch when compiling the library (typically <bpt i="2" x="2">&lt;t2&gt;</bpt>/usr/local<ept i="2">&lt;/t2&gt;</ept> or <bpt i="3" x="3">&lt;t3&gt;</bpt>/usr<ept i="3">&lt;/t3&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T160101Z">
        <seg>通常、プレフィックスはハードコーディングされており、ライブラリのコンパイル時に <bpt i="1" x="1">&lt;t1&gt;</bpt>--prefix<ept i="1">&lt;/t1&gt;</ept> スイッチによって <bpt i="0" x="0">&lt;t0&gt;</bpt>configure<ept i="0">&lt;/t0&gt;</ept> へ渡される値と同じです。 (普通は <bpt i="2" x="2">&lt;t2&gt;</bpt>/usr/local<ept i="2">&lt;/t2&gt;</ept> か <bpt i="3" x="3">&lt;t3&gt;</bpt>/usr<ept i="3">&lt;/t3&gt;</ept> です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Not so with Bind&lt;&gt;() which can be used to specify these handlers which will handle the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T043258Z">
        <seg>Bind&lt;&gt;() ではこれらのイベントハンドラを指定できるため、そのようなことはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notably, under Unix, the underlying graphical toolkit (e.g. GTK+) usually uses UTF-8 encoded strings and using the same representations for the strings in wxWidgets allows to avoid conversion from UTF-32 to UTF-8 and vice versa each time a string is shown in the UI or retrieved from it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T093954Z">
        <seg>特に、Unix のグラフィカルツールキット ( GTK+ など) は普通、UTF-8 文字列を使用しており、wxWidgets でも同じ符号化方式を使用することで、UI に文字列を表示するときや逆に文字列を取得するときに毎回 UTF-32 から UTF-8 に変換する必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> does not derive from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> and thus does not interfere with tab ordering and requires very few resources compared to a real window on screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141726Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> を継承していないため、タブ順に干渉することがなく、実際のウィンドウと比較するとほとんどリソースを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="0" x="0">&lt;c0&gt;</bpt>MyFrameHandler<ept i="0">&lt;/c0&gt;</ept> doesn't need to derive from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060310Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>MyFrameHandler<ept i="0">&lt;/c0&gt;</ept> は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> を継承している必要がないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i="0" x="0">&lt;c0&gt;</bpt>this<ept i="0">&lt;/c0&gt;</ept> pointer must be specified here.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040409Z">
        <seg>ここでは <bpt i="0" x="0">&lt;c0&gt;</bpt>this<ept i="0">&lt;/c0&gt;</ept> ポインタを指定する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that from the C/C++ programmer perspective the situation is further complicated by the fact that the standard type <bpt i="0" x="0">&lt;c0&gt;</bpt>wchar_t<ept i="0">&lt;/c0&gt;</ept> which is usually used to represent the Unicode ("wide") strings in C/C++ doesn't have the same size on all platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T033845Z">
        <seg>C/C++ プログラマの観点からすれば、状況はもっと複雑です。というのも、C/C++ で Unicode ( "ワイド" ) 文字列を表現するためによく使われる <bpt i="0" x="0">&lt;c0&gt;</bpt>wchar_t<ept i="0">&lt;/c0&gt;</ept> 型は、すべてのプラットフォームで同じサイズとは限らないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that only some controls can calculate their size (such as a checkbox) whereas others (such as a listbox) don't have any natural width or height and thus require an explicit size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T133515Z">
        <seg>(チェックボックスなどの) いくつかのコントロールのみが自身のサイズを計算できるのに対し、(リストボックスなどの) 他のコントロールはデフォルトの幅や高さを持たないため、明示的にサイズを指定する必要がある点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that starting from wxWidgets 2.3.3 such logic doesn't apply for the windows shown before the program enters the main loop: in other words, you can safely show a dialog from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxApp::OnInit<ept i="3">&lt;/a3&gt;</ept> and not be afraid that your application terminates when this dialog -- which is the last top level window for the moment -- is closed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T132741Z">
        <seg>wxWidgets 2.3.3 から、このロジックはメインループに入る前のまだ表示されていないウィンドウには適用されなくなりました。つまり、 <bpt i="3" x="3">&lt;a3&gt;</bpt>wxApp::OnInit<ept i="3">&lt;/a3&gt;</ept> の中で安全にダイアログを表示でき、ダイアログ (その時点における最後のトップレベルウィンドウ) を閉じるときにアプリケーションが終了することを心配しなくても良いということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that such logic doesn't apply for the windows shown before the program enters the main loop: in other words, you can safely show a dialog from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::OnInit<ept i="0">&lt;/a0&gt;</ept> and not be afraid that your application terminates when this dialog -- which is the last top level window for the moment -- is closed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T132719Z">
        <seg>このロジックはメインループに入る前のまだ表示されていないウィンドウには適用されないことに注意してください。つまり、 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::OnInit<ept i="0">&lt;/a0&gt;</ept> の中で安全にダイアログを表示でき、ダイアログ (その時点における最後のトップレベルウィンドウ) を閉じるときにアプリケーションが終了することを心配しなくても良いということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the new way of specifying flags to <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> is via <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizerFlags<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T153032Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> にフラグを指定する新しい方法として <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSizerFlags<ept i="1">&lt;/a1&gt;</ept> を使用する方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the new way of specifying flags to wxSizer is via <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizerFlags<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T153018Z">
        <seg>wxSizer にフラグを指定する新しい方法として <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizerFlags<ept i="0">&lt;/a0&gt;</ept> を使用する方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the program's command line arguments, represented by <bpt i="0" x="0">&lt;e0&gt;</bpt>argc<ept i="0">&lt;/e0&gt;</ept> and <bpt i="1" x="1">&lt;e1&gt;</bpt>argv<ept i="1">&lt;/e1&gt;</ept>, are available from within <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept> member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152536Z">
        <seg>プログラムのコマンドライン引数 (<bpt i="0" x="0">&lt;e0&gt;</bpt>argc<ept i="0">&lt;/e0&gt;</ept> と <bpt i="1" x="1">&lt;e1&gt;</bpt>argv<ept i="1">&lt;/e1&gt;</ept>) は <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp<ept i="2">&lt;/a2&gt;</ept> のメンバ関数から使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the program's command line arguments, represented by <bpt i="0" x="0">&lt;i0&gt;</bpt>argc<ept i="0">&lt;/i0&gt;</ept> and <bpt i="1" x="1">&lt;i1&gt;</bpt>argv<ept i="1">&lt;/i1&gt;</ept>, are available from within wxApp member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160500Z">
        <seg>プログラムのコマンドライン引数 (<bpt i="0" x="0">&lt;i0&gt;</bpt>argc<ept i="0">&lt;/i0&gt;</ept> と <bpt i="1" x="1">&lt;i1&gt;</bpt>argv<ept i="1">&lt;/i1&gt;</ept>) は wxApp のメンバ関数から使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that this macro doesn't need a window identifier, since normally you are only interested in the current window's size events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024247Z">
        <seg>このマクロはウィンドウ識別子を必要としません。なぜなら、通常は現在のウィンドウのリサイズイベントにのみ関心があるはずだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that this macro may occur in any section of the class (public, protected or private) but that it is probably better to insert it at the end, as shown, because this macro implicitly changes the access to protected which may be quite unexpected if there is anything following it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T082803Z">
        <seg>このマクロはクラスの任意の場所 (public、protected、private) に配置することができますが、おそらく例示のように最後に挿入する方が良いでしょう。なぜなら、このマクロは暗黙的にアクセス制御を protected に変更してしまうためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that this static box has to be created separately.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115446Z">
        <seg>このスタティックボックスは別々に作成する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that typically one character is assigned exactly one code point, but there are exceptions; the so-called <bpt i="0" x="0">&lt;e0&gt;</bpt>precomposed characters<ept i="0">&lt;/e0&gt;</ept> (see <bpt i="1" x="1">&lt;a1&gt;</bpt>http://en.wikipedia.org/wiki/Precomposed_character<ept i="1">&lt;/a1&gt;</ept>) or the <bpt i="2" x="2">&lt;e2&gt;</bpt>ligatures<ept i="2">&lt;/e2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T095359Z">
        <seg>通常、ひとつの文字は厳密にひとつのコードポイントに割り当てられますが、なかには例外もあります; いわゆる <bpt i="0" x="0">&lt;e0&gt;</bpt>合成済み文字<ept i="0">&lt;/e0&gt;</ept> (<bpt i="1" x="1">&lt;a1&gt;</bpt>http://en.wikipedia.org/wiki/Precomposed_character<ept i="1">&lt;/a1&gt;</ept> 参照) や <bpt i="2" x="2">&lt;e2&gt;</bpt>合字 (リガチャ)<ept i="2">&lt;/e2&gt;</ept> のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that under Windows, you must either run the program under debugger or use a 3rd party program such as DebugView (<bpt i="3" x="3">&lt;a3&gt;</bpt>http://www.microsoft.com/technet/sysinternals/Miscellaneous/DebugView.mspx<ept i="3">&lt;/a3&gt;</ept>) to actually see the debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091318Z">
        <seg>Windows でデバッグ出力を確認するためにはデバッガーを使用するか、DbgView (<bpt i="3" x="3">&lt;a3&gt;</bpt>http://www.microsoft.com/technet/sysinternals/Miscellaneous/DebugView.mspx<ept i="3">&lt;/a3&gt;</ept>) のようなサードパーティーのプログラムを使用する必要がある点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that wxSizer does not derive from wxWindow and thus does not interfere with tab ordering and requires very few resources compared to a real window on screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T123143Z">
        <seg>wxSizer は wxWindow を継承していないため、タブ順に干渉することがなく、実際のウィンドウと比較するとほとんどリソースを必要としません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that you can get the object that generated the event -- and that is not the same as the frame -- via <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::GetEventObject()<ept i="0">&lt;/a0&gt;</ept> method of <bpt i="1" x="1">&lt;c1&gt;</bpt>event<ept i="1">&lt;/c1&gt;</ept> argument passed to the event handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030222Z">
        <seg>イベントハンドラへ渡された <bpt i="1" x="1">&lt;c1&gt;</bpt>event<ept i="1">&lt;/c1&gt;</ept> 引数の <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::GetEventObject()<ept i="0">&lt;/a0&gt;</ept> 関数によって、イベントを生成したオブジェクトを取得できます。 (このオブジェクトはフレームではありません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that your application may wish to override ProcessEvent to redirect processing of events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T052859Z">
        <seg>ProcessEvent をオーバーライドすることでイベント処理をリダイレクトしたいと思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note the use of IMPLEMENT_APP(appClass), which allows wxWidgets to dynamically create an instance of the application object at the appropriate point in wxWidgets initialization.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161134Z">
        <seg>IMPLEMENT_APP(appClass) を使用している点に注意してください。これにより、wxWidgets の初期化時の適切なタイミングでアプリケーションオブジェクトのインスタンスが動的に作成されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141627Z">
        <seg>注:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note: This is supported only by wxBoxSizer and wxFlexGridSizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T150152Z">
        <seg>注: これは wxBoxSizer と wxFlexGridSizer でのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that Unicode support has changed radically in wxWidgets 3.0 and a lot of existing material pertaining to the previous versions of the library is not correct any more.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005230Z">
        <seg>wxWidgets 3.0 では Unicode の対応方法が大きく変わるため、以前のバージョンに関連する多くのことが、もはや正しくなくなることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that if you just need to modify (or suppress) the time stamp display, overriding FormatTime() is enough.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T123343Z">
        <seg>ただし、タイムスタンプの形式を変更 (または出力を抑制) したいだけの場合、FormatTime() をオーバーライドするだけで充分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that in the latter case you should be prepared for logging messages early during the program startup and also during program shutdown so you shouldn't rely on existence of the main application window, for example.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T121648Z">
        <seg>後者の場合、例えばプログラムの起動時に早くメッセージのロギングの準備をする必要があり、プログラムの終了時にはメインウィンドウの存在に依存してはいけない点に注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that the default GUI logger already only output the messages when it is flushed, so by default messages from the other threads will be shown more or less at the same moment as usual.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T115837Z">
        <seg>デフォルトの GUI ロガーはフラッシュされるときに初めてメッセージを出力するようにすでになっているため、他スレッドのメッセージは通常どおり、ほぼ同時に表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that the log level set explicitly for the transactions code overrides the log level of the parent component but that all other database code subcomponents inherit its setting by default and so won't generate any log messages at all.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111340Z">
        <seg>トランザクションコードで明示的に設定されたログレベルは親コンポーネントのログレベルを上書きしますが、データベースコードの他のサブコンポーネントはすべて親コンポーネントの値を継承するため、ログメッセージはまったく生成されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that the narrow strings used with wxWidgets are <bpt i="0" x="0">&lt;e0&gt;</bpt>always<ept i="0">&lt;/e0&gt;</ept> assumed to be in the current locale encoding, so writing</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T080919Z">
        <seg>wxWidgets で使用されるナロー文字列は <bpt i="0" x="0">&lt;e0&gt;</bpt>常に<ept i="0">&lt;/e0&gt;</ept> 現在のロケールで符号化されていると仮定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that the use of log trace masks is hardly necessary any longer in current wxWidgets version as the same effect can be achieved by using different log components for different log statements of any level.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T130536Z">
        <seg>現在の wxWidgets では、もはやトレースマスクを使用する必要性がほとんどないことに注意してください。なぜなら、異なるログ文に対して異なるログコンポーネントを使用することで同じ事を実現できるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that this is done before checking the static event table entries, so if both a dynamic and a static event handler match the same event, the static one is never going to be used unless <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::Skip()<ept i="0">&lt;/a0&gt;</ept> is called in the dynamic one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T140327Z">
        <seg>これは静的イベントハンドラをチェックする前に行われることに注意してください。そのため、動的イベントハンドラと静的イベントハンドラの両方がイベントに合致した場合、動的イベントハンドラで <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::Skip()<ept i="0">&lt;/a0&gt;</ept> を呼ばない限りは静的イベントハンドラが呼ばれることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that this means that any event handler defined in a base class will be executed at this step.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T141039Z">
        <seg>これは基底クラスで定義されたイベントハンドラがこのステップで実行されうることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that to avoid remembering the exact order in which the events are processed in the document-view frame, the simplest, and recommended, solution is to only handle the events at the view classes level, and not in the document or document manager classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T153536Z">
        <seg>ドキュメント/ビューフレームワークでの正確なイベント処理順を覚えなくてもいいようにする、もっとも単純で推奨する解決方法は、ビュークラスでのみイベントを処理し、ドキュメントやドキュメントマネージャでは処理しないことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that you may want to run the <bpt i="0" x="0">&lt;a0&gt;</bpt>Event Sample<ept i="0">&lt;/a0&gt;</ept> while reading this section and look at its code and the output when the button which can be used to test the event handlers execution order is clicked to understand it better.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T062902Z">
        <seg>おそらく、この章を読みながら <bpt i="0" x="0">&lt;a0&gt;</bpt>イベントサンプル<ept i="0">&lt;/a0&gt;</ept> を実行し、コードや (イベント処理順序を確認するために) ボタンをクリックした時の出力を見たくなると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Notice that you must mention a method you want to use for the event handling in the event table definition; just defining it in MyFrame class is <bpt i="0" x="0">&lt;e0&gt;</bpt>not<ept i="0">&lt;/e0&gt;</ept> enough.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022936Z">
        <seg>イベント処理に使用したいメンバ関数はイベントテーブル内に記載する必要があることに注意してください; MyFrame クラス内で定義するだけでは  <bpt i="0" x="0">&lt;e0&gt;</bpt>不十分<ept i="0">&lt;/e0&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now let us describe the semantic differences:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024714Z">
        <seg>さて、意味論的な違いについて説明しましょう:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, it would be nearly impossibly to write such programs if it had to be done this way (try to imagine the number of <bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef UNICODE<ept i="0">&lt;/t0&gt;</ept> an average program would have had!).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151456Z">
        <seg>もちろん、この方法でプログラムを書くのは不可能に近いでしょう。 (平均的なプログラムに含まれることになるであろう <bpt i="0" x="0">&lt;t0&gt;</bpt>#ifdef UNICODE<ept i="0">&lt;/t0&gt;</ept> の数を想像してみてください!) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, it's also possible to emulate this behaviour with the classic static (i.e., bound via event tables) handlers by using an internal flag indicating whether the handler is currently enabled and returning from it if it isn't, but using dynamically bind handlers requires less code and is also usually more clear.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T041540Z">
        <seg>もちろん、イベントハンドラの有効無効を表す内部フラグを用いることで、古典的な静的イベントハンドラ (つまり、イベントテーブル) でもこの振る舞いを模倣することは可能です。しかし、動的にバインドされるイベントハンドラを使用する方がコードも少なく、処理内容も明確になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, the latter only works if the string contains data representable in the current locale encoding.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T091448Z">
        <seg>もちろん、文字列が現在のロケールのエンコーディングで表現可能である場合のみ、後者の型で正しくアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Of course, the usual standard C functions don't work with <bpt i="0" x="0">&lt;t0&gt;</bpt>wchar_t<ept i="0">&lt;/t0&gt;</ept> strings, so another set of functions exists which do the same thing but accept <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t *<ept i="1">&lt;/t1&gt;</ept> instead of <bpt i="2" x="2">&lt;t2&gt;</bpt>char *<ept i="2">&lt;/t2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T154223Z">
        <seg>もちろん、普通の標準 C 関数は <bpt i="0" x="0">&lt;t0&gt;</bpt>wchar_t<ept i="0">&lt;/t0&gt;</ept> 文字列をうまく取り扱うことができません。そのため、<bpt i="2" x="2">&lt;t2&gt;</bpt>char *<ept i="2">&lt;/t2&gt;</ept> の代わりに <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t *<ept i="1">&lt;/t1&gt;</ept> を受け取る別の関数群が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, event tables are more succinct and centralize all event handler bindings in one place.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T021901Z">
        <seg>一方で、イベントテーブルの方が簡潔であり、すべてのイベントハンドラを一箇所に集約することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, event tables are still perfectly fine in simple situations where this extra flexibility is not needed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T031457Z">
        <seg>一方で、追加の柔軟性が必要とされないような単純な状況では、イベントテーブルもまだ充分に役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>On the other hand, you still need to know about the event tables if only because you are going to see them in many samples and examples.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023007Z">
        <seg>一方で、単に多くのサンプルでイベントテーブルを見かけるからという理由だけであっても、イベントテーブルについて学ぶ必要性は依然として残っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One is to define a entirely new event class (typically deriving from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent<ept i="0">&lt;/a0&gt;</ept> or <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042051Z">
        <seg>ひとつは完全に新しいイベントクラスを定義することです。 (通常は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent<ept i="0">&lt;/a0&gt;</ept> か <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> を継承します) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One of the unfortunate consequences of the possibility to pass <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> to <bpt i="1" x="1">&lt;c1&gt;</bpt>wxPrintf()<ept i="1">&lt;/c1&gt;</ept> without using <bpt i="2" x="2">&lt;c2&gt;</bpt>c_str()<ept i="2">&lt;/c2&gt;</ept> is that it is now impossible to pass the elements of unnamed enumerations to <bpt i="3" x="3">&lt;c3&gt;</bpt>wxPrintf()<ept i="3">&lt;/c3&gt;</ept> and other similar vararg functions, i.e.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130830Z">
        <seg><bpt i="2" x="2">&lt;c2&gt;</bpt>c_str()<ept i="2">&lt;/c2&gt;</ept> を使用せずに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> を <bpt i="1" x="1">&lt;c1&gt;</bpt>wxPrintf()<ept i="1">&lt;/c1&gt;</ept> へ渡せるようにした不幸な結果のひとつとして、無名 enum の要素を <bpt i="3" x="3">&lt;c3&gt;</bpt>wxPrintf()<ept i="3">&lt;/c3&gt;</ept> や類似の可変長関数へ渡せなくなりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One of them uses <bpt i="0" x="0">&lt;e0&gt;</bpt>event table<ept i="0">&lt;/e0&gt;</ept> macros and allows you to define the binding between events and their handlers only statically, i.e., during program compilation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T235640Z">
        <seg>ひとつは <bpt i="0" x="0">&lt;e0&gt;</bpt>イベントテーブル<ept i="0">&lt;/e0&gt;</ept> マクロを使用する方法で、静的 (コンパイル時) にのみ、イベントとそのハンドラをバインドすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One use of PushEventHandler is to temporarily or permanently change the behaviour of the GUI.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T063100Z">
        <seg>PushEventHandler の使用法のひとつは、一時的または永続的に GUI の振る舞いを変更することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Only one log target is <bpt i="2" x="2">&lt;e2&gt;</bpt>active<ept i="2">&lt;/e2&gt;</ept> at any moment, this is the one used by <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogXXX() functions<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111418Z">
        <seg>いつでも <bpt i="2" x="2">&lt;e2&gt;</bpt>有効な<ept i="2">&lt;/e2&gt;</ept> ログターゲットはひとつだけで、これが <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogXXX()<ept i="3">&lt;/a3&gt;</ept> 関数によって使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Only one log target is <bpt i="2" x="2">&lt;i2&gt;</bpt>active<ept i="2">&lt;/i2&gt;</ept> at any moment, this is the one used by <bpt i="3" x="3">&lt;i3&gt;</bpt>wxLogXXX()<ept i="3">&lt;/i3&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T022742Z">
        <seg>いつでも <bpt i="2" x="2">&lt;i2&gt;</bpt>有効な<ept i="2">&lt;/i2&gt;</ept> ログターゲットはひとつだけで、これが <bpt i="3" x="3">&lt;i3&gt;</bpt>wxLogXXX()<ept i="3">&lt;/i3&gt;</ept> 関数によって使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Only the binary files are needed during program execution.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T235357Z">
        <seg>プログラム実行時にはバイナリファイルだけが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Opens the file, returning true if successful.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T092037Z">
        <seg>ファイルをオープンします。オープンに成功したら true を返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Or, you can use identifiers below wxID_LOWEST.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080108Z">
        <seg>もしくは wxID_LOWEST 以下の識別子を使用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other Types of Sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141008Z">
        <seg>その他のサイザー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Other unexpected compilation errors may arise but they should happen even more rarely than the above-mentioned ones and the solution should usually be quite simple: just use the explicit methods of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxUniChar<ept i="0">&lt;/a0&gt;</ept> and wxCStrData classes instead of relying on their implicit conversions if the compiler can't choose among them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034514Z">
        <seg>他にも予期しないコンパイルエラーが発生することがありますが、発生頻度が上で挙げたものより少なく、解決方法も非常に単純です: コンパイラが <bpt i="0" x="0">&lt;a0&gt;</bpt>wxUniChar<ept i="0">&lt;/a0&gt;</ept> と wxCStrDatajust のどちらを使用すれば良いか判断できない場合には、暗黙的な変換に頼るのではなく、明示的にそれらの関数を使用するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise you can only use the global <bpt i="0" x="0">&lt;c0&gt;</bpt>wxTheApp<ept i="0">&lt;/c0&gt;</ept> pointer which is of type <bpt i="1" x="1">&lt;c1&gt;</bpt>wxApp*<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152720Z">
        <seg>そうしない場合、<bpt i="1" x="1">&lt;c1&gt;</bpt>wxApp *<ept i="1">&lt;/c1&gt;</ept> 型のグローバル変数である <bpt i="0" x="0">&lt;c0&gt;</bpt>wxTheApp<ept i="0">&lt;/c0&gt;</ept> ポインタを使用するしかありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Otherwise you can only use the global <bpt i="0" x="0">&lt;t0&gt;</bpt>wxTheApp<ept i="0">&lt;/t0&gt;</ept> pointer which is of type <bpt i="1" x="1">&lt;t1&gt;</bpt>wxApp *<ept i="1">&lt;/t1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161635Z">
        <seg>そうしない場合、<bpt i="1" x="1">&lt;t1&gt;</bpt>wxApp *<ept i="1">&lt;/t1&gt;</ept> 型のグローバル変数である <bpt i="0" x="0">&lt;t0&gt;</bpt>wxTheApp<ept i="0">&lt;/t0&gt;</ept> ポインタを使用するしかありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Overridden wxEventFilter method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T065638Z">
        <seg>wxEventFilter をオーバーライドした関数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Override this member function for any processing which needs to be done as the application is about t...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124236Z">
        <seg>アプリケーションの終了時に処理を行なう必要がある場合にこのメンバ関数をオーバーライドしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Performance Implications of Using UTF-8</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T141437Z">
        <seg>UTF-8 を使用することによる性能への影響</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Planes are numbered from 0 to 16, where the first one is the <bpt i="2" x="2">&lt;e2&gt;</bpt>BMP<ept i="2">&lt;/e2&gt;</ept>, or Basic Multilingual Plane.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T024832Z">
        <seg>面は 0 から 16 までの番号が振られており、最初の面が <bpt i="2" x="2">&lt;e2&gt;</bpt>BMP<ept i="2">&lt;/e2&gt;</ept> (基本多言語面) です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please consult wxWidgets home page for the most up-to-date translations - and if you translate it into one of the languages not done yet, your translations would be gratefully accepted for inclusion into future versions of the library!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043125Z">
        <seg>最新の翻訳版は wxWidgets のホームページを参照してください。そして、あなたが wxWidgets をまだ翻訳されていない言語に翻訳した場合、私達はそれを将来のバージョンに含めることを喜んで承認するでしょう! </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please refer to these sections for details.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080604Z">
        <seg>詳細は各章を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please see <bpt i="0" x="0">&lt;a0&gt;</bpt>Dynamic Event Handling<ept i="0">&lt;/a0&gt;</ept> for the discussion of Bind&lt;&gt;().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T003033Z">
        <seg>Bind&lt;&gt;() についての議論は <bpt i="0" x="0">&lt;a0&gt;</bpt>動的イベント処理<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please see <bpt i="0" x="0">&lt;a0&gt;</bpt>Log Messages Selection<ept i="0">&lt;/a0&gt;</ept> for more information about the log components.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T130609Z">
        <seg>ログコンポーネントについての詳細は <bpt i="0" x="0">&lt;a0&gt;</bpt>ログメッセージの選択<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please see <bpt i="0" x="0">&lt;a0&gt;</bpt>Unicode-related Changes<ept i="0">&lt;/a0&gt;</ept> for the details of these changes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005256Z">
        <seg>変更の詳細は <bpt i="0" x="0">&lt;a0&gt;</bpt>Unicode に関連する変更<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please see its documentation for more details.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145900Z">
        <seg>詳細はドキュメントを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pluggable Event Handlers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T170712Z">
        <seg>動的イベントハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pluggable event handlers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061155Z">
        <seg>動的イベントハンドラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Post an event to be processed later.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T143811Z">
        <seg>あとで処理されるイベントを送信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Potential Unicode Pitfalls</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005632Z">
        <seg>Unicode の潜在的な落とし穴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Preferred:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124733Z">
        <seg>推奨:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Previous</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145431Z">
        <seg>Previous</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Previous versions of wxWidgets used to rely on the creation of a global application object, but this is no longer recommended, because required global initialization may not have been performed at application object construction time.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T132359Z">
        <seg>以前の wxWidgets ではグルーバルなアプリケーションオブジェクトを作成していましたが、もはやこれは非推奨です。なぜなら、期待したグローバルオブジェクトの初期化がアプリケーションオブジェクトの構築時に行われない可能性があるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>ProcessWindowEvent(event);
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150209Z">
        <seg>ProcessWindowEvent(event);
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Processes an event, searching event tables and calling zero or more suitable event handler function(s...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T063844Z">
        <seg>イベントテーブルを検索し、0 個以上の適切なイベントハンドラ関数を呼び出してイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Programming with wxBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T154127Z">
        <seg>wxBoxSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Programming with wxFlexGridSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114257Z">
        <seg>wxFlexGridSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Programming with wxGridSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114018Z">
        <seg>wxGridSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Programming with wxStaticBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115129Z">
        <seg>wxStaticBoxSizer を用いたプログラミング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pushes this event handler onto the event stack for the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151849Z">
        <seg>このイベントハンドラをウィンドウのイベントスタック上に追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Putting the same line in a child event table will crash during run-time because the MyFrame method will be called on a wrong object -- it's easy to convince oneself that the only object that can be used here is the pointer to the child, as wxWidgets has nothing else.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030015Z">
        <seg>同じ内容を子イベントテーブルへ配置した場合、実行時にクラッシュするでしょう。なぜなら、異なる型のオブジェクトに対して MyFrame メンバ関数を呼びだそうとするためです。ここでは子コントロールのポインタしか使用できないからだということは簡単に分かってもらえると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Queue an event for processing on the given object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T144350Z">
        <seg>特定のオブジェクトで処理するためにイベントをキューへ追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Queue event for a later processing.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T143854Z">
        <seg>あとで処理するためにイベントをキューに追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Read it if you want to know more about how to write programs able to work with characters from languages other than English.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155422Z">
        <seg>英語以外の言語で使用される文字を扱うプログラムを書く方法について、より詳しく知りたい場合はこの章を読んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Really last point is the consequence of the previous one: because of increased flexibility of Bind(), it is also safer as it is impossible to accidentally use a method of another class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030253Z">
        <seg>最後のポイントは前述のポイントの帰結です: Bind() の柔軟性が向上したため、うっかり他クラスのメンバ関数を使用してしまうことが不可能になり、安全性も向上しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Related classes: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153247Z">
        <seg>関連クラス: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvent<ept i="2">&lt;/a2&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Related Pages</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004632Z">
        <seg>関連ページ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Replaces the text starting at the first position up to (but not including) the character at the last ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160617Z">
        <seg>最初の位置から最後の位置まで (ただし、含みません) のテキストを置き換えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Return the localized resources directory containing the resource files of the specified category for ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041010Z">
        <seg>所定の言語について、指定されたカテゴリのリソースファイルが含まれるディレクトリを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a copy of the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150413Z">
        <seg>イベントのコピーを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns a lightweight intermediate class which is in turn implicitly convertible to both const char* ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123831Z">
        <seg>暗黙的に const char* や const wchar_t* へ変換可能な軽量の中間クラスを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns an object with string data that is implicitly convertible to char* pointer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T125351Z">
        <seg>暗黙的に char* ポインタへ変換可能な文字列データを持つオブジェクトを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the multibyte (C string) representation of the string using conv's wxMBConv::cWC2MB method an...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T160801Z">
        <seg>wxMBConv::cWC2MB 関数を使用して文字列をマルチバイト (C 形式) 表現方法に変換し、wxCharBuffer として返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the object (usually a window) associated with the event, if any.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045804Z">
        <seg>イベントに関連付けられているオブジェクト (通常はウィンドウです) がある場合、それを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Returns the orientation of the box sizer, either wxVERTICAL or wxHORIZONTAL.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T150753Z">
        <seg>ボックスサイザーの方向を返します。 wxVERTICAL か wxHORIZONTAL のいずれかの値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Same as utf8_str().</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T083030Z">
        <seg>utf8_str() と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Search</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004717Z">
        <seg>検索</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See <bpt i="0" x="0">&lt;a0&gt;</bpt>Standard event identifiers<ept i="0">&lt;/a0&gt;</ept> for the list of standard identifiers available.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T124650Z">
        <seg>使用可能な標準識別子のリストは <bpt i="0" x="0">&lt;a0&gt;</bpt>標準イベント識別子<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString Overview<ept i="5">&lt;/a5&gt;</ept> for more info.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035303Z">
        <seg>詳しくは <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString の概要<ept i="5">&lt;/a5&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145905Z">
        <seg>参照</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also <bpt i="0" x="0">&lt;a0&gt;</bpt>Writing non-English applications<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T011634Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>非英語アプリケーションの作成<ept i="0">&lt;/a0&gt;</ept> も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also <bpt i="0" x="0">&lt;a0&gt;</bpt>http://unicode.org/glossary/<ept i="0">&lt;/a0&gt;</ept> for the official definitions of the terms reported above.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035405Z">
        <seg>上で述べた用語の正式な定義は <bpt i="0" x="0">&lt;a0&gt;</bpt>http://unicode.org/glossary/<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also the <bpt i="0" x="0">&lt;a0&gt;</bpt>event sample<ept i="0">&lt;/a0&gt;</ept> for an example of code defining and working with the custom event types.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T154526Z">
        <seg>コードの書き方とカスタムイベント型の動作例として <bpt i="0" x="0">&lt;a0&gt;</bpt>イベントサンプル<ept i="0">&lt;/a0&gt;</ept> も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also the <bpt i="2" x="2">&lt;a2&gt;</bpt>Event Sample<ept i="2">&lt;/a2&gt;</ept> for a complete example of code defining and working with the custom event types.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155743Z">
        <seg>コードの書き方とカスタムイベント型の動作例として <bpt i="2" x="2">&lt;a2&gt;</bpt>イベントサンプル<ept i="2">&lt;/a2&gt;</ept> も参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also the GNU gettext documentation linked from <bpt i="0" x="0">&lt;t0&gt;</bpt>docs/html/index.htm<ept i="0">&lt;/t0&gt;</ept> in your wxWidgets distribution.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T002332Z">
        <seg>GNU gettext のドキュメントも参照してください。これは wxWidgets の配布物の中にある <bpt i="0" x="0">&lt;t0&gt;</bpt>docs/html/index.htm<ept i="0">&lt;/t0&gt;</ept> からリンクしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See also:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041459Z">
        <seg>参照:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See below for how you can do it.) In this case, the button's event table will be searched, then the parent panel's, then the frame's.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023925Z">
        <seg>マウスイベントで同じことを実現する方法は以下を参照してください) この場合、まずボタンのイベントテーブルが検索され、続いて、その親パネル、フレームの順に検索されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>See the <bpt i="1" x="1">&lt;a1&gt;</bpt>event sample<ept i="1">&lt;/a1&gt;</ept> for an example of doing it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T032908Z">
        <seg>これを行なっているサンプルとして <bpt i="1" x="1">&lt;a1&gt;</bpt>イベントサンプル<ept i="1">&lt;/a1&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SetSizer( topsizer );      // use the sizer for layout</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112903Z">
        <seg>SetSizer( topsizer );      // レイアウトにサイザーを使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SetSizerAndFit(topsizer); <bpt i="53" x="53">&lt;s53&gt;</bpt>// use the sizer for layout and set size and hints<ept i="53">&lt;/s53&gt;</ept>
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145645Z">
        <seg>SetSizerAndFit(topsizer); <bpt i="53" x="53">&lt;s53&gt;</bpt>// レイアウトにサイザーを使用し、サイズとヒントを設定する<ept i="53">&lt;/s53&gt;</ept>
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SetSizerAndFit(topsizer); <bpt i="59" x="59">&lt;s59&gt;</bpt>// use the sizer for layout and size window<ept i="59">&lt;/s59&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144924Z">
        <seg>SetSizerAndFit(topsizer); <bpt i="59" x="59">&lt;s59&gt;</bpt>// レイアウトにサイザーを使用して<ept i="59">&lt;/s59&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>SetTopWindow(the_frame);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161010Z">
        <seg>SetTopWindow(the_frame);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the event handler for this window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T170833Z">
        <seg>このウィンドウのイベントハンドラを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the log level for the given component.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T105021Z">
        <seg>指定されたコンポーネントのログレベルを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the new text control value.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160428Z">
        <seg>テキストコントロールの新しい値を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the pointer to the next handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T150800Z">
        <seg>次のイベントハンドラへのポインタを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the selection for the given page, returning the previous selection.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160105Z">
        <seg>指定されたページを選択し、以前選択していたページを返却します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the size of the window in pixels.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155326Z">
        <seg>ピクセル単位でウィンドウサイズを設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sets the specified log target as the active one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091549Z">
        <seg>指定されたログターゲットを有効なログターゲットとして設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Setting the appropriate locale in your program to use the strings for the given language: see <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T002055Z">
        <seg>与えられた言語の文字列を使用するように、プログラム内で適切なロケールを設定する: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Show a general purpose message dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082545Z">
        <seg>汎用的なメッセージダイアログを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Shows or hides the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141550Z">
        <seg>ウィンドウの表示非表示を切り替えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123350Z">
        <seg>同様に、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly, wxWX2WCbuf can be used for the return type of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::wc_str()<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171409Z">
        <seg>同様に、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxString::wc_str()<ept i="0">&lt;/a0&gt;</ept> の戻り値の型として wxWX2WCbuf を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Simple events such as menu commands are usually processed at the level of a top-level window containing the menu, so let's suppose that you need to handle some events in <bpt i="3" x="3">&lt;c3&gt;</bpt>MyFrame<ept i="3">&lt;/c3&gt;</ept> class deriving from <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFrame<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022747Z">
        <seg>メニューコマンドといった単純なイベントは普通、メニューを保持するトップレベルウィンドウで処理されます。そのため、いくつかのイベントは <bpt i="4" x="4">&lt;a4&gt;</bpt>wxFrame<ept i="4">&lt;/a4&gt;</ept> を継承した <bpt i="3" x="3">&lt;c3&gt;</bpt>MyFrame<ept i="3">&lt;/c3&gt;</ept> で処理する必要があるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since version 2.2.x of wxWidgets, each event type is identified by ID which is given to the event type <bpt i="0" x="0">&lt;i0&gt;</bpt>at runtime<ept i="0">&lt;/i0&gt;</ept> which makes it possible to add new event types to the library or application without risking ID clashes (two different event types mistakingly getting the same event ID).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T150704Z">
        <seg>wxWidgets 2.2.x から <bpt i="0" x="0">&lt;i0&gt;</bpt>実行時に<ept i="0">&lt;/i0&gt;</ept> 決定される ID を使用してイベントの型を識別します。これにより、ID の衝突を起こす (異なるふたつのイベント型が同じイベント ID を取得してしまう) ことなく、新しいイベント型をライブラリやアプリケーションに追加することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since wxWidgets 3.0 Unicode support is always enabled and while building the library without it is still possible, it is not recommended any longer and will cease to be supported in the near future.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035942Z">
        <seg>wxWidgets 3.0 からは Unicode が常に有効になります。Unicode を使用せずにライブラリをビルドすることはまだ可能ですが、もはや非推奨であり、近い将来、サポートされなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizer overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T110550Z">
        <seg>サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizers Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135006Z">
        <seg>サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizers, as represented by the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> class and its descendants in the wxWidgets class hierarchy, have become the method of choice to define the layout of controls in dialogs in wxWidgets because of their ability to create visually appealing dialogs independent of the platform, taking into account the differences in size and style of the individual controls.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140902Z">
        <seg>wxWidgets のクラス階層における <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer<ept i="0">&lt;/a0&gt;</ept> クラスと、その子孫クラスによって代表されるサイザーは、wxWidgets においてダイアログ内のコントロールのレイアウトを決定するための選択法になりました。なぜなら、サイザーによって、各コントロールのサイズやスタイルの違いを考慮しつつ、プラットフォームに依存しない、視覚的に魅力的なダイアログを作ることができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sizers, as represented by the wxSizer class and its descendants in the wxWidgets class hierarchy, have become the method of choice to define the layout of controls in dialogs in wxWidgets because of their ability to create visually appealing dialogs independent of the platform, taking into account the differences in size and style of the individual controls.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T112812Z">
        <seg>wxWidgets のクラス階層における wxSizer クラスと、その子孫クラスによって代表されるサイザーは、wxWidgets においてダイアログ内のコントロールのレイアウトを決定するための選択法になりました。なぜなら、サイザーによって、各コントロールのサイズやスタイルの違いを考慮しつつ、プラットフォームに依存しない、視覚的に魅力的なダイアログを作ることができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So before you make the choice between static event tables and dynamically connecting the event handlers, let us discuss these two ways in more detail.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022437Z">
        <seg>そのため、イベントテーブルと動的イベントハンドラのいずれかを選択する前に、それぞれの方法についてより詳しく議論しておきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So even if the application has derived new classes to customize behaviour, your utility can indulge in a spot of body-snatching.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041724Z">
        <seg>そのため、アプリケーションの振る舞いをカスタマイズするために新しいクラスを継承していたとしても、あなたのユーティリティから自由に振る舞いを変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So the existing code needs to be reviewed when upgrading to wxWidgets 3.0 and the new code should be used with this in mind and ideally avoiding implicit conversions to <bpt i="3" x="3">&lt;c3&gt;</bpt>char*<ept i="3">&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T141338Z">
        <seg>そのため、wxWidgets 3.0 にアップグレードするときは既存のコードを見直す必要があるとともに、新しいコードではこのことを意識しつつ、理想的には <bpt i="3" x="3">&lt;c3&gt;</bpt>char*<ept i="3">&lt;/c3&gt;</ept> への暗黙的な変換を避けるようにするべきです。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So you need to be able to convert the data to various representations and the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> methods <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::ToAscii()<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::ToUTF8()<ept i="2">&lt;/a2&gt;</ept> (or its synonym <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::utf8_str()<ept i="3">&lt;/a3&gt;</ept>), <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::mb_str()<ept i="4">&lt;/a4&gt;</ept>, <bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::c_str()<ept i="5">&lt;/a5&gt;</ept> and <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::wc_str()<ept i="6">&lt;/a6&gt;</ept> can be used for this.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T160441Z">
        <seg>そのため、データを様々な表現方法へ変換できる必要がありますが、そのための <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の関数として <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::ToAscii()<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::ToUTF8()<ept i="2">&lt;/a2&gt;</ept> (またはそのシノニムの <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString::utf8_str()<ept i="3">&lt;/a3&gt;</ept>)、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::mb_str()<ept i="4">&lt;/a4&gt;</ept>、<bpt i="5" x="5">&lt;a5&gt;</bpt>wxString::c_str()<ept i="5">&lt;/a5&gt;</ept>、<bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::wc_str()<ept i="6">&lt;/a6&gt;</ept> を使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some compilers (notably g++) warn about this but even if they don't, this</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124635Z">
        <seg>いくつかのコンパイラ (特に g++) では警告が出ますし、仮に警告が出ないとしても</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some controls can calculate their height, but not their width (e.g. a single line text control):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T133610Z">
        <seg>(単一行テキストコントロールなど) いくつかのコントロールでは自身の高さを計算できても、幅を計算することができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some device contexts are created temporarily in order to draw on a window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140825Z">
        <seg>いくつかのデバイスコンテキストはウィンドウへの描画のために一時的に作成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some of advantages in using wxWidgets log functions are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013939Z">
        <seg>wxWidgets のログ関数を使用するいくつかの利点は以下の通りです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Some of wxLog implementations, most notably the standard wxLogGui class, buffer the messages (for exa...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114946Z">
        <seg>いくつかの wxLog の実装、特に標準の wxLogGui クラスではメッセージを (例えば無数のメッセージダイアログが次々と表示されるのを防止するために) バッファリングします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes it is also necessary to go from ANSI strings to wxStrings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144136Z">
        <seg>時々、ANSI 文字列を wxString に変換する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sorry, this topic has yet to be written.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004446Z">
        <seg>このトピックはまだ書かれていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Special preprocessor tokens (<bpt i="0" x="0">&lt;t0&gt;</bpt>__FILE__<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>__DATE__<ept i="1">&lt;/t1&gt;</ept> and <bpt i="2" x="2">&lt;t2&gt;</bpt>__TIME__<ept i="2">&lt;/t2&gt;</ept>)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150858Z">
        <seg>特別なプリプロセッサトークン (<bpt i="0" x="0">&lt;t0&gt;</bpt>__FILE__<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>__DATE__<ept i="1">&lt;/t1&gt;</ept>, <bpt i="2" x="2">&lt;t2&gt;</bpt>__TIME__<ept i="2">&lt;/t2&gt;</ept>)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Specifies that log messages with level greater (numerically) than logLevel should be ignored and not ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T100124Z">
        <seg>(数値的に) logLevel より大きいログレベルを持つメッセージを無視し、有効なログターゲットに送信されないようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Standard button and menu IDs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142809Z">
        <seg>標準ボタンとメニュー ID。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Starting with wxWidgets 2.9.1, logging functions can be safely called from any thread.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T115025Z">
        <seg>wxWidgets 2.9.1 から、どのスレッドからでも安全にロギング関数を呼べるようになりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Starts editing the label of the given item.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160324Z">
        <seg>指定された項目のラベル編集を開始します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>String functions (<bpt i="0" x="0">&lt;t0&gt;</bpt>strlen()<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>strcpy()<ept i="1">&lt;/t1&gt;</ept>, ...)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150738Z">
        <seg>文字列関数 (<bpt i="0" x="0">&lt;t0&gt;</bpt>strlen()<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>strcpy()<ept i="1">&lt;/t1&gt;</ept>, ...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Such items are sometimes referred to as the children of the sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T143436Z">
        <seg>時々、そのようなアイテムをサイザーの子と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Such objects are implicitly convertible to <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> and <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t<ept i="3">&lt;/c3&gt;</ept> pointers, respectively, and so the result of, for example, <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::ToUTF8()<ept i="4">&lt;/a4&gt;</ept> can always be passed directly to a function taking <bpt i="5" x="5">&lt;c5&gt;</bpt>const char*<ept i="5">&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035325Z">
        <seg>返却されたオブジェクトは暗黙的に <bpt i="2" x="2">&lt;c2&gt;</bpt>char<ept i="2">&lt;/c2&gt;</ept> ポインタや <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t<ept i="3">&lt;/c3&gt;</ept> ポインタへそれぞれ変換されます。そのため、例えば <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::ToUTF8()<ept i="4">&lt;/a4&gt;</ept> の戻り値を <bpt i="5" x="5">&lt;c5&gt;</bpt>const char*<ept i="5">&lt;/c5&gt;</ept> を受け取る関数へ常に渡すことができます。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>TODO: Probably deprecated, Bind() provides a better way to do this</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T170821Z">
        <seg>TODO: おそらく非推奨であり、Bind() がより良い方法を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Table of contents:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131027Z">
        <seg>目次:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Test if this event should be propagated or not, i.e.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T154413Z">
        <seg>イベントを伝播させる必要があるかどうかを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>UTF<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> or Unicode Transformation Formats are algorithms mapping the Unicode code points to code unit sequences.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T030604Z">
        <seg><bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>UTF<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> (Unicode Transformation Format) は Unicode コードポイントをコード単位の並びにマッピングするためのアルゴリズムです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;c0&gt;</bpt>EVT_BUTTON<ept i="0">&lt;/c0&gt;</ept> macro demonstrates that the originating event does not have to come from the window class implementing the event table -- if the event source is a button within a panel within a frame, this will still work, because event tables are searched up through the hierarchy of windows for the command events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T023717Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>EVT_BUTTON<ept i="0">&lt;/c0&gt;</ept> マクロはイベントの発生元がウィンドウクラスである必要がないことを表しています。イベントテーブルの検索はウィンドウ階層をたどりながら行われるため、イベントの発生元がフレーム内のパネルにあるボタンである場合でも動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i="0" x="0">&lt;e0&gt;</bpt>dialog<ept i="0">&lt;/e0&gt;</ept> sample illustrates this approach by defining a custom log target customizing the dialog used by <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogGui<ept i="1">&lt;/a1&gt;</ept> for the single messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T130128Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>ダイアログ<ept i="0">&lt;/e0&gt;</ept> サンプルでは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogGui<ept i="1">&lt;/a1&gt;</ept> でダイアログを使用するようにカスタマイズしたカスタムログターゲットを定義する例を解説しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The BMP contains characters for all modern languages, and a large number of special characters.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T024943Z">
        <seg>BMP にはすべての現代語の文字と、多くの特殊文字が含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_ACTIVATE and EVT_ACTIVATE_APP macros intercept activation and deactivation events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080731Z">
        <seg>EVT_ACTIVATE、EVT_ACTIVATE_APP マクロはアクティブ化、非アクティブ化イベントを捉えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_BUTTON macro demonstrates that the originating event does not have to come from the window class implementing the event table -- if the event source is a button within a panel within a frame, this will still work, because event tables are searched up through the hierarchy of windows for the command events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T092743Z">
        <seg>EVT_BUTTON マクロはイベントの発生元がウィンドウクラスである必要がないことを表しています。ウィンドウ階層をたどりながらイベントテーブルを検索するため、イベントの発生元がフレーム内のパネルにあるボタンである場合でも動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_CLOSE macro handles window closure called via <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081023Z">
        <seg>EVT_CLOSE マクロは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close<ept i="0">&lt;/a0&gt;</ept> によるウィンドウの終了を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_DROP_FILES macros handles file drop events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081141Z">
        <seg>EVT_DROP_FILES マクロはファイルドロップイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_ERASE_BACKGROUND macro is used to handle window erase requests.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081221Z">
        <seg>EVT_ERASE_BACKGROUND マクロはウィンドウの消去要求を処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_IDLE macro handle application idle events (to process background tasks, for example).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081435Z">
        <seg>EVT_IDLE マクロはアプリケーションのアイドルイベントを処理します。 (例えば、バックグラウンド処理などに使用します)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_INIT_DIALOG macro is used to handle dialog initialisation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081504Z">
        <seg>EVT_INIT_DIALOG マクロはダイアログの初期化イベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_MOVE macro is used to handle a window move.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081717Z">
        <seg>EVT_MOVE マクロはウィンドウの移動を処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_PAINT macro is used to handle window paint requests.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081734Z">
        <seg>EVT_PAINT マクロはウィンドウの描画要求を処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SET_CURSOR macro is used for special cursor processing.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081841Z">
        <seg>EVT_SET_CURSOR マクロは特殊なカーソル処理のために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SET_FOCUS and EVT_KILL_FOCUS macros are used to handle keyboard focus events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081249Z">
        <seg>EVT_SET_FOCUS、EVT_KILL_FOCUS マクロはキーボードフォーカスイベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SIZE macro doesn't need a window identifier, since normally you are only interested in the current window's size events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075824Z">
        <seg>EVT_SIZE マクロはウィンドウ識別子を必要としません。なぜなら、通常は現在のウィンドウのリサイズイベントにのみ関心があるはずだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SIZE macro is used to handle a window resize.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081858Z">
        <seg>EVT_SIZE マクロはウィンドウのりサイズを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SPLITTER_SASH_POS_CHANGED, EVT_SPLITTER_UNSPLIT and EVT_SPLITTER_DCLICK macros are used to handle the various splitter window events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082103Z">
        <seg>EVT_SPLITTER_SASH_POS_CHANGED、EVT_SPLITTER_UNSPLIT、EVT_SPLITTER_DCLICK マクロはさまざまなウィンドウ分割イベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_SYS_COLOUR_CHANGED macro is used to handle events informing the application that the user has changed the system colours (Windows only).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082225Z">
        <seg>EVT_SYS_COLOUR_CHANGED マクロはユーザによるシステムカラーの変更イベントを処理するために使用されます。 (Windows のみ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The EVT_UPDATE_UI macro is used to handle user interface update pseudo-events, which are generated to give the application the chance to update the visual state of menus, toolbars and controls.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082610Z">
        <seg>EVT_UPDATE_UI マクロはアプリケーションがメニュー、ツールバー、コントロールの見た目の状態を変更するための擬似イベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Idea Behind Sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T140939Z">
        <seg>サイザーの背後にある考え方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Unicode standard divides the space of all possible code points in <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>planes<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>; a plane is a range of 65,536 (1000016) contiguous Unicode code points.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T024646Z">
        <seg>Unicode 標準規格では取りうるすべてのコードポイントを <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>面<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> に分割しています; 面とは、連続する 65,536 (1000016) 個の Unicode コードポイントのことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The actual error might have been detected inside wxWidgets code (say, in <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFile::Write<ept i="1">&lt;/a1&gt;</ept>), so the calling function doesn't really know the exact reason of the failure, it only knows that the data file couldn't be written to the disk.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091833Z">
        <seg>実際のエラーは wxWidgets コード (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxFile::Write<ept i="1">&lt;/a1&gt;</ept>) 内で検知されるため、呼び出し元の関数では失敗の正確な原因を実際に知ることはできず、ディスクへの書き込みに失敗したことしか分かりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The actual error might have been detected inside wxWidgets code (say, in <bpt i="1" x="1">&lt;i1&gt;</bpt>wxFile::Write<ept i="1">&lt;/i1&gt;</ept>), so the calling function doesn't really know the exact reason of the failure, it only knows that the data file couldn't be written to the disk.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T021516Z">
        <seg>実際のエラーは wxWidgets コード (<bpt i="1" x="1">&lt;i1&gt;</bpt>wxFile::Write<ept i="1">&lt;/i1&gt;</ept>) 内で検知されるため、呼び出し元の関数では失敗の正確な原因を実際に知ることはできず、ディスクへの書き込みに失敗したことしか分かりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The alternative is to explicitly delete child frames in the top-level frame's <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent<ept i="0">&lt;/a0&gt;</ept> handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T160758Z">
        <seg>アプリケーションを終了する別の方法はトップレベルフレームの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCloseEvent<ept i="0">&lt;/a0&gt;</ept> イベントハンドラで明示的に子フレームを削除することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The application normally shuts down when the last of its top level windows is closed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161802Z">
        <seg>通常、アプリケーションは最後のトップレベルウィンドウが閉じられたときに終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The automatically generated identifiers are always negative and so will never conflict with the user-specified identifiers which must be always positive.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T075520Z">
        <seg>自動生成される識別子は常に負の値のため、必ず正の値でなければならないユーザ定義の識別子と衝突することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The basic idea behind a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> is that windows will most often be laid out in rather simple basic geometry, typically in a row or a column or several hierarchies of either.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T162347Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> の基本的な考え方は、ほとんどの場合ウィンドウは とても単純で基本的な配置、よくあるのは行や列、またはその階層内にレイアウトされるという考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The basic idea behind a box sizer is that windows will most often be laid out in rather simple basic ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135121Z">
        <seg>ボックスサイザーの基本的な考え方は、ほとんどの場合ウィンドウは とても単純で基本的な配置、よくあるのは行や列、またはその階層内にレイアウトされるという考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The basic idea behind a box sizer is that windows will most often be laid out in rather simple basic geometry, typically in a row or a column or several hierarchies of either.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145740Z">
        <seg>ボックスサイザーの基本的な考え方は、ほとんどの場合ウィンドウは とても単純で基本的な配置、よくあるのは行や列、またはその階層内にレイアウトされるという考えです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The child frame classes send the event directly to the associated view which still forwards it to its document object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T153151Z">
        <seg>子フレームクラスはイベントを関連するビューへ直接送信し、このビューがさらに関連するドキュメントへイベントを転送します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default is <bpt i="3" x="3">&lt;t3&gt;</bpt>640x480-16<ept i="3">&lt;/t3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155505Z">
        <seg>デフォルトは <bpt i="3" x="3">&lt;t3&gt;</bpt>640x480-16<ept i="3">&lt;/t3&gt;</ept> です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The default processing is to pop up a message box to inform the user about it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005459Z">
        <seg>デフォルトの処理ではメッセージボックスをポップアップして通知します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The details of event propagation up the window hierarchy are described in the next section.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T145337Z">
        <seg>ウィンドウ階層内におけるイベント伝播についての詳細は次の章で述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The device context is intended to represent a number of output devices in a generic way, with the same API being used throughout.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140810Z">
        <seg>デバイスコンテキストは汎用的な方法で、つまり同じ API を通して操作できる多くの出力デバイスを表現することを目的としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The documentation for specific event macros is organised by event class.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080526Z">
        <seg>このドキュメントではイベントマクロをイベントクラスごとに分類しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The easiest workaround is to give a name to the enum.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130921Z">
        <seg>もっとも簡単な回避方法としては enum に名前をつけることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The event base class</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055055Z">
        <seg>イベントの基底クラス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The event is passed to the next event handler, if any, in the event handler chain, i.e., the steps (1) to (4) are done for it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T141426Z">
        <seg>イベントハンドラの連鎖内において、次のイベントハンドラが存在する場合、次のイベントハンドラへイベントを引き渡します。つまり、そのイベントハンドラに対してステップ (1) から (4) を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The event table containing all the handlers defined using the event table macros in this class and its base classes is examined.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T032622Z">
        <seg>このクラスと基底クラスで (イベントテーブルマクロによって) 定義されたすべてのイベントハンドラを含むイベントテーブルを調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The event table tells wxWidgets how to map events to member functions and in our example it could look like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T021949Z">
        <seg>イベントテーブルはイベントとメンバ関数のマッピングを wxWidgets へ知らせるものであり、以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The events do propagate beyond the frames, however.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T033331Z">
        <seg>しかし、通常のイベントはフレームを超えて伝播します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first of them should be only used for the string containing 7-bit ASCII characters only, anything else will be replaced by some substitution character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161038Z">
        <seg>最初の関数は文字列に 7 ビット ASCII 文字のみが含まれる場合にだけ使用してください。ASCII 文字以外の文字はなんらかの置換文字に置き換えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first one is the most flexible and allows you to change the formatting of the messages, dynamically filter and redirect them and so on -- all log messages, except for those generated by <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogFatalError()<ept i="4">&lt;/a4&gt;</ept>, pass by this function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112123Z">
        <seg>最初の関数はもっとも柔軟で、メッセージ形式の変更、メッセージの動的なフィルタリングやリダイレクトなどを行なうことができます。<bpt i="4" x="4">&lt;a4&gt;</bpt>wxLogFatalError()<ept i="4">&lt;/a4&gt;</ept> で生成されたメッセージを除いて、すべてのメッセージがこの関数に引き渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first one may be overridden to do whatever you want but you have to distinguish between the different message types yourself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023745Z">
        <seg>最初の関数をオーバーライドすると何でもできますが、異なるメッセージ型を自分で区別する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The first two entries map menu commands to two different member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075626Z">
        <seg>最初の 2 つのエントリはメニューコマンドを異なる 2 つのメンバ関数にマッピングしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following describes the differences between these device contexts and when you should use them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140928Z">
        <seg>各デバイスコンテキストの違いと、それを使用するタイミングについて以下で説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following flags can be passed to this function:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115722Z">
        <seg>この関数には以下のフラグを指定できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sample shows a dialog with three buttons, the first one has a stretch factor of 1 and thus gets stretched, whereas the other two buttons have a stretch factor of zero and keep their initial width:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T151132Z">
        <seg>以下に 3 個のボタンを持つダイアログの例を示します。最初のボタンはストレッチ係数に 1 を指定しているため、サイズが伸長していますが、他のふたつのボタンはストレッチ係数が 0 のため、初期サイズを維持しています:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sample shows a listbox and three buttons in a horizontal box sizer; one button is centred, one is aligned at the top, one is aligned at the bottom:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T144852Z">
        <seg>以下に水平方向のボックスサイザー内にリストボックスと 3 個のボタンを配置した場合の例を示します; それぞれのボタンは中央寄せ、上寄せ、下寄せです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sample shows the same dialog as in the last sample, only the box sizer is a vertical box sizer now:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152037Z">
        <seg>以下の例は最後の例と同じダイアログですが、ボックスサイザーが垂直方向のボックスサイザーとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sample shows the same dialog as the one above, but using a flex grid sizer:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T154117Z">
        <seg>以下の例は上の例と同じダイアログですが、可変グリッドサイザーを使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following samples show dialogs with only one dialog item (a button) and a border of 0, 5, and 10 pixels around the button:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142728Z">
        <seg>以下の例では単一のコントロール (ボタン) を持つダイアログについて、ボタンのまわりのボーダーを 0、5、10 ピクセルに設定しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following sections briefly describe how to program with individual sizer classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T114908Z">
        <seg>続く章では個々のサイザークラスを用いてプログラムを書く方法について簡潔に説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The following standard identifiers are supplied.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041923Z">
        <seg>標準識別子には以下のものが用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The full class declaration might look like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015359Z">
        <seg>完全なクラス宣言は以下のようになります:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The functions below allow some limited customization of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> behaviour without writing a new log target class (which, aside from being a matter of several minutes, allows you to do anything you want).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132007Z">
        <seg>以下の関数は新しいログターゲットを作成することなく、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> の振る舞いを限定的に変更することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The functions to use for error messages, i.e.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131401Z">
        <seg>エラーメッセージ用の関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The gettext Manual: <bpt i="0" x="0">&lt;a0&gt;</bpt>http://www.gnu.org/software/gettext/manual/gettext.html<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T041513Z">
        <seg>gettext マニュアル: <bpt i="0" x="0">&lt;a0&gt;</bpt>http://www.gnu.org/software/gettext/manual/gettext.html<ept i="0">&lt;/a0&gt;</ept></seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The idea behind sizers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T123524Z">
        <seg>サイザーの背後にある考え方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The important conclusion is that if you use <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> instead of <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept>, avoid using C style strings and use <bpt i="2" x="2">&lt;t2&gt;</bpt>wxString<ept i="2">&lt;/t2&gt;</ept> instead and don't forget to enclose all string literals inside <bpt i="3" x="3">&lt;a3&gt;</bpt>wxT()<ept i="3">&lt;/a3&gt;</ept> macro, your program automatically becomes (almost) Unicode compliant!</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T140756Z">
        <seg>重要な結論としては、<bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> の代わりに <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> を使い、 C 形式の文字列ではなく <bpt i="2" x="2">&lt;t2&gt;</bpt>wxString<ept i="2">&lt;/t2&gt;</ept> を使い、すべてのリテラル文字列を <bpt i="3" x="3">&lt;a3&gt;</bpt>wxT()<ept i="3">&lt;/a3&gt;</ept> マクロで囲むのを忘れなければ、あなたのプログラムは自動的に (ほぼ) Unicode 準拠になるということです!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The interface provided by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> is the same independently of the format used internally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T093231Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxString<ept i="0">&lt;/a0&gt;</ept> の提供するインタフェースはその内部フォーマットによらず、同一です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The last method is the simplest one: you should override it if you simply want to redirect the log output elsewhere, without taking into account the level of the message.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T122658Z">
        <seg>最後の関数が一番単純です: メッセージのログレベルを考慮せず、単純にログ出力を他の場所へリダイレクトしたい場合はこの関数をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The layout algorithm used by sizers in wxWidgets is closely related to layout systems in other GUI toolkits, such as Java's AWT, the GTK toolkit or the Qt toolkit.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T122918Z">
        <seg>wxWidgets のサイザーで用いられているレイアウトアルゴリズムは Java の AWT や GTK ツールキット、 Qt ツールキットといった他の GUI ツールキットで用いられているものと密接に関わりがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The list of dynamically bound event handlers, i.e., those for which Bind&lt;&gt;() was called, is consulted.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T135819Z">
        <seg>動的イベントハンドラ (つまり、Bind&lt;&gt;() でバインドしたイベントハンドラ) の一覧を調べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The log targets can also be combined: for example you may wish to redirect the messages somewhere else (for example, to a log file) but also process them as normally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030443Z">
        <seg>ログターゲットは組み合わせて使用することもできます: 例えば、メッセージを他の場所 (例えばログファイルなど) にリダイレクトしつつ、通常通りの方法でも処理したいとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The log window frame has a menu allowing user to clear the log, close it completely or save all messages to file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025529Z">
        <seg>ログウィンドウフレームはメニューを持ち、ログの消去、終了、メッセージの保存を選択することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The logging facilities included in wxWidgets provide the base <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> class which defines the standard interface for a <bpt i="1" x="1">&lt;e1&gt;</bpt>log<ept i="1">&lt;/e1&gt;</ept> target as well as several standard implementations of it and a family of functions to use with them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131505Z">
        <seg>wxWidgets のロギング機能では <bpt i="1" x="1">&lt;e1&gt;</bpt>ログ<ept i="1">&lt;/e1&gt;</ept> ターゲットに対する標準的なインタフェースを定義する基底 <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> クラスや、いくつかのログクラスの標準的な実装とそれを使用する関数群を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The logging facilities included in wxWidgets provide the base <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLog<ept i="0">&lt;/i0&gt;</ept> class which defines the standard interface for a <bpt i="1" x="1">&lt;i1&gt;</bpt>log target<ept i="1">&lt;/i1&gt;</ept> as well as several standard implementations of it and a family of functions to use with them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T074728Z">
        <seg>wxWidgets のロギング機能では <bpt i="1" x="1">&lt;i1&gt;</bpt>ログターゲット<ept i="1">&lt;/i1&gt;</ept> に対する標準的なインタフェースを定義する基底 <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLog<ept i="0">&lt;/i0&gt;</ept> クラスや、いくつかのログクラスの標準的な実装とそれを使用する関数群を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next four lines define bindings of individual events to their handlers: the first two of them map menu commands from the items with the identifiers specified as the first macro parameter to two different member functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T023856Z">
        <seg>次の 4 行は個々のイベントにおけるイベントハンドラへのバインディングを定義しています: 最初のふたつはマクロの第 1 引数で指定された識別子を持つ項目のメニューコマンドを、ふたつの異なるメンバ関数にマッピングしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next section describes and shows what can be done with sizers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T114634Z">
        <seg>次の章ではサイザーを用いて何ができるのかを説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The next thing to do is to decide whether you need to define a custom event class for events of this type or if you can reuse an existing class, typically either <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent<ept i="0">&lt;/a0&gt;</ept> (which doesn't provide any extra information) or <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> (which contains several extra fields and also propagates upwards by default).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155658Z">
        <seg>次に行なうことは、このイベント型用のカスタムイベントクラスを定義する必要があるかどうか、もしくは既存のクラス、通常は (追加の情報を持たない) <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent<ept i="0">&lt;/a0&gt;</ept> か （いくつかの追加フィールドを持ち、デフォルトで伝播する) <bpt i="1" x="1">&lt;a1&gt;</bpt>wxCommandEvent<ept i="1">&lt;/a1&gt;</ept> のどちらかを再利用できるかどうかを決定することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The normal order of event table searching by ProcessEvent is as follows:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T023905Z">
        <seg>ProcessEvent によるイベントテーブルの検索は通常、以下の順番で行われます：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The normal order of event table searching by ProcessEvent() is as follows, with the event processing stopping as soon as a handler is found (unless the handler calls <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::Skip()<ept i="1">&lt;/a1&gt;</ept> in which case it doesn't count as having handled the event and the search continues):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T065623Z">
        <seg>通常、ProcessEvent() によるイベントテーブルの検索順は以下のように行われ、イベントハンドラが見つかると処理を終了します。 (ただし、イベントハンドラで <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::Skip()<ept i="1">&lt;/a1&gt;</ept> を呼ぶとイベントが処理されていないものとして扱われ、引き続き検索が行われます):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The normal usage of a log object (i.e. object of a class derived from <bpt i="4" x="4">&lt;a4&gt;</bpt>wxLog<ept i="4">&lt;/a4&gt;</ept>) is to install it as the active target with a call to <bpt i="5" x="5">&lt;e5&gt;</bpt>SetActiveTarget()<ept i="5">&lt;/e5&gt;</ept> and it will be used automatically by all subsequent calls to <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogXXX() functions<ept i="6">&lt;/a6&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112509Z">
        <seg>ログオブジェクト (つまり、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxLog<ept i="4">&lt;/a4&gt;</ept> を継承したクラスのオブジェクト) の通常の使用方法は <bpt i="5" x="5">&lt;e5&gt;</bpt>SetActiveTarget()<ept i="5">&lt;/e5&gt;</ept> を使用して有効なターゲットとして設定することで、それ以降に呼び出された <bpt i="6" x="6">&lt;a6&gt;</bpt>wxLogXXX() 関数<ept i="6">&lt;/a6&gt;</ept>で自動的に使用されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The normal usage of a log object (i.e. object of a class derived from wxLog) is to install it as the active target with a call to <bpt i="4" x="4">&lt;i4&gt;</bpt> SetActiveTarget()<ept i="4">&lt;/i4&gt;</ept> and it will be used automatically by all subsequent calls to <bpt i="5" x="5">&lt;i5&gt;</bpt>wxLogXXX()<ept i="5">&lt;/i5&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023118Z">
        <seg>ログオブジェクト (つまり、wxLog を継承したクラスのオブジェクト) の通常の使用方法は <bpt i="4" x="4">&lt;i4&gt;</bpt> SetActiveTarget()<ept i="4">&lt;/i4&gt;</ept> を使用して有効なターゲットとして設定することで、それ以降に呼び出された <bpt i="5" x="5">&lt;i5&gt;</bpt>wxLogXXX()<ept i="5">&lt;/i5&gt;</ept> 関数で自動的に使用されるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The objects of this class may be instantiated to (temporarily) suppress output of <bpt i="1" x="1">&lt;e1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/e1&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T113141Z">
        <seg>このクラスのオブジェクトは <bpt i="1" x="1">&lt;e1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/e1&gt;</ept> 関数の出力を (一時的に) 抑制する場合にインスタンス化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The objects of this class may be instantiated to (temporarily) suppress output of <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/i1&gt;</ept> functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030249Z">
        <seg>このクラスのオブジェクトは <bpt i="1" x="1">&lt;i1&gt;</bpt>wxLogXXX()<ept i="1">&lt;/i1&gt;</ept> 関数の出力を (一時的に) 抑制する場合にインスタンス化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The only <bpt i="2" x="2">&lt;b2&gt;</bpt>exceptions<ept i="2">&lt;/b2&gt;</ept> to this rule are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155605Z">
        <seg>このルールの <bpt i="2" x="2">&lt;b2&gt;</bpt>例外<ept i="2">&lt;/b2&gt;</ept> は以下のとおりです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The only <bpt i="4" x="4">&lt;b4&gt;</bpt>exceptions<ept i="4">&lt;/b4&gt;</ept> to this rule are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060858Z">
        <seg>このルールの <bpt i="4" x="4">&lt;b4&gt;</bpt>例外<ept i="4">&lt;/b4&gt;</ept> は以下のとおりです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The only requirement imposed by wxWidgets is that this class must derive from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> and so, considering that <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow<ept i="2">&lt;/a2&gt;</ept> derives from it, any classes representing windows can handle events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T022636Z">
        <seg>wxWidgets が唯一要求することとして、イベントを処理するクラスは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler<ept i="1">&lt;/a1&gt;</ept> を継承していなければなりません。したがって、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow<ept i="2">&lt;/a2&gt;</ept> はこのクラスを継承していることを考慮すると、ウィンドウを表すクラスはどれもイベントを処理することができるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The other is to use the existing event classes and give them an new event type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T151405Z">
        <seg>もう一方の方法は、既存のイベントクラスを使用し、それらに新しいイベント型を与える方法です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The other one uses <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler::Bind&lt;&gt;()<ept i="1">&lt;/a1&gt;</ept> call and can be used to bind and unbind, the handlers dynamically, i.e. during run-time depending on some conditions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T235917Z">
        <seg>もう一方は <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvtHandler::Bind&lt;&gt;()<ept i="1">&lt;/a1&gt;</ept> を使用する方法で、動的に (実行時に条件に基づいて) ハンドラをバインドしたり解除したりできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The other planes in fact contain mainly historic scripts, special-purpose characters or are unused.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031840Z">
        <seg>実際のところ、他の面は主に歴史上の文字や特殊用途の文字用か、もしくは使用されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The overhead of such conversions is usually negligible for small strings but may be important for some programs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T094040Z">
        <seg>この変換にかかるオーバーヘッドは小さな文字列であれば無視できるものですが、いくつかのプログラムでは重要になるかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The parent frame classes modify step (2) above to send the events received by them to <bpt i="4" x="4">&lt;a4&gt;</bpt>wxDocManager<ept i="4">&lt;/a4&gt;</ept> object first.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T152148Z">
        <seg>親フレームクラスでは上記のステップ (2) において、受信したイベントをまず  <bpt i="4" x="4">&lt;a4&gt;</bpt>wxDocManager<ept i="4">&lt;/a4&gt;</ept> オブジェクトに送信するように変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The possibilities of handling events in this way are rather different.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024547Z">
        <seg>この方法ではイベント処理のやり方が大きく異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The previous sections explain how to define event handlers but don't address the question of how exactly wxWidgets finds the handler to call for the given event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T062058Z">
        <seg>前の章ではイベントハンドラの定義方法について説明しましたが、wxWidgets がどのようにイベントハンドラを探すのかについてはまだ述べていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The probably first example is Windows NT which uses only Unicode internally since its very first version.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T161803Z">
        <seg>おそらく、最初の例は Windows NT でしょう。 Windows NT ではかなり初期のバージョンから内部的に Unicode を使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The problems can be separated into three broad classes:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121217Z">
        <seg>発生しうる問題は大まかに 3 種類に分類することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The program i18n involves several steps:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T235453Z">
        <seg>プログラムの国際化にはいくつかのステップが含まれます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The rationale for this choice is that there are only a few frames in a typical application and their parent-child relation are well understood by the programmer while it may be difficult, if not impossible, to track down all the dialogs that may be popped up in a complex program (remember that some are created automatically by wxWidgets).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T155553Z">
        <seg>このようにした理由は、普通のアプリケーションでは数個のフレームしか存在せず、プログラマはそれらの親子関係のことをよく理解している一方で、複雑なプログラムで表示されるすべてのダイアログを追跡することは、不可能でないにしても非常に難しいためです。 (いくつかのダイアログは wxWidgets によって自動的に生成されることを思い出してください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The rationale for this choice is that there are only a few frames in a typical application and their parent-child relation are well understood by the programmer while it may be very difficult, if not impossible, to track down all the dialogs which may be popped up in a complex program (remember that some are created automatically by wxWidgets).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T040727Z">
        <seg>このようにした理由は、普通のアプリケーションでは数個のフレームしか存在せず、プログラマはそれらの親子関係のことをよく理解している一方で、複雑なプログラムで表示されるすべてのダイアログを追跡することは、不可能でないにしても非常に難しいためです。 (いくつかのダイアログは wxWidgets によって自動的に生成されることを思い出してください) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The reason for making it a separate function from it is that usually there are a lot of trace messages, so it might make sense to separate them from other debug messages which would be flooded in them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T085236Z">
        <seg>これを別の関数とした理由は、通常、トレースメッセージを大量に出力するため、同じように大量に出力する他のデバッグ出力と区別することに意味があるはずだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The reason for that is that <bpt i="0" x="0">&lt;c0&gt;</bpt>m_helpCtrl<ept i="0">&lt;/c0&gt;</ept> is a member object and is thus destroyed from MyApp destructor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124542Z">
        <seg>なぜなら、<bpt i="0" x="0">&lt;c0&gt;</bpt>m_helpCtrl<ept i="0">&lt;/c0&gt;</ept> はメンバオブジェクトであり、MyApp のデストラクタで破棄されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The reason for that is that <bpt i="0" x="0">&lt;t0&gt;</bpt>m_helpCtrl<ept i="0">&lt;/t0&gt;</ept> is a member object and is thus destroyed from MyApp destructor.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162536Z">
        <seg>なぜなら、<bpt i="0" x="0">&lt;t0&gt;</bpt>m_helpCtrl<ept i="0">&lt;/t0&gt;</ept> はメンバオブジェクトであり、MyApp のデストラクタで破棄されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result of <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> cannot be cast to <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept> but only to <bpt i="2" x="2">&lt;c2&gt;</bpt>const<ept i="2">&lt;/c2&gt;</ept> <bpt i="3" x="3">&lt;c3&gt;</bpt><bpt i="4" x="4">&lt;c4&gt;</bpt>char*<ept i="4">&lt;/c4&gt;</ept>.<ept i="3">&lt;/c3&gt;</ept> Of course, modifying the string via the pointer returned by this method has never been possible but unfortunately it was occasionally useful to use a <bpt i="5" x="5">&lt;c5&gt;</bpt>const_cast<ept i="5">&lt;/c5&gt;</ept> here to pass the value to const-incorrect functions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034344Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> の戻り値は <bpt i="1" x="1">&lt;c1&gt;</bpt>char*<ept i="1">&lt;/c1&gt;</ept> にはキャストできず、<bpt i="2" x="2">&lt;c2&gt;</bpt>const<ept i="2">&lt;/c2&gt;</ept> <bpt i="3" x="3">&lt;c3&gt;</bpt><bpt i="4" x="4">&lt;c4&gt;</bpt>char*<ept i="4">&lt;/c4&gt;</ept><ept i="3">&lt;/c3&gt;</ept> にのみキャスト可能です。もちろん、この関数の戻り値のポインタを通して文字列を変更することはできませんが、残念なことに、正しく const を受け取らない関数へ値を渡すために <bpt i="5" x="5">&lt;c5&gt;</bpt>const_cast<ept i="5">&lt;/c5&gt;</ept> を使用するときに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The right functions for debug output.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091143Z">
        <seg>デバッグ出力に適切な関数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same applies to <bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::c_str()<ept i="2">&lt;/a2&gt;</ept> if its result is used as a narrow string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T161603Z">
        <seg>戻り値をナロー文字列として扱う場合には、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxString::c_str()<ept i="2">&lt;/a2&gt;</ept> についても同じことが言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012430Z">
        <seg>EVT_CUSTOM と同じですが、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotifyEvent<ept i="0">&lt;/a0&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012645Z">
        <seg>EVT_CUSTOM と同じですが、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotifyEvent<ept i="0">&lt;/a0&gt;</ept> を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a wxCommandEvent argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160549Z">
        <seg>EVT_CUSTOM と同じですが、wxCommandEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but expects a member function with a wxNotifyEvent argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162619Z">
        <seg>EVT_CUSTOM と同じですが、wxNotifyEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM, but responds to a range of window identifiers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160459Z">
        <seg>EVT_CUSTOM と同じですが、ウィンドウ識別子を範囲で指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012442Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxCommandEvent<ept i="0">&lt;/a0&gt;</ept> を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotifyEvent<ept i="0">&lt;/a0&gt;</ept> argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012721Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotifyEvent<ept i="0">&lt;/a0&gt;</ept> を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a wxCommandEvent argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T160612Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、wxCommandEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The same as EVT_CUSTOM_RANGE, but expects a member function with a wxNotifyEvent argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162652Z">
        <seg>EVT_CUSTOM_RANGE と同じですが、wxNotifyEvent を引数に取るメンバ関数を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The search is applied down the entire chain of event handlers (usually the chain has a length of one).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T030156Z">
        <seg>次に、イベントハンドラの連鎖を辿って検索します。(通常、この連鎖の長さは 1 です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second form of this function takes the error code explicitly as the first argument.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013147Z">
        <seg>この関数の 2 番目の形式では第一引数として明示的にエラーコードを指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The second one is enough if you're happy with the standard wxLog message formatting (prepending "Error:" or "Warning:", timestamping &amp;c) but just want to send the messages somewhere else.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023616Z">
        <seg>標準的な wxLog メッセージの形式 (先頭に "Error:" か "Warning:" とタイムスタンプが付きます) で充分だが、メッセージを他の場所へ送りたい場合は 2 番目の関数を実装するだけで充分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The short answer is that they're all very good generic mechanisms, but are not really adapted for wxWidgets, while the log classes are.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013853Z">
        <seg>簡単に答えれば、それらの関数やストリームは確かに優れた汎用的な仕組みを持っていますが、本当に wxWidgets に適しているとは言えないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The simplest of them is <bpt i="2" x="2">&lt;b2&gt;</bpt>UTF-32<ept i="2">&lt;/b2&gt;</ept> where each code unit is composed by 32 bits (4 bytes) and each code point is always represented by a single code unit (fixed length encoding).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031955Z">
        <seg>もっとも単純なものは <bpt i="2" x="2">&lt;b2&gt;</bpt>UTF-32<ept i="2">&lt;/b2&gt;</ept> です。これは各コード単位が 32 ビット (4 バイト) から成り、各コードポイントは常にひとつのコード単位で表現される固定長エンコーディングです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The simplest way to ensure that this doesn't happen is to avoid conversions to <bpt i="0" x="0">&lt;c0&gt;</bpt>char*<ept i="0">&lt;/c0&gt;</ept> completely by using <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> throughout your program.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T140833Z">
        <seg>これが起きないようにする一番単純な方法は、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> を使った <bpt i="0" x="0">&lt;c0&gt;</bpt>char*<ept i="0">&lt;/c0&gt;</ept> への変換を避けることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The sizer of the border also must be made known, and it is the third parameter in the Add() method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T111045Z">
        <seg>ボーダーの太さも伝える必要があり、Add() 関数の第三引数に指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The solution is to destroy HelpCtrl in <bpt i="1" x="1">&lt;e1&gt;</bpt>OnExit:<ept i="1">&lt;/e1&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124552Z">
        <seg>この解決策は <bpt i="1" x="1">&lt;e1&gt;</bpt>OnExit<ept i="1">&lt;/e1&gt;</ept> で HelpCtrl を削除することです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The solution is to destroy HelpCtrl in <bpt i="1" x="1">&lt;i1&gt;</bpt>OnExit<ept i="1">&lt;/i1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162750Z">
        <seg>この解決策は <bpt i="1" x="1">&lt;i1&gt;</bpt>OnExit<ept i="1">&lt;/i1&gt;</ept> で HelpCtrl を削除することです:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The standard trace masks are given in <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace()<ept i="0">&lt;/a0&gt;</ept> documentation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T133125Z">
        <seg>標準のトレースマスクは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogTrace()<ept i="0">&lt;/a0&gt;</ept> のドキュメントに記載しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The static event tables can only handle events in the object where they are defined so using Bind&lt;&gt;() is more flexible than using the event tables.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T021819Z">
        <seg>静的なイベントテーブルではそれが定義されたオブジェクトのイベントしか処理できないため、柔軟性は Bind&lt;&gt;() の方がイベントテーブルよりも上です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The step 4 of the event propagation algorithm checks for the next handler in the event handler chain.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151027Z">
        <seg>イベント伝播アルゴリズムのステップ 4 では、イベントハンドラの連鎖内における次のイベントハンドラを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The stretch factor described in the last paragraph is used for the main orientation, i.e. when using a horizontal box sizer, the stretch factor determines how much the child can be stretched horizontally.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T151910Z">
        <seg>最後の段落で述べたストレッチ係数は主となる方向に対して適用されます。つまり、水平方向のボックスサイザーを使用している場合、ストレッチ係数は子コントロールを水平方向にどれだけ伸長させるかを決定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The thickness of this border must be set explicitly, typically 5 points.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142431Z">
        <seg>ボーダーの太さは必ず明示的に指定する必要があり、デフォルトでは 5 ポイントです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The type of unique identifiers (ID) used for wxWindow-derived classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142003Z">
        <seg>wxWindow を継承したクラスで使用される一意の識別子 (ID) の型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The usage of these functions should be fairly straightforward, however it may be asked why not use the other logging facilities, such as C standard stdio functions or C++ streams.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T013341Z">
        <seg>これらの関数の用途はかなり明確ですが、なぜ C の標準入出力関数や C++ のストリームといった他のロギング機能を使用しないのか疑問に思うかもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value must be in form <bpt i="0" x="0">&lt;i0&gt;</bpt>width<ept i="0">&lt;/i0&gt;</ept>x<bpt i="1" x="1">&lt;i1&gt;</bpt>height<ept i="1">&lt;/i1&gt;</ept>-<bpt i="2" x="2">&lt;i2&gt;</bpt>depth<ept i="2">&lt;/i2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155512Z">
        <seg>この値は <bpt i="0" x="0">&lt;i0&gt;</bpt>幅<ept i="0">&lt;/i0&gt;</ept>x<bpt i="1" x="1">&lt;i1&gt;</bpt>高さ<ept i="1">&lt;/i1&gt;</ept>-<bpt i="2" x="2">&lt;i2&gt;</bpt>色深度<ept i="2">&lt;/i2&gt;</ept> の形式で指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The verbose messages are the trace messages which are not disabled in the release mode and are generated by <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogVerbose()<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132141Z">
        <seg>詳細メッセージとはリリースモードでも無効化されないトレースメッセージのことで、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogVerbose()<ept i="1">&lt;/a1&gt;</ept> によって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The width of each column and the height of each row are calculated individually according to the minimal requirements from the respectively biggest child.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153619Z">
        <seg>それぞれの最大の子コントロールの必要とする最小サイズに応じて、各列の幅と各行の高さが個別に計算されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The word logging here has a broad sense, including all of the program output, not only non-interactive messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003652Z">
        <seg>ここでのロギングという言葉は広い意味を持っており、非対話形式のメッセージに限らず、プログラムの出力すべてを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxApp class represents the application itself when wxUSE_GUI=1.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T144504Z">
        <seg>wxUSE_GUI=1 のとき、wxApp はアプリケーション自身を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocChildFrame class provides a default frame for displaying documents on separate windows...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T150631Z">
        <seg>wxDocChildFrame クラスは分割ウィンドウ上に表示されるドキュメントにデフォルトフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocMDIChildFrame class provides a default frame for displaying documents on separate windows...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T150906Z">
        <seg>wxDocMDIChildFrame クラスは分割ウィンドウ上に表示されるドキュメントにデフォルトフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocMDIParentFrame class provides a default top-level frame for applications using the document/...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T150842Z">
        <seg>wxDocMDIParentFrame クラスはドキュメント/ビューフレームワークを使用するアプリケーションにデフォルトのトップレベルフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocManager class is part of the document/view framework supported by wxWidgets, and cooperates with the wxView, wxDocument and wxDocTemplate classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T151046Z">
        <seg>wxDocManager クラスは wxWidgets のサポートしているドキュメント/ビューフレームワークの一部で、wxView、wxDocument、wxDocTemplate と一緒に使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxDocParentFrame class provides a default top-level frame for applications using the document/vie...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T150658Z">
        <seg>wxDocParentFrame クラスはドキュメント/ビューフレームワークを使用するアプリケーションにデフォルトのトップレベルフレームを提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxString class has been completely rewritten for wxWidgets 3.0 and this change was actually the m...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T034742Z">
        <seg>wxString クラスは wxWidgets 3.0 では完全に書き直されます。そして、この変更が新しいバージョンを wxWidgets 3.0 と呼ぶ主な理由です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxTextFile is a simple class which allows to work with text files on line by line basis...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072021Z">
        <seg>wxTextFile はテキストファイルを行単位で扱うためのシンプルなクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The wxWidgets approach to i18n closely follows the GNU gettext package.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043157Z">
        <seg>wxWidgets の採用している国際化の方法は GNU gettext パッケージの方式に従っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Then what do we do when a column sizer changes its width?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T131441Z">
        <seg>では、垂直方向のサイザーの幅が変更された場合はどうすれば良いでしょうか? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Then you could use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::SetComponentLevel()<ept i="1">&lt;/a1&gt;</ept> in the following ways:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T141916Z">
        <seg>そして、以下のように <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::SetComponentLevel()<ept i="1">&lt;/a1&gt;</ept> を使用します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are also events which don't directly correspond to the user actions, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTimerEvent<ept i="2">&lt;/a2&gt;</ept> or <bpt i="3" x="3">&lt;a3&gt;</bpt>wxSocketEvent<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T155557Z">
        <seg><bpt i="2" x="2">&lt;a2&gt;</bpt>wxTimerEvent<ept i="2">&lt;/a2&gt;</ept> や <bpt i="3" x="3">&lt;a3&gt;</bpt>wxSocketEvent<ept i="3">&lt;/a3&gt;</ept> など、ユーザの操作に直接対応しないイベントも存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are currently five different kinds of sizers available in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124220Z">
        <seg>今のところ、wxWidgets では 5 種類のサイザーが利用可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are several methods which may be overridden in the derived class to customize log messages handling: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::DoLogRecord()<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="1">&lt;/a1&gt;</ept> and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::DoLogText()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T122530Z">
        <seg>ログメッセージの処理方法をカスタマイズするためには継承クラスでいくつかの関数をオーバーライドします: <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::DoLogRecord()<ept i="0">&lt;/a0&gt;</ept>、 <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::DoLogText()<ept i="2">&lt;/a2&gt;</ept>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are some predefined classes deriving from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> and which might be helpful to see how you can create a new log target class and, of course, may also be used without any change.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112404Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> を継承したクラスがいくつか事前に定義されており、新しいログターゲットクラスを作成する際の参考になると思います。もちろん、そのまま使用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are some predefined classes deriving from wxLog and which might be helpful to see how you can create a new log target class and, of course, may also be used without any change.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023947Z">
        <seg>wxLog を継承したクラスがいくつか事前に定義されており、新しいログターゲットクラスを作成する際の参考になると思います。もちろん、そのまま使用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are two kinds of message catalogs: source catalogs which are text files with extension .po and binary catalogs which are created from the source ones with <bpt i="0" x="0">&lt;e0&gt;</bpt>msgfmt<ept i="0">&lt;/e0&gt;</ept> program (part of gettext package) and have the extension .mo.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040033Z">
        <seg>メッセージカタログには次の 2 種類があります: 拡張子が .po でテキスト形式のソースカタログと、ソースカタログから  <bpt i="0" x="0">&lt;e0&gt;</bpt>msgfmt<ept i="0">&lt;/e0&gt;</ept> プログラム (gettext パッケージの一部です) を使って生成する、拡張子が .mo のバイナリカタログです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are two kinds of message catalogs: source catalogs which are text files with extension .po and binary catalogs which are created from the source ones with <bpt i="0" x="0">&lt;i0&gt;</bpt>msgfmt<ept i="0">&lt;/i0&gt;</ept> program (part of gettext package) and have the extension .mo.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T235340Z">
        <seg>メッセージカタログには次の 2 種類があります: 拡張子が .po でテキスト形式のソースカタログと、ソースカタログから  <bpt i="0" x="0">&lt;i0&gt;</bpt>msgfmt<ept i="0">&lt;/i0&gt;</ept> プログラム (gettext パッケージの一部です) を使って生成する、拡張子が .mo のバイナリカタログです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are two principal ways to handle events in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130511T235318Z">
        <seg>wxWIdgets でイベントを処理する方法として、主に 2 種類の方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There are:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T023959Z">
        <seg>以下にその一覧を示します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is however an important difference between the two mechanisms when you want to invoke the default behaviour, as implemented by the base class, from a derived class handler.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T122755Z">
        <seg>しかし、継承クラスから基底クラスで実装されたデフォルトの振る舞いを呼び出すときに、このふたつの仕組みの間には重要な違いがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>There is no need for a separate type for strings though, because the standard <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> supports Unicode, i.e. it stores either ANSI or Unicode strings depending on the compile mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151816Z">
        <seg>だからといって、文字列に別々の型を使用する必要はありません。なぜなら、標準の <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> が Unicode に対応している (コンパイルモードに応じて ANSI 文字列か Unicode 文字列を格納する) ためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These events can be triggered by using the input devices (such as keyboard, mouse, joystick) directly or, more commonly, by a standard control which synthesizes such input events into higher level events: for example, a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxButton<ept i="0">&lt;/a0&gt;</ept> can generate a click event when the user presses the left mouse button on it and then releases it without pressing <bpt i="1" x="1">&lt;c1&gt;</bpt>Esc<ept i="1">&lt;/c1&gt;</ept> in the meanwhile.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T155458Z">
        <seg>これらのイベントは (キーボード、マウス、ジョイスティックなどの) 入力装置を利用して直接発生させるか、より一般的には、それらの入力イベントをより高レベルのイベントへ合成する標準コントロールを利用して発生させることができます: 例えば、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxButton<ept i="0">&lt;/a0&gt;</ept> はコントロール上でユーザが左マウスボタンを押下し、 (<bpt i="1" x="1">&lt;c1&gt;</bpt>Esc<ept i="1">&lt;/c1&gt;</ept> を押下することなく) 離したときにクリックイベントを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These flags can be used in combination with the alignment flags above as the second parameter of the Add() method using the binary or operator |.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T110536Z">
        <seg>これらのフラグは論理和演算子 | を使用して上記のアライメントフラグと組み合わせることができ、Add() 関数の第二引数に指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These macros are used to handle scroll events from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScrollBar<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxSlider<ept i="1">&lt;/a1&gt;</ept>,and <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSpinButton<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081822Z">
        <seg>これらのマクロは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScrollBar<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxSlider<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxSpinButton<ept i="2">&lt;/a2&gt;</ept> から送信されるスクロールイベントを処理するために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These macros handle <bpt i="0" x="0">&lt;a0&gt;</bpt>wxListCtrl<ept i="0">&lt;/a0&gt;</ept> events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081532Z">
        <seg>これらのマクロは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxListCtrl<ept i="0">&lt;/a0&gt;</ept> のイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These macros handle <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl<ept i="0">&lt;/a0&gt;</ept> events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082316Z">
        <seg>これらのマクロは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxTreeCtrl<ept i="0">&lt;/a0&gt;</ept> のイベントを処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These macros handle special menu events (not menu commands).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081611Z">
        <seg>これらのマクロは特殊なメニューイベント (メニューコマンドではありません) を処理します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These member functions are not virtual functions, but they are all similar in form: they take a single wxEvent-derived argument, and have a void return type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T075523Z">
        <seg>これらのメンバ関数は非仮想関数ですが、すべて同じ形式をとります: wxEvent を継承した引数をひとつ取り、戻り値の型は void です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These member functions take an event argument, and the class of event differs according to the type of event and the class of the originating window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081218Z">
        <seg>これらのメンバ関数はイベント引数を取りますが、その引数のクラスはイベントの型と発生元ウィンドウのクラスに応じて異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These pairs are called <bpt i="1" x="1">&lt;e1&gt;</bpt>surrogate<ept i="1">&lt;/e1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T031701Z">
        <seg>これらのコード単位の組のことを <bpt i="1" x="1">&lt;e1&gt;</bpt>サロゲート<ept i="1">&lt;/e1&gt;</ept> と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These sizers will be discussed one by one in the text below.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T124535Z">
        <seg>これらのサイザーについて、ひとつずつ説明していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They also appear in a message box by default (but it can be changed, see below).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T010006Z">
        <seg>この関数もデフォルトでメッセージボックスを表示します。 (ただし、この振る舞いは変更可能です。以下を参照してください)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are also normally shown to the user, but don't interrupt the program work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T134918Z">
        <seg>警告メッセージは普通、ユーザに通知されますが、プログラムの動作を妨げません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are hierarchical in the sense that "foo/bar/baz" component is supposed to be a child of "foo".</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T104515Z">
        <seg>ログコンポーネントは "foo/bar/baz" コンポーネントが "foo" コンポーネントの子として扱われるという意味では階層的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are just simple methods of the class that take as a parameter a reference to an object of a wxEvent-derived class and have no return value (any return information is passed via the argument, which is why it is non-const).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T014246Z">
        <seg>これらのイベントハンドラは単純なメンバ関数であり、wxEvent を継承したクラスのオブジェクトへの参照を引数に取り、戻り値はありません。(情報を返却する場合は引数のオブジェクトを経由して行います。これが引数を const にしていない理由です) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are not normally shown to the user because they present little interest, but may be activated, for example, in order to help the user find some program problem.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T132503Z">
        <seg>ユーザがこれらのメッセージに関心を示すことがないため、通常はユーザに通知されません。しかし、ユーザがプログラムの問題を見つける際の手助けとして有効化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They can be used to create a <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> from arbitrary binary data without supposing that it is in current locale encoding, and then get it back, again, without any conversion or, rather, undoing the conversion used by <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::From8BitData()<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035228Z">
        <seg>これらの関数は任意のバイナリデータをもとに <bpt i="3" x="3">&lt;a3&gt;</bpt>wxString<ept i="3">&lt;/a3&gt;</ept> を作成しますが、その際にバイナリデータが現在のロケールのエンコーディングで符号化されていると仮定しません。そして、なんらかの変換や <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString::From8BitData()<ept i="4">&lt;/a4&gt;</ept> で行われた変換の逆変換を行うことなく、元のバイナリデータを取得することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They will go into the status bar of the active or specified (as the first argument) <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> if it has one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T085900Z">
        <seg>これらのメッセージはアクティブまたは第一引数で指定された <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFrame<ept i="1">&lt;/a1&gt;</ept> がステータスバーを持つ場合に、ステータスバーへ出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This allows enough code points (see below for the definition) sufficient to encode all of the world languages at once.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T095338Z">
        <seg>これにより、 世界中の言語を一度に表現するのに十分な量のコードポイント (定義は以下を参照) が得られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This allows to have at least 65536 characters (what is called the BMP, or basic multilingual plane) and possible 2^32 of them instead of the usual 256 and is sufficient to encode all of the world languages at once.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151004Z">
        <seg>これにより、 通常の 256 文字の代わりに少なくとも 65536 文字 (これはBMP、もしくは基本多言語面と呼ばれます) 、あるいは 2^32 文字を表現することが可能であり、これは世界中の言語を一度に表現するのに十分な量です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This also has the advantage that you won't have to define a new <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::Clone()<ept i="1">&lt;/a1&gt;</ept> method for posting events between threads etc.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155223Z">
        <seg>この方法には、スレッド間でイベントを送信するための新しい <bpt i="1" x="1">&lt;a1&gt;</bpt>wxEvent::Clone()<ept i="1">&lt;/a1&gt;</ept> 関数を定義する必要がないといった利点もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This behaviour is controlled by <bpt i="2" x="2">&lt;e2&gt;</bpt>flags<ept i="2">&lt;/e2&gt;</ept> (the second parameter of the Add() function): Zero or no flag indicates that the window will preserve it is original size, wxGROW flag (same as wxEXPAND) forces the window to grow with the sizer, and wxSHAPED flag tells the window to change it is size proportionally, preserving original aspect ratio.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141854Z">
        <seg>この振る舞いは <bpt i="2" x="2">&lt;e2&gt;</bpt>フラグ<ept i="2">&lt;/e2&gt;</ept> (Add() 関数の第二引数です) によって制御されます: 0 またはフラグを何も指定しない場合、ウィンドウは元の大きさを維持します。wxGROW フラグ (wxEXPAND と同じです) はサイザーにあわせてウィンドウを強制的にリサイズします。wxSHAPED フラグは元の縦横比を維持しつつ、ウィンドウのサイズを変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This behaviour is controlled by <bpt i="2" x="2">&lt;i2&gt;</bpt>flags<ept i="2">&lt;/i2&gt;</ept> (the second parameter of the Add() function): Zero or no flag indicates that the window will preserve it is original size, wxGROW flag (same as wxEXPAND) forces the window to grow with the sizer, and wxSHAPED flag tells the window to change it is size proportionally, preserving original aspect ratio.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T161543Z">
        <seg>この振る舞いは <bpt i="2" x="2">&lt;i2&gt;</bpt>フラグ<ept i="2">&lt;/i2&gt;</ept> (Add() 関数の第二引数です) によって制御されます: 0 またはフラグを何も指定しない場合、ウィンドウは元の大きさを維持します。wxGROW フラグ (wxEXPAND と同じです) はサイザーにあわせてウィンドウを強制的にリサイズします。wxSHAPED フラグは元の縦横比を維持しつつ、ウィンドウのサイズを変更します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This border can either be all around, or at any combination of sides such as only above and below the control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142325Z">
        <seg>ボーダーは全周、またはコントロールの上と下のみといった任意の組み合わせで指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can avoid the need to test that the object was properly initialized in the event handlers themselves.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T040718Z">
        <seg>こうすることで、イベントハンドラ内でオブジェクトが正常に初期化されているか確認する必要がなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can be achieved quite simply by using the means provided by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T150406Z">
        <seg>これは wxWidgets の提供する方法を使うことで極めて単純に実現することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can be done either using new <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::char_str()<ept i="6">&lt;/a6&gt;</ept> (and matching wchar_str()) method or by writing a double cast:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034428Z">
        <seg>これは新しい <bpt i="6" x="6">&lt;a6&gt;</bpt>wxString::char_str()<ept i="6">&lt;/a6&gt;</ept> (や、これに対応する wchar_str()) 関数か、2 重キャストを用いることで実現できます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can be seen as a top-hierarchy column with the text at the top and buttons at the bottom and a low-hierarchy row with an OK button to the left and a Cancel button to the right.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T163027Z">
        <seg>これは上部にテキストフィールドと下部にボタンを持つ上位階層の列と、左に OK ボタンと右にキャンセルボタンを持つ下位階層の行からなるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This can be very convenient and is absolutely necessary for backwards compatibility with the existing code using wxWidgets however it is a rather dangerous operation as it can easily give unexpected results if the string contents isn't convertible to the current locale.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T135014Z">
        <seg>この変換機能は非常に便利であり、wxWidgets を使った既存コードとの後方互換性のためには絶対に欠かすことができません。しかし、これは非常に危険な操作で、文字列の内容が現在のロケールに変換できない場合は予期しない結果を簡単に引き起こします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This chain can be formed using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetNextHandler()<ept i="0">&lt;/a0&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151305Z">
        <seg>この連鎖は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::SetNextHandler()<ept i="0">&lt;/a0&gt;</ept> を使用して形づくられます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class allows you to temporarily suspend logging.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T125533Z">
        <seg>このクラスを用いて一時的にロギングを中断することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class can be used to (temporarily) redirect all output sent to a C++ ostream object to a wxTextC...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130927Z">
        <seg>このクラスは (一時的に) C++ ostream オブジェクトへ送信されたすべての出力を代わりに wxTextCtrl へリダイレクトするのに使用できます。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class can be used to redirect the log messages to a C file stream (not to be confused with C++ s...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T124706Z">
        <seg>このクラスはログメッセージを C のファイルストリーム (C++ のストリームと混同しないでください) へリダイレクトするのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class can be used to redirect the log messages to a C++ stream.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T124726Z">
        <seg>このクラスはログメッセージを C++ のストリームへリダイレクトするのに使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class greatly eases the burden of passing flags to a <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSizer<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145330Z">
        <seg>このクラスは <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSizer<ept i="2">&lt;/a2&gt;</ept> へフラグを渡す際の負担を大きく軽減してくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class greatly eases the burden of passing flags to a wxSizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113418Z">
        <seg>このクラスは wxSizer へフラグを渡す際の負担を大きく軽減してくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class is not used by the event handlers by itself, but is a base class for other event classes (...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T012636Z">
        <seg>このクラスはイベントハンドラ自身では使用されませんが、(wxBookCtrlEvent などの) 他のイベントクラスの基底クラスです。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class provides a simple way to avoid flicker: when drawing on it, everything is in fact first dr...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T143806Z">
        <seg>このクラスはちらつきを防止するための単純な方法を提供します: 描画時には最初にメモリ上のバッファ (wxBitmap) へすべて描画し、それから関連する wxDC を使用してスクリーン上へ一度だけ、このオブジェクトの破棄時にコピーします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class represents a background log window: to be precise, it collects all log messages in the log...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T125427Z">
        <seg>このクラスはバックグラウンドで動作するログウィンドウを表します。正確に言うと、このログウィンドウではログフレーム内のすべてのメッセージを収集するとともに、このクラスオブジェクトの生成時に有効だったログターゲットへ収集したメッセージを引き渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This class represents a single Unicode character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121311Z">
        <seg>このクラスはひとつの Unicode 文字を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This code also compiles fine under a non-Unicode build of wxWidgets, but in that case the converter is ignored.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144314Z">
        <seg>このコードは非 Unicode ビルドでも正常にコンパイルすることができますが、変換自体は行われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This could look like this in your code:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155547Z">
        <seg>以下にコード例を示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This currently works for wxMSW, wxGTK, wxMac and wxX11.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145031Z">
        <seg>これは今のところ、wxMSW、wxGTK、wxMac、wxX11 で動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This defines the wxWidgets Encapsulated PostScript device context, which can write PostScript files o...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T145433Z">
        <seg>これは wxWidets がカプセル化した PostScript デバイスコンテキストを定義しており、どのプラットフォームにおいても PostScript ファイルを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This doesn't work for everything (for example not all device contexts support bitmap drawing) but will work most of the time.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141904Z">
        <seg>これはすべての場合に当てはまるわけではありません (例えば、すべてのデバイスコンテキストがビットマップの描画に対応しているわけではありません) が、大半の場合はうまく行きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This ensures that in a common case of (possibly several) non-window event handlers pushed on top of a window, the event eventually reaches the window parent.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T032748Z">
        <seg>これにより、ウィンドウ上に (おそらく複数の) 非ウィンドウイベントハンドラが配置されているような一般的な場合において、イベントが最終的に親ウィンドウまで確実に到達するようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about command events, which originate from a variety of simple ...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130508T161126Z">
        <seg>このイベントクラスは様々な単純コントロールから送信されるコマンドイベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about key press and release events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130508T161121Z">
        <seg>このイベントクラスはキーの押下イベントや解放イベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about socket events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153816Z">
        <seg>このイベントクラスはソケットイベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about the events generated by the mouse: they include mouse but...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T024537Z">
        <seg>このイベントクラスはマウスによって生成されるイベントに関する情報を含んでいます: これにはマウスボタンの押下、解放イベント、およびマウスの移動イベントが含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event class contains information about window and session close events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152613Z">
        <seg>このイベントクラスはウィンドウとセッションの終了イベントに関する情報を含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This event type ID is stored in a struct of type <bpt i="1" x="1">&lt;b1&gt;</bpt>const wxEventType<ept i="1">&lt;/b1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T150744Z">
        <seg>このイベント ID は <bpt i="1" x="1">&lt;b1&gt;</bpt>const wxEventType<ept i="1">&lt;/b1&gt;</ept> 型の構造体に格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This function simply generates a wxCloseEvent whose handler usually tries to close the window...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T153025Z">
        <seg>この関数は単純に wxCloseEvent を作成します。通常はこのイベントを受け取ったハンドラはウィンドウを閉じようとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This further reduces the code size and removes the need for conversions in more cases.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T102257Z">
        <seg>これはコードサイズをさらに削減させるとともに、より多くの場合で変換が不要になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is <bpt i="0" x="0">&lt;s0&gt;</bpt>true<ept i="0">&lt;/s0&gt;</ept> of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScreenDC<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxClientDC<ept i="2">&lt;/a2&gt;</ept>, <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPaintDC<ept i="3">&lt;/a3&gt;</ept>, and <bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindowDC<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T150723Z">
        <seg>これには <bpt i="1" x="1">&lt;a1&gt;</bpt>wxScreenDC<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxClientDC<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxPaintDC<ept i="3">&lt;/a3&gt;</ept>、<bpt i="4" x="4">&lt;a4&gt;</bpt>wxWindowDC<ept i="4">&lt;/a4&gt;</ept> が該当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a general overview of logging classes provided by wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003415Z">
        <seg>これは wxWidgets の提供するロギングクラス全般の概要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a kind of paragraph layout box, used to represent the whole buffer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T014057Z">
        <seg>This is a kind of paragraph layout box, used to represent the whole buffer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a specialization of wxCharTypeBuffer&lt;T&gt; for char type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170025Z">
        <seg>これは char 型による wxCharTypeBuffer&lt;T&gt; の特殊化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a specialization of wxCharTypeBuffer&lt;T&gt; for wchar_t type.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T170040Z">
        <seg>これは wchar_t 型による wxCharTypeBuffer&lt;T&gt; の特殊化です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a subclass of wxBufferedDC which can be used inside of an EVT_PAINT() event handler to achiev...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T144304Z">
        <seg>これは wxBufferedDC のサブクラスで、ダブルバッファリングを行なうために EVT_PAINT() イベントハンドラの内部で使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a type of device context that allows a metafile object to be created (Windows only)...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T145636Z">
        <seg>これはメタファイルオブジェクトを作成するためのデバイスコンテキスト型で (Windows のみ)、通常の wxDC の特徴の大半を備えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is achieved by using the standard C (and C++) way: just put the letter <bpt i="2" x="2">&lt;t2&gt;</bpt>'L'<ept i="2">&lt;/t2&gt;</ept> after any string constant and it becomes a <bpt i="3" x="3">&lt;i3&gt;</bpt>long<ept i="3">&lt;/i3&gt;</ept> constant, i.e. a wide character one.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T152240Z">
        <seg>これは標準的な C (および C++) の方法で実現されます: 文字列定数の後ろに <bpt i="2" x="2">&lt;t2&gt;</bpt>'L'<ept i="2">&lt;/t2&gt;</ept> という文字を配置するだけで、 <bpt i="3" x="3">&lt;i3&gt;</bpt>long<ept i="3">&lt;/i3&gt;</ept> 定数、すなわちワイド文字になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is also the approach used by <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035245Z">
        <seg>これは <bpt i="4" x="4">&lt;a4&gt;</bpt>wxString<ept i="4">&lt;/a4&gt;</ept> で採用されている方法でもあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is determined by the <bpt i="1" x="1">&lt;e1&gt;</bpt>proportion<ept i="1">&lt;/e1&gt;</ept> parameter when adding a window (or another sizer) to a sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141844Z">
        <seg>これはウィンドウ (または他のサイザー) をサイザーへ追加するときの <bpt i="1" x="1">&lt;e1&gt;</bpt>プロポーション<ept i="1">&lt;/e1&gt;</ept> パラメータによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is determined by the <bpt i="1" x="1">&lt;i1&gt;</bpt>proportion<ept i="1">&lt;/i1&gt;</ept> parameter when adding a window (or another sizer) to a sizer.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T160129Z">
        <seg>これはウィンドウ (または他のサイザー) をサイザーへ追加するときの <bpt i="1" x="1">&lt;i1&gt;</bpt>プロポーション<ept i="1">&lt;/i1&gt;</ept> パラメータによって決定されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is done in the document/view framework, for example, to allow event handlers to be defined in the document or view.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T053510Z">
        <seg>これは例えば、ドキュメント/ビューフレームワークがドキュメントやビューでイベントハンドラを定義するために行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is done using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDEFINE_EVENT()<ept i="0">&lt;/a0&gt;</ept> macro.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T155015Z">
        <seg>これは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDEFINE_EVENT()<ept i="0">&lt;/a0&gt;</ept> マクロによって行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is impossible to do with the event tables because it is not possible to specify these handlers to dispatch the event to, so it necessarily needs to be sent to the same object which generated the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T042511Z">
        <seg>これはイベントテーブルでは実現不可能です。なぜなら、イベントのディスパッチ先としてこれらのハンドラを指定することができないためです。そのため、イベントはそれを生成したオブジェクトに対して送信される必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is normally the expected behaviour and means that it is enough to call <bpt i="0" x="0">&lt;a0&gt;</bpt>Close()<ept i="0">&lt;/a0&gt;</ept> in response to the <bpt i="1" x="1">&lt;t1&gt;</bpt>"Exit"<ept i="1">&lt;/t1&gt;</ept> menu command if your program has a single top level window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T123948Z">
        <seg>これは通常期待する振る舞いであり、アプリケーションが単一のトップレベルウィンドウを持つ場合は <bpt i="1" x="1">&lt;t1&gt;</bpt>"Exit"<ept i="1">&lt;/t1&gt;</ept> メニューが選択されたときに <bpt i="0" x="0">&lt;a0&gt;</bpt>Close()<ept i="0">&lt;/a0&gt;</ept> を呼ぶだけで充分なことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is normally the expected behaviour and means that it is enough to call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close()<ept i="0">&lt;/a0&gt;</ept> in response to the "Exit" menu command if your program has a single top level window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124017Z">
        <seg>これは通常期待する振る舞いであり、アプリケーションが単一のトップレベルウィンドウを持つ場合は "Exit" メニューが選択されたときに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Close()<ept i="0">&lt;/a0&gt;</ept> を呼ぶだけで充分なことを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is supported only by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFlexGridSizer<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141651Z">
        <seg>これは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> と <bpt i="1" x="1">&lt;a1&gt;</bpt>wxFlexGridSizer<ept i="1">&lt;/a1&gt;</ept> でのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is the default log target for the GUI wxWidgets applications.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T125452Z">
        <seg>これは GUI wxWidgets アプリケーションのデフォルトのログターゲットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is true of <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScreenDC<ept i="0">&lt;/a0&gt;</ept>, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxClientDC<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintDC<ept i="2">&lt;/a2&gt;</ept>, and <bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindowDC<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T140857Z">
        <seg>これには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxScreenDC<ept i="0">&lt;/a0&gt;</ept>、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxClientDC<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintDC<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxWindowDC<ept i="3">&lt;/a3&gt;</ept> が該当します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when hiding parts of the interface, since you can avoid removing the controls from the sizer and having to add them back later.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T150111Z">
        <seg>コントロールをサイザーから削除し、後で追加し直す必要がないため、これはインタフェースの一部を隠すときに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when you don't care about the exact identifier either because you're not going to process the events from the control being created at all or because you process the events from all controls in one place (in which case you should specify <bpt i="1" x="1">&lt;t1&gt;</bpt>wxID_ANY<ept i="1">&lt;/t1&gt;</ept> in the event table or <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler::Connect<ept i="2">&lt;/a2&gt;</ept> call as well.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T075403Z">
        <seg>コントロールの生成するイベントを処理しない場合や、イベントを一箇所で処理する場合 (このときはイベントテーブルに <bpt i="1" x="1">&lt;t1&gt;</bpt>wxID_ANY<ept i="1">&lt;/t1&gt;</ept> を指定するか、それと同様に <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler::Connect<ept i="2">&lt;/a2&gt;</ept> を呼ぶ必要があります) など、コントロールの正確な識別子が必要でないときにこれは役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is useful when you don't care about the exact identifier either because you're not going to process the events from the control being created or because you process the events from all controls in one place (in which case you should specify <bpt i="1" x="1">&lt;c1&gt;</bpt>wxID_ANY<ept i="1">&lt;/c1&gt;</ept> in the event table or <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler::Bind<ept i="2">&lt;/a2&gt;</ept> call as well).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T124554Z">
        <seg>コントロールの生成するイベントを処理しない場合や、イベントを一箇所で処理する場合 (このときはイベントテーブルに <bpt i="1" x="1">&lt;c1&gt;</bpt>wxID_ANY<ept i="1">&lt;/c1&gt;</ept> を指定するか、同じように <bpt i="2" x="2">&lt;a2&gt;</bpt>wxEvtHandler::Bind<ept i="2">&lt;/a2&gt;</ept> を呼ぶ必要があります) など、コントロールの正確な識別子が必要でないときにこれは役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This may not be available on non-Windows platforms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141529Z">
        <seg>これは非 Windows 環境では使用できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that internally only Unicode strings are used and that, under Microsoft Windows, Unicode system API is used which means that wxWidgets programs require the Microsoft Layer for Unicode to run on Windows 95/98/ME.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T040317Z">
        <seg>これはつまり、内部的には Unicode 文字列のみが使用され、Microsoft Windows では Unicode 版のシステム API が使用されることを意味します。そしてこれは Windows 95/98/ME で wxWidgets プログラムを実行する際に Microsoft Layer for Unicode が必要となることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that you don't risk getting unexpected events from the dialog controls (which might be left unprocessed by the dialog itself because it doesn't care about them) when a modal dialog is popped up.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T155530Z">
        <seg>これはつまり、モーダルダイアログを表示しているときにダイアログコントロールから意図しないイベントを受け取ることがないことを意味します。 (それらのイベントは処理されないままになるでしょう) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means that you don't risk to get unexpected events from the dialog controls (which might be left unprocessed by the dialog itself because it doesn't care about them) when a modal dialog is popped up.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T033913Z">
        <seg>これはつまり、モーダルダイアログを表示しているときにダイアログコントロールから意図しないイベントを受け取ることがないことを意味します。 (それらのイベントは処理されないままになるでしょう) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This means, that the entire behaviour of a sizer and its children can be controlled by the three parameters of the Add() method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T111423Z">
        <seg>これはつまり、サイザーと子コントロールのすべての振る舞いが Add() 関数の 3 個の引数によって制御されることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This method can be used inside an event handler to control whether further event handlers bound to th...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T064047Z">
        <seg>この関数はイベントハンドラの中で使用し、現在のイベントハンドラの処理が終わった後にさらにイベントハンドラを呼び出すかどうかを制御します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This must be provided by the application, and will usually create the application's main window...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152428Z">
        <seg>アプリケーションはこの関数を必ず提供する必要があり、通常はアプリケーションのメインウィンドウを (任意に SetTopWindow() を呼んで) 作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This object, in turn, sends the event to the current view and the view itself lets its associated document process the event first.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130513T152258Z">
        <seg>そして、このオブジェクトが現在のビューに対してイベントを送信し、ビュー自身が関連するドキュメントにまずイベントを処理させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section briefly describes the state of the Unicode support in wxWidgets.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T154902Z">
        <seg>この章では wxWidgets における Unicode の対応状況について簡潔に述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section describes all environment variables that affect execution of wxWidgets programs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154507Z">
        <seg>この章では wxWidgets プログラムの実行に影響するすべての環境変数について述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section describes how does wxWidgets support Unicode and how can it affect your programs.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004913Z">
        <seg>この章では wxWidgets による Unicode 対応方法とプログラムへの影響について述べます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This section describes the algorithm used in detail.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T062131Z">
        <seg>この章ではそのアルゴリズムについて詳しく説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This simple class allows you to chain log sinks, that is to install a new sink but keep passing log m...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130452Z">
        <seg>この単純なクラスを用いることでログ出力先を連鎖させることが可能になります。つまり、wxLog::SetActiveTarget のようにログ出力先を置き換える代わりに、新しい出力先を設定しつつ、 古い出力先にもログメッセージを渡すことが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This sizer in turn will query its children (which can be normal windows, empty space or other sizers) so that a hierarchy of sizers can be constructed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T142121Z">
        <seg>このサイザーは順に子コントロール (通常のウィンドウや空白スペース、他のサイザーかもしれません) に対して問い合わせを行うため、サイザーの階層が構築されることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This task is performed by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogFormatter<ept i="0">&lt;/a0&gt;</ept> class so you need to derive a custom class from it and override its Format() method to build the log messages in desired way.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T123227Z">
        <seg>これは <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLogFormatter<ept i="0">&lt;/a0&gt;</ept> クラスによって行われるため、このクラスを継承し、望む方法でログメッセージを構築するように Fortmat() 関数をオーバーライドする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This type is called <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t<ept i="1">&lt;/t1&gt;</ept> which stands for <bpt i="2" x="2">&lt;i2&gt;</bpt>wide-character type<ept i="2">&lt;/i2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151303Z">
        <seg>この型のことを <bpt i="1" x="1">&lt;t1&gt;</bpt>wchar_t<ept i="1">&lt;/t1&gt;</ept> と呼び、<bpt i="2" x="2">&lt;i2&gt;</bpt>wide-character type<ept i="2">&lt;/i2&gt;</ept> の略です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This way, you can avoid a lot of class derivation, and use instances of the same event handler class (but different objects as the same event handler object shouldn't be used more than once) to handle events from instances of different widget classes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T062136Z">
        <seg>この方法を使うことで、たくさんの継承クラスを作成しなくてすむとともに、同じイベントハンドラクラスのインスタンスを異なるウィジェットクラスのインスタンスから利用することができます。 (ただし、異なるオブジェクトを同じイベントハンドラオブジェクトとして複数回使用するべきではありません) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will allow your program to perform conversions between Unicode strings and ANSI ones (using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv classes<ept i="0">&lt;/a0&gt;</ept>) and construct wxString objects from Unicode strings (presumably read from some external file or elsewhere).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145310Z">
        <seg>これにより、あなたのプログラムの中で (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxMBConv クラス<ept i="0">&lt;/a0&gt;</ept>を利用した) Unicode 文字列と ANSI 文字列の変換や、(おそらく外部ファイルや他の場所から読み込んだ) Unicode 文字列から wxString オブジェクトを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will always be the case if the string had been initially constructed from a narrow string or if it contains only 7-bit ASCII data but otherwise this conversion is not guaranteed to succeed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T091441Z">
        <seg>文字列がナロー文字列か 7 ビット ASCII データで初期化されているのであれば、常にこの場合に当てはまりますが、それ以外の場合ではこの変換が常に成功することは保証されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will create a text message catalog - a .po file.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001119Z">
        <seg>これにより、テキスト形式のメッセージカタログ (.po ファイル) が生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This will most often mean that the programmer does not set the start-up size of a dialog, the dialog will rather be assigned a sizer and this sizer will be queried about the recommended size.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T121141Z">
        <seg>これはほどんどの場合で、プログラマがダイアログの初期サイズを設定するのではなく、代わりにダイアログをサイザーに割り当て、サイザーが推奨サイズを問い合わせることを意味します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This would indeed prevent any key events from being sent to the native control - which might not be what is desired.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T085932Z">
        <seg>実際には、これはネイティブコントロールに送られるキーイベントをすべて横取りしますが、これはおそらく期待する動作ではないと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus UTF16 uses a variable number of code units to encode each code point.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T031739Z">
        <seg>したがって、UTF16 は各コードポイントを符号化するために可変数のコード単位を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus it is important to <bpt i="0" x="0">&lt;b0&gt;</bpt>never use 8-bit (instead of 7-bit) characters directly in the program source<ept i="0">&lt;/b0&gt;</ept> but use wide strings or, alternatively, write:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T082337Z">
        <seg>したがって、<bpt i="0" x="0">&lt;b0&gt;</bpt>プログラムソース内で (7 ビット文字の代わりに) 8 ビット文字列を直接しない<ept i="0">&lt;/b0&gt;</ept> ことが重要であり、ワイド文字列を使用するか、代わりに以下のように書いてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, under Microsoft Windows, UCS-2 (simplified version of UTF-16 without support for surrogate characters) is used as <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept> is 2 bytes on this platform.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092708Z">
        <seg>したがって、Microsoft Windows では <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept>  が 2 バイトであるため、UCS-2 (サロゲート文字をサポートしない、UTF-16 の簡略化版です) が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, you might view <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogMessage()<ept i="2">&lt;/a2&gt;</ept> as a simple substitute for <bpt i="3" x="3">&lt;e3&gt;</bpt>printf()<ept i="3">&lt;/e3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091445Z">
        <seg>したがって、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogMessage()<ept i="2">&lt;/a2&gt;</ept> を <bpt i="3" x="3">&lt;e3&gt;</bpt> printf()<ept i="3">&lt;/e3&gt;</ept> の単純な代替として考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, you might view <bpt i="2" x="2">&lt;i2&gt;</bpt>wxLogMessage()<ept i="2">&lt;/i2&gt;</ept> as a simple substitute for <bpt i="3" x="3">&lt;i3&gt;</bpt> printf()<ept i="3">&lt;/i3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015102Z">
        <seg>したがって、<bpt i="2" x="2">&lt;i2&gt;</bpt>wxLogMessage()<ept i="2">&lt;/i2&gt;</ept> を <bpt i="3" x="3">&lt;i3&gt;</bpt> printf()<ept i="3">&lt;/i3&gt;</ept> の単純な代替として考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To be more precise, each event is described by:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T160744Z">
        <seg>より正確には、イベントは以下の内容で表現されます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To be precise, the conversion will always succeed if the string was created from a narrow string initially.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T135558Z">
        <seg>正確に言うと、最初にナロー文字列から文字列が作られたのであれば、変換は常に成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To change this, you need to define <bpt i="0" x="0">&lt;c0&gt;</bpt>wxLOG_COMPONENT<ept i="0">&lt;/c0&gt;</ept> to a string uniquely identifying each component, e.g. you could give it the value "MyProgram" by default and re-define it as "MyProgram/DB" in the module working with the database and "MyProgram/DB/Trans" in its part managing the transactions.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T141850Z">
        <seg>これを変更するためには、 <bpt i="0" x="0">&lt;c0&gt;</bpt>wxLOG_COMPONENT<ept i="0">&lt;/c0&gt;</ept> として各コンポーネントを一意に識別する文字列を定義する必要があります。この文字列は例えばデフォルトで "MyProgram" を指定し、データベースを利用するモジュールでは "MyProgram/DB" に、さらにトランザクションを扱う部分では "MyProgram/DB/Trans" に再定義する、というようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To completely change the logging behaviour you may define a custom log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T120523Z">
        <seg>ロギングの振る舞いを完全に変更するためにはカスタムログターゲットを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To correct this you should use</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171237Z">
        <seg>これを正しく動作させるためには、以下のようにする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a new log target class you only need to derive it from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> and override one or several of <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::DoLogRecord()<ept i="1">&lt;/a1&gt;</ept>, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="2">&lt;/a2&gt;</ept> and <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLog::DoLogText()<ept i="3">&lt;/a3&gt;</ept> in it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T112527Z">
        <seg>新しいログターゲットクラスを作成する場合、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog<ept i="0">&lt;/a0&gt;</ept> を継承し、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::DoLogRecord()<ept i="1">&lt;/a1&gt;</ept>、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxLog::DoLogTextAtLevel()<ept i="2">&lt;/a2&gt;</ept>、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxLog::DoLogText()<ept i="3">&lt;/a3&gt;</ept> のいずれか (または複数) をオーバーライドするだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create a new log target class you only need to derive it from wxLog and implement one (or both) of <bpt i="0" x="0">&lt;i0&gt;</bpt>DoLog()<ept i="0">&lt;/i0&gt;</ept> and <bpt i="1" x="1">&lt;i1&gt;</bpt>DoLogString()<ept i="1">&lt;/i1&gt;</ept> in it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111852Z">
        <seg>新しいログターゲットクラスを作成する場合、wxLog を継承し、<bpt i="0" x="0">&lt;i0&gt;</bpt>DoLog()<ept i="0">&lt;/i0&gt;</ept> と <bpt i="1" x="1">&lt;i1&gt;</bpt>DoLogString()<ept i="1">&lt;/i1&gt;</ept> のどちらか (または両方) を実装するだけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To disable the logging entirely you can use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::EnableLogging()<ept i="1">&lt;/a1&gt;</ept> method or, more usually, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogNull<ept i="2">&lt;/a2&gt;</ept> class which temporarily disables logging and restores it back to the original setting when it is destroyed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T140214Z">
        <seg>完全にロギングを無効化するためには <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog::EnableLogging()<ept i="1">&lt;/a1&gt;</ept> か、普通は一時的にロギングを無効化し、オブジェクトが破棄される時に元の設定を復元する <bpt i="2" x="2">&lt;a2&gt;</bpt>wxLogNull<ept i="2">&lt;/a2&gt;</ept> クラスを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To get an ANSI string from a wxString, you may use the mb_str() function which always returns an ANSI string (independently of the mode - while the usual <bpt i="0" x="0">&lt;a0&gt;</bpt>c_str()<ept i="0">&lt;/a0&gt;</ept> returns a pointer to the internal representation which is either ASCII or Unicode).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T152048Z">
        <seg>wxString から ANSI 文字列を取得するには、常に ANSI 文字列を返却する mb_str() 関数を使用することができます。 (これはビルドモードに依存しません。一方で、普通の <bpt i="0" x="0">&lt;a0&gt;</bpt>c_str()<ept i="0">&lt;/a0&gt;</ept> は内部の表現型のポインタを返却しますが、これは ASCII か Unicode のどちらかです) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To give a quick example, a common question is how to receive the mouse movement events happening when the mouse is in one of the frame children in the frame itself.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030046Z">
        <seg>一例として、よく質問される子フレーム内にマウスがあるときのマウス移動イベントの受信方法を挙げましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To hide a window using the sizer, call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer::Show<ept i="0">&lt;/a0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T152111Z">
        <seg>サイザーを使用してウィンドウを非表示にするためには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxSizer::Show<ept i="0">&lt;/a0&gt;</ept> を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To hide a window using the sizer, call <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSizer::Show<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141617Z">
        <seg>サイザーを使用してウィンドウを非表示にするためには <bpt i="2" x="2">&lt;a2&gt;</bpt>wxSizer::Show<ept i="2">&lt;/a2&gt;</ept> を呼び出してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To limit logging to important messages only, you may use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::SetLogLevel()<ept i="0">&lt;/a0&gt;</ept> with e.g. wxLOG_Warning value -- this will completely disable all logging messages with the severity less than warnings, so <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogMessage()<ept i="1">&lt;/a1&gt;</ept> output won't be shown to the user any more.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T140449Z">
        <seg>重要なメッセージのみを記録するためには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::SetLogLevel()<ept i="0">&lt;/a0&gt;</ept> に wxLOG_Warning などを指定します。こうすることで、重要度が警告未満であるすべてのメッセージのロギングが無効になり、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxLogMessage()<ept i="1">&lt;/a1&gt;</ept> の出力はもはやユーザに通知されなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To make things a bit more readable, you are also allowed to prefix the constant with <bpt i="4" x="4">&lt;t4&gt;</bpt>'L'<ept i="4">&lt;/t4&gt;</ept> instead of putting it after it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T154039Z">
        <seg>もう少しだけ可読性を上げるために、 <bpt i="4" x="4">&lt;t4&gt;</bpt>'L'<ept i="4">&lt;/t4&gt;</ept> を定数の後ろではなく、前に付けることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To put it a different way, events set to propagate (<bpt i="1" x="1">&lt;a1&gt;</bpt>See: wxEvent::ShouldPropagate<ept i="1">&lt;/a1&gt;</ept>) (most likely derived either directly or indirectly from wxCommandEvent) will travel up the containment hierarchy from child to parent until the maximal propagation level is reached or an event handler is found that doesn't call <bpt i="2" x="2">&lt;a2&gt;</bpt>event.Skip()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T032037Z">
        <seg>別の言い方をすると、伝播するように設定されたイベント (<bpt i="1" x="1">&lt;a1&gt;</bpt>参照: wxEvent::ShouldPropagate<ept i="1">&lt;/a1&gt;</ept>) (よくあるのは wxCommandEvent を直接、または間接的に継承したイベントです) は最大回数、伝播するか <bpt i="2" x="2">&lt;a2&gt;</bpt>event.Skip()<ept i="2">&lt;/a2&gt;</ept> を呼んでいないイベントハンドラが見つかるまで、子から親へコントロール階層をさかのぼっていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To summarize, Unicode support in wxWidgets is mostly <bpt i="0" x="0">&lt;b0&gt;</bpt>transparent<ept i="0">&lt;/b0&gt;</ept> for the application and if you use <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> objects for storing all the character data in your program there is really nothing special to do.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092249Z">
        <seg>まとめると、wxWidgets による Unicode 対応はアプリケーションにとってほとんど <bpt i="0" x="0">&lt;b0&gt;</bpt>透過的<ept i="0">&lt;/b0&gt;</ept> であり、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> オブジェクトを使ってすべての文字データを格納するのであれば、特別なことをなにもする必要がありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To summarize, here is a brief example of how a program which can be compiled in both ANSI and Unicode modes could look like:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160618Z">
        <seg>要点をまとめるため、 ANSI モードと Unicode モードの両方でコンパイルできるプログラムの簡潔な例を以下に示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To summarize, instead of explicitly calling the base class version as you would have done with C++ virtual functions (i.e. <bpt i="0" x="0">&lt;i0&gt;</bpt>wxTextCtrl::OnChar()<ept i="0">&lt;/i0&gt;</ept>), you should instead call <bpt i="1" x="1">&lt;a1&gt;</bpt>Skip<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022245Z">
        <seg>要約すると、C++ の仮想関数で行うように基底クラスの関数を直接呼ぶ  (つまり、<bpt i="0" x="0">&lt;i0&gt;</bpt>wxTextCtrl::OnChar()<ept i="0">&lt;/i0&gt;</ept> を呼ぶ) 代わりに、 <bpt i="1" x="1">&lt;a1&gt;</bpt>Skip<ept i="1">&lt;/a1&gt;</ept> を呼ぶようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To summarize, using Bind&lt;&gt;() requires slightly more typing but is much more flexible than using static event tables so don't hesitate to use it when you need this extra power.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061453Z">
        <seg>まとめると、Bind&lt;&gt;() を使用すると若干コードが増えますが、静的イベントテーブルよりも柔軟性があります。そのため、この追加の効果が必要なときはためらわずに使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To test for command events (which will probably be the only events you wish to redirect), you may use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::IsCommandEvent<ept i="0">&lt;/a0&gt;</ept> for efficiency, instead of using the slower run-time type system.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T054449Z">
        <seg>コマンドイベントかどうか (おそらくリダイレクト対象のイベントかどうかだと思いますが) を調べるため、遅い実行時型情報の代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::IsCommandEvent<ept i="0">&lt;/a0&gt;</ept> を使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use a client, paint or window device context, create an object on the stack with the window as argument, for example:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141637Z">
        <seg>wxClientDC、wxPaintDC、wxWindowDC を使用する場合、以下のようにウィンドウを引数に指定してスタック上にオブジェクトを作成してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use an <bpt i="0" x="0">&lt;e0&gt;</bpt>event table<ept i="0">&lt;/e0&gt;</ept> you must first decide in which class you wish to handle the events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T010545Z">
        <seg><bpt i="0" x="0">&lt;e0&gt;</bpt>イベントテーブル<ept i="0">&lt;/e0&gt;</ept> を使うためには、まずイベントを処理するクラスを決定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use an ordinary function or a static method as an event handler you would write something like this:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060656Z">
        <seg>イベントハンドラとして普通の関数や静的メンバ関数を使用する場合、以下のように書いてください:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To use your custom log target you may either call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::SetActiveTarget()<ept i="0">&lt;/a0&gt;</ept> with your custom log object or create a wxAppTraits-derived class and override <bpt i="1" x="1">&lt;a1&gt;</bpt>wxAppTraits::CreateLogTarget()<ept i="1">&lt;/a1&gt;</ept> virtual method in it and also override <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::CreateTraits()<ept i="2">&lt;/a2&gt;</ept> to return an instance of your custom traits object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T144504Z">
        <seg>作成したカスタムログターゲットを使用するためには、カスタムログターゲットのオブジェクトを指定して <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLog::SetActiveTarget()<ept i="0">&lt;/a0&gt;</ept> を呼ぶか、wxAppTraits を継承したクラスを作成して <bpt i="1" x="1">&lt;a1&gt;</bpt>wxAppTraits::CreateLogTarget()<ept i="1">&lt;/a1&gt;</ept> 仮想関数をオーバーライドし、自作の特性オブジェクトのインスタンスを返却するように <bpt i="2" x="2">&lt;a2&gt;</bpt>wxApp::CreateTraits()<ept i="2">&lt;/a2&gt;</ept> をオーバーライドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Topic Overviews</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004800Z">
        <seg>トピックスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Topic overviews</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T131901Z">
        <seg>トピックスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating Menu Accelerators</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035524Z">
        <seg>メニューアクセラレータの翻訳</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating menu accelerators</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T002909Z">
        <seg>メニューアクセラレータの翻訳</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating the strings extracted in the previous step to other language(s).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T001144Z">
        <seg>前のステップで抽出した文字列を別の言語に翻訳する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating the strings in the program text using <bpt i="0" x="0">&lt;a0&gt;</bpt>wxGetTranslation<ept i="0">&lt;/a0&gt;</ept> or equivalently the <bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept> macro.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T235702Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxGetTranslation<ept i="0">&lt;/a0&gt;</ept> か、それと同じように <bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept> マクロを利用してプログラム中のテキストを 翻訳する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating the strings in the program text using wxGetTranslation or equivalently the <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept> macro.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043253Z">
        <seg>wxGetTranslation か、それと同じように <bpt i="0" x="0">&lt;c0&gt;</bpt><bpt i="1" x="1">&lt;a1&gt;</bpt>_()<ept i="1">&lt;/a1&gt;</ept><ept i="0">&lt;/c0&gt;</ept> マクロを利用してプログラム中のテキストを 翻訳する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Translating your application involves several steps:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040059Z">
        <seg>アプリケーションの翻訳にはいくつかのステップが含まれます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Try to write code so it is parameterised by <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDC<ept i="0">&lt;/a0&gt;</ept> - if you do this, the same piece of code may write to a number of different devices, by passing a different device context.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154335Z">
        <seg>なるべく <bpt i="0" x="0">&lt;a0&gt;</bpt>wxDC<ept i="0">&lt;/a0&gt;</ept> 型を使用してパラメータ化するようにしてください。このようにした場合、異なるデバイスコンテキストを渡すことで多くのデバイスに対して同じコードを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Try to write code so it is parameterised by wxDC - if you do this, the same piece of code may write to a number of different devices, by passing a different device context.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141738Z">
        <seg>なるべく wxDC 型を使用してパラメータ化するようにしてください。このようにした場合、異なるデバイスコンテキストを渡すことで多くのデバイスに対して同じコードを使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Typically events that deal with a window as a window (size, motion, paint, mouse, keyboard, etc.) are sent only to the window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T052010Z">
        <seg>(リサイズ、移動、描画、マウスイベント、キーボードイベントといった) ウィンドウに関係する一般的なイベントはウィンドウに対してのみ送られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Typically when UTF8 is used, code units are stored into <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> types, since <bpt i="1" x="1">&lt;c1&gt;</bpt>char<ept i="1">&lt;/c1&gt;</ept> are 8bit wide on almost all systems; when using UTF16 typically code units are stored into <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept> types since <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t<ept i="3">&lt;/c3&gt;</ept> is at least 16bits on all systems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T035146Z">
        <seg>一般的に、UTF8 を使用するときはコード単位を <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> に格納します。なぜなら、ほぼすべてのシステムで <bpt i="1" x="1">&lt;c1&gt;</bpt>char<ept i="1">&lt;/c1&gt;</ept> 型は 8 ビットの大きさを持つためです; そして、一般的に UTF-16 を使用するときはコード単位を <bpt i="2" x="2">&lt;c2&gt;</bpt>wchar_t<ept i="2">&lt;/c2&gt;</ept> 型に格納します。 <bpt i="3" x="3">&lt;c3&gt;</bpt>wchar_t<ept i="3">&lt;/c3&gt;</ept> はすべてのプラットフォームで少なくとも 16 ビットだからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UTF-32 is commonly used under Unix systems for internal representation of Unicode strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T031248Z">
        <seg>一般に、UTF-32 は Unix システムにおける Unicode 文字列の内部表現に使用されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UTF-8 uses code units of 8 bits (1 byte); code points beyond the usual english alphabet are represented using a variable number of bytes, which makes it less efficient than UTF-32 for internal representation.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T033101Z">
        <seg>UTF-8 は 8 ビット (1 バイト) のコード単位を使用します; 普通のアルファベット以外のコードポイントは可変バイトで表現されるため、内部表現としては UTF-32 よりも若干効率が落ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under Unix systems, including Mac OS X, UCS-4 (also known as UTF-32) is used by default, however it is also possible to build wxWidgets to use UTF-8 internally by passing <bpt i="3" x="3">&lt;c3&gt;</bpt>--enable-utf8<ept i="3">&lt;/c3&gt;</ept> option to configure.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T093135Z">
        <seg>Mac OS X を含む Unix システムでは、デフォルトで (UTF-32 としても知られる) UCS-4 が使用されますが、設定に <bpt i="3" x="3">&lt;c3&gt;</bpt>--enable-utf8<ept i="3">&lt;/c3&gt;</ept> オプションを渡すことで内部に UTF-8 を使用するように wxWidgets をビルドすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under certain circumstances, it will be required to define your own event class e.g. for sending more complex data from one place to another.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T163058Z">
        <seg>(より複雑なデータをある場所から別の場所へ送るといった) 特定の状況下では独自のイベントクラスの定義が必要になるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under certain circumstances, you must define your own event class e.g., for sending more complex data from one place to another.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T033840Z">
        <seg>(より複雑なデータをある場所から別の場所へ送るといった) 特定の状況下では独自のイベントクラスを定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode Related Preprocessor Symbols</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T120325Z">
        <seg>Unicode 関連のプリプロセッサシンボル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode Representations and Terminology</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005556Z">
        <seg>Unicode の表現方法と用語</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode Support in wxWidgets</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004802Z">
        <seg>wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode and ANSI modes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T165215Z">
        <seg>Unicode モードと ANSI モード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode and the Outside World</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005637Z">
        <seg>Unicode と外部の世界</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode and the outside world</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T141754Z">
        <seg>Unicode と外部の世界</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode assigns each character of almost any existing alphabet/script a number, which is called <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>code point<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept>; it's typically indicated in documentation manuals and in the Unicode website as <bpt i="2" x="2">&lt;c2&gt;</bpt>U+xxxx<ept i="2">&lt;/c2&gt;</ept> where <bpt i="3" x="3">&lt;c3&gt;</bpt>xxxx<ept i="3">&lt;/c3&gt;</ept> is an hexadecimal number.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T031700Z">
        <seg>Unicode では、存在するほぼすべての文字を <bpt i="0" x="0">&lt;b0&gt;</bpt><bpt i="1" x="1">&lt;e1&gt;</bpt>コードポイント<ept i="1">&lt;/e1&gt;</ept><ept i="0">&lt;/b0&gt;</ept> と呼ばれる番号に割り当てています; 一般的に、マニュアルや Unicode のウェブサイトでは <bpt i="2" x="2">&lt;c2&gt;</bpt>U+xxxx<ept i="2">&lt;/c2&gt;</ept> (<bpt i="3" x="3">&lt;c3&gt;</bpt>xxxx<ept i="3">&lt;/c3&gt;</ept> は 16 進数です) という形で表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode is Always Used by Default</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T032856Z">
        <seg>デフォルトで Unicode が常に使用されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode is a standard for character encoding which addresses the shortcomings of the previous standards (e.g. the ASCII standard), by using 8, 16 or 32 bits for encoding each character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005825Z">
        <seg>Unicode とは、 1 文字あたり 8、 16、 32 ビットを使用することで、これまでの標準的な文字コード (例えば ASCII) の欠点に対処した文字コードの標準規格のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode is a standard for character encoding which addresses the shortcomings of the previous, 8 bit standards, by using at least 16 (and possibly 32) bits for encoding each character.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T160249Z">
        <seg>Unicode とは、 1 文字あたり少なくとも 16 (あるいは 32) ビットを使用することで、これまでの標準的な 8 ビットの文字コードの欠点に対処した文字コードの標準規格のことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode support in wxWidgets</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T154556Z">
        <seg>wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode-Related Compilation Errors</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121243Z">
        <seg>Unicode 関連のコンパイルエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unicode-related compilation settings</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144526Z">
        <seg>Unicode 関連のコンパイル設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike for all the other logging functions, this function can't be overridden by a log target.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T005311Z">
        <seg>他のすべてのロギング関数と異なり、この関数はログターゲットによってオーバーライドすることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike in earlier versions of wxWidgets, OnInit does not return a frame.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T151214Z">
        <seg>wxWidgets の初期バージョンとは違い、OnInit はフレームを返却しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Unlike the original wxWidgets Dialog Editor, editors such as wxDesigner, DialogBlocks, XRCed and wxWorkshop create dialogs based exclusively on sizers, practically forcing the user to create platform independent layouts without compromises.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T114516Z">
        <seg>wxWidgets のオリジナルのダイアログエディタと異なり、wxDesigner、DialogBlocks、XRCed、wxWorkshop などのエディタはもっぱらサイザーのみに基づいてダイアログを作成し、事実上、プラットフォーム非依存のレイアウトを妥協なしに作ることをユーザに強制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Up</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145429Z">
        <seg>Up</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::ChangeSelection<ept i="0">&lt;/a0&gt;</ept> instead, as <bpt i="1" x="1">&lt;a1&gt;</bpt>wxNotebook::SetSelection<ept i="1">&lt;/a1&gt;</ept> is deprecated</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061010Z">
        <seg><bpt i="1" x="1">&lt;a1&gt;</bpt>wxNotebook::SetSelection<ept i="1">&lt;/a1&gt;</ept> は非推奨のため、代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxNotebook::ChangeSelection<ept i="0">&lt;/a0&gt;</ept> を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use <bpt i="0" x="0">&lt;t0&gt;</bpt>wxString<ept i="0">&lt;/t0&gt;</ept> instead of C style strings.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151905Z">
        <seg>C 形式の文字列の代わりに <bpt i="0" x="0">&lt;t0&gt;</bpt>wxString<ept i="0">&lt;/t0&gt;</ept> を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use PushEventHandler/PopEventHandler to form a chain of event handlers, where each handler processes a different range of events independently from the other handlers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T070526Z">
        <seg>他のイベントハンドラとは異なる範囲のイベントを独立して処理するようなイベントハンドラを作成する場合に PushEventHandler/PopEventHandler を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use the macros DECLARE_DYNAMIC_CLASS and IMPLEMENT_DYNAMIC_CLASS in order to allow the framework to create view objects on demand.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T020328Z">
        <seg>Use the macros DECLARE_DYNAMIC_CLASS and IMPLEMENT_DYNAMIC_CLASS in order to allow the framework to create view objects on demand.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this macro in a source file to end listing static event handlers for a specific class...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022449Z">
        <seg>静的イベントハンドラの列挙を終了するために、ソースファイル内でこのマクロを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this macro in a source file to start listing static event handlers for a specific class...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T022348Z">
        <seg>静的イベントハンドラの列挙を開始するために、ソースファイル内でこのマクロを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this macro inside a class declaration to declare a static event table for that class...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T014717Z">
        <seg>静的イベントテーブルを宣言するために、クラス宣言の中でこのマクロを使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this to paint on the client area of a window, but <bpt i="2" x="2">&lt;e2&gt;</bpt>only<ept i="2">&lt;/e2&gt;</ept> from within a <bpt i="3" x="3">&lt;a3&gt;</bpt>wxPaintEvent<ept i="3">&lt;/a3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154306Z">
        <seg>ウィンドウのクライアントエリアに描画するときに使用しますが、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxPaintEvent<ept i="3">&lt;/a3&gt;</ept> の中で <bpt i="2" x="2">&lt;e2&gt;</bpt>のみ<ept i="2">&lt;/e2&gt;</ept> 使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this to paint on the client area of window (the part without borders and other decorations), but do not use it from within an <bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintEvent<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154132Z">
        <seg>ウィンドウのクライアントエリア (ボーダーや他の装飾を除いた部分) に描画するときに使用します。ただし、<bpt i="2" x="2">&lt;a2&gt;</bpt>wxPaintEvent<ept i="2">&lt;/a2&gt;</ept> の中で使用しないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this to paint on the screen, as opposed to an individual window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T153925Z">
        <seg>個別のウィンドウではなく、スクリーン上に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Use this to paint on the whole area of a window, including decorations.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T154315Z">
        <seg>装飾を含む、ウィンドウ全体に描画するときに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Used for special cursor processing based on current mouse position</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055453Z">
        <seg>現在のマウス位置に基づいた特殊なカーソル処理に使用される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Used to query layout information</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055346Z">
        <seg>レイアウト情報の問い合わせに使用される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>User Generated Events vs Programmatically Generated Events</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155312Z">
        <seg>ユーザ生成イベント vs プログラム生成イベント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using Existing Event Classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T145424Z">
        <seg>既存のイベントクラスの使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using a cast to force the issue (listed only for completeness):</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T125204Z">
        <seg>型を決定させるためのキャスト (これはリストの網羅性のために上げているだけです):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using an explicit conversion to narrow, multibyte, string:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124953Z">
        <seg>ナロー (マルチバイト) 文字列への明示的な変換:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using existing event classes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T154608Z">
        <seg>既存のイベントクラスの使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using these target all the log messages can be redirected to a text control.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T125000Z">
        <seg>これらのターゲットを使用してログメッセージをテキストコントロールへリダイレクトできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Using trace masks</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T131107Z">
        <seg>トレースマスクの使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Usually there is no next event handler so the control passes to the next step but see <bpt i="0" x="0">&lt;a0&gt;</bpt>Event Handlers Chain<ept i="0">&lt;/a0&gt;</ept> for how the next handler may be defined.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T141636Z">
        <seg>普通は次のイベントハンドラが存在しないため、次のステップを行いますが、次のイベントハンドラを定義する方法は <bpt i="0" x="0">&lt;a0&gt;</bpt>イベントハンドラの連鎖<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Usually this doesn't matter much because most algorithms used on the strings examine them sequentially anyhow and because <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> implements a cache for iterating over the string by index but it can have serious consequences for algorithms using random access to string elements as they typically acquire O(N^2) time complexity instead of O(N) where N is the length of the string.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151138Z">
        <seg>大半のアルゴリズムでは文字列を逐次的に調べますし、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> は文字列にインデックスでアクセスするためのキャッシュを持つため、通常はこのことがそれほど問題になることはありません。しかし、文字列にランダムアクセスするアルゴリズムにとっては、一般的に計算時間が O(N) から O(N^2) になる (N は文字列長です) ため、深刻な影響があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Usually you don't need to worry about this as the conversions do their work behind the scenes however in some cases it doesn't work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122249Z">
        <seg>これらの変換は裏側で行われるため、通常はこのことを気にする必要はありませんが、いくつかの場合ではうまく動作しないことがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Version: 2.9.4</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004613Z">
        <seg>Version: 2.9.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WXMODE</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155355Z">
        <seg>WXMODE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WXPREFIX</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154852Z">
        <seg>WXPREFIX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WXSTDERR</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155512Z">
        <seg>WXSTDERR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WXTRACE</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T154508Z">
        <seg>WXTRACE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Watch out to put in enough casts to the inherited event function.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T042446Z">
        <seg>継承したイベント関数へのキャストが必要なことも忘れないでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We have a <bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> type which maps either on <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> or <bpt i="2" x="2">&lt;t2&gt;</bpt>wchar_t<ept i="2">&lt;/t2&gt;</ept> depending on the mode in which program is being compiled.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151556Z">
        <seg><bpt i="0" x="0">&lt;t0&gt;</bpt>wxChar<ept i="0">&lt;/t0&gt;</ept> 型はコンパイル時のモードによって <bpt i="1" x="1">&lt;t1&gt;</bpt>char<ept i="1">&lt;/t1&gt;</ept> か <bpt i="2" x="2">&lt;t2&gt;</bpt>wchar_t<ept i="2">&lt;/t2&gt;</ept> のいずれかにマッピングされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We have seen that it was easy to write Unicode programs using wxWidgets types and macros, but it has been also mentioned that it isn't quite enough.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T142305Z">
        <seg>すでに見てきたように、wxWidgets の型とマクロを使用することで簡単に Unicode プログラムを書くことができます。しかし、それで十分ではないことについても述べてきました。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What happens here?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T151527Z">
        <seg>ここでは何が起きているのでしょうか? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What is Unicode?</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T165157Z">
        <seg>Unicode とは?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What makes sizers so well fitted for use in wxWidgets is the fact that every control reports its own minimal size and the algorithm can handle differences in font sizes or different window (dialog item) sizes on different platforms without problems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T143344Z">
        <seg>サイザーが wxWidgets に非常に適している理由は、すべてのコントロールが自身の最小サイズを通知し、このアルゴリズムが異なるプラットフォームのフォントサイズやウィンドウ (ダイアログのアイテム) のサイズの違いを問題なく取り扱うことができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When an event is received from the windowing system, wxWidgets calls <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::ProcessEvent()<ept i="0">&lt;/a0&gt;</ept> on the first event handler object belonging to the window generating the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T064141Z">
        <seg>ウィンドウからイベントを受信したとき、wxWidgets はイベントを生成したウィンドウに属する最初のイベントハンドラオブジェクトの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::ProcessEvent<ept i="0">&lt;/a0&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When an event is received from the windowing system, wxWidgets calls <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::ProcessEvent<ept i="0">&lt;/a0&gt;</ept> on the first event handler object belonging to the window generating the event.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T083429Z">
        <seg>ウィンドウからイベントを受信したとき、wxWidgets はイベントを生成したウィンドウに属する最初のイベントハンドラオブジェクトの <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler::ProcessEvent<ept i="0">&lt;/a0&gt;</ept> を呼び出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When controls get more complicated, more specific wxCommandEvent-derived event classes providing additional control-specific information can be used, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTreeEvent<ept i="2">&lt;/a2&gt;</ept> for events from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTreeCtrl<ept i="3">&lt;/a3&gt;</ept> windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024036Z">
        <seg>より複雑なコントロールのときには、コントロール独自の追加情報を提供する、wxCommandEvent を継承したより具体的なイベントクラスを使用できます。例えば、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxTreeCtrl<ept i="3">&lt;/a3&gt;</ept> ウィンドウから送られるイベントでは <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTreeEvent<ept i="2">&lt;/a2&gt;</ept> が使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When controls get more complicated, then specific event classes are used, such as <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTreeEvent<ept i="2">&lt;/a2&gt;</ept> for events from <bpt i="3" x="3">&lt;a3&gt;</bpt>wxTreeCtrl<ept i="3">&lt;/a3&gt;</ept> windows.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081654Z">
        <seg>より複雑なコントロールのときには特定のイベントクラスが使用されます。例えば、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxTreeCtrl<ept i="3">&lt;/a3&gt;</ept> から発生するイベントには <bpt i="2" x="2">&lt;a2&gt;</bpt>wxTreeEvent<ept i="2">&lt;/a2&gt;</ept> が使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When using a vertical sizer, each child can be centered, aligned to the right or aligned to the left.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T151449Z">
        <seg>垂直方向のサイザーを使用する場合、各子コントロールを中央寄せ、右寄せ、左寄せにすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When working with Unicode, it's important to define the meaning of some terms.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T012942Z">
        <seg>Unicode を使用するときは、いくつかの言葉を定義しておくことが重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When wxGROW flag is not used, the item can be aligned within available space.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T161646Z">
        <seg>wxGROW フラグを使用しない場合、コントロールを利用可能なスペース内で整列させることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>While generically <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvents<ept i="0">&lt;/a0&gt;</ept> can be generated both by user actions (e.g. resize of a <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept>) and by calls to functions (e.g. <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSize<ept i="2">&lt;/a2&gt;</ept>), wxWidgets controls normally send <bpt i="3" x="3">&lt;a3&gt;</bpt>wxCommandEvent<ept i="3">&lt;/a3&gt;</ept>-derived events only for the user-generated events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060815Z">
        <seg>一般的に <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvents<ept i="0">&lt;/a0&gt;</ept> はユーザ操作 (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> のリサイズなど) と関数呼び出し (<bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSize<ept i="2">&lt;/a2&gt;</ept> など) のどちらからでも発生しますが、<bpt i="3" x="3">&lt;a3&gt;</bpt>wxCommandEvent<ept i="3">&lt;/a3&gt;</ept> を継承したイベントはユーザが操作した場合のみ、wxWidgets コントロールから送信されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>While generically wxEvents can be generated both by user actions (e.g., resize of a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept>) and by calls to functions (e.g., <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetSize<ept i="1">&lt;/a1&gt;</ept>), wxWidgets controls normally send wxCommandEvent-derived events only for the user-generated events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T155511Z">
        <seg>一般的に wxEvents はユーザ操作 (<bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow<ept i="0">&lt;/a0&gt;</ept> のリサイズなど) と関数呼び出し (<bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetSize<ept i="1">&lt;/a1&gt;</ept> など) のどちらからでも発生しますが、wxCommandEvent を継承したイベントはユーザが操作した場合のみ、wxWidgets コントロールから送信されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window Identifiers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T171133Z">
        <seg>ウィンドウ識別子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window identifiers</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T070533Z">
        <seg>ウィンドウ識別子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Window identifiers are integers, and are used to uniquely determine window identity in the event system (though you can use it for other purposes).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041815Z">
        <seg>ウィンドウ識別子とは、イベントシステムにおいてウィンドウを一意に識別するための整数値です。 (とはいえ、他の用途に使用することもできます)  </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Bind&lt;&gt;() they simply won't be called if it wasn't correctly initialized.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T025528Z">
        <seg>Bind&lt;&gt;() を使用することで、初期化が正常に行われなかった場合は単純にイベントハンドラが呼び出されないだけになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With the aid of boost::bind&lt;&gt;() you can even use methods or functions which don't quite have the correct signature:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T030546Z">
        <seg>boost::bind&lt;&gt;() のおかげで、シグネチャが完全に一致しないメンバ関数でも使用することができます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With the event handlers, you only have the option of pre-processing the events and in order to still let the default behaviour happen you must call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::Skip()<ept i="0">&lt;/a0&gt;</ept> and <bpt i="1" x="1">&lt;e1&gt;</bpt>not<ept i="1">&lt;/e1&gt;</ept> call the base class event handler directly.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T154704Z">
        <seg>イベントハンドラでは選択肢は事前処理だけで、デフォルトの振る舞いを呼び出すためには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvent::Skip()<ept i="0">&lt;/a0&gt;</ept> を呼ぶ必要があり、基底クラスのイベントハンドラを直接呼び出しては <bpt i="1" x="1">&lt;e1&gt;</bpt>いけません<ept i="1">&lt;/e1&gt;</ept> 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With the virtual functions, you need to call the base class function directly and you can do it either in the beginning of the derived class handler function (to post-process the event) or at its end (to pre-process the event).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T154649Z">
        <seg>仮想関数では基底クラスの関数を直接呼び出す必要があり、継承クラスのイベントハンドラの最初 (イベントの事後処理を行なう場合) か最後 (イベントの事前処理を行なう場合) で呼ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Within wxDesigner, this stretch factor gets set from the <bpt i="0" x="0">&lt;e0&gt;</bpt>Option<ept i="0">&lt;/e0&gt;</ept> menu.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141317Z">
        <seg>wxDesigner では、ストレッチ係数は <bpt i="0" x="0">&lt;e0&gt;</bpt>Option<ept i="0">&lt;/e0&gt;</ept> メニューから指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Within wxDesigner, this stretch factor gets set from the <bpt i="0" x="0">&lt;i0&gt;</bpt>Option<ept i="0">&lt;/i0&gt;</ept> menu.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T151238Z">
        <seg>wxDesigner では、ストレッチ係数は <bpt i="0" x="0">&lt;i0&gt;</bpt>Option<ept i="0">&lt;/i0&gt;</ept> メニューから指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Write data to the file (descriptor).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091803Z">
        <seg>ファイル (ディスクリプタ) へデータを書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writeable reference to a character in wxString.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T121343Z">
        <seg>wxString 内の文字列の書き込み可能な参照です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes text at the current position.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T020644Z">
        <seg>Writes text at the current position.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writes the text into the text control at the current insertion position.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130516T160644Z">
        <seg>テキストコントロールの現在の挿入位置へテキストを書き込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123050Z">
        <seg>次のように書くと</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Writing internationalized programs is much easier with Unicode and, as the support for it improves, it should become more and more so.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T154342Z">
        <seg>Unicode を使うことで、国際化対応のプログラムをより簡単に書くことができます。そして、 Unicode 対応が進むにつれ、それはますます簡単になっていくことでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You also need to insert a macro</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T014624Z">
        <seg>また、以下のマクロを</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::SetTopWindow<ept i="0">&lt;/a0&gt;</ept> to let wxWidgets know about the top window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T151234Z">
        <seg>wxWidgets へトップウィンドウを教えるためには <bpt i="0" x="0">&lt;a0&gt;</bpt>wxApp::SetTopWindow<ept i="0">&lt;/a0&gt;</ept> を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also redirect the <bpt i="4" x="4">&lt;e4&gt;</bpt>wxLogXXX<ept i="4">&lt;/e4&gt;</ept> calls to <bpt i="5" x="5">&lt;e5&gt;</bpt>cout<ept i="5">&lt;/e5&gt;</ept> by just writing:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T091504Z">
        <seg>以下のように書くことで <bpt i="4" x="4">&lt;e4&gt;</bpt>wxLogXXX<ept i="4">&lt;/e4&gt;</ept> 呼び出しを <bpt i="5" x="5">&lt;e5&gt;</bpt>cout<ept i="5">&lt;/e5&gt;</ept> へリダイレクトすることもできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also redirect the <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLogXXX<ept i="0">&lt;/i0&gt;</ept> calls to <bpt i="1" x="1">&lt;i1&gt;</bpt>cout<ept i="1">&lt;/i1&gt;</ept> by just writing:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015131Z">
        <seg>以下のように書くことで <bpt i="0" x="0">&lt;i0&gt;</bpt>wxLogXXX<ept i="0">&lt;/i0&gt;</ept> 呼び出しを <bpt i="1" x="1">&lt;i1&gt;</bpt>cout<ept i="1">&lt;/i1&gt;</ept> へリダイレクトすることもできます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can also use DECLARE_APP(appClass) in a header file to declare the wxGetApp function which returns a reference to the application object.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T151539Z">
        <seg>また、ヘッダファイル内で DECLARE_APP(appClass) を使用することで、アプリケーションオブジェクトへの参照を返却する wxGetApp 関数を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can derive a new class from <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept> instead, defining the appropriate event table, and then call <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetEventHandler<ept i="1">&lt;/a1&gt;</ept> (or, preferably, <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::PushEventHandler<ept i="2">&lt;/a2&gt;</ept>) to make this event handler the object that responds to events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T072042Z">
        <seg>代わりに <bpt i="0" x="0">&lt;a0&gt;</bpt>wxEvtHandler<ept i="0">&lt;/a0&gt;</ept> を継承した新しいクラスを作成して適切なイベントテーブルを定義し、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::SetEventHandler<ept i="1">&lt;/a1&gt;</ept> (か、より望ましくは <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::PushEventHandler<ept i="2">&lt;/a2&gt;</ept>) を呼び出してこのイベントテーブルを使用するようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can derive a new class from wxEvtHandler instead, defining the appropriate event table, and then call <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetEventHandler<ept i="0">&lt;/a0&gt;</ept> (or, preferably, <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::PushEventHandler<ept i="1">&lt;/a1&gt;</ept>) to make this event handler the object that responds to events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130506T041203Z">
        <seg>代わりに wxEvtHandler を継承した新しいクラスを作成して適切なイベントテーブルを定義し、<bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::SetEventHandler<ept i="0">&lt;/a0&gt;</ept> (か、より望ましいのは <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow::PushEventHandler<ept i="1">&lt;/a1&gt;</ept>) を呼び出してこのイベントテーブルを使用するようにできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can either choose a single approach that you find preferable or freely combine both methods in your program in different classes or even in one and the same class, although this is probably sufficiently confusing to be a bad idea.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T021925Z">
        <seg>より適切と思ういずれかの方法を選択することもできますし、(おそらく混乱を招く、悪い考えでしょうが) 異なるクラスや同じクラス内で自由に両方の方法を組み合わせることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can grab all the input for an existing dialog box, and edit it 'in situ', before restoring its behaviour to normal.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T124411Z">
        <seg>その場合、既存のダイアログの振る舞いを元に戻す前にすべての入力を取得し、"その場で" 編集することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can hide controls contained in sizers the same way you would hide any control, using the <bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Show<ept i="0">&lt;/a0&gt;</ept> method.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130519T151534Z">
        <seg><bpt i="0" x="0">&lt;a0&gt;</bpt>wxWindow::Show<ept i="0">&lt;/a0&gt;</ept> を用いて任意のコントロールを非表示にするのと同じ方法で、サイザー内のコントロールを非表示にすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can however safely assume that GUI is (already/still) available when your log target as used as wxWidgets automatically switches to using <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogStderr<ept i="3">&lt;/a3&gt;</ept> if it isn't.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T122008Z">
        <seg>しかし、ログターゲットを使用するときに (すでに/まだ) GUI が存在すると安全に仮定することができます。なぜなら、 GUI が存在しない場合は <bpt i="3" x="3">&lt;a3&gt;</bpt>wxLogStderr<ept i="3">&lt;/a3&gt;</ept> を使用するように wxWidgets がログターゲットを自動的に切り替えるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can ignore the <bpt i="0" x="0">&lt;i0&gt;</bpt>value<ept i="0">&lt;/i0&gt;</ept> parameter of the DECLARE_EVENT_TYPE macro since it used only for backwards compatibility with wxWidgets 2.0.x based applications where you have to give the event type ID an explicit value.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T154344Z">
        <seg>DECLARE_EVENT_TYPE の <bpt i="0" x="0">&lt;i0&gt;</bpt>value<ept i="0">&lt;/i0&gt;</ept> 引数はイベント ID を明示的に指定していた wxWidgets 2.0.x との後方互換性のために使用されているだけなので、無視することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can set WXPREFIX if you are for example distributing a binary version of an application and you don't know in advance where it will be installed.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155354Z">
        <seg>例えば、アプリケーションのバイナリを配布するときにどこへインストールされるか分からないような場合に WXPREFIX を設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can skip the first two sections if you're already familiar with Unicode and wish to jump directly in the details of its support in the library:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T005506Z">
        <seg>すでに Unicode について詳しい場合、最初の 2 つの章は飛ばして、直接ライブラリの対応内容の詳細に飛んでください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can use wxID_HIGHEST to determine the number above which it is safe to define your own identifiers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080114Z">
        <seg>新たな識別子を定義する場合、wxID_HIGHEST 以上の値を使用することで安全に値を決定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may also force the conversion to <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> by using an explicit cast but beware that converting the value to char uses the conversion to current locale and may return 0 if it fails.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122945Z">
        <seg>もしくは、明示的なキャストを用いて強制的に <bpt i="0" x="0">&lt;c0&gt;</bpt>char<ept i="0">&lt;/c0&gt;</ept> か <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t<ept i="1">&lt;/c1&gt;</ept> へ変換することもできますが、 char 型への変換は現在のロケールに対して行われ、変換に失敗した場合は 0 が返却されることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may use the <bpt i="0" x="0">&lt;c0&gt;</bpt>wxID_OK<ept i="0">&lt;/c0&gt;</ept> identifier, for example, on any number of dialogs as long as you don't have several within the same dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130517T171208Z">
        <seg>例えば、同じダイアログ内で複数回使うのでなければ、いくつものダイアログで <bpt i="0" x="0">&lt;c0&gt;</bpt>wxID_OK<ept i="0">&lt;/c0&gt;</ept> 識別子を使用しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You may use the <bpt i="0" x="0">&lt;t0&gt;</bpt>wxID_OK<ept i="0">&lt;/t0&gt;</ept> identifier, for example, on any number of dialogs so long as you don't have several within the same dialog.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T075113Z">
        <seg>例えば、同じダイアログ内で複数回使うのでなければ、いくつものダイアログで <bpt i="0" x="0">&lt;t0&gt;</bpt>wxID_OK<ept i="0">&lt;/t0&gt;</ept> 識別子を使用しても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You must then call Layout on the sizer to force an update.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T145952Z">
        <seg>その後、強制的に更新するためにサイザーの Layout 関数を呼び出す必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should define <bpt i="0" x="0">&lt;t0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/t0&gt;</ept> to 1 to compile your program in Unicode mode.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144600Z">
        <seg>プログラムを Unicode モードでコンパイルする場合、 <bpt i="0" x="0">&lt;t0&gt;</bpt>wxUSE_UNICODE<ept i="0">&lt;/t0&gt;</ept> を 1 に定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should delete all wxWidgets object that you created by the time OnExit finishes.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162416Z">
        <seg>作成した wxWidgets は OnExit が完了するまでにすべて削除するべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You shouldn't pass <bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> result to vararg functions such as standard <bpt i="1" x="1">&lt;c1&gt;</bpt>printf()<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124508Z">
        <seg><bpt i="0" x="0">&lt;c0&gt;</bpt>c_str()<ept i="0">&lt;/c0&gt;</ept> の戻り値を標準 <bpt i="1" x="1">&lt;c1&gt;</bpt>printf()<ept i="1">&lt;/c1&gt;</ept> などの可変引数関数へ渡してはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You will find the details about the event table macros and the corresponding wxEvent-derived classes in the discussion of each control generating these events.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T024411Z">
        <seg>イベントテーブルマクロと、それに付随する wxEvent の継承クラスについては、イベントを生成する各コントロールの説明で詳しく説明しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You'll have to define and declare a new event type using either way, and this is done using the following macros:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T162809Z">
        <seg>どちらの方法を使うにせよ、新しいイベント型の定義と宣言が必要となりますが、それには以下のマクロを使用します:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>and the somewhat less usual</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041535Z">
        <seg>そして、若干、一般的ではないですが、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>bind( &amp;MyHandler::OnExit, &amp;myHandler, EXIT_FAILURE, _1, <bpt i="5" x="5">&lt;s5&gt;</bpt>"Bye"<ept i="5">&lt;/s5&gt;</ept> ));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061218Z">
        <seg>bind( &amp;MyHandler::OnExit, &amp;myHandler, EXIT_FAILURE, _1, <bpt i="5" x="5">&lt;s5&gt;</bpt>"Bye"<ept i="5">&lt;/s5&gt;</ept> ));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer,</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112815Z">
        <seg>button_sizer,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;<bpt i="34" x="34">&lt;a34&gt;</bpt>Add<ept i="34">&lt;/a34&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145523Z">
        <seg>button_sizer-&gt;<bpt i="34" x="34">&lt;a34&gt;</bpt>Add<ept i="34">&lt;/a34&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;<bpt i="35" x="35">&lt;a35&gt;</bpt>Add<ept i="35">&lt;/a35&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143818Z">
        <seg>button_sizer-&gt;<bpt i="35" x="35">&lt;a35&gt;</bpt>Add<ept i="35">&lt;/a35&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;<bpt i="42" x="42">&lt;a42&gt;</bpt>Add<ept i="42">&lt;/a42&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145533Z">
        <seg>button_sizer-&gt;<bpt i="42" x="42">&lt;a42&gt;</bpt>Add<ept i="42">&lt;/a42&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;<bpt i="45" x="45">&lt;a45&gt;</bpt>Add<ept i="45">&lt;/a45&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T143853Z">
        <seg>button_sizer-&gt;<bpt i="45" x="45">&lt;a45&gt;</bpt>Add<ept i="45">&lt;/a45&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112307Z">
        <seg>button_sizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>char ch = '*';</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160628Z">
        <seg>char ch = '*';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>class DerivedApp : public wxApp
{
public:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161002Z">
        <seg>class DerivedApp : public wxApp
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>class MyApp : public wxApp
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162433Z">
        <seg>class MyApp : public wxApp
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>class MyFrame : public wxFrame
{
public:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081755Z">
        <seg>class MyFrame : public wxFrame
{
public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>const char *s = "Hello, world!";</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160629Z">
        <seg>const char *s = "Hello, world!";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>const char* ascii_str = "Some text";</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144205Z">
        <seg>const char* ascii_str = "Some text";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>const wchar_t *ws = L"Hello, world!";</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160623Z">
        <seg>const wchar_t *ws = L"Hello, world!";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>delete m_helpCtrl;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162759Z">
        <seg>delete m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>does <bpt i="0" x="0">&lt;b0&gt;</bpt>not<ept i="0">&lt;/b0&gt;</ept> work because the temporary buffer returned by <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::ToUTF8()<ept i="1">&lt;/a1&gt;</ept> is destroyed and <bpt i="2" x="2">&lt;c2&gt;</bpt>p<ept i="2">&lt;/c2&gt;</ept> is left pointing nowhere.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171118Z">
        <seg>動作 <bpt i="0" x="0">&lt;b0&gt;</bpt>しません<ept i="0">&lt;/b0&gt;</ept>。これは、<bpt i="1" x="1">&lt;a1&gt;</bpt>wxString::ToUTF8()<ept i="1">&lt;/a1&gt;</ept> の返却した一時バッファが破棄され、<bpt i="2" x="2">&lt;c2&gt;</bpt>p<ept i="2">&lt;/c2&gt;</ept> が存在しないアドレスを指したままになるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>doesn't compile.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130846Z">
        <seg>これはコンパイルすることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>doesn't work because the argument of the switch statement must be an integer expression so you need to replace <bpt i="0" x="0">&lt;c0&gt;</bpt>s<ept i="0">&lt;/c0&gt;</ept>[n] with</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123101Z">
        <seg>うまく動作しません。なぜなら、switch 文の引数は整数式でなければならないためです。そのため、<bpt i="0" x="0">&lt;c0&gt;</bpt>s<ept i="0">&lt;/c0&gt;</ept>[n] を次のように置き換える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>doesn't yield a pointer to char so you may not pass it to functions expecting <bpt i="0" x="0">&lt;c0&gt;</bpt>char*<ept i="0">&lt;/c0&gt;</ept> or <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t*<ept i="1">&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T034117Z">
        <seg>では char 型のポインタを得ることはできないため、これを <bpt i="0" x="0">&lt;c0&gt;</bpt>char*<ept i="0">&lt;/c0&gt;</ept> または <bpt i="1" x="1">&lt;c1&gt;</bpt>wchar_t*<ept i="1">&lt;/c1&gt;</ept> を受け取る関数に渡すことはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>else</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022721Z">
        <seg>else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>event.SetCurve( m_curve );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164453Z">
        <seg>event.SetCurve( m_curve );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>event.SetEventObject( this );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155833Z">
        <seg>event.SetEventObject( this );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>event.SetText( wxT("Hallo") );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155946Z">
        <seg>event.SetText( wxT("Hallo") );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>event.Skip();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022720Z">
        <seg>event.Skip();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T061208Z">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler( bind( &amp;MyHandler::OnExit, &amp;myHandler, _1 ));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060952Z">
        <seg>function&lt; void ( wxCommandEvent &amp; ) &gt; exitHandler( bind( &amp;MyHandler::OnExit, &amp;myHandler, _1 ));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>however this doesn't work correctly for strings with embedded <bpt i="0" x="0">&lt;c0&gt;</bpt>NUL<ept i="0">&lt;/c0&gt;</ept> characters and the use of iterators is generally preferred as they provide some run-time checks (at least in debug build) unlike the raw pointers.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T154638Z">
        <seg>ただし、これは文字列中に <bpt i="0" x="0">&lt;c0&gt;</bpt>NUL<ept i="0">&lt;/c0&gt;</ept> 文字が含まれる場合には正しく動作しません。生ポインタと違い、イテレータを使うといくつかの実行時チェックが (少なくともデバッグビルドでは) 行われるため、一般的にはこちらの方が望ましいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if ( !file.Open("bar") )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030138Z">
        <seg>if ( !file.Open("bar") )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>if ( isalpha( event.KeyCode() ) )</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022522Z">
        <seg>if ( isalpha( event.KeyCode() ) )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>int       m_count;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081804Z">
        <seg>int       m_count;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>int len = s.Len();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161655Z">
        <seg>int len = s.Len();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>int len = strlen(s);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160630Z">
        <seg>int len = strlen(s);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>int len = wcslen(ws);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160624Z">
        <seg>int len = wcslen(ws);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>is not going to work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124620Z">
        <seg>これは正常に動作しないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>m_child-&gt;Bind(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEVT_LEAVE_WINDOW<ept i="0">&lt;/a0&gt;</ept>, &amp;MyFrame::OnMouseLeave, <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045726Z">
        <seg>m_child-&gt;Bind(<bpt i="0" x="0">&lt;a0&gt;</bpt>wxEVT_LEAVE_WINDOW<ept i="0">&lt;/a0&gt;</ept>, &amp;MyFrame::OnMouseLeave, <bpt i="1" x="1">&lt;s1&gt;</bpt>this<ept i="1">&lt;/s1&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>m_helpCtrl = <bpt i="6" x="6">&lt;s6&gt;</bpt>new<ept i="6">&lt;/s6&gt;</ept> wxCHMHelpController;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T124601Z">
        <seg>m_helpCtrl = <bpt i="6" x="6">&lt;s6&gt;</bpt>new<ept i="6">&lt;/s6&gt;</ept> wxCHMHelpController;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>m_helpCtrl = new wxCHMHelpController;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162755Z">
        <seg>m_helpCtrl = new wxCHMHelpController;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>m_pos(pos)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130515T150434Z">
        <seg>m_pos(pos)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112813Z">
        <seg>new wxButton( this, wxID_CANCEL, "Cancel" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112308Z">
        <seg>new wxButton( this, wxID_OK, "OK" ),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112137Z">
        <seg>new wxTextCtrl( this, -1, "My text.", wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>otherwise.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123840Z">
        <seg> </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_events_chain.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T151309Z">
        <seg>overview_events_chain.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_events_winstack.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130514T152147Z">
        <seg>overview_events_winstack.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_00.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141213Z">
        <seg>overview_sizer_00.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_01.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141213Z">
        <seg>overview_sizer_01.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_02.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141215Z">
        <seg>overview_sizer_02.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_03.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141202Z">
        <seg>overview_sizer_03.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_04.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141203Z">
        <seg>overview_sizer_04.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_05.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141203Z">
        <seg>overview_sizer_05.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_06.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141223Z">
        <seg>overview_sizer_06.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_07.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141309Z">
        <seg>overview_sizer_07.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_08.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141653Z">
        <seg>overview_sizer_08.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_09.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141805Z">
        <seg>overview_sizer_09.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_10.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141806Z">
        <seg>overview_sizer_10.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_sizer_11.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T141822Z">
        <seg>overview_sizer_11.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_unicode_codes.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T033327Z">
        <seg>overview_unicode_codes.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>overview_unicode_glyphs.png</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T013332Z">
        <seg>overview_unicode_glyphs.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf("Compiled at %s\n", __DATE__);
#endif // Unicode/ANSI</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160636Z">
        <seg>printf("Compiled at %s\n", __DATE__);
#endif // Unicode/ANSI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>c_str<ept i="3">&lt;/a3&gt;</ept>())</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T125205Z">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>c_str<ept i="3">&lt;/a3&gt;</ept>())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>mb_str<ept i="3">&lt;/a3&gt;</ept>())</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T125001Z">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, (<bpt i="1" x="1">&lt;s1&gt;</bpt>const<ept i="1">&lt;/s1&gt;</ept> <bpt i="2" x="2">&lt;s2&gt;</bpt>char<ept i="2">&lt;/s2&gt;</ept> *)s.<bpt i="3" x="3">&lt;a3&gt;</bpt>mb_str<ept i="3">&lt;/a3&gt;</ept>())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>())</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124606Z">
        <seg>printf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>program can't continue, abort immediately</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110410Z">
        <seg>プログラムを継続できないため、ただちに中断します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>public:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162435Z">
        <seg>public:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>return 0;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162801Z">
        <seg>return 0;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>return true;
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161010Z">
        <seg>return true;
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>s.<bpt i="0" x="0">&lt;a0&gt;</bpt>c_str<ept i="0">&lt;/a0&gt;</ept>() + n</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123831Z">
        <seg>s.<bpt i="0" x="0">&lt;a0&gt;</bpt>c_str<ept i="0">&lt;/a0&gt;</ept>() + n</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>s[n].GetValue()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T122634Z">
        <seg>s[n].GetValue()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>should be rewritten as</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T151602Z">
        <seg>これは以下のように書き換えるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>somewhere in the class declaration.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T015006Z">
        <seg>クラス宣言内のどこかに挿入する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the_frame-&gt;<bpt i="10" x="10">&lt;a10&gt;</bpt>Show<ept i="10">&lt;/a10&gt;</ept>(<bpt i="11" x="11">&lt;s11&gt;</bpt>true<ept i="11">&lt;/s11&gt;</ept>);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152700Z">
        <seg>the_frame-&gt;<bpt i="10" x="10">&lt;a10&gt;</bpt>Show<ept i="10">&lt;/a10&gt;</ept>(<bpt i="11" x="11">&lt;s11&gt;</bpt>true<ept i="11">&lt;/s11&gt;</ept>);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>the_frame-&gt;Show(true);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161008Z">
        <seg>the_frame-&gt;Show(true);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;<bpt i="17" x="17">&lt;a17&gt;</bpt>Add<ept i="17">&lt;/a17&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T142940Z">
        <seg>topsizer-&gt;<bpt i="17" x="17">&lt;a17&gt;</bpt>Add<ept i="17">&lt;/a17&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;<bpt i="18" x="18">&lt;a18&gt;</bpt>Add<ept i="18">&lt;/a18&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145451Z">
        <seg>topsizer-&gt;<bpt i="18" x="18">&lt;a18&gt;</bpt>Add<ept i="18">&lt;/a18&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;<bpt i="51" x="51">&lt;a51&gt;</bpt>Add<ept i="51">&lt;/a51&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T145551Z">
        <seg>topsizer-&gt;<bpt i="51" x="51">&lt;a51&gt;</bpt>Add<ept i="51">&lt;/a51&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;<bpt i="55" x="55">&lt;a55&gt;</bpt>Add<ept i="55">&lt;/a55&gt;</ept>(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T144050Z">
        <seg>topsizer-&gt;<bpt i="55" x="55">&lt;a55&gt;</bpt>Add<ept i="55">&lt;/a55&gt;</ept>(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112134Z">
        <seg>topsizer-&gt;Add(</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>topsizer-&gt;SetSizeHints( this );   // set size hints to honour minimum size
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113023Z">
        <seg>topsizer-&gt;SetSizeHints( this );   // 最小サイズを守るためのサイズヒントを設定する
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>trace messages are also only enabled in debug mode</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T110441Z">
        <seg>トレースメッセージもデバッグモード時のみ有効化されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>virtual bool OnInit();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161004Z">
        <seg>virtual bool OnInit();
};

IMPLEMENT_APP(DerivedApp)

bool DerivedApp::OnInit()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void MyTextCtrl::OnChar(wxKeyEvent&amp; event)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022521Z">
        <seg>void MyTextCtrl::OnChar(wxKeyEvent&amp; event)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void MyWindow::OnMyCmd(wxCommandEvent&amp; event)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141638Z">
        <seg>void MyWindow::OnMyCmd(wxCommandEvent&amp; event)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void OnExit(wxCommandEvent&amp; event);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081800Z">
        <seg>void OnExit(wxCommandEvent&amp; event);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>void OnSize(wxSizeEvent&amp; event);

protected:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T081802Z">
        <seg>void OnSize(wxSizeEvent&amp; event);

protected:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wchar_t wch = L'*';</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160622Z">
        <seg>wchar_t wch = L'*';</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>we call event.Skip() so the</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022637Z">
        <seg>wxWidgets の規定クラスや</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>we don't call event.Skip() so the</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022818Z">
        <seg>このイベントを他の場所で処理することはないため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>which does work.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T171317Z">
        <seg>これは正常に動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>will log the message if it was preceded by:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T133057Z">
        <seg>このメッセージは先に以下の処理を行なっている場合に記録されます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>will work exactly as expected.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T045825Z">
        <seg>期待した通りに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>work as expected.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T041919Z">
        <seg>これは期待した通りに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>works both with wxWidgets 3.0 and previous library versions and so should be used for writing code which should be compatible with both 2.8 and 3.0.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123346Z">
        <seg>wxWidgets 3.0 と以前のバージョンの両方で動作します。そのため、2.8 と 3.0 で互換性のあるコードを書かなければならない場合はこのように書くべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wouldn't work if the encoding used on the user system is incompatible with ISO-8859-1 (or even if the sources were compiled under different locale in the case of gcc).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T080912Z">
        <seg>これはユーザのシステムが ISO-8859-1 と互換性がない場合 (gcc の場合、別のロケールでコンパイルされたとしても) 、うまく動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wprintf(L"Compiled at %s\n", __TDATE__);
#else // ANSI</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160628Z">
        <seg>wprintf(L"Compiled at %s\n", __TDATE__);
#else // ANSI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wx</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130518T020455Z">
        <seg>wx</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALIGN_CENTER ); // no border and centre horizontally</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112848Z">
        <seg>wxALIGN_CENTER ); // ボーダーなしで水平方向に中央寄せ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALIGN_CENTRE (same as wxALIGN_CENTER) is defined as (wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T162105Z">
        <seg>wxALIGN_CENTRE (wxALIGN_CENTER と同じです) は (wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL) として定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALIGN_LEFT, wxALIGN_TOP, wxALIGN_RIGHT, wxALIGN_BOTTOM, wxALIGN_CENTER_HORIZONTAL and wxALIGN_CENTER_VERTICAL do what they say.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130521T161853Z">
        <seg>wxALIGN_LEFT、wxALIGN_TOP、wxALIGN_RIGHT、wxALIGN_BOTTOM、wxALIGN_CENTER_HORIZONTAL、wxALIGN_CENTER_VERTICAL はその名前の通りのことを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALL,        //   and make border all around</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112250Z">
        <seg>wxALL,        //  全方向にボーダーを持たせる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxALL,       // make border all around (implicit top alignment)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112744Z">
        <seg>wxALL,       // 全方向にボーダーを持たせる (暗黙的に上寄せになる)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxActivateEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055055Z">
        <seg>wxActivateEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxApp Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T135011Z">
        <seg>wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxApp overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T155912Z">
        <seg>wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBACKWARD  // return wxID_BACKWARD</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T120016Z">
        <seg>wxBACKWARD  // wxID_BACKWARD を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBell();</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022832Z">
        <seg>wxBell();</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T145417Z">
        <seg>wxBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112306Z">
        <seg>wxBoxSizer *button_sizer = new wxBoxSizer( wxHORIZONTAL );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112044Z">
        <seg>wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer::CalcMin</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145430Z">
        <seg>wxBoxSizer::CalcMin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer::GetOrientation</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145437Z">
        <seg>wxBoxSizer::GetOrientation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer::RecalcSizes</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145420Z">
        <seg>wxBoxSizer::RecalcSizes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxBoxSizer::wxBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T145407Z">
        <seg>wxBoxSizer::wxBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCANCEL // return wxID_CANCEL</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115856Z">
        <seg>wxCANCEL // wxID_CANCEL を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCHMHelpController *m_helpCtrl;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162752Z">
        <seg>wxCHMHelpController *m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCHMHelpController m_helpCtrl;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T162436Z">
        <seg>wxCHMHelpController m_helpCtrl;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxChar ch = wxT('*');</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161652Z">
        <seg>wxChar ch = wxT('*');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxChar is defined to be</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T123159Z">
        <seg>wxChar は次のように定義されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxClientDC dc(window);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T141639Z">
        <seg>wxClientDC dc(window);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCloseEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055130Z">
        <seg>wxCloseEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCommandEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T080732Z">
        <seg>wxCommandEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxCommandEvent event( wxEVT_MY_EVENT, GetId() );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155830Z">
        <seg>wxCommandEvent event( wxEVT_MY_EVENT, GetId() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112043Z">
        <seg>wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDbTable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004405Z">
        <seg>wxDbTable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDir is a helper class for enumerating the files or subdirectories of a directory.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T065649Z">
        <seg>wxDir はディレクトリ内のファイル、サブディレクトリを列挙するためのヘルパークラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDir is a portable equivalent of Unix open/read/closedir functions which allow enumerating of the fi...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T070654Z">
        <seg>wxDir は ファイルやディレクトリの列挙を行う Unix の open/read/closedir 関数と同じことを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxDropFilesEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081025Z">
        <seg>wxDropFilesEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxEXPAND |    // make horizontally stretchable</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T112224Z">
        <seg>wxEXPAND |    // 水平方向にリサイズ可能にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxEraseEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055213Z">
        <seg>wxEraseEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055041Z">
        <seg>wxEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxEvent* Clone();

private:</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164310Z">
        <seg>wxEvent* Clone();

private:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFORWARD   // return wxID_FORWARD</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T120007Z">
        <seg>wxFORWARD   // wxID_FORWARD を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFile</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T070910Z">
        <seg>wxFile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFile file;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T025918Z">
        <seg>wxFile file;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFile may be used for low-level IO.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T055758Z">
        <seg>wxFile は低レベル入出力のために使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFlexGridSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T153320Z">
        <seg>wxFlexGridSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFocusEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055226Z">
        <seg>wxFocusEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxFrame *the_frame = new wxFrame(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130527T161006Z">
        <seg>wxFrame *the_frame = new wxFrame(NULL, ID_MYFRAME, argv[0]);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxGridSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152805Z">
        <seg>wxGridSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxHELP   // return wxID_HELP</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115957Z">
        <seg>wxHELP   // wxID_HELP を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxIdleEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055239Z">
        <seg>wxIdleEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxInitDialogEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055245Z">
        <seg>wxInitDialogEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxJoystickEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055253Z">
        <seg>wxJoystickEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxKeyEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055232Z">
        <seg>wxKeyEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxListCtrl overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004420Z">
        <seg>wxListCtrl の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxListEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081505Z">
        <seg>wxListEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLocale class encapsulates all language-dependent settings and is a generalization of the C locale c...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035939Z">
        <seg>wxLocale クラスは C 言語におけるロケールの概念を一般化したものであり、言語に依存するすべての設定をカプセル化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLog *logger=new wxLogStream(&amp;cout);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015309Z">
        <seg>wxLog *logger=new wxLogStream(&amp;cout);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLog class defines the interface for the log targets used by wxWidgets logging functions as explaine...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T072429Z">
        <seg>wxLog クラスは wxWidgets のロギング関数で使用されるログターゲットのインタフェースを定義するクラスです。 詳細は wxLog クラスの概要を参照してください、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLog classes overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T003245Z">
        <seg>wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLog::SetActiveTarget(logger);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T015312Z">
        <seg>wxLog::SetActiveTarget(logger);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLogBuffer is a very simple implementation of log sink which simply collects all the logged messages...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130142Z">
        <seg>wxLogBuffer はログ出力先の非常に単純な実装で、すべてのログメッセージを単純に文字列へ集めます。 (ただし、デバッグメッセージは除きます。なぜなら、普通、デバッグメッセージはただちに出力されるので、後で集めることにおそらく関心がないためです)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLogFormatter class is used to format the log messages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T130957Z">
        <seg>wxLogFormatter クラスはログメッセージをフォーマットするのに使用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLogMessage("..."); // ok</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030253Z">
        <seg>wxLogMessage("..."); // ok</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxLogNull logNo;</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030137Z">
        <seg>wxLogNull logNo;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMORE      // return wxID_MORE</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T120032Z">
        <seg>wxMORE      // wxID_MORE を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMenuEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055300Z">
        <seg>wxMenuEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMouseEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055304Z">
        <seg>wxMouseEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxMoveEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055314Z">
        <seg>wxMoveEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNO     // return wxID_NO</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115802Z">
        <seg>wxNO     // wxID_NO を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNO_DEFAULT // make the wxNO button the default, otherwise wxYES or wxOK button will be default</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115839Z">
        <seg>wxNO_DEFAULT // wxNO ボタンをデフォルトにします。これを指定しない場合、wxYES ボタンか wxOK ボタンがデフォルトになります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNotebook::AddPage</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060859Z">
        <seg>wxNotebook::AddPage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNotebook::AdvanceSelection</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060937Z">
        <seg>wxNotebook::AdvanceSelection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNotebook::DeletePage</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060939Z">
        <seg>wxNotebook::DeletePage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxNotebook::SetSelection</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T060941Z">
        <seg>wxNotebook::SetSelection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxOK     // return wxID_OK</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115848Z">
        <seg>wxOK     // wxID_OK を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPaintEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055321Z">
        <seg>wxPaintEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotCurve   *m_curve;
};

DECLARE_EVENT_TYPE( wxEVT_PLOT_ACTION, -1 )

typedef void (wxEvtHandler::*wxPlotEventFunction)(wxPlotEvent&amp;);

#define EVT_PLOT(id, fn) \</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164314Z">
        <seg>wxPlotCurve   *m_curve;
};

DECLARE_EVENT_TYPE( wxEVT_PLOT_ACTION, -1 )

typedef void (wxEvtHandler::*wxPlotEventFunction)(wxPlotEvent&amp;);

#define EVT_PLOT(id, fn) \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotCurve *GetCurve()</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164224Z">
        <seg>wxPlotCurve *GetCurve()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotCurve *curve = event.GetCurve();
}


// user code sending the event

void MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164445Z">
        <seg>wxPlotCurve *curve = event.GetCurve();
}


// イベントを送信するユーザコード

void MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotEvent event( wxEVT_PLOT_ACTION, GetId() );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164447Z">
        <seg>wxPlotEvent event( wxEVT_PLOT_ACTION, GetId() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPlotEvent( wxEventType commandType = wxEVT_NULL, int id = 0 );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164215Z">
        <seg>wxPlotEvent( wxEventType commandType = wxEVT_NULL, int id = 0 );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPrintf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124736Z">
        <seg>wxPrintf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPrintf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>())</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T124916Z">
        <seg>wxPrintf(<bpt i="0" x="0">&lt;s0&gt;</bpt>"Hello, %s"<ept i="0">&lt;/s0&gt;</ept>, s.<bpt i="1" x="1">&lt;a1&gt;</bpt>c_str<ept i="1">&lt;/a1&gt;</ept>())</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxPrintf(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Red is %d"<ept i="1">&lt;/s1&gt;</ept>, Red);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T130835Z">
        <seg>wxPrintf(<bpt i="1" x="1">&lt;s1&gt;</bpt>"Red is %d"<ept i="1">&lt;/s1&gt;</ept>, Red);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxQueryLayoutInfoEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055326Z">
        <seg>wxQueryLayoutInfoEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSETUP     // return wxID_SETUP</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T120027Z">
        <seg>wxSETUP     // wxID_SETUP を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxScrollEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081735Z">
        <seg>wxScrollEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxScrollWinEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055501Z">
        <seg>wxScrollWinEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSetCursorEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055409Z">
        <seg>wxSetCursorEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizeEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055455Z">
        <seg>wxSizeEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizer is the abstract base class used for laying out subwindows in a window.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135038Z">
        <seg>wxSizer はウィンドウ内にサブウィンドウを配置するために使用される抽象基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113935Z">
        <seg>wxSizerFlags(0).Align().Border(wxALL, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizerFlags(0).Center() );</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T114010Z">
        <seg>wxSizerFlags(0).Center() );</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSizerFlags(1).Align().Expand().Border(wxALL, 10));</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T113656Z">
        <seg>wxSizerFlags(1).Align().Expand().Border(wxALL, 10));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSplitterEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T081859Z">
        <seg>wxSplitterEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStaticBoxSixer is the same as a <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept>, but surrounded by a static box.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T152110Z">
        <seg>wxStaticBoxSixer は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxBoxSizer<ept i="0">&lt;/a0&gt;</ept> と同じですが、スタティックボックスで周りを囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStaticBoxSizer</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130520T152038Z">
        <seg>wxStaticBoxSizer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStaticBoxSizer is a sizer derived from wxBoxSizer but adds a static box around the sizer...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135216Z">
        <seg>wxStaticBoxSizer は wxBoxSizer を継承したサイザーですが、サイザーの周囲にスタティックボックスを追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxStaticCastEvent( wxPlotEventFunction, &amp; fn ), (wxObject *) NULL ),


// code implementing the event type and the event class

DEFINE_EVENT_TYPE( wxEVT_PLOT_ACTION )

wxPlotEvent::wxPlotEvent( ...


// user code intercepting the event

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164431Z">
        <seg>wxStaticCastEvent( wxPlotEventFunction, &amp; fn ), (wxObject *) NULL ),


// イベント型とイベントクラスを定義するコード

DEFINE_EVENT_TYPE( wxEVT_PLOT_ACTION )

wxPlotEvent::wxPlotEvent( ...


// イベントを捕まえるユーザコード

BEGIN_EVENT_TABLE(MyFrame, wxFrame)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString s = wxT("Hello, world!");</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T161654Z">
        <seg>wxString s = wxT("Hello, world!");</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString str(ascii_str, wxConvUTF8);</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T144207Z">
        <seg>wxString str(ascii_str, wxConvUTF8);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxString text = event.GetText();
}


// user code sending the event

void MyWindow::SendEvent()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T155828Z">
        <seg>wxString text = event.GetText();
}


// イベントを送信するユーザコード

void MyWindow::SendEvent()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxSysColourChangedEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T055534Z">
        <seg>wxSysColourChangedEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTempFile is a very small file designed to make replacing the files contents safer - see its <bpt i="0" x="0">&lt;a0&gt;</bpt>documentation<ept i="0">&lt;/a0&gt;</ept> for more details.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T064731Z">
        <seg>wxTempFile はより安全にファイルの置換を行うためのとても小さなファイルです。詳細は <bpt i="0" x="0">&lt;a0&gt;</bpt>ドキュメント<ept i="0">&lt;/a0&gt;</ept> を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTempFile provides a relatively safe way to replace the contents of the existing file...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T071855Z">
        <seg>wxTempFile は既存のファイルの置換を行うための比較的安全な方法を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTextFile is a general purpose class for working with small text files on line by line basis.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T064827Z">
        <seg>wxTextFile は小さなテキストファイルを行単位で扱うための汎用的なクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTimerEvent object is passed to the event handler of timer events (see wxTimer::SetOwner).</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T153757Z">
        <seg>wxTimerEvent はタイマーイベントのイベントハンドラへ引き渡されるオブジェクトです。 (wxTimer::SetOwner 参照) </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTreeCtrl::Delete</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061011Z">
        <seg>wxTreeCtrl::Delete</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTreeCtrl::DeleteAllItems</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061013Z">
        <seg>wxTreeCtrl::DeleteAllItems</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTreeCtrl::EditLabel</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T061014Z">
        <seg>wxTreeCtrl::EditLabel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxTreeEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082226Z">
        <seg>wxTreeEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxUpdateUIEvent</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T082317Z">
        <seg>wxUpdateUIEvent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxValidator is the base class for a family of validator classes that mediate between a class of contr...</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T135218Z">
        <seg>wxValidator はコントロールクラスとアプリケーションデータを仲介する、バリデータクラスファミリーの基底クラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets 2.8.12: A portable C++ and Python GUI toolkit</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T131846Z">
        <seg>wxWidgets 2.8.12: A portable C++ and Python GUI toolkit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets does not provide translations for all of these currently.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T043604Z">
        <seg>修飾子の翻訳について、今のところ wxWidgets はすべてに対応しているわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets does not yet handle translated special key names such as Backspace, End, Insert, etc.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T003951Z">
        <seg>Backspace、End、Insert といった特殊キーの名前が翻訳された場合、wxWidgets はまだ取り扱うことができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets has support for compiling in Unicode mode on the platforms which support it.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130430T155655Z">
        <seg>wxWidgets は Unicode に対応しているプラットフォームであれば Unicode モードでコンパイルすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets has the notion of a <bpt i="0" x="0">&lt;e0&gt;</bpt>log target<ept i="0">&lt;/e0&gt;</ept>: it is just a class deriving from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T111358Z">
        <seg>wxWidgets では <bpt i="0" x="0">&lt;e0&gt;</bpt>ログターゲット<ept i="0">&lt;/e0&gt;</ept> という考え方があります: これは単純に <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> を継承したクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets has the notion of a <bpt i="0" x="0">&lt;i0&gt;</bpt>log target<ept i="0">&lt;/i0&gt;</ept>: it is just a class deriving from <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T022242Z">
        <seg>wxWidgets では <bpt i="0" x="0">&lt;i0&gt;</bpt>ログターゲット<ept i="0">&lt;/i0&gt;</ept> という考え方があります: これは単純に <bpt i="1" x="1">&lt;a1&gt;</bpt>wxLog<ept i="1">&lt;/a1&gt;</ept> を継承したクラスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides facilities for message translation with it's <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> class and is itself fully translated into several languages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T040006Z">
        <seg>wxWidgets は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> クラスを使用したメッセージ翻訳機能を提供しており、wxWidgets 自体がいくつかの言語に完全に翻訳されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides facilities for message translation with its <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> class and is itself fully translated into several languages.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T152447Z">
        <seg>wxWidgets は <bpt i="0" x="0">&lt;a0&gt;</bpt>wxLocale<ept i="0">&lt;/a0&gt;</ept> クラスを使用したメッセージ翻訳機能を提供しており、wxWidgets 自体がいくつかの言語に完全に翻訳されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides some functions and classes to facilitate working with files.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T055028Z">
        <seg>wxWidgets はファイルの取り扱いを手助けするための関数やクラスを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets provides the macros <bpt i="0" x="0">&lt;t0&gt;</bpt>__TFILE__<ept i="0">&lt;/t0&gt;</ept>, <bpt i="1" x="1">&lt;t1&gt;</bpt>__TDATE__<ept i="1">&lt;/t1&gt;</ept> and <bpt i="2" x="2">&lt;t2&gt;</bpt>__TTIME__<ept i="2">&lt;/t2&gt;</ept> which behave exactly as the standard ones except that they produce ANSI strings in ANSI build and Unicode ones in the Unicode build.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130501T160219Z">
        <seg>wxWidgets では <bpt i="0" x="0">&lt;t0&gt;</bpt>__TFILE__<ept i="0">&lt;/t0&gt;</ept>、 <bpt i="1" x="1">&lt;t1&gt;</bpt>__TDATE__<ept i="1">&lt;/t1&gt;</ept>、 <bpt i="2" x="2">&lt;t2&gt;</bpt>__TTIME__<ept i="2">&lt;/t2&gt;</ept> マクロを提供しており、これらは ANSI ビルド時には ANSI 文字列に、 Unicode ビルド時には Unicode 文字列になることを除き、標準トークンとまったく同じに振る舞います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets uses the message catalogs which are binary compatible with gettext catalogs and this allows to use all of the programs in this package to work with them.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130502T160117Z">
        <seg>wxWidgets では gettext のカタログとバイナリ互換性のあるメッセージカタログを使用します。これにより、メッセージカタログを扱う際に gettext のすべてのプログラムを使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets uses the system <bpt i="0" x="0">&lt;c0&gt;</bpt>wchar_t<ept i="0">&lt;/c0&gt;</ept> in <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> implementation by default under all systems.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T092511Z">
        <seg>すべてのシステムにおいて、wxWidgets はデフォルトで <bpt i="1" x="1">&lt;a1&gt;</bpt>wxString<ept i="1">&lt;/a1&gt;</ept> の実装に <bpt i="0" x="0">&lt;c0&gt;</bpt>wchar_t<ept i="0">&lt;/c0&gt;</ept> を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Device Contexts</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130529T143051Z">
        <seg>wxWidgets: wxWidgets: デバイスコンテキスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Environment Variables</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130523T155606Z">
        <seg>wxWidgets: wxWidgets: 環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Events and Event Handling</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T151119Z">
        <seg>wxWidgets: wxWidgets: イベントとイベント処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: File Classes and Functions</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T132425Z">
        <seg>wxWidgets: wxWidgets: ファイルクラスと関数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Internationalization</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130504T035449Z">
        <seg>wxWidgets: wxWidgets: 国際化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Sizers Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T135003Z">
        <seg>wxWidgets: wxWidgets: サイザーの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: Unicode Support in wxWidgets</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T004606Z">
        <seg>wxWidgets: wxWidgets: wxWidgets における Unicode 対応</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxApp Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130528T152152Z">
        <seg>wxWidgets: wxWidgets: wxApp の概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWidgets: wxWidgets: wxLog Classes Overview</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T090608Z">
        <seg>wxWidgets: wxWidgets: wxLog クラスの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWindow is the base class for all windows and represents any visible object on screen.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130507T152539Z">
        <seg>wxWindow はすべてのウィンドウの基底クラスであり、画面上に表示されるすべての可視オブジェクトを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxWindow's sizers hierarchy is parallel to the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> children hierarchy: child windows are children of their parent window and the sizer (or sizers) form separate hierarchy attached to the window with <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSizer()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130503T172216Z">
        <seg>wxWindow's sizers hierarchy is parallel to the <bpt i="1" x="1">&lt;a1&gt;</bpt>wxWindow<ept i="1">&lt;/a1&gt;</ept> children hierarchy: child windows are children of their parent window and the sizer (or sizers) form separate hierarchy attached to the window with <bpt i="2" x="2">&lt;a2&gt;</bpt>wxWindow::SetSizer()<ept i="2">&lt;/a2&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxYES    // return wxID_YES</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115747Z">
        <seg>wxYES    // wxID_YES を返却します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>wxYES_NO // Add Yes/No subpanel</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130522T115739Z">
        <seg>wxYES_NO // Yes/No サブパネルを追加します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022523Z">
        <seg>{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>{ return m_curve; }</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T164225Z">
        <seg>{ return m_curve; }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022720Z">
        <seg>}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>}
}</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130505T022834Z">
        <seg>}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>}
};

MyFunctor myFunctor;

MyFrame::MyFrame()
{</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130512T060828Z">
        <seg>}
};

MyFunctor myFunctor;

MyFrame::MyFrame()
{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>} // ~wxLogNull called, old log sink restored</seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130525T030224Z">
        <seg>} // ~wxLogNull が呼ばれ、古いログ出力先が元に戻される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>} <bpt i="7" x="7">&lt;s7&gt;</bpt>// ~wxLogNull called, old log sink restored<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
      <tuv xml:lang="JA" changeid="owner" changedate="20130526T114545Z">
        <seg>} <bpt i="7" x="7">&lt;s7&gt;</bpt>// ~wxLogNull が呼ばれ、古いログ出力先が元に戻される<ept i="7">&lt;/s7&gt;</ept></seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
